
ECE178FINAL.elf:     file format elf32-littlenios2
ECE178FINAL.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000244

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014c18 memsz 0x00014c18 flags r-x
    LOAD off    0x00015c38 vaddr 0x10014c38 paddr 0x100167a4 align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x00018310 vaddr 0x10018310 paddr 0x10018310 align 2**12
         filesz 0x00000000 memsz 0x00000708 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014618  10000244  10000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003dc  1001485c  1001485c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  10014c38  100167a4  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000708  10018310  10018310  00018310  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00204000  00204000  000177a4  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  10018a18  10018a18  000177a4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000177a4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ed8  00000000  00000000  000177c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025901  00000000  00000000  000186a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000092dd  00000000  00000000  0003dfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c258  00000000  00000000  0004727e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027b4  00000000  00000000  000534d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000450c  00000000  00000000  00055c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  0005a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00071a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001908  00000000  00000000  00071a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00076f02  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00076f05  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00076f0a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00076f0b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00076f0c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00076f10  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00076f14  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00076f18  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00076f23  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00076f2e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  00076f39  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00076f3f  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d4c  00000000  00000000  00076f59  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00069bae  00000000  00000000  0007aca5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000244 l    d  .text	00000000 .text
1001485c l    d  .rodata	00000000 .rodata
10014c38 l    d  .rwdata	00000000 .rwdata
10018310 l    d  .bss	00000000 .bss
00204000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10018a18 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ECE178FINAL_bsp//obj/HAL/src/crt0.o
1000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10014946 l     O .rodata	00000010 zeroes.4404
100028bc l     F .text	000000bc __sbprintf
10014956 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10002acc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100045fc l     F .text	00000008 __fp_unlock
10004610 l     F .text	0000019c __sinit.part.1
100047ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10014c38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
1001507c l     O .rwdata	00000020 lc_ctype_charset
1001505c l     O .rwdata	00000020 lc_message_charset
1001509c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014988 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007ba8 l     F .text	000000fc __sprint_r.part.0
10014abc l     O .rodata	00000010 blanks.4348
10014aac l     O .rodata	00000010 zeroes.4349
10009134 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000cdf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000cefc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000cf28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000d0f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000d1e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000d3b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10016794 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000d600 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000d734 l     F .text	00000034 alt_dev_reg
10015684 l     O .rwdata	00001060 jtag_uart_0
100166e4 l     O .rwdata	00000054 pixel_buffer_dma
10016738 l     O .rwdata	0000002c SD_Card_Avalon_Interface
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10011f24 l     F .text	0000020c altera_avalon_jtag_uart_irq
10012130 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10013790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013c94 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013dd4 l     F .text	0000003c alt_get_errno
10013e10 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10018384 g     O .bss	00000004 alt_instruction_exception_handler
1001834c g     O .bss	00000004 aux_status_register
100071ec g     F .text	00000074 _mprec_log10
100072d8 g     F .text	0000008c __any_on
100096d0 g     F .text	00000054 _isatty_r
10014994 g     O .rodata	00000028 __mprec_tinytens
1000d2f0 g     F .text	0000007c alt_main
1001303c g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
1000053c g     F .text	000000c0 _puts_r
10018918 g     O .bss	00000100 alt_irq
10009724 g     F .text	00000060 _lseek_r
100167a4 g       *ABS*	00000000 __flash_rwdata_start
1000b91c g     F .text	00000088 .hidden __eqdf2
1000dd40 g     F .text	000001a4 Check_for_Master_Boot_Record
10018a18 g       *ABS*	00000000 __alt_heap_start
10011b44 g     F .text	000001bc alt_up_sd_card_fclose
10000500 g     F .text	0000003c printf
1000993c g     F .text	0000009c _wcrtomb_r
10007a68 g     F .text	0000005c __sseek
1000494c g     F .text	00000010 __sinit
100097e4 g     F .text	00000140 __swbuf_r
10005414 g     F .text	0000007c _setlocale_r
100047b4 g     F .text	00000068 __sfmoreglue
1000d390 g     F .text	00000024 __malloc_unlock
10018370 g     O .bss	00000004 current_sector_modified
10018310 g     O .bss	00000004 j
100060e4 g     F .text	0000015c memmove
10004934 g     F .text	00000018 _cleanup
10006368 g     F .text	000000a8 _Balloc
1001074c g     F .text	000000c4 alt_up_sd_card_is_Present
1000da88 g     F .text	0000004c Save_Modified_Sector
100127a4 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
1000b9a4 g     F .text	000000dc .hidden __gtdf2
100141cc g     F .text	00000024 altera_nios2_gen2_irq_init
10012768 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
10000000 g     F .entry	0000001c __reset
10018368 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009674 g     F .text	0000005c _fstat_r
10018334 g     O .bss	00000004 errno
100079e4 g     F .text	00000008 __seofread
1001833c g     O .bss	00000004 alt_argv
1001e764 g       *ABS*	00000000 _gp
10010d0c g     F .text	0000037c alt_up_sd_card_fopen
1001087c g     F .text	000000d0 alt_up_sd_card_find_first
10012938 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
1001835c g     O .bss	00000004 command_argument_register
10015504 g     O .rwdata	00000180 alt_fd_list
1000ffc0 g     F .text	00000134 find_first_empty_record_in_root_directory
10013930 g     F .text	00000090 alt_find_dev
10005f9c g     F .text	00000148 memcpy
10004604 g     F .text	0000000c _cleanup_r
1000cc08 g     F .text	000000dc .hidden __floatsidf
10013d58 g     F .text	0000007c alt_io_redirect
1000ba80 g     F .text	000000f4 .hidden __ltdf2
1001485c g       *ABS*	00000000 __DTOR_END__
100005fc g     F .text	00000014 puts
1001442c g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000fbb8 g     F .text	000001bc find_first_empty_cluster
100078c8 g     F .text	00000074 __fpclassifyd
10007148 g     F .text	000000a4 __ratio
10010690 g     F .text	000000bc alt_up_sd_card_open_dev
10009118 g     F .text	0000001c __vfiprintf_internal
100129f4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
10012328 g     F .text	0000021c altera_avalon_jtag_uart_read
100004d0 g     F .text	00000030 _printf_r
00204000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000a6cc g     F .text	00000064 .hidden __udivsi3
1000d050 g     F .text	000000a4 isatty
100149e4 g     O .rodata	000000c8 __mprec_tens
10012e2c g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
10005490 g     F .text	0000000c __locale_charset
1001439c g     F .text	00000090 alt_icache_flush
10018330 g     O .bss	00000004 __malloc_top_pad
1001676c g     O .rwdata	00000004 __mb_cur_max
100054c0 g     F .text	0000000c _localeconv_r
10006774 g     F .text	0000003c __i2b
10004dd0 g     F .text	000004bc __sfvwrite_r
1000eea8 g     F .text	000000b8 get_dir_divider_location
1000793c g     F .text	00000054 _sbrk_r
10013350 g     F .text	00000084 helper_plot_pixel
1000eb78 g     F .text	000000c4 filename_to_upper_case
10011088 g     F .text	00000088 alt_up_sd_card_set_attributes
1000dee4 g     F .text	0000027c Read_File_Record_At_Offset
10009784 g     F .text	00000060 _read_r
1001678c g     O .rwdata	00000004 alt_max_fd
1000f73c g     F .text	0000047c find_file_in_directory
10009368 g     F .text	000000f0 _fclose_r
100045cc g     F .text	00000030 fflush
1001832c g     O .bss	00000004 __malloc_max_sbrked_mem
10010810 g     F .text	0000006c alt_up_sd_card_is_FAT16
1000a788 g     F .text	000008ac .hidden __adddf3
10006ef0 g     F .text	0000010c __b2d
10012a28 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
1000a09c g     F .text	00000538 .hidden __umoddi3
1000d21c g     F .text	000000d4 lseek
10016764 g     O .rwdata	00000004 _global_impure_ptr
1000f1fc g     F .text	00000540 get_home_directory_cluster_for_file
10007364 g     F .text	00000564 _realloc_r
10018a18 g       *ABS*	00000000 __bss_end
10013ba4 g     F .text	000000f0 alt_iic_isr_register
10012b50 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
100140c4 g     F .text	00000108 alt_tick
10009b24 g     F .text	00000578 .hidden __udivdi3
100095d0 g     F .text	00000024 _fputwc_r
100149bc g     O .rodata	00000028 __mprec_bigtens
10006558 g     F .text	00000104 __s2b
1000cce4 g     F .text	000000a8 .hidden __floatunsidf
10006c30 g     F .text	00000060 __mcmp
10018374 g     O .bss	00000004 current_sector_index
1000496c g     F .text	00000018 __fp_lock_all
10013b58 g     F .text	0000004c alt_ic_irq_enabled
10014028 g     F .text	0000009c alt_alarm_stop
1000dc60 g     F .text	000000e0 mark_cluster
10018378 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
100154dc g     O .rwdata	00000028 alt_dev_null
100100f4 g     F .text	0000018c convert_filename_to_name_extension
10013748 g     F .text	00000048 alt_dcache_flush_all
1000665c g     F .text	00000068 __hi0bits
10013288 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
10018348 g     O .bss	00000004 is_sd_card_formated_as_FAT16
1000cb88 g     F .text	00000080 .hidden __fixdfsi
1000fd74 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
100167a4 g       *ABS*	00000000 __ram_rwdata_end
10016784 g     O .rwdata	00000008 alt_dev_list
1000d63c g     F .text	000000f8 write
1001836c g     O .bss	00000004 device_pointer
100133d4 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
10014c38 g       *ABS*	00000000 __ram_rodata_end
1000cf64 g     F .text	000000b0 fstat
1000ba80 g     F .text	000000f4 .hidden __ledf2
10018314 g     O .bss	00000002 att
100069a8 g     F .text	00000140 __pow5mult
10007cbc g     F .text	0000145c ___vfiprintf_internal_r
10018324 g     O .bss	00000004 __nlocale_changed
1000a730 g     F .text	00000058 .hidden __umodsi3
10018a18 g       *ABS*	00000000 end
10011e64 g     F .text	000000c0 altera_avalon_jtag_uart_init
10018318 g     O .bss	00000004 i
100001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
1001485c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000cd8c g     F .text	00000064 .hidden __clzsi2
10012544 g     F .text	00000224 altera_avalon_jtag_uart_write
1000495c g     F .text	00000004 __sfp_lock_acquire
10005eb8 g     F .text	000000e4 memchr
100006a8 g     F .text	000021f8 ___vfprintf_internal_r
10004ac0 g     F .text	00000310 _free_r
1000549c g     F .text	00000010 __locale_mb_cur_max
100146a8 g     F .text	00000180 __call_exitprocs
10018320 g     O .bss	00000004 __mlocale_changed
10016770 g     O .rwdata	00000004 __malloc_sbrk_base
10000244 g     F .text	0000004c _start
1001837c g     O .bss	00000004 _alt_tick_rate
10006ae8 g     F .text	00000148 __lshift
10018380 g     O .bss	00000004 _alt_nticks
1000d3f0 g     F .text	000000fc read
1000d7a0 g     F .text	00000234 alt_sys_init
10014590 g     F .text	00000118 __register_exitproc
100067b0 g     F .text	000001f8 __multiply
100121d0 g     F .text	00000068 altera_avalon_jtag_uart_close
10014c38 g       *ABS*	00000000 __ram_rwdata_start
1001485c g       *ABS*	00000000 __ram_rodata_start
10018388 g     O .bss	00000028 __malloc_current_mallinfo
10006ffc g     F .text	0000014c __d2b
10018344 g     O .bss	00000004 initialized
10011d00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100142f8 g     F .text	000000a4 alt_get_fd
100183b0 g     O .bss	00000014 search_data
10009250 g     F .text	00000054 _close_r
10014514 g     F .text	0000007c memcmp
10011dc0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10018a18 g       *ABS*	00000000 __alt_stack_base
10011e10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002978 g     F .text	00000154 __swsetup_r
1000b034 g     F .text	000008e8 .hidden __divdf3
1000481c g     F .text	00000118 __sfp
100183c4 g     O .bss	00000054 boot_sector_data
10007260 g     F .text	00000078 __copybits
100150d4 g     O .rwdata	00000408 __malloc_av_
10004968 g     F .text	00000004 __sinit_lock_release
1000bb74 g     F .text	00000718 .hidden __muldf3
10007990 g     F .text	00000054 __sread
100141f0 g     F .text	00000108 alt_find_file
100137cc g     F .text	000000a4 alt_dev_llist_insert
1000d36c g     F .text	00000024 __malloc_lock
1000d550 g     F .text	000000b0 sbrk
10004570 g     F .text	0000005c _fflush_r
100092a4 g     F .text	000000c4 _calloc_r
10018310 g       *ABS*	00000000 __bss_start
10006240 g     F .text	00000128 memset
10000290 g     F .text	00000240 main
10018340 g     O .bss	00000004 alt_envp
10018328 g     O .bss	00000004 __malloc_max_total_mem
10012994 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
10011d60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009924 g     F .text	00000018 __swbuf
10011110 g     F .text	00000088 alt_up_sd_card_get_attributes
1000d9d4 g     F .text	000000b4 Write_Sector_Data
10011510 g     F .text	00000634 alt_up_sd_card_write
10007ac4 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10009458 g     F .text	00000014 fclose
10002ccc g     F .text	00001688 _dtoa_r
100056ac g     F .text	0000080c _malloc_r
10009a98 g     F .text	00000030 __ascii_wctomb
10016790 g     O .rwdata	00000004 alt_errno
1000528c g     F .text	000000c4 _fwalk
1000a5d4 g     F .text	00000084 .hidden __divsi3
1000499c g     F .text	00000124 _malloc_trim_r
1001485c g       *ABS*	00000000 __CTOR_END__
10018350 g     O .bss	00000004 status_register
10007acc g     F .text	000000dc strcmp
10018358 g     O .bss	00000004 command_register
1001485c g       *ABS*	00000000 __flash_rodata_start
1001485c g       *ABS*	00000000 __DTOR_LIST__
1000b91c g     F .text	00000088 .hidden __nedf2
1000d768 g     F .text	00000038 alt_irq_init
1000d4ec g     F .text	00000064 alt_release_fd
1000dbac g     F .text	000000b4 get_cluster_flag
10014acc g     O .rodata	00000100 .hidden __clz_tab
1000e160 g     F .text	0000028c Write_File_Record_At_Offset
1001831c g     O .bss	00000004 _PathLocale
100144c8 g     F .text	00000014 atexit
100091f0 g     F .text	00000060 _write_r
100054cc g     F .text	00000018 setlocale
1000e3ec g     F .text	000006a0 Check_for_DOS_FAT
10010280 g     F .text	000002c8 create_file
10016768 g     O .rwdata	00000004 _impure_ptr
10018354 g     O .bss	00000004 CSD_register_w0
10018338 g     O .bss	00000004 alt_argc
10004354 g     F .text	0000021c __sflush_r
100138d0 g     F .text	00000060 _do_dtors
100054b8 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006e8c g     F .text	00000064 __ulp
10004984 g     F .text	00000018 __fp_unlock_all
1001677c g     O .rwdata	00000008 alt_fs_list
1000ec3c g     F .text	0000026c check_file_name_for_FAT16_compliance
10018360 g     O .bss	00000004 buffer_memory
10000020 g       *ABS*	00000000 __ram_exceptions_start
100054e4 g     F .text	0000000c localeconv
10000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
100139f4 g     F .text	00000050 alt_ic_isr_register
10018364 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
100167a4 g       *ABS*	00000000 _edata
10018a18 g       *ABS*	00000000 _end
10018418 g     O .bss	00000500 active_files
1000946c g     F .text	00000164 __fputwc
10000244 g       *ABS*	00000000 __ram_exceptions_end
10010548 g     F .text	00000148 copy_file_record_name_to_string
10012238 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000ea8c g     F .text	000000ec Look_for_FAT16
10013acc g     F .text	0000008c alt_ic_irq_disable
100079ec g     F .text	0000007c __swrite
10016774 g     O .rwdata	00000004 __malloc_trim_threshold
100054ac g     F .text	0000000c __locale_msgcharset
100144dc g     F .text	00000038 exit
1001094c g     F .text	000003c0 alt_up_sd_card_find_next
10005350 g     F .text	000000c4 _fwalk_reent
10006c90 g     F .text	000001fc __mdiff
1000a658 g     F .text	00000074 .hidden __modsi3
1000dad4 g     F .text	000000d8 Read_Sector_Data
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10004960 g     F .text	00000004 __sfp_lock_release
10014828 g     F .text	00000034 _exit
1001361c g     F .text	0000012c alt_alarm_start
10011198 g     F .text	00000378 alt_up_sd_card_read
100054f0 g     F .text	000001bc __smakebuf_r
10000610 g     F .text	00000098 strlen
10013ed4 g     F .text	00000154 open
1000b9a4 g     F .text	000000dc .hidden __gedf2
10016778 g     O .rwdata	00000004 __wctomb
10007ca4 g     F .text	00000018 __sprint_r
100139c0 g     F .text	00000034 alt_icache_flush_all
10016798 g     O .rwdata	00000004 alt_priority_mask
10013a44 g     F .text	00000088 alt_ic_irq_enable
100028a0 g     F .text	0000001c __vfprintf_internal
10009ac8 g     F .text	0000005c _wctomb_r
1000c28c g     F .text	000008fc .hidden __subdf3
100066c4 g     F .text	000000b0 __lo0bits
1001679c g     O .rwdata	00000008 alt_alarm_list
10013870 g     F .text	00000060 _do_ctors
100099d8 g     F .text	000000c0 wcrtomb
1000ce2c g     F .text	000000d0 close
1000d15c g     F .text	00000084 alt_load
1000ef60 g     F .text	0000029c match_file_record_to_name_ext
100095f4 g     F .text	00000080 fputwc
10004964 g     F .text	00000004 __sinit_lock_acquire
10006438 g     F .text	00000120 __multadd
10006410 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08409114 	ori	at,at,580
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10a24604 	addi	r2,r2,-30440
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10a24604 	addi	r2,r2,-30440
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001e4:	000531fa 	rdctl	r2,exception
100001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001ec:	e0bffd17 	ldw	r2,-12(fp)
100001f0:	10801f0c 	andi	r2,r2,124
100001f4:	1004d0ba 	srli	r2,r2,2
100001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001fc:	0005333a 	rdctl	r2,badaddr
10000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10000204:	d0a70817 	ldw	r2,-25568(gp)
10000208:	10000726 	beq	r2,zero,10000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1000020c:	d0a70817 	ldw	r2,-25568(gp)
10000210:	e0fffd17 	ldw	r3,-12(fp)
10000214:	e1bffe17 	ldw	r6,-8(fp)
10000218:	e17fff17 	ldw	r5,-4(fp)
1000021c:	1809883a 	mov	r4,r3
10000220:	103ee83a 	callr	r2
10000224:	00000206 	br	10000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1000022c:	0005883a 	mov	r2,zero
}
10000230:	e037883a 	mov	sp,fp
10000234:	dfc00117 	ldw	ra,4(sp)
10000238:	df000017 	ldw	fp,0(sp)
1000023c:	dec00204 	addi	sp,sp,8
10000240:	f800283a 	ret

Disassembly of section .text:

10000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1000024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000250:	00bffd16 	blt	zero,r2,10000248 <__alt_data_end+0xf8000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000254:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1000025c:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000260:	d6b9d914 	ori	gp,gp,59236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000264:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000268:	10a0c414 	ori	r2,r2,33552

    movhi r3, %hi(__bss_end)
1000026c:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000270:	18e28614 	ori	r3,r3,35352

    beq r2, r3, 1f
10000274:	10c00326 	beq	r2,r3,10000284 <_start+0x40>

0:
    stw zero, (r2)
10000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1000027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000280:	10fffd36 	bltu	r2,r3,10000278 <__alt_data_end+0xf8000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000284:	000d15c0 	call	1000d15c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000288:	000d2f00 	call	1000d2f0 <alt_main>

1000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1000028c:	003fff06 	br	1000028c <__alt_data_end+0xf800028c>

10000290 <main>:
		}
	}
}
*/
int main()
{
10000290:	defff604 	addi	sp,sp,-40
10000294:	dfc00915 	stw	ra,36(sp)
10000298:	df000815 	stw	fp,32(sp)
1000029c:	df000804 	addi	fp,sp,32
	alt_up_sd_card_dev *device_reference = NULL;
100002a0:	e03ffa15 	stw	zero,-24(fp)
	int connected = 0;
100002a4:	e03ffb15 	stw	zero,-20(fp)
	alt_up_pixel_buffer_dma_dev* pb_dev;
	pb_dev = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
100002a8:	01040074 	movhi	r4,4097
100002ac:	21121704 	addi	r4,r4,18524
100002b0:	00127680 	call	10012768 <alt_up_pixel_buffer_dma_open_dev>
100002b4:	e0bffc15 	stw	r2,-16(fp)

	short int handler;
	short int att1=0,att2=0,att3=0;
100002b8:	e03ffd0d 	sth	zero,-12(fp)
100002bc:	e03ffd8d 	sth	zero,-10(fp)
100002c0:	e03ffe0d 	sth	zero,-8(fp)
	int pixel;


	///*
	device_reference = alt_up_sd_card_open_dev(SD_CARD_AVALON_INTERFACE_NAME);
100002c4:	01040074 	movhi	r4,4097
100002c8:	21121d04 	addi	r4,r4,18548
100002cc:	00106900 	call	10010690 <alt_up_sd_card_open_dev>
100002d0:	e0bffa15 	stw	r2,-24(fp)
	if(device_reference != NULL){
100002d4:	e0bffa17 	ldw	r2,-24(fp)
100002d8:	10007726 	beq	r2,zero,100004b8 <main+0x228>
		if((connected == 0) && (alt_up_sd_card_is_Present())){  // check SDcard connection
100002dc:	e0bffb17 	ldw	r2,-20(fp)
100002e0:	10006c1e 	bne	r2,zero,10000494 <main+0x204>
100002e4:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
100002e8:	10006a26 	beq	r2,zero,10000494 <main+0x204>
			printf("\ncard connected\n");
100002ec:	01040074 	movhi	r4,4097
100002f0:	21122504 	addi	r4,r4,18580
100002f4:	00005fc0 	call	100005fc <puts>
			if(alt_up_sd_card_is_FAT16()) {
100002f8:	00108100 	call	10010810 <alt_up_sd_card_is_FAT16>
100002fc:	10005f26 	beq	r2,zero,1000047c <main+0x1ec>

				handler = alt_up_sd_card_fopen("mario.BMP", false);
10000300:	000b883a 	mov	r5,zero
10000304:	01040074 	movhi	r4,4097
10000308:	21122904 	addi	r4,r4,18596
1000030c:	0010d0c0 	call	10010d0c <alt_up_sd_card_fopen>
10000310:	e0bffe8d 	sth	r2,-6(fp)

					printf("%d/n",handler);
10000314:	e0bffe8f 	ldh	r2,-6(fp)
10000318:	100b883a 	mov	r5,r2
1000031c:	01040074 	movhi	r4,4097
10000320:	21122c04 	addi	r4,r4,18608
10000324:	00005000 	call	10000500 <printf>


				att = alt_up_sd_card_get_attributes(handler);
10000328:	e0bffe8f 	ldh	r2,-6(fp)
1000032c:	1009883a 	mov	r4,r2
10000330:	00111100 	call	10011110 <alt_up_sd_card_get_attributes>
10000334:	d0a6ec0d 	sth	r2,-25680(gp)
				printf("FAT16 file system detected.\n");
10000338:	01040074 	movhi	r4,4097
1000033c:	21122e04 	addi	r4,r4,18616
10000340:	00005fc0 	call	100005fc <puts>
				alt_up_pixel_buffer_dma_clear_screen(pb_dev,0);
10000344:	000b883a 	mov	r5,zero
10000348:	e13ffc17 	ldw	r4,-16(fp)
1000034c:	0012a280 	call	10012a28 <alt_up_pixel_buffer_dma_clear_screen>
				for (j=0;j<54;j++)
10000350:	d026eb15 	stw	zero,-25684(gp)
10000354:	00000706 	br	10000374 <main+0xe4>
				{
					att1 = alt_up_sd_card_read(handler);
10000358:	e0bffe8f 	ldh	r2,-6(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	00111980 	call	10011198 <alt_up_sd_card_read>
10000364:	e0bffd0d 	sth	r2,-12(fp)


				att = alt_up_sd_card_get_attributes(handler);
				printf("FAT16 file system detected.\n");
				alt_up_pixel_buffer_dma_clear_screen(pb_dev,0);
				for (j=0;j<54;j++)
10000368:	d0a6eb17 	ldw	r2,-25684(gp)
1000036c:	10800044 	addi	r2,r2,1
10000370:	d0a6eb15 	stw	r2,-25684(gp)
10000374:	d0a6eb17 	ldw	r2,-25684(gp)
10000378:	10800d90 	cmplti	r2,r2,54
1000037c:	103ff61e 	bne	r2,zero,10000358 <__alt_data_end+0xf8000358>
				{
					att1 = alt_up_sd_card_read(handler);
				}

				i=0;
10000380:	d026ed15 	stw	zero,-25676(gp)
				j=0;
10000384:	d026eb15 	stw	zero,-25684(gp)
				for(int k =0 ; k< 256;k++){
10000388:	e03ff815 	stw	zero,-32(fp)
1000038c:	00003206 	br	10000458 <main+0x1c8>
					for(int l =0 ; l<256; l++){
10000390:	e03ff915 	stw	zero,-28(fp)
10000394:	00002a06 	br	10000440 <main+0x1b0>
						att1 =(unsigned char) alt_up_sd_card_read(handler);
10000398:	e0bffe8f 	ldh	r2,-6(fp)
1000039c:	1009883a 	mov	r4,r2
100003a0:	00111980 	call	10011198 <alt_up_sd_card_read>
100003a4:	10803fcc 	andi	r2,r2,255
100003a8:	e0bffd0d 	sth	r2,-12(fp)
						att2 =(unsigned char) alt_up_sd_card_read(handler);
100003ac:	e0bffe8f 	ldh	r2,-6(fp)
100003b0:	1009883a 	mov	r4,r2
100003b4:	00111980 	call	10011198 <alt_up_sd_card_read>
100003b8:	10803fcc 	andi	r2,r2,255
100003bc:	e0bffd8d 	sth	r2,-10(fp)
						att3 =(unsigned char) alt_up_sd_card_read(handler);
100003c0:	e0bffe8f 	ldh	r2,-6(fp)
100003c4:	1009883a 	mov	r4,r2
100003c8:	00111980 	call	10011198 <alt_up_sd_card_read>
100003cc:	10803fcc 	andi	r2,r2,255
100003d0:	e0bffe0d 	sth	r2,-8(fp)
						alt_up_sd_card_read(handler);
100003d4:	e0bffe8f 	ldh	r2,-6(fp)
100003d8:	1009883a 	mov	r4,r2
100003dc:	00111980 	call	10011198 <alt_up_sd_card_read>
						pixel = (att3<<16) | (att2<<8) | att1;
100003e0:	e0bffe0f 	ldh	r2,-8(fp)
100003e4:	1006943a 	slli	r3,r2,16
100003e8:	e0bffd8f 	ldh	r2,-10(fp)
100003ec:	1004923a 	slli	r2,r2,8
100003f0:	1886b03a 	or	r3,r3,r2
100003f4:	e0bffd0f 	ldh	r2,-12(fp)
100003f8:	1884b03a 	or	r2,r3,r2
100003fc:	e0bfff15 	stw	r2,-4(fp)
						alt_up_pixel_buffer_dma_draw(pb_dev,pixel,256-l,256-k);
10000400:	e13fff17 	ldw	r4,-4(fp)
10000404:	00c04004 	movi	r3,256
10000408:	e0bff917 	ldw	r2,-28(fp)
1000040c:	1885c83a 	sub	r2,r3,r2
10000410:	100b883a 	mov	r5,r2
10000414:	00c04004 	movi	r3,256
10000418:	e0bff817 	ldw	r2,-32(fp)
1000041c:	1885c83a 	sub	r2,r3,r2
10000420:	100f883a 	mov	r7,r2
10000424:	280d883a 	mov	r6,r5
10000428:	200b883a 	mov	r5,r4
1000042c:	e13ffc17 	ldw	r4,-16(fp)
10000430:	00127a40 	call	100127a4 <alt_up_pixel_buffer_dma_draw>
				}

				i=0;
				j=0;
				for(int k =0 ; k< 256;k++){
					for(int l =0 ; l<256; l++){
10000434:	e0bff917 	ldw	r2,-28(fp)
10000438:	10800044 	addi	r2,r2,1
1000043c:	e0bff915 	stw	r2,-28(fp)
10000440:	e0bff917 	ldw	r2,-28(fp)
10000444:	10804010 	cmplti	r2,r2,256
10000448:	103fd31e 	bne	r2,zero,10000398 <__alt_data_end+0xf8000398>
					att1 = alt_up_sd_card_read(handler);
				}

				i=0;
				j=0;
				for(int k =0 ; k< 256;k++){
1000044c:	e0bff817 	ldw	r2,-32(fp)
10000450:	10800044 	addi	r2,r2,1
10000454:	e0bff815 	stw	r2,-32(fp)
10000458:	e0bff817 	ldw	r2,-32(fp)
1000045c:	10804010 	cmplti	r2,r2,256
10000460:	103fcb1e 	bne	r2,zero,10000390 <__alt_data_end+0xf8000390>
						alt_up_sd_card_read(handler);
						pixel = (att3<<16) | (att2<<8) | att1;
						alt_up_pixel_buffer_dma_draw(pb_dev,pixel,256-l,256-k);
					}
				}
				alt_up_sd_card_fclose(handler);
10000464:	e0bffe8f 	ldh	r2,-6(fp)
10000468:	1009883a 	mov	r4,r2
1000046c:	0011b440 	call	10011b44 <alt_up_sd_card_fclose>
				alt_up_pixel_buffer_dma_swap_buffers(pb_dev);
10000470:	e13ffc17 	ldw	r4,-16(fp)
10000474:	00129940 	call	10012994 <alt_up_pixel_buffer_dma_swap_buffers>
10000478:	00000306 	br	10000488 <main+0x1f8>
			}
			else {
				printf("Unknown File System.\n");
1000047c:	01040074 	movhi	r4,4097
10000480:	21123504 	addi	r4,r4,18644
10000484:	00005fc0 	call	100005fc <puts>
			}
			connected = 1;
10000488:	00800044 	movi	r2,1
1000048c:	e0bffb15 	stw	r2,-20(fp)
10000490:	00000906 	br	100004b8 <main+0x228>
		}else if ((connected == 1) && (alt_up_sd_card_is_Present() == false)){
10000494:	e0bffb17 	ldw	r2,-20(fp)
10000498:	10800058 	cmpnei	r2,r2,1
1000049c:	1000061e 	bne	r2,zero,100004b8 <main+0x228>
100004a0:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
100004a4:	1000041e 	bne	r2,zero,100004b8 <main+0x228>
			printf("Card Disconnected");
100004a8:	01040074 	movhi	r4,4097
100004ac:	21123b04 	addi	r4,r4,18668
100004b0:	00005000 	call	10000500 <printf>
			connected = 0;
100004b4:	e03ffb15 	stw	zero,-20(fp)
		}
	}
//*/
	return 0;
100004b8:	0005883a 	mov	r2,zero
}
100004bc:	e037883a 	mov	sp,fp
100004c0:	dfc00117 	ldw	ra,4(sp)
100004c4:	df000017 	ldw	fp,0(sp)
100004c8:	dec00204 	addi	sp,sp,8
100004cc:	f800283a 	ret

100004d0 <_printf_r>:
100004d0:	defffd04 	addi	sp,sp,-12
100004d4:	2805883a 	mov	r2,r5
100004d8:	dfc00015 	stw	ra,0(sp)
100004dc:	d9800115 	stw	r6,4(sp)
100004e0:	d9c00215 	stw	r7,8(sp)
100004e4:	21400217 	ldw	r5,8(r4)
100004e8:	d9c00104 	addi	r7,sp,4
100004ec:	100d883a 	mov	r6,r2
100004f0:	00006a80 	call	100006a8 <___vfprintf_internal_r>
100004f4:	dfc00017 	ldw	ra,0(sp)
100004f8:	dec00304 	addi	sp,sp,12
100004fc:	f800283a 	ret

10000500 <printf>:
10000500:	defffc04 	addi	sp,sp,-16
10000504:	dfc00015 	stw	ra,0(sp)
10000508:	d9400115 	stw	r5,4(sp)
1000050c:	d9800215 	stw	r6,8(sp)
10000510:	d9c00315 	stw	r7,12(sp)
10000514:	00840074 	movhi	r2,4097
10000518:	1099da04 	addi	r2,r2,26472
1000051c:	10800017 	ldw	r2,0(r2)
10000520:	200b883a 	mov	r5,r4
10000524:	d9800104 	addi	r6,sp,4
10000528:	11000217 	ldw	r4,8(r2)
1000052c:	00028a00 	call	100028a0 <__vfprintf_internal>
10000530:	dfc00017 	ldw	ra,0(sp)
10000534:	dec00404 	addi	sp,sp,16
10000538:	f800283a 	ret

1000053c <_puts_r>:
1000053c:	defff604 	addi	sp,sp,-40
10000540:	dc000715 	stw	r16,28(sp)
10000544:	2021883a 	mov	r16,r4
10000548:	2809883a 	mov	r4,r5
1000054c:	dc400815 	stw	r17,32(sp)
10000550:	dfc00915 	stw	ra,36(sp)
10000554:	2823883a 	mov	r17,r5
10000558:	00006100 	call	10000610 <strlen>
1000055c:	10c00044 	addi	r3,r2,1
10000560:	d8800115 	stw	r2,4(sp)
10000564:	00840074 	movhi	r2,4097
10000568:	10924004 	addi	r2,r2,18688
1000056c:	d8800215 	stw	r2,8(sp)
10000570:	00800044 	movi	r2,1
10000574:	d8800315 	stw	r2,12(sp)
10000578:	00800084 	movi	r2,2
1000057c:	dc400015 	stw	r17,0(sp)
10000580:	d8c00615 	stw	r3,24(sp)
10000584:	dec00415 	stw	sp,16(sp)
10000588:	d8800515 	stw	r2,20(sp)
1000058c:	80000226 	beq	r16,zero,10000598 <_puts_r+0x5c>
10000590:	80800e17 	ldw	r2,56(r16)
10000594:	10001426 	beq	r2,zero,100005e8 <_puts_r+0xac>
10000598:	81400217 	ldw	r5,8(r16)
1000059c:	2880030b 	ldhu	r2,12(r5)
100005a0:	10c8000c 	andi	r3,r2,8192
100005a4:	1800061e 	bne	r3,zero,100005c0 <_puts_r+0x84>
100005a8:	29001917 	ldw	r4,100(r5)
100005ac:	00f7ffc4 	movi	r3,-8193
100005b0:	10880014 	ori	r2,r2,8192
100005b4:	20c6703a 	and	r3,r4,r3
100005b8:	2880030d 	sth	r2,12(r5)
100005bc:	28c01915 	stw	r3,100(r5)
100005c0:	d9800404 	addi	r6,sp,16
100005c4:	8009883a 	mov	r4,r16
100005c8:	0004dd00 	call	10004dd0 <__sfvwrite_r>
100005cc:	1000091e 	bne	r2,zero,100005f4 <_puts_r+0xb8>
100005d0:	00800284 	movi	r2,10
100005d4:	dfc00917 	ldw	ra,36(sp)
100005d8:	dc400817 	ldw	r17,32(sp)
100005dc:	dc000717 	ldw	r16,28(sp)
100005e0:	dec00a04 	addi	sp,sp,40
100005e4:	f800283a 	ret
100005e8:	8009883a 	mov	r4,r16
100005ec:	000494c0 	call	1000494c <__sinit>
100005f0:	003fe906 	br	10000598 <__alt_data_end+0xf8000598>
100005f4:	00bfffc4 	movi	r2,-1
100005f8:	003ff606 	br	100005d4 <__alt_data_end+0xf80005d4>

100005fc <puts>:
100005fc:	00840074 	movhi	r2,4097
10000600:	1099da04 	addi	r2,r2,26472
10000604:	200b883a 	mov	r5,r4
10000608:	11000017 	ldw	r4,0(r2)
1000060c:	000053c1 	jmpi	1000053c <_puts_r>

10000610 <strlen>:
10000610:	208000cc 	andi	r2,r4,3
10000614:	10002026 	beq	r2,zero,10000698 <strlen+0x88>
10000618:	20800007 	ldb	r2,0(r4)
1000061c:	10002026 	beq	r2,zero,100006a0 <strlen+0x90>
10000620:	2005883a 	mov	r2,r4
10000624:	00000206 	br	10000630 <strlen+0x20>
10000628:	10c00007 	ldb	r3,0(r2)
1000062c:	18001826 	beq	r3,zero,10000690 <strlen+0x80>
10000630:	10800044 	addi	r2,r2,1
10000634:	10c000cc 	andi	r3,r2,3
10000638:	183ffb1e 	bne	r3,zero,10000628 <__alt_data_end+0xf8000628>
1000063c:	10c00017 	ldw	r3,0(r2)
10000640:	01ffbff4 	movhi	r7,65279
10000644:	39ffbfc4 	addi	r7,r7,-257
10000648:	00ca303a 	nor	r5,zero,r3
1000064c:	01a02074 	movhi	r6,32897
10000650:	19c7883a 	add	r3,r3,r7
10000654:	31a02004 	addi	r6,r6,-32640
10000658:	1946703a 	and	r3,r3,r5
1000065c:	1986703a 	and	r3,r3,r6
10000660:	1800091e 	bne	r3,zero,10000688 <strlen+0x78>
10000664:	10800104 	addi	r2,r2,4
10000668:	10c00017 	ldw	r3,0(r2)
1000066c:	19cb883a 	add	r5,r3,r7
10000670:	00c6303a 	nor	r3,zero,r3
10000674:	28c6703a 	and	r3,r5,r3
10000678:	1986703a 	and	r3,r3,r6
1000067c:	183ff926 	beq	r3,zero,10000664 <__alt_data_end+0xf8000664>
10000680:	00000106 	br	10000688 <strlen+0x78>
10000684:	10800044 	addi	r2,r2,1
10000688:	10c00007 	ldb	r3,0(r2)
1000068c:	183ffd1e 	bne	r3,zero,10000684 <__alt_data_end+0xf8000684>
10000690:	1105c83a 	sub	r2,r2,r4
10000694:	f800283a 	ret
10000698:	2005883a 	mov	r2,r4
1000069c:	003fe706 	br	1000063c <__alt_data_end+0xf800063c>
100006a0:	0005883a 	mov	r2,zero
100006a4:	f800283a 	ret

100006a8 <___vfprintf_internal_r>:
100006a8:	deffb804 	addi	sp,sp,-288
100006ac:	dfc04715 	stw	ra,284(sp)
100006b0:	ddc04515 	stw	r23,276(sp)
100006b4:	dd404315 	stw	r21,268(sp)
100006b8:	d9002c15 	stw	r4,176(sp)
100006bc:	282f883a 	mov	r23,r5
100006c0:	302b883a 	mov	r21,r6
100006c4:	d9c02d15 	stw	r7,180(sp)
100006c8:	df004615 	stw	fp,280(sp)
100006cc:	dd804415 	stw	r22,272(sp)
100006d0:	dd004215 	stw	r20,264(sp)
100006d4:	dcc04115 	stw	r19,260(sp)
100006d8:	dc804015 	stw	r18,256(sp)
100006dc:	dc403f15 	stw	r17,252(sp)
100006e0:	dc003e15 	stw	r16,248(sp)
100006e4:	00054c00 	call	100054c0 <_localeconv_r>
100006e8:	10800017 	ldw	r2,0(r2)
100006ec:	1009883a 	mov	r4,r2
100006f0:	d8803415 	stw	r2,208(sp)
100006f4:	00006100 	call	10000610 <strlen>
100006f8:	d8803715 	stw	r2,220(sp)
100006fc:	d8802c17 	ldw	r2,176(sp)
10000700:	10000226 	beq	r2,zero,1000070c <___vfprintf_internal_r+0x64>
10000704:	10800e17 	ldw	r2,56(r2)
10000708:	1000f926 	beq	r2,zero,10000af0 <___vfprintf_internal_r+0x448>
1000070c:	b880030b 	ldhu	r2,12(r23)
10000710:	10c8000c 	andi	r3,r2,8192
10000714:	1800061e 	bne	r3,zero,10000730 <___vfprintf_internal_r+0x88>
10000718:	b9001917 	ldw	r4,100(r23)
1000071c:	00f7ffc4 	movi	r3,-8193
10000720:	10880014 	ori	r2,r2,8192
10000724:	20c6703a 	and	r3,r4,r3
10000728:	b880030d 	sth	r2,12(r23)
1000072c:	b8c01915 	stw	r3,100(r23)
10000730:	10c0020c 	andi	r3,r2,8
10000734:	1800c126 	beq	r3,zero,10000a3c <___vfprintf_internal_r+0x394>
10000738:	b8c00417 	ldw	r3,16(r23)
1000073c:	1800bf26 	beq	r3,zero,10000a3c <___vfprintf_internal_r+0x394>
10000740:	1080068c 	andi	r2,r2,26
10000744:	00c00284 	movi	r3,10
10000748:	10c0c426 	beq	r2,r3,10000a5c <___vfprintf_internal_r+0x3b4>
1000074c:	d8c00404 	addi	r3,sp,16
10000750:	05040074 	movhi	r20,4097
10000754:	d9001e04 	addi	r4,sp,120
10000758:	a5125184 	addi	r20,r20,18758
1000075c:	d8c01e15 	stw	r3,120(sp)
10000760:	d8002015 	stw	zero,128(sp)
10000764:	d8001f15 	stw	zero,124(sp)
10000768:	d8003315 	stw	zero,204(sp)
1000076c:	d8003615 	stw	zero,216(sp)
10000770:	d8003815 	stw	zero,224(sp)
10000774:	1811883a 	mov	r8,r3
10000778:	d8003915 	stw	zero,228(sp)
1000077c:	d8003a15 	stw	zero,232(sp)
10000780:	d8002f15 	stw	zero,188(sp)
10000784:	d9002815 	stw	r4,160(sp)
10000788:	a8800007 	ldb	r2,0(r21)
1000078c:	10027b26 	beq	r2,zero,1000117c <___vfprintf_internal_r+0xad4>
10000790:	00c00944 	movi	r3,37
10000794:	a821883a 	mov	r16,r21
10000798:	10c0021e 	bne	r2,r3,100007a4 <___vfprintf_internal_r+0xfc>
1000079c:	00001406 	br	100007f0 <___vfprintf_internal_r+0x148>
100007a0:	10c00326 	beq	r2,r3,100007b0 <___vfprintf_internal_r+0x108>
100007a4:	84000044 	addi	r16,r16,1
100007a8:	80800007 	ldb	r2,0(r16)
100007ac:	103ffc1e 	bne	r2,zero,100007a0 <__alt_data_end+0xf80007a0>
100007b0:	8563c83a 	sub	r17,r16,r21
100007b4:	88000e26 	beq	r17,zero,100007f0 <___vfprintf_internal_r+0x148>
100007b8:	d8c02017 	ldw	r3,128(sp)
100007bc:	d8801f17 	ldw	r2,124(sp)
100007c0:	45400015 	stw	r21,0(r8)
100007c4:	1c47883a 	add	r3,r3,r17
100007c8:	10800044 	addi	r2,r2,1
100007cc:	d8c02015 	stw	r3,128(sp)
100007d0:	44400115 	stw	r17,4(r8)
100007d4:	d8801f15 	stw	r2,124(sp)
100007d8:	00c001c4 	movi	r3,7
100007dc:	1880a716 	blt	r3,r2,10000a7c <___vfprintf_internal_r+0x3d4>
100007e0:	42000204 	addi	r8,r8,8
100007e4:	d9402f17 	ldw	r5,188(sp)
100007e8:	2c4b883a 	add	r5,r5,r17
100007ec:	d9402f15 	stw	r5,188(sp)
100007f0:	80800007 	ldb	r2,0(r16)
100007f4:	1000a826 	beq	r2,zero,10000a98 <___vfprintf_internal_r+0x3f0>
100007f8:	84400047 	ldb	r17,1(r16)
100007fc:	00bfffc4 	movi	r2,-1
10000800:	85400044 	addi	r21,r16,1
10000804:	d8002785 	stb	zero,158(sp)
10000808:	0007883a 	mov	r3,zero
1000080c:	000f883a 	mov	r7,zero
10000810:	d8802915 	stw	r2,164(sp)
10000814:	d8003115 	stw	zero,196(sp)
10000818:	0025883a 	mov	r18,zero
1000081c:	01401604 	movi	r5,88
10000820:	01800244 	movi	r6,9
10000824:	02800a84 	movi	r10,42
10000828:	02401b04 	movi	r9,108
1000082c:	ad400044 	addi	r21,r21,1
10000830:	88bff804 	addi	r2,r17,-32
10000834:	28830436 	bltu	r5,r2,10001448 <___vfprintf_internal_r+0xda0>
10000838:	100490ba 	slli	r2,r2,2
1000083c:	01040034 	movhi	r4,4096
10000840:	21021404 	addi	r4,r4,2128
10000844:	1105883a 	add	r2,r2,r4
10000848:	10800017 	ldw	r2,0(r2)
1000084c:	1000683a 	jmp	r2
10000850:	10001368 	cmpgeui	zero,r2,77
10000854:	10001448 	cmpgei	zero,r2,81
10000858:	10001448 	cmpgei	zero,r2,81
1000085c:	10001388 	cmpgei	zero,r2,78
10000860:	10001448 	cmpgei	zero,r2,81
10000864:	10001448 	cmpgei	zero,r2,81
10000868:	10001448 	cmpgei	zero,r2,81
1000086c:	10001448 	cmpgei	zero,r2,81
10000870:	10001448 	cmpgei	zero,r2,81
10000874:	10001448 	cmpgei	zero,r2,81
10000878:	10000afc 	xorhi	zero,r2,43
1000087c:	100012a4 	muli	zero,r2,74
10000880:	10001448 	cmpgei	zero,r2,81
10000884:	100009c4 	addi	zero,r2,39
10000888:	10000b24 	muli	zero,r2,44
1000088c:	10001448 	cmpgei	zero,r2,81
10000890:	10000b64 	muli	zero,r2,45
10000894:	10000b70 	cmpltui	zero,r2,45
10000898:	10000b70 	cmpltui	zero,r2,45
1000089c:	10000b70 	cmpltui	zero,r2,45
100008a0:	10000b70 	cmpltui	zero,r2,45
100008a4:	10000b70 	cmpltui	zero,r2,45
100008a8:	10000b70 	cmpltui	zero,r2,45
100008ac:	10000b70 	cmpltui	zero,r2,45
100008b0:	10000b70 	cmpltui	zero,r2,45
100008b4:	10000b70 	cmpltui	zero,r2,45
100008b8:	10001448 	cmpgei	zero,r2,81
100008bc:	10001448 	cmpgei	zero,r2,81
100008c0:	10001448 	cmpgei	zero,r2,81
100008c4:	10001448 	cmpgei	zero,r2,81
100008c8:	10001448 	cmpgei	zero,r2,81
100008cc:	10001448 	cmpgei	zero,r2,81
100008d0:	10001448 	cmpgei	zero,r2,81
100008d4:	10001448 	cmpgei	zero,r2,81
100008d8:	10001448 	cmpgei	zero,r2,81
100008dc:	10001448 	cmpgei	zero,r2,81
100008e0:	10000ba4 	muli	zero,r2,46
100008e4:	10000c60 	cmpeqi	zero,r2,49
100008e8:	10001448 	cmpgei	zero,r2,81
100008ec:	10000c60 	cmpeqi	zero,r2,49
100008f0:	10001448 	cmpgei	zero,r2,81
100008f4:	10001448 	cmpgei	zero,r2,81
100008f8:	10001448 	cmpgei	zero,r2,81
100008fc:	10001448 	cmpgei	zero,r2,81
10000900:	10000d00 	call	110000d0 <_gp+0xfe196c>
10000904:	10001448 	cmpgei	zero,r2,81
10000908:	10001448 	cmpgei	zero,r2,81
1000090c:	10000d0c 	andi	zero,r2,52
10000910:	10001448 	cmpgei	zero,r2,81
10000914:	10001448 	cmpgei	zero,r2,81
10000918:	10001448 	cmpgei	zero,r2,81
1000091c:	10001448 	cmpgei	zero,r2,81
10000920:	10001448 	cmpgei	zero,r2,81
10000924:	10001184 	addi	zero,r2,70
10000928:	10001448 	cmpgei	zero,r2,81
1000092c:	10001448 	cmpgei	zero,r2,81
10000930:	100011e4 	muli	zero,r2,71
10000934:	10001448 	cmpgei	zero,r2,81
10000938:	10001448 	cmpgei	zero,r2,81
1000093c:	10001448 	cmpgei	zero,r2,81
10000940:	10001448 	cmpgei	zero,r2,81
10000944:	10001448 	cmpgei	zero,r2,81
10000948:	10001448 	cmpgei	zero,r2,81
1000094c:	10001448 	cmpgei	zero,r2,81
10000950:	10001448 	cmpgei	zero,r2,81
10000954:	10001448 	cmpgei	zero,r2,81
10000958:	10001448 	cmpgei	zero,r2,81
1000095c:	100013f4 	orhi	zero,r2,79
10000960:	10001394 	ori	zero,r2,78
10000964:	10000c60 	cmpeqi	zero,r2,49
10000968:	10000c60 	cmpeqi	zero,r2,49
1000096c:	10000c60 	cmpeqi	zero,r2,49
10000970:	100013a4 	muli	zero,r2,78
10000974:	10001394 	ori	zero,r2,78
10000978:	10001448 	cmpgei	zero,r2,81
1000097c:	10001448 	cmpgei	zero,r2,81
10000980:	100013b0 	cmpltui	zero,r2,78
10000984:	10001448 	cmpgei	zero,r2,81
10000988:	100013c0 	call	1100013c <_gp+0xfe19d8>
1000098c:	10001294 	ori	zero,r2,74
10000990:	100009d0 	cmplti	zero,r2,39
10000994:	100012b4 	orhi	zero,r2,74
10000998:	10001448 	cmpgei	zero,r2,81
1000099c:	100012c0 	call	1100012c <_gp+0xfe19c8>
100009a0:	10001448 	cmpgei	zero,r2,81
100009a4:	1000131c 	xori	zero,r2,76
100009a8:	10001448 	cmpgei	zero,r2,81
100009ac:	10001448 	cmpgei	zero,r2,81
100009b0:	1000132c 	andhi	zero,r2,76
100009b4:	d9003117 	ldw	r4,196(sp)
100009b8:	d8802d15 	stw	r2,180(sp)
100009bc:	0109c83a 	sub	r4,zero,r4
100009c0:	d9003115 	stw	r4,196(sp)
100009c4:	94800114 	ori	r18,r18,4
100009c8:	ac400007 	ldb	r17,0(r21)
100009cc:	003f9706 	br	1000082c <__alt_data_end+0xf800082c>
100009d0:	00800c04 	movi	r2,48
100009d4:	d9002d17 	ldw	r4,180(sp)
100009d8:	d9402917 	ldw	r5,164(sp)
100009dc:	d8802705 	stb	r2,156(sp)
100009e0:	00801e04 	movi	r2,120
100009e4:	d8802745 	stb	r2,157(sp)
100009e8:	d8002785 	stb	zero,158(sp)
100009ec:	20c00104 	addi	r3,r4,4
100009f0:	24c00017 	ldw	r19,0(r4)
100009f4:	002d883a 	mov	r22,zero
100009f8:	90800094 	ori	r2,r18,2
100009fc:	28029a16 	blt	r5,zero,10001468 <___vfprintf_internal_r+0xdc0>
10000a00:	00bfdfc4 	movi	r2,-129
10000a04:	90a4703a 	and	r18,r18,r2
10000a08:	d8c02d15 	stw	r3,180(sp)
10000a0c:	94800094 	ori	r18,r18,2
10000a10:	9802871e 	bne	r19,zero,10001430 <___vfprintf_internal_r+0xd88>
10000a14:	00840074 	movhi	r2,4097
10000a18:	10924a04 	addi	r2,r2,18728
10000a1c:	d8803915 	stw	r2,228(sp)
10000a20:	04401e04 	movi	r17,120
10000a24:	d8802917 	ldw	r2,164(sp)
10000a28:	0039883a 	mov	fp,zero
10000a2c:	1001e926 	beq	r2,zero,100011d4 <___vfprintf_internal_r+0xb2c>
10000a30:	0027883a 	mov	r19,zero
10000a34:	002d883a 	mov	r22,zero
10000a38:	00020506 	br	10001250 <___vfprintf_internal_r+0xba8>
10000a3c:	d9002c17 	ldw	r4,176(sp)
10000a40:	b80b883a 	mov	r5,r23
10000a44:	00029780 	call	10002978 <__swsetup_r>
10000a48:	1005ac1e 	bne	r2,zero,100020fc <___vfprintf_internal_r+0x1a54>
10000a4c:	b880030b 	ldhu	r2,12(r23)
10000a50:	00c00284 	movi	r3,10
10000a54:	1080068c 	andi	r2,r2,26
10000a58:	10ff3c1e 	bne	r2,r3,1000074c <__alt_data_end+0xf800074c>
10000a5c:	b880038f 	ldh	r2,14(r23)
10000a60:	103f3a16 	blt	r2,zero,1000074c <__alt_data_end+0xf800074c>
10000a64:	d9c02d17 	ldw	r7,180(sp)
10000a68:	d9002c17 	ldw	r4,176(sp)
10000a6c:	a80d883a 	mov	r6,r21
10000a70:	b80b883a 	mov	r5,r23
10000a74:	00028bc0 	call	100028bc <__sbprintf>
10000a78:	00001106 	br	10000ac0 <___vfprintf_internal_r+0x418>
10000a7c:	d9002c17 	ldw	r4,176(sp)
10000a80:	d9801e04 	addi	r6,sp,120
10000a84:	b80b883a 	mov	r5,r23
10000a88:	0007ca40 	call	10007ca4 <__sprint_r>
10000a8c:	1000081e 	bne	r2,zero,10000ab0 <___vfprintf_internal_r+0x408>
10000a90:	da000404 	addi	r8,sp,16
10000a94:	003f5306 	br	100007e4 <__alt_data_end+0xf80007e4>
10000a98:	d8802017 	ldw	r2,128(sp)
10000a9c:	10000426 	beq	r2,zero,10000ab0 <___vfprintf_internal_r+0x408>
10000aa0:	d9002c17 	ldw	r4,176(sp)
10000aa4:	d9801e04 	addi	r6,sp,120
10000aa8:	b80b883a 	mov	r5,r23
10000aac:	0007ca40 	call	10007ca4 <__sprint_r>
10000ab0:	b880030b 	ldhu	r2,12(r23)
10000ab4:	1080100c 	andi	r2,r2,64
10000ab8:	1005901e 	bne	r2,zero,100020fc <___vfprintf_internal_r+0x1a54>
10000abc:	d8802f17 	ldw	r2,188(sp)
10000ac0:	dfc04717 	ldw	ra,284(sp)
10000ac4:	df004617 	ldw	fp,280(sp)
10000ac8:	ddc04517 	ldw	r23,276(sp)
10000acc:	dd804417 	ldw	r22,272(sp)
10000ad0:	dd404317 	ldw	r21,268(sp)
10000ad4:	dd004217 	ldw	r20,264(sp)
10000ad8:	dcc04117 	ldw	r19,260(sp)
10000adc:	dc804017 	ldw	r18,256(sp)
10000ae0:	dc403f17 	ldw	r17,252(sp)
10000ae4:	dc003e17 	ldw	r16,248(sp)
10000ae8:	dec04804 	addi	sp,sp,288
10000aec:	f800283a 	ret
10000af0:	d9002c17 	ldw	r4,176(sp)
10000af4:	000494c0 	call	1000494c <__sinit>
10000af8:	003f0406 	br	1000070c <__alt_data_end+0xf800070c>
10000afc:	d8802d17 	ldw	r2,180(sp)
10000b00:	d9002d17 	ldw	r4,180(sp)
10000b04:	10800017 	ldw	r2,0(r2)
10000b08:	d8803115 	stw	r2,196(sp)
10000b0c:	20800104 	addi	r2,r4,4
10000b10:	d9003117 	ldw	r4,196(sp)
10000b14:	203fa716 	blt	r4,zero,100009b4 <__alt_data_end+0xf80009b4>
10000b18:	d8802d15 	stw	r2,180(sp)
10000b1c:	ac400007 	ldb	r17,0(r21)
10000b20:	003f4206 	br	1000082c <__alt_data_end+0xf800082c>
10000b24:	ac400007 	ldb	r17,0(r21)
10000b28:	aac00044 	addi	r11,r21,1
10000b2c:	8a872826 	beq	r17,r10,100027d0 <___vfprintf_internal_r+0x2128>
10000b30:	88bff404 	addi	r2,r17,-48
10000b34:	0009883a 	mov	r4,zero
10000b38:	30867d36 	bltu	r6,r2,10002530 <___vfprintf_internal_r+0x1e88>
10000b3c:	5c400007 	ldb	r17,0(r11)
10000b40:	210002a4 	muli	r4,r4,10
10000b44:	5d400044 	addi	r21,r11,1
10000b48:	a817883a 	mov	r11,r21
10000b4c:	2089883a 	add	r4,r4,r2
10000b50:	88bff404 	addi	r2,r17,-48
10000b54:	30bff92e 	bgeu	r6,r2,10000b3c <__alt_data_end+0xf8000b3c>
10000b58:	2005c916 	blt	r4,zero,10002280 <___vfprintf_internal_r+0x1bd8>
10000b5c:	d9002915 	stw	r4,164(sp)
10000b60:	003f3306 	br	10000830 <__alt_data_end+0xf8000830>
10000b64:	94802014 	ori	r18,r18,128
10000b68:	ac400007 	ldb	r17,0(r21)
10000b6c:	003f2f06 	br	1000082c <__alt_data_end+0xf800082c>
10000b70:	a809883a 	mov	r4,r21
10000b74:	d8003115 	stw	zero,196(sp)
10000b78:	88bff404 	addi	r2,r17,-48
10000b7c:	0017883a 	mov	r11,zero
10000b80:	24400007 	ldb	r17,0(r4)
10000b84:	5ac002a4 	muli	r11,r11,10
10000b88:	ad400044 	addi	r21,r21,1
10000b8c:	a809883a 	mov	r4,r21
10000b90:	12d7883a 	add	r11,r2,r11
10000b94:	88bff404 	addi	r2,r17,-48
10000b98:	30bff92e 	bgeu	r6,r2,10000b80 <__alt_data_end+0xf8000b80>
10000b9c:	dac03115 	stw	r11,196(sp)
10000ba0:	003f2306 	br	10000830 <__alt_data_end+0xf8000830>
10000ba4:	18c03fcc 	andi	r3,r3,255
10000ba8:	18072b1e 	bne	r3,zero,10002858 <___vfprintf_internal_r+0x21b0>
10000bac:	94800414 	ori	r18,r18,16
10000bb0:	9080080c 	andi	r2,r18,32
10000bb4:	10037b26 	beq	r2,zero,100019a4 <___vfprintf_internal_r+0x12fc>
10000bb8:	d9402d17 	ldw	r5,180(sp)
10000bbc:	28800117 	ldw	r2,4(r5)
10000bc0:	2cc00017 	ldw	r19,0(r5)
10000bc4:	29400204 	addi	r5,r5,8
10000bc8:	d9402d15 	stw	r5,180(sp)
10000bcc:	102d883a 	mov	r22,r2
10000bd0:	10044b16 	blt	r2,zero,10001d00 <___vfprintf_internal_r+0x1658>
10000bd4:	d9402917 	ldw	r5,164(sp)
10000bd8:	df002783 	ldbu	fp,158(sp)
10000bdc:	2803bc16 	blt	r5,zero,10001ad0 <___vfprintf_internal_r+0x1428>
10000be0:	00ffdfc4 	movi	r3,-129
10000be4:	9d84b03a 	or	r2,r19,r22
10000be8:	90e4703a 	and	r18,r18,r3
10000bec:	10017726 	beq	r2,zero,100011cc <___vfprintf_internal_r+0xb24>
10000bf0:	b0038326 	beq	r22,zero,10001a00 <___vfprintf_internal_r+0x1358>
10000bf4:	dc402a15 	stw	r17,168(sp)
10000bf8:	dc001e04 	addi	r16,sp,120
10000bfc:	b023883a 	mov	r17,r22
10000c00:	402d883a 	mov	r22,r8
10000c04:	9809883a 	mov	r4,r19
10000c08:	880b883a 	mov	r5,r17
10000c0c:	01800284 	movi	r6,10
10000c10:	000f883a 	mov	r7,zero
10000c14:	000a09c0 	call	1000a09c <__umoddi3>
10000c18:	10800c04 	addi	r2,r2,48
10000c1c:	843fffc4 	addi	r16,r16,-1
10000c20:	9809883a 	mov	r4,r19
10000c24:	880b883a 	mov	r5,r17
10000c28:	80800005 	stb	r2,0(r16)
10000c2c:	01800284 	movi	r6,10
10000c30:	000f883a 	mov	r7,zero
10000c34:	0009b240 	call	10009b24 <__udivdi3>
10000c38:	1027883a 	mov	r19,r2
10000c3c:	10c4b03a 	or	r2,r2,r3
10000c40:	1823883a 	mov	r17,r3
10000c44:	103fef1e 	bne	r2,zero,10000c04 <__alt_data_end+0xf8000c04>
10000c48:	d8c02817 	ldw	r3,160(sp)
10000c4c:	dc402a17 	ldw	r17,168(sp)
10000c50:	b011883a 	mov	r8,r22
10000c54:	1c07c83a 	sub	r3,r3,r16
10000c58:	d8c02e15 	stw	r3,184(sp)
10000c5c:	00005906 	br	10000dc4 <___vfprintf_internal_r+0x71c>
10000c60:	18c03fcc 	andi	r3,r3,255
10000c64:	1806fa1e 	bne	r3,zero,10002850 <___vfprintf_internal_r+0x21a8>
10000c68:	9080020c 	andi	r2,r18,8
10000c6c:	10048a26 	beq	r2,zero,10001e98 <___vfprintf_internal_r+0x17f0>
10000c70:	d8c02d17 	ldw	r3,180(sp)
10000c74:	d9002d17 	ldw	r4,180(sp)
10000c78:	d9402d17 	ldw	r5,180(sp)
10000c7c:	18c00017 	ldw	r3,0(r3)
10000c80:	21000117 	ldw	r4,4(r4)
10000c84:	29400204 	addi	r5,r5,8
10000c88:	d8c03615 	stw	r3,216(sp)
10000c8c:	d9003815 	stw	r4,224(sp)
10000c90:	d9402d15 	stw	r5,180(sp)
10000c94:	d9003617 	ldw	r4,216(sp)
10000c98:	d9403817 	ldw	r5,224(sp)
10000c9c:	da003d15 	stw	r8,244(sp)
10000ca0:	04000044 	movi	r16,1
10000ca4:	00078c80 	call	100078c8 <__fpclassifyd>
10000ca8:	da003d17 	ldw	r8,244(sp)
10000cac:	14041f1e 	bne	r2,r16,10001d2c <___vfprintf_internal_r+0x1684>
10000cb0:	d9003617 	ldw	r4,216(sp)
10000cb4:	d9403817 	ldw	r5,224(sp)
10000cb8:	000d883a 	mov	r6,zero
10000cbc:	000f883a 	mov	r7,zero
10000cc0:	000ba800 	call	1000ba80 <__ledf2>
10000cc4:	da003d17 	ldw	r8,244(sp)
10000cc8:	1005be16 	blt	r2,zero,100023c4 <___vfprintf_internal_r+0x1d1c>
10000ccc:	df002783 	ldbu	fp,158(sp)
10000cd0:	008011c4 	movi	r2,71
10000cd4:	1445330e 	bge	r2,r17,100021a4 <___vfprintf_internal_r+0x1afc>
10000cd8:	04040074 	movhi	r16,4097
10000cdc:	84124204 	addi	r16,r16,18696
10000ce0:	00c000c4 	movi	r3,3
10000ce4:	00bfdfc4 	movi	r2,-129
10000ce8:	d8c02a15 	stw	r3,168(sp)
10000cec:	90a4703a 	and	r18,r18,r2
10000cf0:	d8c02e15 	stw	r3,184(sp)
10000cf4:	d8002915 	stw	zero,164(sp)
10000cf8:	d8003215 	stw	zero,200(sp)
10000cfc:	00003706 	br	10000ddc <___vfprintf_internal_r+0x734>
10000d00:	94800214 	ori	r18,r18,8
10000d04:	ac400007 	ldb	r17,0(r21)
10000d08:	003ec806 	br	1000082c <__alt_data_end+0xf800082c>
10000d0c:	18c03fcc 	andi	r3,r3,255
10000d10:	1806db1e 	bne	r3,zero,10002880 <___vfprintf_internal_r+0x21d8>
10000d14:	94800414 	ori	r18,r18,16
10000d18:	9080080c 	andi	r2,r18,32
10000d1c:	1002d826 	beq	r2,zero,10001880 <___vfprintf_internal_r+0x11d8>
10000d20:	d9402d17 	ldw	r5,180(sp)
10000d24:	d8c02917 	ldw	r3,164(sp)
10000d28:	d8002785 	stb	zero,158(sp)
10000d2c:	28800204 	addi	r2,r5,8
10000d30:	2cc00017 	ldw	r19,0(r5)
10000d34:	2d800117 	ldw	r22,4(r5)
10000d38:	18048f16 	blt	r3,zero,10001f78 <___vfprintf_internal_r+0x18d0>
10000d3c:	013fdfc4 	movi	r4,-129
10000d40:	9d86b03a 	or	r3,r19,r22
10000d44:	d8802d15 	stw	r2,180(sp)
10000d48:	9124703a 	and	r18,r18,r4
10000d4c:	1802d91e 	bne	r3,zero,100018b4 <___vfprintf_internal_r+0x120c>
10000d50:	d8c02917 	ldw	r3,164(sp)
10000d54:	0039883a 	mov	fp,zero
10000d58:	1805c326 	beq	r3,zero,10002468 <___vfprintf_internal_r+0x1dc0>
10000d5c:	0027883a 	mov	r19,zero
10000d60:	002d883a 	mov	r22,zero
10000d64:	dc001e04 	addi	r16,sp,120
10000d68:	9806d0fa 	srli	r3,r19,3
10000d6c:	b008977a 	slli	r4,r22,29
10000d70:	b02cd0fa 	srli	r22,r22,3
10000d74:	9cc001cc 	andi	r19,r19,7
10000d78:	98800c04 	addi	r2,r19,48
10000d7c:	843fffc4 	addi	r16,r16,-1
10000d80:	20e6b03a 	or	r19,r4,r3
10000d84:	80800005 	stb	r2,0(r16)
10000d88:	9d86b03a 	or	r3,r19,r22
10000d8c:	183ff61e 	bne	r3,zero,10000d68 <__alt_data_end+0xf8000d68>
10000d90:	90c0004c 	andi	r3,r18,1
10000d94:	18013b26 	beq	r3,zero,10001284 <___vfprintf_internal_r+0xbdc>
10000d98:	10803fcc 	andi	r2,r2,255
10000d9c:	1080201c 	xori	r2,r2,128
10000da0:	10bfe004 	addi	r2,r2,-128
10000da4:	00c00c04 	movi	r3,48
10000da8:	10c13626 	beq	r2,r3,10001284 <___vfprintf_internal_r+0xbdc>
10000dac:	80ffffc5 	stb	r3,-1(r16)
10000db0:	d8c02817 	ldw	r3,160(sp)
10000db4:	80bfffc4 	addi	r2,r16,-1
10000db8:	1021883a 	mov	r16,r2
10000dbc:	1887c83a 	sub	r3,r3,r2
10000dc0:	d8c02e15 	stw	r3,184(sp)
10000dc4:	d8802e17 	ldw	r2,184(sp)
10000dc8:	d9002917 	ldw	r4,164(sp)
10000dcc:	1100010e 	bge	r2,r4,10000dd4 <___vfprintf_internal_r+0x72c>
10000dd0:	2005883a 	mov	r2,r4
10000dd4:	d8802a15 	stw	r2,168(sp)
10000dd8:	d8003215 	stw	zero,200(sp)
10000ddc:	e7003fcc 	andi	fp,fp,255
10000de0:	e700201c 	xori	fp,fp,128
10000de4:	e73fe004 	addi	fp,fp,-128
10000de8:	e0000326 	beq	fp,zero,10000df8 <___vfprintf_internal_r+0x750>
10000dec:	d8c02a17 	ldw	r3,168(sp)
10000df0:	18c00044 	addi	r3,r3,1
10000df4:	d8c02a15 	stw	r3,168(sp)
10000df8:	90c0008c 	andi	r3,r18,2
10000dfc:	d8c02b15 	stw	r3,172(sp)
10000e00:	18000326 	beq	r3,zero,10000e10 <___vfprintf_internal_r+0x768>
10000e04:	d8c02a17 	ldw	r3,168(sp)
10000e08:	18c00084 	addi	r3,r3,2
10000e0c:	d8c02a15 	stw	r3,168(sp)
10000e10:	90c0210c 	andi	r3,r18,132
10000e14:	d8c03015 	stw	r3,192(sp)
10000e18:	1801a31e 	bne	r3,zero,100014a8 <___vfprintf_internal_r+0xe00>
10000e1c:	d9003117 	ldw	r4,196(sp)
10000e20:	d8c02a17 	ldw	r3,168(sp)
10000e24:	20e7c83a 	sub	r19,r4,r3
10000e28:	04c19f0e 	bge	zero,r19,100014a8 <___vfprintf_internal_r+0xe00>
10000e2c:	02400404 	movi	r9,16
10000e30:	d8c02017 	ldw	r3,128(sp)
10000e34:	d8801f17 	ldw	r2,124(sp)
10000e38:	4cc50d0e 	bge	r9,r19,10002270 <___vfprintf_internal_r+0x1bc8>
10000e3c:	01440074 	movhi	r5,4097
10000e40:	29525584 	addi	r5,r5,18774
10000e44:	dc403b15 	stw	r17,236(sp)
10000e48:	d9403515 	stw	r5,212(sp)
10000e4c:	9823883a 	mov	r17,r19
10000e50:	482d883a 	mov	r22,r9
10000e54:	9027883a 	mov	r19,r18
10000e58:	070001c4 	movi	fp,7
10000e5c:	8025883a 	mov	r18,r16
10000e60:	dc002c17 	ldw	r16,176(sp)
10000e64:	00000306 	br	10000e74 <___vfprintf_internal_r+0x7cc>
10000e68:	8c7ffc04 	addi	r17,r17,-16
10000e6c:	42000204 	addi	r8,r8,8
10000e70:	b440130e 	bge	r22,r17,10000ec0 <___vfprintf_internal_r+0x818>
10000e74:	01040074 	movhi	r4,4097
10000e78:	18c00404 	addi	r3,r3,16
10000e7c:	10800044 	addi	r2,r2,1
10000e80:	21125584 	addi	r4,r4,18774
10000e84:	41000015 	stw	r4,0(r8)
10000e88:	45800115 	stw	r22,4(r8)
10000e8c:	d8c02015 	stw	r3,128(sp)
10000e90:	d8801f15 	stw	r2,124(sp)
10000e94:	e0bff40e 	bge	fp,r2,10000e68 <__alt_data_end+0xf8000e68>
10000e98:	d9801e04 	addi	r6,sp,120
10000e9c:	b80b883a 	mov	r5,r23
10000ea0:	8009883a 	mov	r4,r16
10000ea4:	0007ca40 	call	10007ca4 <__sprint_r>
10000ea8:	103f011e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10000eac:	8c7ffc04 	addi	r17,r17,-16
10000eb0:	d8c02017 	ldw	r3,128(sp)
10000eb4:	d8801f17 	ldw	r2,124(sp)
10000eb8:	da000404 	addi	r8,sp,16
10000ebc:	b47fed16 	blt	r22,r17,10000e74 <__alt_data_end+0xf8000e74>
10000ec0:	9021883a 	mov	r16,r18
10000ec4:	9825883a 	mov	r18,r19
10000ec8:	8827883a 	mov	r19,r17
10000ecc:	dc403b17 	ldw	r17,236(sp)
10000ed0:	d9403517 	ldw	r5,212(sp)
10000ed4:	98c7883a 	add	r3,r19,r3
10000ed8:	10800044 	addi	r2,r2,1
10000edc:	41400015 	stw	r5,0(r8)
10000ee0:	44c00115 	stw	r19,4(r8)
10000ee4:	d8c02015 	stw	r3,128(sp)
10000ee8:	d8801f15 	stw	r2,124(sp)
10000eec:	010001c4 	movi	r4,7
10000ef0:	2082a316 	blt	r4,r2,10001980 <___vfprintf_internal_r+0x12d8>
10000ef4:	df002787 	ldb	fp,158(sp)
10000ef8:	42000204 	addi	r8,r8,8
10000efc:	e0000c26 	beq	fp,zero,10000f30 <___vfprintf_internal_r+0x888>
10000f00:	d8801f17 	ldw	r2,124(sp)
10000f04:	d9002784 	addi	r4,sp,158
10000f08:	18c00044 	addi	r3,r3,1
10000f0c:	10800044 	addi	r2,r2,1
10000f10:	41000015 	stw	r4,0(r8)
10000f14:	01000044 	movi	r4,1
10000f18:	41000115 	stw	r4,4(r8)
10000f1c:	d8c02015 	stw	r3,128(sp)
10000f20:	d8801f15 	stw	r2,124(sp)
10000f24:	010001c4 	movi	r4,7
10000f28:	20823c16 	blt	r4,r2,1000181c <___vfprintf_internal_r+0x1174>
10000f2c:	42000204 	addi	r8,r8,8
10000f30:	d8802b17 	ldw	r2,172(sp)
10000f34:	10000c26 	beq	r2,zero,10000f68 <___vfprintf_internal_r+0x8c0>
10000f38:	d8801f17 	ldw	r2,124(sp)
10000f3c:	d9002704 	addi	r4,sp,156
10000f40:	18c00084 	addi	r3,r3,2
10000f44:	10800044 	addi	r2,r2,1
10000f48:	41000015 	stw	r4,0(r8)
10000f4c:	01000084 	movi	r4,2
10000f50:	41000115 	stw	r4,4(r8)
10000f54:	d8c02015 	stw	r3,128(sp)
10000f58:	d8801f15 	stw	r2,124(sp)
10000f5c:	010001c4 	movi	r4,7
10000f60:	20823616 	blt	r4,r2,1000183c <___vfprintf_internal_r+0x1194>
10000f64:	42000204 	addi	r8,r8,8
10000f68:	d9003017 	ldw	r4,192(sp)
10000f6c:	00802004 	movi	r2,128
10000f70:	20819926 	beq	r4,r2,100015d8 <___vfprintf_internal_r+0xf30>
10000f74:	d9402917 	ldw	r5,164(sp)
10000f78:	d8802e17 	ldw	r2,184(sp)
10000f7c:	28adc83a 	sub	r22,r5,r2
10000f80:	0580310e 	bge	zero,r22,10001048 <___vfprintf_internal_r+0x9a0>
10000f84:	07000404 	movi	fp,16
10000f88:	d8801f17 	ldw	r2,124(sp)
10000f8c:	e584140e 	bge	fp,r22,10001fe0 <___vfprintf_internal_r+0x1938>
10000f90:	01440074 	movhi	r5,4097
10000f94:	29525184 	addi	r5,r5,18758
10000f98:	dc402915 	stw	r17,164(sp)
10000f9c:	d9402b15 	stw	r5,172(sp)
10000fa0:	b023883a 	mov	r17,r22
10000fa4:	04c001c4 	movi	r19,7
10000fa8:	a82d883a 	mov	r22,r21
10000fac:	902b883a 	mov	r21,r18
10000fb0:	8025883a 	mov	r18,r16
10000fb4:	dc002c17 	ldw	r16,176(sp)
10000fb8:	00000306 	br	10000fc8 <___vfprintf_internal_r+0x920>
10000fbc:	8c7ffc04 	addi	r17,r17,-16
10000fc0:	42000204 	addi	r8,r8,8
10000fc4:	e440110e 	bge	fp,r17,1000100c <___vfprintf_internal_r+0x964>
10000fc8:	18c00404 	addi	r3,r3,16
10000fcc:	10800044 	addi	r2,r2,1
10000fd0:	45000015 	stw	r20,0(r8)
10000fd4:	47000115 	stw	fp,4(r8)
10000fd8:	d8c02015 	stw	r3,128(sp)
10000fdc:	d8801f15 	stw	r2,124(sp)
10000fe0:	98bff60e 	bge	r19,r2,10000fbc <__alt_data_end+0xf8000fbc>
10000fe4:	d9801e04 	addi	r6,sp,120
10000fe8:	b80b883a 	mov	r5,r23
10000fec:	8009883a 	mov	r4,r16
10000ff0:	0007ca40 	call	10007ca4 <__sprint_r>
10000ff4:	103eae1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10000ff8:	8c7ffc04 	addi	r17,r17,-16
10000ffc:	d8c02017 	ldw	r3,128(sp)
10001000:	d8801f17 	ldw	r2,124(sp)
10001004:	da000404 	addi	r8,sp,16
10001008:	e47fef16 	blt	fp,r17,10000fc8 <__alt_data_end+0xf8000fc8>
1000100c:	9021883a 	mov	r16,r18
10001010:	a825883a 	mov	r18,r21
10001014:	b02b883a 	mov	r21,r22
10001018:	882d883a 	mov	r22,r17
1000101c:	dc402917 	ldw	r17,164(sp)
10001020:	d9002b17 	ldw	r4,172(sp)
10001024:	1d87883a 	add	r3,r3,r22
10001028:	10800044 	addi	r2,r2,1
1000102c:	41000015 	stw	r4,0(r8)
10001030:	45800115 	stw	r22,4(r8)
10001034:	d8c02015 	stw	r3,128(sp)
10001038:	d8801f15 	stw	r2,124(sp)
1000103c:	010001c4 	movi	r4,7
10001040:	2081ee16 	blt	r4,r2,100017fc <___vfprintf_internal_r+0x1154>
10001044:	42000204 	addi	r8,r8,8
10001048:	9080400c 	andi	r2,r18,256
1000104c:	1001181e 	bne	r2,zero,100014b0 <___vfprintf_internal_r+0xe08>
10001050:	d9402e17 	ldw	r5,184(sp)
10001054:	d8801f17 	ldw	r2,124(sp)
10001058:	44000015 	stw	r16,0(r8)
1000105c:	1947883a 	add	r3,r3,r5
10001060:	10800044 	addi	r2,r2,1
10001064:	41400115 	stw	r5,4(r8)
10001068:	d8c02015 	stw	r3,128(sp)
1000106c:	d8801f15 	stw	r2,124(sp)
10001070:	010001c4 	movi	r4,7
10001074:	2081d316 	blt	r4,r2,100017c4 <___vfprintf_internal_r+0x111c>
10001078:	42000204 	addi	r8,r8,8
1000107c:	9480010c 	andi	r18,r18,4
10001080:	90003226 	beq	r18,zero,1000114c <___vfprintf_internal_r+0xaa4>
10001084:	d9403117 	ldw	r5,196(sp)
10001088:	d8802a17 	ldw	r2,168(sp)
1000108c:	28a1c83a 	sub	r16,r5,r2
10001090:	04002e0e 	bge	zero,r16,1000114c <___vfprintf_internal_r+0xaa4>
10001094:	04400404 	movi	r17,16
10001098:	d8801f17 	ldw	r2,124(sp)
1000109c:	8c04a20e 	bge	r17,r16,10002328 <___vfprintf_internal_r+0x1c80>
100010a0:	01440074 	movhi	r5,4097
100010a4:	29525584 	addi	r5,r5,18774
100010a8:	d9403515 	stw	r5,212(sp)
100010ac:	048001c4 	movi	r18,7
100010b0:	dcc02c17 	ldw	r19,176(sp)
100010b4:	00000306 	br	100010c4 <___vfprintf_internal_r+0xa1c>
100010b8:	843ffc04 	addi	r16,r16,-16
100010bc:	42000204 	addi	r8,r8,8
100010c0:	8c00130e 	bge	r17,r16,10001110 <___vfprintf_internal_r+0xa68>
100010c4:	01040074 	movhi	r4,4097
100010c8:	18c00404 	addi	r3,r3,16
100010cc:	10800044 	addi	r2,r2,1
100010d0:	21125584 	addi	r4,r4,18774
100010d4:	41000015 	stw	r4,0(r8)
100010d8:	44400115 	stw	r17,4(r8)
100010dc:	d8c02015 	stw	r3,128(sp)
100010e0:	d8801f15 	stw	r2,124(sp)
100010e4:	90bff40e 	bge	r18,r2,100010b8 <__alt_data_end+0xf80010b8>
100010e8:	d9801e04 	addi	r6,sp,120
100010ec:	b80b883a 	mov	r5,r23
100010f0:	9809883a 	mov	r4,r19
100010f4:	0007ca40 	call	10007ca4 <__sprint_r>
100010f8:	103e6d1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
100010fc:	843ffc04 	addi	r16,r16,-16
10001100:	d8c02017 	ldw	r3,128(sp)
10001104:	d8801f17 	ldw	r2,124(sp)
10001108:	da000404 	addi	r8,sp,16
1000110c:	8c3fed16 	blt	r17,r16,100010c4 <__alt_data_end+0xf80010c4>
10001110:	d9403517 	ldw	r5,212(sp)
10001114:	1c07883a 	add	r3,r3,r16
10001118:	10800044 	addi	r2,r2,1
1000111c:	41400015 	stw	r5,0(r8)
10001120:	44000115 	stw	r16,4(r8)
10001124:	d8c02015 	stw	r3,128(sp)
10001128:	d8801f15 	stw	r2,124(sp)
1000112c:	010001c4 	movi	r4,7
10001130:	2080060e 	bge	r4,r2,1000114c <___vfprintf_internal_r+0xaa4>
10001134:	d9002c17 	ldw	r4,176(sp)
10001138:	d9801e04 	addi	r6,sp,120
1000113c:	b80b883a 	mov	r5,r23
10001140:	0007ca40 	call	10007ca4 <__sprint_r>
10001144:	103e5a1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001148:	d8c02017 	ldw	r3,128(sp)
1000114c:	d8803117 	ldw	r2,196(sp)
10001150:	d9002a17 	ldw	r4,168(sp)
10001154:	1100010e 	bge	r2,r4,1000115c <___vfprintf_internal_r+0xab4>
10001158:	2005883a 	mov	r2,r4
1000115c:	d9402f17 	ldw	r5,188(sp)
10001160:	288b883a 	add	r5,r5,r2
10001164:	d9402f15 	stw	r5,188(sp)
10001168:	18019e1e 	bne	r3,zero,100017e4 <___vfprintf_internal_r+0x113c>
1000116c:	a8800007 	ldb	r2,0(r21)
10001170:	d8001f15 	stw	zero,124(sp)
10001174:	da000404 	addi	r8,sp,16
10001178:	103d851e 	bne	r2,zero,10000790 <__alt_data_end+0xf8000790>
1000117c:	a821883a 	mov	r16,r21
10001180:	003d9b06 	br	100007f0 <__alt_data_end+0xf80007f0>
10001184:	18c03fcc 	andi	r3,r3,255
10001188:	1805c11e 	bne	r3,zero,10002890 <___vfprintf_internal_r+0x21e8>
1000118c:	94800414 	ori	r18,r18,16
10001190:	9080080c 	andi	r2,r18,32
10001194:	10020c26 	beq	r2,zero,100019c8 <___vfprintf_internal_r+0x1320>
10001198:	d8802d17 	ldw	r2,180(sp)
1000119c:	d9002917 	ldw	r4,164(sp)
100011a0:	d8002785 	stb	zero,158(sp)
100011a4:	10c00204 	addi	r3,r2,8
100011a8:	14c00017 	ldw	r19,0(r2)
100011ac:	15800117 	ldw	r22,4(r2)
100011b0:	20040f16 	blt	r4,zero,100021f0 <___vfprintf_internal_r+0x1b48>
100011b4:	013fdfc4 	movi	r4,-129
100011b8:	9d84b03a 	or	r2,r19,r22
100011bc:	d8c02d15 	stw	r3,180(sp)
100011c0:	9124703a 	and	r18,r18,r4
100011c4:	0039883a 	mov	fp,zero
100011c8:	103e891e 	bne	r2,zero,10000bf0 <__alt_data_end+0xf8000bf0>
100011cc:	d9002917 	ldw	r4,164(sp)
100011d0:	2002c11e 	bne	r4,zero,10001cd8 <___vfprintf_internal_r+0x1630>
100011d4:	d8002915 	stw	zero,164(sp)
100011d8:	d8002e15 	stw	zero,184(sp)
100011dc:	dc001e04 	addi	r16,sp,120
100011e0:	003ef806 	br	10000dc4 <__alt_data_end+0xf8000dc4>
100011e4:	18c03fcc 	andi	r3,r3,255
100011e8:	18059d1e 	bne	r3,zero,10002860 <___vfprintf_internal_r+0x21b8>
100011ec:	01440074 	movhi	r5,4097
100011f0:	29524504 	addi	r5,r5,18708
100011f4:	d9403915 	stw	r5,228(sp)
100011f8:	9080080c 	andi	r2,r18,32
100011fc:	10005226 	beq	r2,zero,10001348 <___vfprintf_internal_r+0xca0>
10001200:	d8802d17 	ldw	r2,180(sp)
10001204:	14c00017 	ldw	r19,0(r2)
10001208:	15800117 	ldw	r22,4(r2)
1000120c:	10800204 	addi	r2,r2,8
10001210:	d8802d15 	stw	r2,180(sp)
10001214:	9080004c 	andi	r2,r18,1
10001218:	10019026 	beq	r2,zero,1000185c <___vfprintf_internal_r+0x11b4>
1000121c:	9d84b03a 	or	r2,r19,r22
10001220:	10036926 	beq	r2,zero,10001fc8 <___vfprintf_internal_r+0x1920>
10001224:	d8c02917 	ldw	r3,164(sp)
10001228:	00800c04 	movi	r2,48
1000122c:	d8802705 	stb	r2,156(sp)
10001230:	dc402745 	stb	r17,157(sp)
10001234:	d8002785 	stb	zero,158(sp)
10001238:	90800094 	ori	r2,r18,2
1000123c:	18045d16 	blt	r3,zero,100023b4 <___vfprintf_internal_r+0x1d0c>
10001240:	00bfdfc4 	movi	r2,-129
10001244:	90a4703a 	and	r18,r18,r2
10001248:	94800094 	ori	r18,r18,2
1000124c:	0039883a 	mov	fp,zero
10001250:	d9003917 	ldw	r4,228(sp)
10001254:	dc001e04 	addi	r16,sp,120
10001258:	988003cc 	andi	r2,r19,15
1000125c:	b006973a 	slli	r3,r22,28
10001260:	2085883a 	add	r2,r4,r2
10001264:	9826d13a 	srli	r19,r19,4
10001268:	10800003 	ldbu	r2,0(r2)
1000126c:	b02cd13a 	srli	r22,r22,4
10001270:	843fffc4 	addi	r16,r16,-1
10001274:	1ce6b03a 	or	r19,r3,r19
10001278:	80800005 	stb	r2,0(r16)
1000127c:	9d84b03a 	or	r2,r19,r22
10001280:	103ff51e 	bne	r2,zero,10001258 <__alt_data_end+0xf8001258>
10001284:	d8c02817 	ldw	r3,160(sp)
10001288:	1c07c83a 	sub	r3,r3,r16
1000128c:	d8c02e15 	stw	r3,184(sp)
10001290:	003ecc06 	br	10000dc4 <__alt_data_end+0xf8000dc4>
10001294:	18c03fcc 	andi	r3,r3,255
10001298:	183e9f26 	beq	r3,zero,10000d18 <__alt_data_end+0xf8000d18>
1000129c:	d9c02785 	stb	r7,158(sp)
100012a0:	003e9d06 	br	10000d18 <__alt_data_end+0xf8000d18>
100012a4:	00c00044 	movi	r3,1
100012a8:	01c00ac4 	movi	r7,43
100012ac:	ac400007 	ldb	r17,0(r21)
100012b0:	003d5e06 	br	1000082c <__alt_data_end+0xf800082c>
100012b4:	94800814 	ori	r18,r18,32
100012b8:	ac400007 	ldb	r17,0(r21)
100012bc:	003d5b06 	br	1000082c <__alt_data_end+0xf800082c>
100012c0:	d8c02d17 	ldw	r3,180(sp)
100012c4:	d8002785 	stb	zero,158(sp)
100012c8:	1c000017 	ldw	r16,0(r3)
100012cc:	1cc00104 	addi	r19,r3,4
100012d0:	80041926 	beq	r16,zero,10002338 <___vfprintf_internal_r+0x1c90>
100012d4:	d9002917 	ldw	r4,164(sp)
100012d8:	2003d016 	blt	r4,zero,1000221c <___vfprintf_internal_r+0x1b74>
100012dc:	200d883a 	mov	r6,r4
100012e0:	000b883a 	mov	r5,zero
100012e4:	8009883a 	mov	r4,r16
100012e8:	da003d15 	stw	r8,244(sp)
100012ec:	0005eb80 	call	10005eb8 <memchr>
100012f0:	da003d17 	ldw	r8,244(sp)
100012f4:	10045426 	beq	r2,zero,10002448 <___vfprintf_internal_r+0x1da0>
100012f8:	1405c83a 	sub	r2,r2,r16
100012fc:	d8802e15 	stw	r2,184(sp)
10001300:	1003cc16 	blt	r2,zero,10002234 <___vfprintf_internal_r+0x1b8c>
10001304:	df002783 	ldbu	fp,158(sp)
10001308:	d8802a15 	stw	r2,168(sp)
1000130c:	dcc02d15 	stw	r19,180(sp)
10001310:	d8002915 	stw	zero,164(sp)
10001314:	d8003215 	stw	zero,200(sp)
10001318:	003eb006 	br	10000ddc <__alt_data_end+0xf8000ddc>
1000131c:	18c03fcc 	andi	r3,r3,255
10001320:	183f9b26 	beq	r3,zero,10001190 <__alt_data_end+0xf8001190>
10001324:	d9c02785 	stb	r7,158(sp)
10001328:	003f9906 	br	10001190 <__alt_data_end+0xf8001190>
1000132c:	18c03fcc 	andi	r3,r3,255
10001330:	1805551e 	bne	r3,zero,10002888 <___vfprintf_internal_r+0x21e0>
10001334:	01440074 	movhi	r5,4097
10001338:	29524a04 	addi	r5,r5,18728
1000133c:	d9403915 	stw	r5,228(sp)
10001340:	9080080c 	andi	r2,r18,32
10001344:	103fae1e 	bne	r2,zero,10001200 <__alt_data_end+0xf8001200>
10001348:	9080040c 	andi	r2,r18,16
1000134c:	1002de26 	beq	r2,zero,10001ec8 <___vfprintf_internal_r+0x1820>
10001350:	d8c02d17 	ldw	r3,180(sp)
10001354:	002d883a 	mov	r22,zero
10001358:	1cc00017 	ldw	r19,0(r3)
1000135c:	18c00104 	addi	r3,r3,4
10001360:	d8c02d15 	stw	r3,180(sp)
10001364:	003fab06 	br	10001214 <__alt_data_end+0xf8001214>
10001368:	38803fcc 	andi	r2,r7,255
1000136c:	1080201c 	xori	r2,r2,128
10001370:	10bfe004 	addi	r2,r2,-128
10001374:	1002d21e 	bne	r2,zero,10001ec0 <___vfprintf_internal_r+0x1818>
10001378:	00c00044 	movi	r3,1
1000137c:	01c00804 	movi	r7,32
10001380:	ac400007 	ldb	r17,0(r21)
10001384:	003d2906 	br	1000082c <__alt_data_end+0xf800082c>
10001388:	94800054 	ori	r18,r18,1
1000138c:	ac400007 	ldb	r17,0(r21)
10001390:	003d2606 	br	1000082c <__alt_data_end+0xf800082c>
10001394:	18c03fcc 	andi	r3,r3,255
10001398:	183e0526 	beq	r3,zero,10000bb0 <__alt_data_end+0xf8000bb0>
1000139c:	d9c02785 	stb	r7,158(sp)
100013a0:	003e0306 	br	10000bb0 <__alt_data_end+0xf8000bb0>
100013a4:	94801014 	ori	r18,r18,64
100013a8:	ac400007 	ldb	r17,0(r21)
100013ac:	003d1f06 	br	1000082c <__alt_data_end+0xf800082c>
100013b0:	ac400007 	ldb	r17,0(r21)
100013b4:	8a438726 	beq	r17,r9,100021d4 <___vfprintf_internal_r+0x1b2c>
100013b8:	94800414 	ori	r18,r18,16
100013bc:	003d1b06 	br	1000082c <__alt_data_end+0xf800082c>
100013c0:	18c03fcc 	andi	r3,r3,255
100013c4:	1805341e 	bne	r3,zero,10002898 <___vfprintf_internal_r+0x21f0>
100013c8:	9080080c 	andi	r2,r18,32
100013cc:	1002cd26 	beq	r2,zero,10001f04 <___vfprintf_internal_r+0x185c>
100013d0:	d9402d17 	ldw	r5,180(sp)
100013d4:	d9002f17 	ldw	r4,188(sp)
100013d8:	28800017 	ldw	r2,0(r5)
100013dc:	2007d7fa 	srai	r3,r4,31
100013e0:	29400104 	addi	r5,r5,4
100013e4:	d9402d15 	stw	r5,180(sp)
100013e8:	11000015 	stw	r4,0(r2)
100013ec:	10c00115 	stw	r3,4(r2)
100013f0:	003ce506 	br	10000788 <__alt_data_end+0xf8000788>
100013f4:	d8c02d17 	ldw	r3,180(sp)
100013f8:	d9002d17 	ldw	r4,180(sp)
100013fc:	d8002785 	stb	zero,158(sp)
10001400:	18800017 	ldw	r2,0(r3)
10001404:	21000104 	addi	r4,r4,4
10001408:	00c00044 	movi	r3,1
1000140c:	d8c02a15 	stw	r3,168(sp)
10001410:	d8801405 	stb	r2,80(sp)
10001414:	d9002d15 	stw	r4,180(sp)
10001418:	d8c02e15 	stw	r3,184(sp)
1000141c:	d8002915 	stw	zero,164(sp)
10001420:	d8003215 	stw	zero,200(sp)
10001424:	dc001404 	addi	r16,sp,80
10001428:	0039883a 	mov	fp,zero
1000142c:	003e7206 	br	10000df8 <__alt_data_end+0xf8000df8>
10001430:	01040074 	movhi	r4,4097
10001434:	21124a04 	addi	r4,r4,18728
10001438:	0039883a 	mov	fp,zero
1000143c:	d9003915 	stw	r4,228(sp)
10001440:	04401e04 	movi	r17,120
10001444:	003f8206 	br	10001250 <__alt_data_end+0xf8001250>
10001448:	18c03fcc 	andi	r3,r3,255
1000144c:	1805061e 	bne	r3,zero,10002868 <___vfprintf_internal_r+0x21c0>
10001450:	883d9126 	beq	r17,zero,10000a98 <__alt_data_end+0xf8000a98>
10001454:	00c00044 	movi	r3,1
10001458:	d8c02a15 	stw	r3,168(sp)
1000145c:	dc401405 	stb	r17,80(sp)
10001460:	d8002785 	stb	zero,158(sp)
10001464:	003fec06 	br	10001418 <__alt_data_end+0xf8001418>
10001468:	01440074 	movhi	r5,4097
1000146c:	29524a04 	addi	r5,r5,18728
10001470:	d9403915 	stw	r5,228(sp)
10001474:	d8c02d15 	stw	r3,180(sp)
10001478:	1025883a 	mov	r18,r2
1000147c:	04401e04 	movi	r17,120
10001480:	9d84b03a 	or	r2,r19,r22
10001484:	1000fc1e 	bne	r2,zero,10001878 <___vfprintf_internal_r+0x11d0>
10001488:	0039883a 	mov	fp,zero
1000148c:	00800084 	movi	r2,2
10001490:	10803fcc 	andi	r2,r2,255
10001494:	00c00044 	movi	r3,1
10001498:	10c20f26 	beq	r2,r3,10001cd8 <___vfprintf_internal_r+0x1630>
1000149c:	00c00084 	movi	r3,2
100014a0:	10fd6326 	beq	r2,r3,10000a30 <__alt_data_end+0xf8000a30>
100014a4:	003e2d06 	br	10000d5c <__alt_data_end+0xf8000d5c>
100014a8:	d8c02017 	ldw	r3,128(sp)
100014ac:	003e9306 	br	10000efc <__alt_data_end+0xf8000efc>
100014b0:	00801944 	movi	r2,101
100014b4:	14407e0e 	bge	r2,r17,100016b0 <___vfprintf_internal_r+0x1008>
100014b8:	d9003617 	ldw	r4,216(sp)
100014bc:	d9403817 	ldw	r5,224(sp)
100014c0:	000d883a 	mov	r6,zero
100014c4:	000f883a 	mov	r7,zero
100014c8:	d8c03c15 	stw	r3,240(sp)
100014cc:	da003d15 	stw	r8,244(sp)
100014d0:	000b91c0 	call	1000b91c <__eqdf2>
100014d4:	d8c03c17 	ldw	r3,240(sp)
100014d8:	da003d17 	ldw	r8,244(sp)
100014dc:	1000f71e 	bne	r2,zero,100018bc <___vfprintf_internal_r+0x1214>
100014e0:	d8801f17 	ldw	r2,124(sp)
100014e4:	01040074 	movhi	r4,4097
100014e8:	21125104 	addi	r4,r4,18756
100014ec:	18c00044 	addi	r3,r3,1
100014f0:	10800044 	addi	r2,r2,1
100014f4:	41000015 	stw	r4,0(r8)
100014f8:	01000044 	movi	r4,1
100014fc:	41000115 	stw	r4,4(r8)
10001500:	d8c02015 	stw	r3,128(sp)
10001504:	d8801f15 	stw	r2,124(sp)
10001508:	010001c4 	movi	r4,7
1000150c:	2082b816 	blt	r4,r2,10001ff0 <___vfprintf_internal_r+0x1948>
10001510:	42000204 	addi	r8,r8,8
10001514:	d8802617 	ldw	r2,152(sp)
10001518:	d9403317 	ldw	r5,204(sp)
1000151c:	11400216 	blt	r2,r5,10001528 <___vfprintf_internal_r+0xe80>
10001520:	9080004c 	andi	r2,r18,1
10001524:	103ed526 	beq	r2,zero,1000107c <__alt_data_end+0xf800107c>
10001528:	d8803717 	ldw	r2,220(sp)
1000152c:	d9003417 	ldw	r4,208(sp)
10001530:	d9403717 	ldw	r5,220(sp)
10001534:	1887883a 	add	r3,r3,r2
10001538:	d8801f17 	ldw	r2,124(sp)
1000153c:	41000015 	stw	r4,0(r8)
10001540:	41400115 	stw	r5,4(r8)
10001544:	10800044 	addi	r2,r2,1
10001548:	d8c02015 	stw	r3,128(sp)
1000154c:	d8801f15 	stw	r2,124(sp)
10001550:	010001c4 	movi	r4,7
10001554:	20832916 	blt	r4,r2,100021fc <___vfprintf_internal_r+0x1b54>
10001558:	42000204 	addi	r8,r8,8
1000155c:	d8803317 	ldw	r2,204(sp)
10001560:	143fffc4 	addi	r16,r2,-1
10001564:	043ec50e 	bge	zero,r16,1000107c <__alt_data_end+0xf800107c>
10001568:	04400404 	movi	r17,16
1000156c:	d8801f17 	ldw	r2,124(sp)
10001570:	8c00880e 	bge	r17,r16,10001794 <___vfprintf_internal_r+0x10ec>
10001574:	01440074 	movhi	r5,4097
10001578:	29525184 	addi	r5,r5,18758
1000157c:	d9402b15 	stw	r5,172(sp)
10001580:	058001c4 	movi	r22,7
10001584:	dcc02c17 	ldw	r19,176(sp)
10001588:	00000306 	br	10001598 <___vfprintf_internal_r+0xef0>
1000158c:	42000204 	addi	r8,r8,8
10001590:	843ffc04 	addi	r16,r16,-16
10001594:	8c00820e 	bge	r17,r16,100017a0 <___vfprintf_internal_r+0x10f8>
10001598:	18c00404 	addi	r3,r3,16
1000159c:	10800044 	addi	r2,r2,1
100015a0:	45000015 	stw	r20,0(r8)
100015a4:	44400115 	stw	r17,4(r8)
100015a8:	d8c02015 	stw	r3,128(sp)
100015ac:	d8801f15 	stw	r2,124(sp)
100015b0:	b0bff60e 	bge	r22,r2,1000158c <__alt_data_end+0xf800158c>
100015b4:	d9801e04 	addi	r6,sp,120
100015b8:	b80b883a 	mov	r5,r23
100015bc:	9809883a 	mov	r4,r19
100015c0:	0007ca40 	call	10007ca4 <__sprint_r>
100015c4:	103d3a1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
100015c8:	d8c02017 	ldw	r3,128(sp)
100015cc:	d8801f17 	ldw	r2,124(sp)
100015d0:	da000404 	addi	r8,sp,16
100015d4:	003fee06 	br	10001590 <__alt_data_end+0xf8001590>
100015d8:	d9403117 	ldw	r5,196(sp)
100015dc:	d8802a17 	ldw	r2,168(sp)
100015e0:	28adc83a 	sub	r22,r5,r2
100015e4:	05be630e 	bge	zero,r22,10000f74 <__alt_data_end+0xf8000f74>
100015e8:	07000404 	movi	fp,16
100015ec:	d8801f17 	ldw	r2,124(sp)
100015f0:	e5838f0e 	bge	fp,r22,10002430 <___vfprintf_internal_r+0x1d88>
100015f4:	01440074 	movhi	r5,4097
100015f8:	29525184 	addi	r5,r5,18758
100015fc:	dc403015 	stw	r17,192(sp)
10001600:	d9402b15 	stw	r5,172(sp)
10001604:	b023883a 	mov	r17,r22
10001608:	04c001c4 	movi	r19,7
1000160c:	a82d883a 	mov	r22,r21
10001610:	902b883a 	mov	r21,r18
10001614:	8025883a 	mov	r18,r16
10001618:	dc002c17 	ldw	r16,176(sp)
1000161c:	00000306 	br	1000162c <___vfprintf_internal_r+0xf84>
10001620:	8c7ffc04 	addi	r17,r17,-16
10001624:	42000204 	addi	r8,r8,8
10001628:	e440110e 	bge	fp,r17,10001670 <___vfprintf_internal_r+0xfc8>
1000162c:	18c00404 	addi	r3,r3,16
10001630:	10800044 	addi	r2,r2,1
10001634:	45000015 	stw	r20,0(r8)
10001638:	47000115 	stw	fp,4(r8)
1000163c:	d8c02015 	stw	r3,128(sp)
10001640:	d8801f15 	stw	r2,124(sp)
10001644:	98bff60e 	bge	r19,r2,10001620 <__alt_data_end+0xf8001620>
10001648:	d9801e04 	addi	r6,sp,120
1000164c:	b80b883a 	mov	r5,r23
10001650:	8009883a 	mov	r4,r16
10001654:	0007ca40 	call	10007ca4 <__sprint_r>
10001658:	103d151e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
1000165c:	8c7ffc04 	addi	r17,r17,-16
10001660:	d8c02017 	ldw	r3,128(sp)
10001664:	d8801f17 	ldw	r2,124(sp)
10001668:	da000404 	addi	r8,sp,16
1000166c:	e47fef16 	blt	fp,r17,1000162c <__alt_data_end+0xf800162c>
10001670:	9021883a 	mov	r16,r18
10001674:	a825883a 	mov	r18,r21
10001678:	b02b883a 	mov	r21,r22
1000167c:	882d883a 	mov	r22,r17
10001680:	dc403017 	ldw	r17,192(sp)
10001684:	d9002b17 	ldw	r4,172(sp)
10001688:	1d87883a 	add	r3,r3,r22
1000168c:	10800044 	addi	r2,r2,1
10001690:	41000015 	stw	r4,0(r8)
10001694:	45800115 	stw	r22,4(r8)
10001698:	d8c02015 	stw	r3,128(sp)
1000169c:	d8801f15 	stw	r2,124(sp)
100016a0:	010001c4 	movi	r4,7
100016a4:	20818e16 	blt	r4,r2,10001ce0 <___vfprintf_internal_r+0x1638>
100016a8:	42000204 	addi	r8,r8,8
100016ac:	003e3106 	br	10000f74 <__alt_data_end+0xf8000f74>
100016b0:	d9403317 	ldw	r5,204(sp)
100016b4:	00800044 	movi	r2,1
100016b8:	18c00044 	addi	r3,r3,1
100016bc:	1141530e 	bge	r2,r5,10001c0c <___vfprintf_internal_r+0x1564>
100016c0:	dc401f17 	ldw	r17,124(sp)
100016c4:	00800044 	movi	r2,1
100016c8:	40800115 	stw	r2,4(r8)
100016cc:	8c400044 	addi	r17,r17,1
100016d0:	44000015 	stw	r16,0(r8)
100016d4:	d8c02015 	stw	r3,128(sp)
100016d8:	dc401f15 	stw	r17,124(sp)
100016dc:	008001c4 	movi	r2,7
100016e0:	14416b16 	blt	r2,r17,10001c90 <___vfprintf_internal_r+0x15e8>
100016e4:	42000204 	addi	r8,r8,8
100016e8:	d8803717 	ldw	r2,220(sp)
100016ec:	d9003417 	ldw	r4,208(sp)
100016f0:	8c400044 	addi	r17,r17,1
100016f4:	10c7883a 	add	r3,r2,r3
100016f8:	40800115 	stw	r2,4(r8)
100016fc:	41000015 	stw	r4,0(r8)
10001700:	d8c02015 	stw	r3,128(sp)
10001704:	dc401f15 	stw	r17,124(sp)
10001708:	008001c4 	movi	r2,7
1000170c:	14416916 	blt	r2,r17,10001cb4 <___vfprintf_internal_r+0x160c>
10001710:	45800204 	addi	r22,r8,8
10001714:	d9003617 	ldw	r4,216(sp)
10001718:	d9403817 	ldw	r5,224(sp)
1000171c:	000d883a 	mov	r6,zero
10001720:	000f883a 	mov	r7,zero
10001724:	d8c03c15 	stw	r3,240(sp)
10001728:	000b91c0 	call	1000b91c <__eqdf2>
1000172c:	d8c03c17 	ldw	r3,240(sp)
10001730:	1000bc26 	beq	r2,zero,10001a24 <___vfprintf_internal_r+0x137c>
10001734:	d9403317 	ldw	r5,204(sp)
10001738:	84000044 	addi	r16,r16,1
1000173c:	8c400044 	addi	r17,r17,1
10001740:	28bfffc4 	addi	r2,r5,-1
10001744:	1887883a 	add	r3,r3,r2
10001748:	b0800115 	stw	r2,4(r22)
1000174c:	b4000015 	stw	r16,0(r22)
10001750:	d8c02015 	stw	r3,128(sp)
10001754:	dc401f15 	stw	r17,124(sp)
10001758:	008001c4 	movi	r2,7
1000175c:	14414316 	blt	r2,r17,10001c6c <___vfprintf_internal_r+0x15c4>
10001760:	b5800204 	addi	r22,r22,8
10001764:	d9003a17 	ldw	r4,232(sp)
10001768:	df0022c4 	addi	fp,sp,139
1000176c:	8c400044 	addi	r17,r17,1
10001770:	20c7883a 	add	r3,r4,r3
10001774:	b7000015 	stw	fp,0(r22)
10001778:	b1000115 	stw	r4,4(r22)
1000177c:	d8c02015 	stw	r3,128(sp)
10001780:	dc401f15 	stw	r17,124(sp)
10001784:	008001c4 	movi	r2,7
10001788:	14400e16 	blt	r2,r17,100017c4 <___vfprintf_internal_r+0x111c>
1000178c:	b2000204 	addi	r8,r22,8
10001790:	003e3a06 	br	1000107c <__alt_data_end+0xf800107c>
10001794:	01040074 	movhi	r4,4097
10001798:	21125184 	addi	r4,r4,18758
1000179c:	d9002b15 	stw	r4,172(sp)
100017a0:	d9002b17 	ldw	r4,172(sp)
100017a4:	1c07883a 	add	r3,r3,r16
100017a8:	44000115 	stw	r16,4(r8)
100017ac:	41000015 	stw	r4,0(r8)
100017b0:	10800044 	addi	r2,r2,1
100017b4:	d8c02015 	stw	r3,128(sp)
100017b8:	d8801f15 	stw	r2,124(sp)
100017bc:	010001c4 	movi	r4,7
100017c0:	20be2d0e 	bge	r4,r2,10001078 <__alt_data_end+0xf8001078>
100017c4:	d9002c17 	ldw	r4,176(sp)
100017c8:	d9801e04 	addi	r6,sp,120
100017cc:	b80b883a 	mov	r5,r23
100017d0:	0007ca40 	call	10007ca4 <__sprint_r>
100017d4:	103cb61e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
100017d8:	d8c02017 	ldw	r3,128(sp)
100017dc:	da000404 	addi	r8,sp,16
100017e0:	003e2606 	br	1000107c <__alt_data_end+0xf800107c>
100017e4:	d9002c17 	ldw	r4,176(sp)
100017e8:	d9801e04 	addi	r6,sp,120
100017ec:	b80b883a 	mov	r5,r23
100017f0:	0007ca40 	call	10007ca4 <__sprint_r>
100017f4:	103e5d26 	beq	r2,zero,1000116c <__alt_data_end+0xf800116c>
100017f8:	003cad06 	br	10000ab0 <__alt_data_end+0xf8000ab0>
100017fc:	d9002c17 	ldw	r4,176(sp)
10001800:	d9801e04 	addi	r6,sp,120
10001804:	b80b883a 	mov	r5,r23
10001808:	0007ca40 	call	10007ca4 <__sprint_r>
1000180c:	103ca81e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001810:	d8c02017 	ldw	r3,128(sp)
10001814:	da000404 	addi	r8,sp,16
10001818:	003e0b06 	br	10001048 <__alt_data_end+0xf8001048>
1000181c:	d9002c17 	ldw	r4,176(sp)
10001820:	d9801e04 	addi	r6,sp,120
10001824:	b80b883a 	mov	r5,r23
10001828:	0007ca40 	call	10007ca4 <__sprint_r>
1000182c:	103ca01e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001830:	d8c02017 	ldw	r3,128(sp)
10001834:	da000404 	addi	r8,sp,16
10001838:	003dbd06 	br	10000f30 <__alt_data_end+0xf8000f30>
1000183c:	d9002c17 	ldw	r4,176(sp)
10001840:	d9801e04 	addi	r6,sp,120
10001844:	b80b883a 	mov	r5,r23
10001848:	0007ca40 	call	10007ca4 <__sprint_r>
1000184c:	103c981e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001850:	d8c02017 	ldw	r3,128(sp)
10001854:	da000404 	addi	r8,sp,16
10001858:	003dc306 	br	10000f68 <__alt_data_end+0xf8000f68>
1000185c:	d8802917 	ldw	r2,164(sp)
10001860:	d8002785 	stb	zero,158(sp)
10001864:	103f0616 	blt	r2,zero,10001480 <__alt_data_end+0xf8001480>
10001868:	00ffdfc4 	movi	r3,-129
1000186c:	9d84b03a 	or	r2,r19,r22
10001870:	90e4703a 	and	r18,r18,r3
10001874:	103c6b26 	beq	r2,zero,10000a24 <__alt_data_end+0xf8000a24>
10001878:	0039883a 	mov	fp,zero
1000187c:	003e7406 	br	10001250 <__alt_data_end+0xf8001250>
10001880:	9080040c 	andi	r2,r18,16
10001884:	1001b326 	beq	r2,zero,10001f54 <___vfprintf_internal_r+0x18ac>
10001888:	d9002d17 	ldw	r4,180(sp)
1000188c:	d9402917 	ldw	r5,164(sp)
10001890:	d8002785 	stb	zero,158(sp)
10001894:	20800104 	addi	r2,r4,4
10001898:	24c00017 	ldw	r19,0(r4)
1000189c:	002d883a 	mov	r22,zero
100018a0:	2801b516 	blt	r5,zero,10001f78 <___vfprintf_internal_r+0x18d0>
100018a4:	00ffdfc4 	movi	r3,-129
100018a8:	d8802d15 	stw	r2,180(sp)
100018ac:	90e4703a 	and	r18,r18,r3
100018b0:	983d2726 	beq	r19,zero,10000d50 <__alt_data_end+0xf8000d50>
100018b4:	0039883a 	mov	fp,zero
100018b8:	003d2a06 	br	10000d64 <__alt_data_end+0xf8000d64>
100018bc:	dc402617 	ldw	r17,152(sp)
100018c0:	0441d30e 	bge	zero,r17,10002010 <___vfprintf_internal_r+0x1968>
100018c4:	dc403217 	ldw	r17,200(sp)
100018c8:	d8803317 	ldw	r2,204(sp)
100018cc:	1440010e 	bge	r2,r17,100018d4 <___vfprintf_internal_r+0x122c>
100018d0:	1023883a 	mov	r17,r2
100018d4:	04400a0e 	bge	zero,r17,10001900 <___vfprintf_internal_r+0x1258>
100018d8:	d8801f17 	ldw	r2,124(sp)
100018dc:	1c47883a 	add	r3,r3,r17
100018e0:	44000015 	stw	r16,0(r8)
100018e4:	10800044 	addi	r2,r2,1
100018e8:	44400115 	stw	r17,4(r8)
100018ec:	d8c02015 	stw	r3,128(sp)
100018f0:	d8801f15 	stw	r2,124(sp)
100018f4:	010001c4 	movi	r4,7
100018f8:	20826516 	blt	r4,r2,10002290 <___vfprintf_internal_r+0x1be8>
100018fc:	42000204 	addi	r8,r8,8
10001900:	88026116 	blt	r17,zero,10002288 <___vfprintf_internal_r+0x1be0>
10001904:	d9003217 	ldw	r4,200(sp)
10001908:	2463c83a 	sub	r17,r4,r17
1000190c:	04407b0e 	bge	zero,r17,10001afc <___vfprintf_internal_r+0x1454>
10001910:	05800404 	movi	r22,16
10001914:	d8801f17 	ldw	r2,124(sp)
10001918:	b4419d0e 	bge	r22,r17,10001f90 <___vfprintf_internal_r+0x18e8>
1000191c:	01040074 	movhi	r4,4097
10001920:	21125184 	addi	r4,r4,18758
10001924:	d9002b15 	stw	r4,172(sp)
10001928:	070001c4 	movi	fp,7
1000192c:	dcc02c17 	ldw	r19,176(sp)
10001930:	00000306 	br	10001940 <___vfprintf_internal_r+0x1298>
10001934:	42000204 	addi	r8,r8,8
10001938:	8c7ffc04 	addi	r17,r17,-16
1000193c:	b441970e 	bge	r22,r17,10001f9c <___vfprintf_internal_r+0x18f4>
10001940:	18c00404 	addi	r3,r3,16
10001944:	10800044 	addi	r2,r2,1
10001948:	45000015 	stw	r20,0(r8)
1000194c:	45800115 	stw	r22,4(r8)
10001950:	d8c02015 	stw	r3,128(sp)
10001954:	d8801f15 	stw	r2,124(sp)
10001958:	e0bff60e 	bge	fp,r2,10001934 <__alt_data_end+0xf8001934>
1000195c:	d9801e04 	addi	r6,sp,120
10001960:	b80b883a 	mov	r5,r23
10001964:	9809883a 	mov	r4,r19
10001968:	0007ca40 	call	10007ca4 <__sprint_r>
1000196c:	103c501e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001970:	d8c02017 	ldw	r3,128(sp)
10001974:	d8801f17 	ldw	r2,124(sp)
10001978:	da000404 	addi	r8,sp,16
1000197c:	003fee06 	br	10001938 <__alt_data_end+0xf8001938>
10001980:	d9002c17 	ldw	r4,176(sp)
10001984:	d9801e04 	addi	r6,sp,120
10001988:	b80b883a 	mov	r5,r23
1000198c:	0007ca40 	call	10007ca4 <__sprint_r>
10001990:	103c471e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001994:	d8c02017 	ldw	r3,128(sp)
10001998:	df002787 	ldb	fp,158(sp)
1000199c:	da000404 	addi	r8,sp,16
100019a0:	003d5606 	br	10000efc <__alt_data_end+0xf8000efc>
100019a4:	9080040c 	andi	r2,r18,16
100019a8:	10016126 	beq	r2,zero,10001f30 <___vfprintf_internal_r+0x1888>
100019ac:	d8802d17 	ldw	r2,180(sp)
100019b0:	14c00017 	ldw	r19,0(r2)
100019b4:	10800104 	addi	r2,r2,4
100019b8:	d8802d15 	stw	r2,180(sp)
100019bc:	982dd7fa 	srai	r22,r19,31
100019c0:	b005883a 	mov	r2,r22
100019c4:	003c8206 	br	10000bd0 <__alt_data_end+0xf8000bd0>
100019c8:	9080040c 	andi	r2,r18,16
100019cc:	10003526 	beq	r2,zero,10001aa4 <___vfprintf_internal_r+0x13fc>
100019d0:	d9402d17 	ldw	r5,180(sp)
100019d4:	d8c02917 	ldw	r3,164(sp)
100019d8:	d8002785 	stb	zero,158(sp)
100019dc:	28800104 	addi	r2,r5,4
100019e0:	2cc00017 	ldw	r19,0(r5)
100019e4:	002d883a 	mov	r22,zero
100019e8:	18003716 	blt	r3,zero,10001ac8 <___vfprintf_internal_r+0x1420>
100019ec:	00ffdfc4 	movi	r3,-129
100019f0:	d8802d15 	stw	r2,180(sp)
100019f4:	90e4703a 	and	r18,r18,r3
100019f8:	0039883a 	mov	fp,zero
100019fc:	983df326 	beq	r19,zero,100011cc <__alt_data_end+0xf80011cc>
10001a00:	00800244 	movi	r2,9
10001a04:	14fc7b36 	bltu	r2,r19,10000bf4 <__alt_data_end+0xf8000bf4>
10001a08:	d8c02817 	ldw	r3,160(sp)
10001a0c:	dc001dc4 	addi	r16,sp,119
10001a10:	9cc00c04 	addi	r19,r19,48
10001a14:	1c07c83a 	sub	r3,r3,r16
10001a18:	dcc01dc5 	stb	r19,119(sp)
10001a1c:	d8c02e15 	stw	r3,184(sp)
10001a20:	003ce806 	br	10000dc4 <__alt_data_end+0xf8000dc4>
10001a24:	d8803317 	ldw	r2,204(sp)
10001a28:	143fffc4 	addi	r16,r2,-1
10001a2c:	043f4d0e 	bge	zero,r16,10001764 <__alt_data_end+0xf8001764>
10001a30:	07000404 	movi	fp,16
10001a34:	e400810e 	bge	fp,r16,10001c3c <___vfprintf_internal_r+0x1594>
10001a38:	01440074 	movhi	r5,4097
10001a3c:	29525184 	addi	r5,r5,18758
10001a40:	d9402b15 	stw	r5,172(sp)
10001a44:	01c001c4 	movi	r7,7
10001a48:	dcc02c17 	ldw	r19,176(sp)
10001a4c:	00000306 	br	10001a5c <___vfprintf_internal_r+0x13b4>
10001a50:	b5800204 	addi	r22,r22,8
10001a54:	843ffc04 	addi	r16,r16,-16
10001a58:	e4007b0e 	bge	fp,r16,10001c48 <___vfprintf_internal_r+0x15a0>
10001a5c:	18c00404 	addi	r3,r3,16
10001a60:	8c400044 	addi	r17,r17,1
10001a64:	b5000015 	stw	r20,0(r22)
10001a68:	b7000115 	stw	fp,4(r22)
10001a6c:	d8c02015 	stw	r3,128(sp)
10001a70:	dc401f15 	stw	r17,124(sp)
10001a74:	3c7ff60e 	bge	r7,r17,10001a50 <__alt_data_end+0xf8001a50>
10001a78:	d9801e04 	addi	r6,sp,120
10001a7c:	b80b883a 	mov	r5,r23
10001a80:	9809883a 	mov	r4,r19
10001a84:	d9c03c15 	stw	r7,240(sp)
10001a88:	0007ca40 	call	10007ca4 <__sprint_r>
10001a8c:	d9c03c17 	ldw	r7,240(sp)
10001a90:	103c071e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001a94:	d8c02017 	ldw	r3,128(sp)
10001a98:	dc401f17 	ldw	r17,124(sp)
10001a9c:	dd800404 	addi	r22,sp,16
10001aa0:	003fec06 	br	10001a54 <__alt_data_end+0xf8001a54>
10001aa4:	9080100c 	andi	r2,r18,64
10001aa8:	d8002785 	stb	zero,158(sp)
10001aac:	10010e26 	beq	r2,zero,10001ee8 <___vfprintf_internal_r+0x1840>
10001ab0:	d9002d17 	ldw	r4,180(sp)
10001ab4:	d9402917 	ldw	r5,164(sp)
10001ab8:	002d883a 	mov	r22,zero
10001abc:	20800104 	addi	r2,r4,4
10001ac0:	24c0000b 	ldhu	r19,0(r4)
10001ac4:	283fc90e 	bge	r5,zero,100019ec <__alt_data_end+0xf80019ec>
10001ac8:	d8802d15 	stw	r2,180(sp)
10001acc:	0039883a 	mov	fp,zero
10001ad0:	9d84b03a 	or	r2,r19,r22
10001ad4:	103c461e 	bne	r2,zero,10000bf0 <__alt_data_end+0xf8000bf0>
10001ad8:	00800044 	movi	r2,1
10001adc:	003e6c06 	br	10001490 <__alt_data_end+0xf8001490>
10001ae0:	d9002c17 	ldw	r4,176(sp)
10001ae4:	d9801e04 	addi	r6,sp,120
10001ae8:	b80b883a 	mov	r5,r23
10001aec:	0007ca40 	call	10007ca4 <__sprint_r>
10001af0:	103bef1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001af4:	d8c02017 	ldw	r3,128(sp)
10001af8:	da000404 	addi	r8,sp,16
10001afc:	d9003217 	ldw	r4,200(sp)
10001b00:	d8802617 	ldw	r2,152(sp)
10001b04:	d9403317 	ldw	r5,204(sp)
10001b08:	8123883a 	add	r17,r16,r4
10001b0c:	11400216 	blt	r2,r5,10001b18 <___vfprintf_internal_r+0x1470>
10001b10:	9100004c 	andi	r4,r18,1
10001b14:	20000d26 	beq	r4,zero,10001b4c <___vfprintf_internal_r+0x14a4>
10001b18:	d9003717 	ldw	r4,220(sp)
10001b1c:	d9403417 	ldw	r5,208(sp)
10001b20:	1907883a 	add	r3,r3,r4
10001b24:	d9001f17 	ldw	r4,124(sp)
10001b28:	41400015 	stw	r5,0(r8)
10001b2c:	d9403717 	ldw	r5,220(sp)
10001b30:	21000044 	addi	r4,r4,1
10001b34:	d8c02015 	stw	r3,128(sp)
10001b38:	41400115 	stw	r5,4(r8)
10001b3c:	d9001f15 	stw	r4,124(sp)
10001b40:	014001c4 	movi	r5,7
10001b44:	2901e816 	blt	r5,r4,100022e8 <___vfprintf_internal_r+0x1c40>
10001b48:	42000204 	addi	r8,r8,8
10001b4c:	d9003317 	ldw	r4,204(sp)
10001b50:	8121883a 	add	r16,r16,r4
10001b54:	2085c83a 	sub	r2,r4,r2
10001b58:	8461c83a 	sub	r16,r16,r17
10001b5c:	1400010e 	bge	r2,r16,10001b64 <___vfprintf_internal_r+0x14bc>
10001b60:	1021883a 	mov	r16,r2
10001b64:	04000a0e 	bge	zero,r16,10001b90 <___vfprintf_internal_r+0x14e8>
10001b68:	d9001f17 	ldw	r4,124(sp)
10001b6c:	1c07883a 	add	r3,r3,r16
10001b70:	44400015 	stw	r17,0(r8)
10001b74:	21000044 	addi	r4,r4,1
10001b78:	44000115 	stw	r16,4(r8)
10001b7c:	d8c02015 	stw	r3,128(sp)
10001b80:	d9001f15 	stw	r4,124(sp)
10001b84:	014001c4 	movi	r5,7
10001b88:	2901fb16 	blt	r5,r4,10002378 <___vfprintf_internal_r+0x1cd0>
10001b8c:	42000204 	addi	r8,r8,8
10001b90:	8001f716 	blt	r16,zero,10002370 <___vfprintf_internal_r+0x1cc8>
10001b94:	1421c83a 	sub	r16,r2,r16
10001b98:	043d380e 	bge	zero,r16,1000107c <__alt_data_end+0xf800107c>
10001b9c:	04400404 	movi	r17,16
10001ba0:	d8801f17 	ldw	r2,124(sp)
10001ba4:	8c3efb0e 	bge	r17,r16,10001794 <__alt_data_end+0xf8001794>
10001ba8:	01440074 	movhi	r5,4097
10001bac:	29525184 	addi	r5,r5,18758
10001bb0:	d9402b15 	stw	r5,172(sp)
10001bb4:	058001c4 	movi	r22,7
10001bb8:	dcc02c17 	ldw	r19,176(sp)
10001bbc:	00000306 	br	10001bcc <___vfprintf_internal_r+0x1524>
10001bc0:	42000204 	addi	r8,r8,8
10001bc4:	843ffc04 	addi	r16,r16,-16
10001bc8:	8c3ef50e 	bge	r17,r16,100017a0 <__alt_data_end+0xf80017a0>
10001bcc:	18c00404 	addi	r3,r3,16
10001bd0:	10800044 	addi	r2,r2,1
10001bd4:	45000015 	stw	r20,0(r8)
10001bd8:	44400115 	stw	r17,4(r8)
10001bdc:	d8c02015 	stw	r3,128(sp)
10001be0:	d8801f15 	stw	r2,124(sp)
10001be4:	b0bff60e 	bge	r22,r2,10001bc0 <__alt_data_end+0xf8001bc0>
10001be8:	d9801e04 	addi	r6,sp,120
10001bec:	b80b883a 	mov	r5,r23
10001bf0:	9809883a 	mov	r4,r19
10001bf4:	0007ca40 	call	10007ca4 <__sprint_r>
10001bf8:	103bad1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001bfc:	d8c02017 	ldw	r3,128(sp)
10001c00:	d8801f17 	ldw	r2,124(sp)
10001c04:	da000404 	addi	r8,sp,16
10001c08:	003fee06 	br	10001bc4 <__alt_data_end+0xf8001bc4>
10001c0c:	9088703a 	and	r4,r18,r2
10001c10:	203eab1e 	bne	r4,zero,100016c0 <__alt_data_end+0xf80016c0>
10001c14:	dc401f17 	ldw	r17,124(sp)
10001c18:	40800115 	stw	r2,4(r8)
10001c1c:	44000015 	stw	r16,0(r8)
10001c20:	8c400044 	addi	r17,r17,1
10001c24:	d8c02015 	stw	r3,128(sp)
10001c28:	dc401f15 	stw	r17,124(sp)
10001c2c:	008001c4 	movi	r2,7
10001c30:	14400e16 	blt	r2,r17,10001c6c <___vfprintf_internal_r+0x15c4>
10001c34:	45800204 	addi	r22,r8,8
10001c38:	003eca06 	br	10001764 <__alt_data_end+0xf8001764>
10001c3c:	01040074 	movhi	r4,4097
10001c40:	21125184 	addi	r4,r4,18758
10001c44:	d9002b15 	stw	r4,172(sp)
10001c48:	d8802b17 	ldw	r2,172(sp)
10001c4c:	1c07883a 	add	r3,r3,r16
10001c50:	8c400044 	addi	r17,r17,1
10001c54:	b0800015 	stw	r2,0(r22)
10001c58:	b4000115 	stw	r16,4(r22)
10001c5c:	d8c02015 	stw	r3,128(sp)
10001c60:	dc401f15 	stw	r17,124(sp)
10001c64:	008001c4 	movi	r2,7
10001c68:	147ebd0e 	bge	r2,r17,10001760 <__alt_data_end+0xf8001760>
10001c6c:	d9002c17 	ldw	r4,176(sp)
10001c70:	d9801e04 	addi	r6,sp,120
10001c74:	b80b883a 	mov	r5,r23
10001c78:	0007ca40 	call	10007ca4 <__sprint_r>
10001c7c:	103b8c1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001c80:	d8c02017 	ldw	r3,128(sp)
10001c84:	dc401f17 	ldw	r17,124(sp)
10001c88:	dd800404 	addi	r22,sp,16
10001c8c:	003eb506 	br	10001764 <__alt_data_end+0xf8001764>
10001c90:	d9002c17 	ldw	r4,176(sp)
10001c94:	d9801e04 	addi	r6,sp,120
10001c98:	b80b883a 	mov	r5,r23
10001c9c:	0007ca40 	call	10007ca4 <__sprint_r>
10001ca0:	103b831e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001ca4:	d8c02017 	ldw	r3,128(sp)
10001ca8:	dc401f17 	ldw	r17,124(sp)
10001cac:	da000404 	addi	r8,sp,16
10001cb0:	003e8d06 	br	100016e8 <__alt_data_end+0xf80016e8>
10001cb4:	d9002c17 	ldw	r4,176(sp)
10001cb8:	d9801e04 	addi	r6,sp,120
10001cbc:	b80b883a 	mov	r5,r23
10001cc0:	0007ca40 	call	10007ca4 <__sprint_r>
10001cc4:	103b7a1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001cc8:	d8c02017 	ldw	r3,128(sp)
10001ccc:	dc401f17 	ldw	r17,124(sp)
10001cd0:	dd800404 	addi	r22,sp,16
10001cd4:	003e8f06 	br	10001714 <__alt_data_end+0xf8001714>
10001cd8:	0027883a 	mov	r19,zero
10001cdc:	003f4a06 	br	10001a08 <__alt_data_end+0xf8001a08>
10001ce0:	d9002c17 	ldw	r4,176(sp)
10001ce4:	d9801e04 	addi	r6,sp,120
10001ce8:	b80b883a 	mov	r5,r23
10001cec:	0007ca40 	call	10007ca4 <__sprint_r>
10001cf0:	103b6f1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10001cf4:	d8c02017 	ldw	r3,128(sp)
10001cf8:	da000404 	addi	r8,sp,16
10001cfc:	003c9d06 	br	10000f74 <__alt_data_end+0xf8000f74>
10001d00:	04e7c83a 	sub	r19,zero,r19
10001d04:	9804c03a 	cmpne	r2,r19,zero
10001d08:	05adc83a 	sub	r22,zero,r22
10001d0c:	b0adc83a 	sub	r22,r22,r2
10001d10:	d8802917 	ldw	r2,164(sp)
10001d14:	07000b44 	movi	fp,45
10001d18:	df002785 	stb	fp,158(sp)
10001d1c:	10017b16 	blt	r2,zero,1000230c <___vfprintf_internal_r+0x1c64>
10001d20:	00bfdfc4 	movi	r2,-129
10001d24:	90a4703a 	and	r18,r18,r2
10001d28:	003bb106 	br	10000bf0 <__alt_data_end+0xf8000bf0>
10001d2c:	d9003617 	ldw	r4,216(sp)
10001d30:	d9403817 	ldw	r5,224(sp)
10001d34:	da003d15 	stw	r8,244(sp)
10001d38:	00078c80 	call	100078c8 <__fpclassifyd>
10001d3c:	da003d17 	ldw	r8,244(sp)
10001d40:	1000f026 	beq	r2,zero,10002104 <___vfprintf_internal_r+0x1a5c>
10001d44:	d9002917 	ldw	r4,164(sp)
10001d48:	05bff7c4 	movi	r22,-33
10001d4c:	00bfffc4 	movi	r2,-1
10001d50:	8dac703a 	and	r22,r17,r22
10001d54:	20820026 	beq	r4,r2,10002558 <___vfprintf_internal_r+0x1eb0>
10001d58:	008011c4 	movi	r2,71
10001d5c:	b081f726 	beq	r22,r2,1000253c <___vfprintf_internal_r+0x1e94>
10001d60:	d9003817 	ldw	r4,224(sp)
10001d64:	90c04014 	ori	r3,r18,256
10001d68:	d8c02b15 	stw	r3,172(sp)
10001d6c:	20021516 	blt	r4,zero,100025c4 <___vfprintf_internal_r+0x1f1c>
10001d70:	dcc03817 	ldw	r19,224(sp)
10001d74:	d8002a05 	stb	zero,168(sp)
10001d78:	00801984 	movi	r2,102
10001d7c:	8881f926 	beq	r17,r2,10002564 <___vfprintf_internal_r+0x1ebc>
10001d80:	00801184 	movi	r2,70
10001d84:	88821c26 	beq	r17,r2,100025f8 <___vfprintf_internal_r+0x1f50>
10001d88:	00801144 	movi	r2,69
10001d8c:	b081ef26 	beq	r22,r2,1000254c <___vfprintf_internal_r+0x1ea4>
10001d90:	d8c02917 	ldw	r3,164(sp)
10001d94:	d8802104 	addi	r2,sp,132
10001d98:	d8800315 	stw	r2,12(sp)
10001d9c:	d9403617 	ldw	r5,216(sp)
10001da0:	d8802504 	addi	r2,sp,148
10001da4:	d9002c17 	ldw	r4,176(sp)
10001da8:	d8800215 	stw	r2,8(sp)
10001dac:	d8802604 	addi	r2,sp,152
10001db0:	d8c00015 	stw	r3,0(sp)
10001db4:	d8800115 	stw	r2,4(sp)
10001db8:	01c00084 	movi	r7,2
10001dbc:	980d883a 	mov	r6,r19
10001dc0:	d8c03c15 	stw	r3,240(sp)
10001dc4:	da003d15 	stw	r8,244(sp)
10001dc8:	0002ccc0 	call	10002ccc <_dtoa_r>
10001dcc:	1021883a 	mov	r16,r2
10001dd0:	008019c4 	movi	r2,103
10001dd4:	d8c03c17 	ldw	r3,240(sp)
10001dd8:	da003d17 	ldw	r8,244(sp)
10001ddc:	88817126 	beq	r17,r2,100023a4 <___vfprintf_internal_r+0x1cfc>
10001de0:	008011c4 	movi	r2,71
10001de4:	88829226 	beq	r17,r2,10002830 <___vfprintf_internal_r+0x2188>
10001de8:	80f9883a 	add	fp,r16,r3
10001dec:	d9003617 	ldw	r4,216(sp)
10001df0:	000d883a 	mov	r6,zero
10001df4:	000f883a 	mov	r7,zero
10001df8:	980b883a 	mov	r5,r19
10001dfc:	da003d15 	stw	r8,244(sp)
10001e00:	000b91c0 	call	1000b91c <__eqdf2>
10001e04:	da003d17 	ldw	r8,244(sp)
10001e08:	10018d26 	beq	r2,zero,10002440 <___vfprintf_internal_r+0x1d98>
10001e0c:	d8802117 	ldw	r2,132(sp)
10001e10:	1700062e 	bgeu	r2,fp,10001e2c <___vfprintf_internal_r+0x1784>
10001e14:	01000c04 	movi	r4,48
10001e18:	10c00044 	addi	r3,r2,1
10001e1c:	d8c02115 	stw	r3,132(sp)
10001e20:	11000005 	stb	r4,0(r2)
10001e24:	d8802117 	ldw	r2,132(sp)
10001e28:	173ffb36 	bltu	r2,fp,10001e18 <__alt_data_end+0xf8001e18>
10001e2c:	1405c83a 	sub	r2,r2,r16
10001e30:	d8803315 	stw	r2,204(sp)
10001e34:	008011c4 	movi	r2,71
10001e38:	b0817626 	beq	r22,r2,10002414 <___vfprintf_internal_r+0x1d6c>
10001e3c:	00801944 	movi	r2,101
10001e40:	1442810e 	bge	r2,r17,10002848 <___vfprintf_internal_r+0x21a0>
10001e44:	d8c02617 	ldw	r3,152(sp)
10001e48:	00801984 	movi	r2,102
10001e4c:	d8c03215 	stw	r3,200(sp)
10001e50:	8881fe26 	beq	r17,r2,1000264c <___vfprintf_internal_r+0x1fa4>
10001e54:	d8c03217 	ldw	r3,200(sp)
10001e58:	d9003317 	ldw	r4,204(sp)
10001e5c:	1901dd16 	blt	r3,r4,100025d4 <___vfprintf_internal_r+0x1f2c>
10001e60:	9480004c 	andi	r18,r18,1
10001e64:	90022b1e 	bne	r18,zero,10002714 <___vfprintf_internal_r+0x206c>
10001e68:	1805883a 	mov	r2,r3
10001e6c:	18028016 	blt	r3,zero,10002870 <___vfprintf_internal_r+0x21c8>
10001e70:	d8c03217 	ldw	r3,200(sp)
10001e74:	044019c4 	movi	r17,103
10001e78:	d8c02e15 	stw	r3,184(sp)
10001e7c:	df002a07 	ldb	fp,168(sp)
10001e80:	e001531e 	bne	fp,zero,100023d0 <___vfprintf_internal_r+0x1d28>
10001e84:	df002783 	ldbu	fp,158(sp)
10001e88:	d8802a15 	stw	r2,168(sp)
10001e8c:	dc802b17 	ldw	r18,172(sp)
10001e90:	d8002915 	stw	zero,164(sp)
10001e94:	003bd106 	br	10000ddc <__alt_data_end+0xf8000ddc>
10001e98:	d8802d17 	ldw	r2,180(sp)
10001e9c:	d8c02d17 	ldw	r3,180(sp)
10001ea0:	d9002d17 	ldw	r4,180(sp)
10001ea4:	10800017 	ldw	r2,0(r2)
10001ea8:	18c00117 	ldw	r3,4(r3)
10001eac:	21000204 	addi	r4,r4,8
10001eb0:	d8803615 	stw	r2,216(sp)
10001eb4:	d8c03815 	stw	r3,224(sp)
10001eb8:	d9002d15 	stw	r4,180(sp)
10001ebc:	003b7506 	br	10000c94 <__alt_data_end+0xf8000c94>
10001ec0:	ac400007 	ldb	r17,0(r21)
10001ec4:	003a5906 	br	1000082c <__alt_data_end+0xf800082c>
10001ec8:	9080100c 	andi	r2,r18,64
10001ecc:	1000a826 	beq	r2,zero,10002170 <___vfprintf_internal_r+0x1ac8>
10001ed0:	d9002d17 	ldw	r4,180(sp)
10001ed4:	002d883a 	mov	r22,zero
10001ed8:	24c0000b 	ldhu	r19,0(r4)
10001edc:	21000104 	addi	r4,r4,4
10001ee0:	d9002d15 	stw	r4,180(sp)
10001ee4:	003ccb06 	br	10001214 <__alt_data_end+0xf8001214>
10001ee8:	d8c02d17 	ldw	r3,180(sp)
10001eec:	d9002917 	ldw	r4,164(sp)
10001ef0:	002d883a 	mov	r22,zero
10001ef4:	18800104 	addi	r2,r3,4
10001ef8:	1cc00017 	ldw	r19,0(r3)
10001efc:	203ebb0e 	bge	r4,zero,100019ec <__alt_data_end+0xf80019ec>
10001f00:	003ef106 	br	10001ac8 <__alt_data_end+0xf8001ac8>
10001f04:	9080040c 	andi	r2,r18,16
10001f08:	1000921e 	bne	r2,zero,10002154 <___vfprintf_internal_r+0x1aac>
10001f0c:	9480100c 	andi	r18,r18,64
10001f10:	90013926 	beq	r18,zero,100023f8 <___vfprintf_internal_r+0x1d50>
10001f14:	d9002d17 	ldw	r4,180(sp)
10001f18:	d9402f17 	ldw	r5,188(sp)
10001f1c:	20800017 	ldw	r2,0(r4)
10001f20:	21000104 	addi	r4,r4,4
10001f24:	d9002d15 	stw	r4,180(sp)
10001f28:	1140000d 	sth	r5,0(r2)
10001f2c:	003a1606 	br	10000788 <__alt_data_end+0xf8000788>
10001f30:	9080100c 	andi	r2,r18,64
10001f34:	10008026 	beq	r2,zero,10002138 <___vfprintf_internal_r+0x1a90>
10001f38:	d8c02d17 	ldw	r3,180(sp)
10001f3c:	1cc0000f 	ldh	r19,0(r3)
10001f40:	18c00104 	addi	r3,r3,4
10001f44:	d8c02d15 	stw	r3,180(sp)
10001f48:	982dd7fa 	srai	r22,r19,31
10001f4c:	b005883a 	mov	r2,r22
10001f50:	003b1f06 	br	10000bd0 <__alt_data_end+0xf8000bd0>
10001f54:	9080100c 	andi	r2,r18,64
10001f58:	d8002785 	stb	zero,158(sp)
10001f5c:	10008a1e 	bne	r2,zero,10002188 <___vfprintf_internal_r+0x1ae0>
10001f60:	d9402d17 	ldw	r5,180(sp)
10001f64:	d8c02917 	ldw	r3,164(sp)
10001f68:	002d883a 	mov	r22,zero
10001f6c:	28800104 	addi	r2,r5,4
10001f70:	2cc00017 	ldw	r19,0(r5)
10001f74:	183e4b0e 	bge	r3,zero,100018a4 <__alt_data_end+0xf80018a4>
10001f78:	9d86b03a 	or	r3,r19,r22
10001f7c:	d8802d15 	stw	r2,180(sp)
10001f80:	183e4c1e 	bne	r3,zero,100018b4 <__alt_data_end+0xf80018b4>
10001f84:	0039883a 	mov	fp,zero
10001f88:	0005883a 	mov	r2,zero
10001f8c:	003d4006 	br	10001490 <__alt_data_end+0xf8001490>
10001f90:	01440074 	movhi	r5,4097
10001f94:	29525184 	addi	r5,r5,18758
10001f98:	d9402b15 	stw	r5,172(sp)
10001f9c:	d9402b17 	ldw	r5,172(sp)
10001fa0:	1c47883a 	add	r3,r3,r17
10001fa4:	10800044 	addi	r2,r2,1
10001fa8:	41400015 	stw	r5,0(r8)
10001fac:	44400115 	stw	r17,4(r8)
10001fb0:	d8c02015 	stw	r3,128(sp)
10001fb4:	d8801f15 	stw	r2,124(sp)
10001fb8:	010001c4 	movi	r4,7
10001fbc:	20bec816 	blt	r4,r2,10001ae0 <__alt_data_end+0xf8001ae0>
10001fc0:	42000204 	addi	r8,r8,8
10001fc4:	003ecd06 	br	10001afc <__alt_data_end+0xf8001afc>
10001fc8:	d9002917 	ldw	r4,164(sp)
10001fcc:	d8002785 	stb	zero,158(sp)
10001fd0:	203d2d16 	blt	r4,zero,10001488 <__alt_data_end+0xf8001488>
10001fd4:	00bfdfc4 	movi	r2,-129
10001fd8:	90a4703a 	and	r18,r18,r2
10001fdc:	003a9106 	br	10000a24 <__alt_data_end+0xf8000a24>
10001fe0:	01040074 	movhi	r4,4097
10001fe4:	21125184 	addi	r4,r4,18758
10001fe8:	d9002b15 	stw	r4,172(sp)
10001fec:	003c0c06 	br	10001020 <__alt_data_end+0xf8001020>
10001ff0:	d9002c17 	ldw	r4,176(sp)
10001ff4:	d9801e04 	addi	r6,sp,120
10001ff8:	b80b883a 	mov	r5,r23
10001ffc:	0007ca40 	call	10007ca4 <__sprint_r>
10002000:	103aab1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10002004:	d8c02017 	ldw	r3,128(sp)
10002008:	da000404 	addi	r8,sp,16
1000200c:	003d4106 	br	10001514 <__alt_data_end+0xf8001514>
10002010:	d8801f17 	ldw	r2,124(sp)
10002014:	01440074 	movhi	r5,4097
10002018:	01000044 	movi	r4,1
1000201c:	18c00044 	addi	r3,r3,1
10002020:	10800044 	addi	r2,r2,1
10002024:	29525104 	addi	r5,r5,18756
10002028:	41000115 	stw	r4,4(r8)
1000202c:	41400015 	stw	r5,0(r8)
10002030:	d8c02015 	stw	r3,128(sp)
10002034:	d8801f15 	stw	r2,124(sp)
10002038:	010001c4 	movi	r4,7
1000203c:	20805c16 	blt	r4,r2,100021b0 <___vfprintf_internal_r+0x1b08>
10002040:	42000204 	addi	r8,r8,8
10002044:	8800041e 	bne	r17,zero,10002058 <___vfprintf_internal_r+0x19b0>
10002048:	d8803317 	ldw	r2,204(sp)
1000204c:	1000021e 	bne	r2,zero,10002058 <___vfprintf_internal_r+0x19b0>
10002050:	9080004c 	andi	r2,r18,1
10002054:	103c0926 	beq	r2,zero,1000107c <__alt_data_end+0xf800107c>
10002058:	d9003717 	ldw	r4,220(sp)
1000205c:	d8801f17 	ldw	r2,124(sp)
10002060:	d9403417 	ldw	r5,208(sp)
10002064:	20c7883a 	add	r3,r4,r3
10002068:	10800044 	addi	r2,r2,1
1000206c:	41000115 	stw	r4,4(r8)
10002070:	41400015 	stw	r5,0(r8)
10002074:	d8c02015 	stw	r3,128(sp)
10002078:	d8801f15 	stw	r2,124(sp)
1000207c:	010001c4 	movi	r4,7
10002080:	20812116 	blt	r4,r2,10002508 <___vfprintf_internal_r+0x1e60>
10002084:	42000204 	addi	r8,r8,8
10002088:	0463c83a 	sub	r17,zero,r17
1000208c:	0440730e 	bge	zero,r17,1000225c <___vfprintf_internal_r+0x1bb4>
10002090:	05800404 	movi	r22,16
10002094:	b440860e 	bge	r22,r17,100022b0 <___vfprintf_internal_r+0x1c08>
10002098:	01440074 	movhi	r5,4097
1000209c:	29525184 	addi	r5,r5,18758
100020a0:	d9402b15 	stw	r5,172(sp)
100020a4:	070001c4 	movi	fp,7
100020a8:	dcc02c17 	ldw	r19,176(sp)
100020ac:	00000306 	br	100020bc <___vfprintf_internal_r+0x1a14>
100020b0:	42000204 	addi	r8,r8,8
100020b4:	8c7ffc04 	addi	r17,r17,-16
100020b8:	b440800e 	bge	r22,r17,100022bc <___vfprintf_internal_r+0x1c14>
100020bc:	18c00404 	addi	r3,r3,16
100020c0:	10800044 	addi	r2,r2,1
100020c4:	45000015 	stw	r20,0(r8)
100020c8:	45800115 	stw	r22,4(r8)
100020cc:	d8c02015 	stw	r3,128(sp)
100020d0:	d8801f15 	stw	r2,124(sp)
100020d4:	e0bff60e 	bge	fp,r2,100020b0 <__alt_data_end+0xf80020b0>
100020d8:	d9801e04 	addi	r6,sp,120
100020dc:	b80b883a 	mov	r5,r23
100020e0:	9809883a 	mov	r4,r19
100020e4:	0007ca40 	call	10007ca4 <__sprint_r>
100020e8:	103a711e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
100020ec:	d8c02017 	ldw	r3,128(sp)
100020f0:	d8801f17 	ldw	r2,124(sp)
100020f4:	da000404 	addi	r8,sp,16
100020f8:	003fee06 	br	100020b4 <__alt_data_end+0xf80020b4>
100020fc:	00bfffc4 	movi	r2,-1
10002100:	003a6f06 	br	10000ac0 <__alt_data_end+0xf8000ac0>
10002104:	008011c4 	movi	r2,71
10002108:	1440b816 	blt	r2,r17,100023ec <___vfprintf_internal_r+0x1d44>
1000210c:	04040074 	movhi	r16,4097
10002110:	84124304 	addi	r16,r16,18700
10002114:	00c000c4 	movi	r3,3
10002118:	00bfdfc4 	movi	r2,-129
1000211c:	d8c02a15 	stw	r3,168(sp)
10002120:	90a4703a 	and	r18,r18,r2
10002124:	df002783 	ldbu	fp,158(sp)
10002128:	d8c02e15 	stw	r3,184(sp)
1000212c:	d8002915 	stw	zero,164(sp)
10002130:	d8003215 	stw	zero,200(sp)
10002134:	003b2906 	br	10000ddc <__alt_data_end+0xf8000ddc>
10002138:	d9002d17 	ldw	r4,180(sp)
1000213c:	24c00017 	ldw	r19,0(r4)
10002140:	21000104 	addi	r4,r4,4
10002144:	d9002d15 	stw	r4,180(sp)
10002148:	982dd7fa 	srai	r22,r19,31
1000214c:	b005883a 	mov	r2,r22
10002150:	003a9f06 	br	10000bd0 <__alt_data_end+0xf8000bd0>
10002154:	d9402d17 	ldw	r5,180(sp)
10002158:	d8c02f17 	ldw	r3,188(sp)
1000215c:	28800017 	ldw	r2,0(r5)
10002160:	29400104 	addi	r5,r5,4
10002164:	d9402d15 	stw	r5,180(sp)
10002168:	10c00015 	stw	r3,0(r2)
1000216c:	00398606 	br	10000788 <__alt_data_end+0xf8000788>
10002170:	d9402d17 	ldw	r5,180(sp)
10002174:	002d883a 	mov	r22,zero
10002178:	2cc00017 	ldw	r19,0(r5)
1000217c:	29400104 	addi	r5,r5,4
10002180:	d9402d15 	stw	r5,180(sp)
10002184:	003c2306 	br	10001214 <__alt_data_end+0xf8001214>
10002188:	d8c02d17 	ldw	r3,180(sp)
1000218c:	d9002917 	ldw	r4,164(sp)
10002190:	002d883a 	mov	r22,zero
10002194:	18800104 	addi	r2,r3,4
10002198:	1cc0000b 	ldhu	r19,0(r3)
1000219c:	203dc10e 	bge	r4,zero,100018a4 <__alt_data_end+0xf80018a4>
100021a0:	003f7506 	br	10001f78 <__alt_data_end+0xf8001f78>
100021a4:	04040074 	movhi	r16,4097
100021a8:	84124104 	addi	r16,r16,18692
100021ac:	003acc06 	br	10000ce0 <__alt_data_end+0xf8000ce0>
100021b0:	d9002c17 	ldw	r4,176(sp)
100021b4:	d9801e04 	addi	r6,sp,120
100021b8:	b80b883a 	mov	r5,r23
100021bc:	0007ca40 	call	10007ca4 <__sprint_r>
100021c0:	103a3b1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
100021c4:	dc402617 	ldw	r17,152(sp)
100021c8:	d8c02017 	ldw	r3,128(sp)
100021cc:	da000404 	addi	r8,sp,16
100021d0:	003f9c06 	br	10002044 <__alt_data_end+0xf8002044>
100021d4:	ac400043 	ldbu	r17,1(r21)
100021d8:	94800814 	ori	r18,r18,32
100021dc:	ad400044 	addi	r21,r21,1
100021e0:	8c403fcc 	andi	r17,r17,255
100021e4:	8c40201c 	xori	r17,r17,128
100021e8:	8c7fe004 	addi	r17,r17,-128
100021ec:	00398f06 	br	1000082c <__alt_data_end+0xf800082c>
100021f0:	d8c02d15 	stw	r3,180(sp)
100021f4:	0039883a 	mov	fp,zero
100021f8:	003e3506 	br	10001ad0 <__alt_data_end+0xf8001ad0>
100021fc:	d9002c17 	ldw	r4,176(sp)
10002200:	d9801e04 	addi	r6,sp,120
10002204:	b80b883a 	mov	r5,r23
10002208:	0007ca40 	call	10007ca4 <__sprint_r>
1000220c:	103a281e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10002210:	d8c02017 	ldw	r3,128(sp)
10002214:	da000404 	addi	r8,sp,16
10002218:	003cd006 	br	1000155c <__alt_data_end+0xf800155c>
1000221c:	8009883a 	mov	r4,r16
10002220:	da003d15 	stw	r8,244(sp)
10002224:	00006100 	call	10000610 <strlen>
10002228:	d8802e15 	stw	r2,184(sp)
1000222c:	da003d17 	ldw	r8,244(sp)
10002230:	103c340e 	bge	r2,zero,10001304 <__alt_data_end+0xf8001304>
10002234:	0005883a 	mov	r2,zero
10002238:	003c3206 	br	10001304 <__alt_data_end+0xf8001304>
1000223c:	d9002c17 	ldw	r4,176(sp)
10002240:	d9801e04 	addi	r6,sp,120
10002244:	b80b883a 	mov	r5,r23
10002248:	0007ca40 	call	10007ca4 <__sprint_r>
1000224c:	103a181e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
10002250:	d8c02017 	ldw	r3,128(sp)
10002254:	d8801f17 	ldw	r2,124(sp)
10002258:	da000404 	addi	r8,sp,16
1000225c:	d9403317 	ldw	r5,204(sp)
10002260:	10800044 	addi	r2,r2,1
10002264:	44000015 	stw	r16,0(r8)
10002268:	28c7883a 	add	r3,r5,r3
1000226c:	003b7d06 	br	10001064 <__alt_data_end+0xf8001064>
10002270:	01040074 	movhi	r4,4097
10002274:	21125584 	addi	r4,r4,18774
10002278:	d9003515 	stw	r4,212(sp)
1000227c:	003b1406 	br	10000ed0 <__alt_data_end+0xf8000ed0>
10002280:	013fffc4 	movi	r4,-1
10002284:	003a3506 	br	10000b5c <__alt_data_end+0xf8000b5c>
10002288:	0023883a 	mov	r17,zero
1000228c:	003d9d06 	br	10001904 <__alt_data_end+0xf8001904>
10002290:	d9002c17 	ldw	r4,176(sp)
10002294:	d9801e04 	addi	r6,sp,120
10002298:	b80b883a 	mov	r5,r23
1000229c:	0007ca40 	call	10007ca4 <__sprint_r>
100022a0:	103a031e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
100022a4:	d8c02017 	ldw	r3,128(sp)
100022a8:	da000404 	addi	r8,sp,16
100022ac:	003d9406 	br	10001900 <__alt_data_end+0xf8001900>
100022b0:	01040074 	movhi	r4,4097
100022b4:	21125184 	addi	r4,r4,18758
100022b8:	d9002b15 	stw	r4,172(sp)
100022bc:	d9002b17 	ldw	r4,172(sp)
100022c0:	1c47883a 	add	r3,r3,r17
100022c4:	10800044 	addi	r2,r2,1
100022c8:	41000015 	stw	r4,0(r8)
100022cc:	44400115 	stw	r17,4(r8)
100022d0:	d8c02015 	stw	r3,128(sp)
100022d4:	d8801f15 	stw	r2,124(sp)
100022d8:	010001c4 	movi	r4,7
100022dc:	20bfd716 	blt	r4,r2,1000223c <__alt_data_end+0xf800223c>
100022e0:	42000204 	addi	r8,r8,8
100022e4:	003fdd06 	br	1000225c <__alt_data_end+0xf800225c>
100022e8:	d9002c17 	ldw	r4,176(sp)
100022ec:	d9801e04 	addi	r6,sp,120
100022f0:	b80b883a 	mov	r5,r23
100022f4:	0007ca40 	call	10007ca4 <__sprint_r>
100022f8:	1039ed1e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
100022fc:	d8802617 	ldw	r2,152(sp)
10002300:	d8c02017 	ldw	r3,128(sp)
10002304:	da000404 	addi	r8,sp,16
10002308:	003e1006 	br	10001b4c <__alt_data_end+0xf8001b4c>
1000230c:	00800044 	movi	r2,1
10002310:	10803fcc 	andi	r2,r2,255
10002314:	00c00044 	movi	r3,1
10002318:	10fa3526 	beq	r2,r3,10000bf0 <__alt_data_end+0xf8000bf0>
1000231c:	00c00084 	movi	r3,2
10002320:	10fbcb26 	beq	r2,r3,10001250 <__alt_data_end+0xf8001250>
10002324:	003a8f06 	br	10000d64 <__alt_data_end+0xf8000d64>
10002328:	01040074 	movhi	r4,4097
1000232c:	21125584 	addi	r4,r4,18774
10002330:	d9003515 	stw	r4,212(sp)
10002334:	003b7606 	br	10001110 <__alt_data_end+0xf8001110>
10002338:	d8802917 	ldw	r2,164(sp)
1000233c:	00c00184 	movi	r3,6
10002340:	1880012e 	bgeu	r3,r2,10002348 <___vfprintf_internal_r+0x1ca0>
10002344:	1805883a 	mov	r2,r3
10002348:	d8802e15 	stw	r2,184(sp)
1000234c:	1000ef16 	blt	r2,zero,1000270c <___vfprintf_internal_r+0x2064>
10002350:	04040074 	movhi	r16,4097
10002354:	d8802a15 	stw	r2,168(sp)
10002358:	dcc02d15 	stw	r19,180(sp)
1000235c:	d8002915 	stw	zero,164(sp)
10002360:	d8003215 	stw	zero,200(sp)
10002364:	84124f04 	addi	r16,r16,18748
10002368:	0039883a 	mov	fp,zero
1000236c:	003aa206 	br	10000df8 <__alt_data_end+0xf8000df8>
10002370:	0021883a 	mov	r16,zero
10002374:	003e0706 	br	10001b94 <__alt_data_end+0xf8001b94>
10002378:	d9002c17 	ldw	r4,176(sp)
1000237c:	d9801e04 	addi	r6,sp,120
10002380:	b80b883a 	mov	r5,r23
10002384:	0007ca40 	call	10007ca4 <__sprint_r>
10002388:	1039c91e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
1000238c:	d8802617 	ldw	r2,152(sp)
10002390:	d9403317 	ldw	r5,204(sp)
10002394:	d8c02017 	ldw	r3,128(sp)
10002398:	da000404 	addi	r8,sp,16
1000239c:	2885c83a 	sub	r2,r5,r2
100023a0:	003dfb06 	br	10001b90 <__alt_data_end+0xf8001b90>
100023a4:	9080004c 	andi	r2,r18,1
100023a8:	103e8f1e 	bne	r2,zero,10001de8 <__alt_data_end+0xf8001de8>
100023ac:	d8802117 	ldw	r2,132(sp)
100023b0:	003e9e06 	br	10001e2c <__alt_data_end+0xf8001e2c>
100023b4:	1025883a 	mov	r18,r2
100023b8:	0039883a 	mov	fp,zero
100023bc:	00800084 	movi	r2,2
100023c0:	003fd306 	br	10002310 <__alt_data_end+0xf8002310>
100023c4:	07000b44 	movi	fp,45
100023c8:	df002785 	stb	fp,158(sp)
100023cc:	003a4006 	br	10000cd0 <__alt_data_end+0xf8000cd0>
100023d0:	00c00b44 	movi	r3,45
100023d4:	d8c02785 	stb	r3,158(sp)
100023d8:	d8802a15 	stw	r2,168(sp)
100023dc:	dc802b17 	ldw	r18,172(sp)
100023e0:	d8002915 	stw	zero,164(sp)
100023e4:	07000b44 	movi	fp,45
100023e8:	003a8006 	br	10000dec <__alt_data_end+0xf8000dec>
100023ec:	04040074 	movhi	r16,4097
100023f0:	84124404 	addi	r16,r16,18704
100023f4:	003f4706 	br	10002114 <__alt_data_end+0xf8002114>
100023f8:	d8c02d17 	ldw	r3,180(sp)
100023fc:	d9002f17 	ldw	r4,188(sp)
10002400:	18800017 	ldw	r2,0(r3)
10002404:	18c00104 	addi	r3,r3,4
10002408:	d8c02d15 	stw	r3,180(sp)
1000240c:	11000015 	stw	r4,0(r2)
10002410:	0038dd06 	br	10000788 <__alt_data_end+0xf8000788>
10002414:	dd802617 	ldw	r22,152(sp)
10002418:	00bfff44 	movi	r2,-3
1000241c:	b0801c16 	blt	r22,r2,10002490 <___vfprintf_internal_r+0x1de8>
10002420:	d9402917 	ldw	r5,164(sp)
10002424:	2d801a16 	blt	r5,r22,10002490 <___vfprintf_internal_r+0x1de8>
10002428:	dd803215 	stw	r22,200(sp)
1000242c:	003e8906 	br	10001e54 <__alt_data_end+0xf8001e54>
10002430:	01040074 	movhi	r4,4097
10002434:	21125184 	addi	r4,r4,18758
10002438:	d9002b15 	stw	r4,172(sp)
1000243c:	003c9106 	br	10001684 <__alt_data_end+0xf8001684>
10002440:	e005883a 	mov	r2,fp
10002444:	003e7906 	br	10001e2c <__alt_data_end+0xf8001e2c>
10002448:	d9402917 	ldw	r5,164(sp)
1000244c:	df002783 	ldbu	fp,158(sp)
10002450:	dcc02d15 	stw	r19,180(sp)
10002454:	d9402a15 	stw	r5,168(sp)
10002458:	d9402e15 	stw	r5,184(sp)
1000245c:	d8002915 	stw	zero,164(sp)
10002460:	d8003215 	stw	zero,200(sp)
10002464:	003a5d06 	br	10000ddc <__alt_data_end+0xf8000ddc>
10002468:	9080004c 	andi	r2,r18,1
1000246c:	0039883a 	mov	fp,zero
10002470:	10000426 	beq	r2,zero,10002484 <___vfprintf_internal_r+0x1ddc>
10002474:	00800c04 	movi	r2,48
10002478:	dc001dc4 	addi	r16,sp,119
1000247c:	d8801dc5 	stb	r2,119(sp)
10002480:	003b8006 	br	10001284 <__alt_data_end+0xf8001284>
10002484:	d8002e15 	stw	zero,184(sp)
10002488:	dc001e04 	addi	r16,sp,120
1000248c:	003a4d06 	br	10000dc4 <__alt_data_end+0xf8000dc4>
10002490:	8c7fff84 	addi	r17,r17,-2
10002494:	b5bfffc4 	addi	r22,r22,-1
10002498:	dd802615 	stw	r22,152(sp)
1000249c:	dc4022c5 	stb	r17,139(sp)
100024a0:	b000bf16 	blt	r22,zero,100027a0 <___vfprintf_internal_r+0x20f8>
100024a4:	00800ac4 	movi	r2,43
100024a8:	d8802305 	stb	r2,140(sp)
100024ac:	00800244 	movi	r2,9
100024b0:	15807016 	blt	r2,r22,10002674 <___vfprintf_internal_r+0x1fcc>
100024b4:	00800c04 	movi	r2,48
100024b8:	b5800c04 	addi	r22,r22,48
100024bc:	d8802345 	stb	r2,141(sp)
100024c0:	dd802385 	stb	r22,142(sp)
100024c4:	d88023c4 	addi	r2,sp,143
100024c8:	df0022c4 	addi	fp,sp,139
100024cc:	d8c03317 	ldw	r3,204(sp)
100024d0:	1739c83a 	sub	fp,r2,fp
100024d4:	d9003317 	ldw	r4,204(sp)
100024d8:	e0c7883a 	add	r3,fp,r3
100024dc:	df003a15 	stw	fp,232(sp)
100024e0:	d8c02e15 	stw	r3,184(sp)
100024e4:	00800044 	movi	r2,1
100024e8:	1100b30e 	bge	r2,r4,100027b8 <___vfprintf_internal_r+0x2110>
100024ec:	d8c02e17 	ldw	r3,184(sp)
100024f0:	18c00044 	addi	r3,r3,1
100024f4:	d8c02e15 	stw	r3,184(sp)
100024f8:	1805883a 	mov	r2,r3
100024fc:	1800ac16 	blt	r3,zero,100027b0 <___vfprintf_internal_r+0x2108>
10002500:	d8003215 	stw	zero,200(sp)
10002504:	003e5d06 	br	10001e7c <__alt_data_end+0xf8001e7c>
10002508:	d9002c17 	ldw	r4,176(sp)
1000250c:	d9801e04 	addi	r6,sp,120
10002510:	b80b883a 	mov	r5,r23
10002514:	0007ca40 	call	10007ca4 <__sprint_r>
10002518:	1039651e 	bne	r2,zero,10000ab0 <__alt_data_end+0xf8000ab0>
1000251c:	dc402617 	ldw	r17,152(sp)
10002520:	d8c02017 	ldw	r3,128(sp)
10002524:	d8801f17 	ldw	r2,124(sp)
10002528:	da000404 	addi	r8,sp,16
1000252c:	003ed606 	br	10002088 <__alt_data_end+0xf8002088>
10002530:	582b883a 	mov	r21,r11
10002534:	d8002915 	stw	zero,164(sp)
10002538:	0038bd06 	br	10000830 <__alt_data_end+0xf8000830>
1000253c:	d8802917 	ldw	r2,164(sp)
10002540:	103e071e 	bne	r2,zero,10001d60 <__alt_data_end+0xf8001d60>
10002544:	dc002915 	stw	r16,164(sp)
10002548:	003e0506 	br	10001d60 <__alt_data_end+0xf8001d60>
1000254c:	d9002917 	ldw	r4,164(sp)
10002550:	20c00044 	addi	r3,r4,1
10002554:	003e0f06 	br	10001d94 <__alt_data_end+0xf8001d94>
10002558:	01400184 	movi	r5,6
1000255c:	d9402915 	stw	r5,164(sp)
10002560:	003dff06 	br	10001d60 <__alt_data_end+0xf8001d60>
10002564:	d8802104 	addi	r2,sp,132
10002568:	d8800315 	stw	r2,12(sp)
1000256c:	d8802504 	addi	r2,sp,148
10002570:	d8800215 	stw	r2,8(sp)
10002574:	d8802604 	addi	r2,sp,152
10002578:	d8800115 	stw	r2,4(sp)
1000257c:	d8802917 	ldw	r2,164(sp)
10002580:	d9403617 	ldw	r5,216(sp)
10002584:	d9002c17 	ldw	r4,176(sp)
10002588:	d8800015 	stw	r2,0(sp)
1000258c:	01c000c4 	movi	r7,3
10002590:	980d883a 	mov	r6,r19
10002594:	da003d15 	stw	r8,244(sp)
10002598:	0002ccc0 	call	10002ccc <_dtoa_r>
1000259c:	d8c02917 	ldw	r3,164(sp)
100025a0:	da003d17 	ldw	r8,244(sp)
100025a4:	1021883a 	mov	r16,r2
100025a8:	10f9883a 	add	fp,r2,r3
100025ac:	81000007 	ldb	r4,0(r16)
100025b0:	00800c04 	movi	r2,48
100025b4:	20805e26 	beq	r4,r2,10002730 <___vfprintf_internal_r+0x2088>
100025b8:	d8c02617 	ldw	r3,152(sp)
100025bc:	e0f9883a 	add	fp,fp,r3
100025c0:	003e0a06 	br	10001dec <__alt_data_end+0xf8001dec>
100025c4:	00c00b44 	movi	r3,45
100025c8:	24e0003c 	xorhi	r19,r4,32768
100025cc:	d8c02a05 	stb	r3,168(sp)
100025d0:	003de906 	br	10001d78 <__alt_data_end+0xf8001d78>
100025d4:	d8c03217 	ldw	r3,200(sp)
100025d8:	00c07a0e 	bge	zero,r3,100027c4 <___vfprintf_internal_r+0x211c>
100025dc:	00800044 	movi	r2,1
100025e0:	d9003317 	ldw	r4,204(sp)
100025e4:	1105883a 	add	r2,r2,r4
100025e8:	d8802e15 	stw	r2,184(sp)
100025ec:	10004e16 	blt	r2,zero,10002728 <___vfprintf_internal_r+0x2080>
100025f0:	044019c4 	movi	r17,103
100025f4:	003e2106 	br	10001e7c <__alt_data_end+0xf8001e7c>
100025f8:	d9002917 	ldw	r4,164(sp)
100025fc:	d8802104 	addi	r2,sp,132
10002600:	d8800315 	stw	r2,12(sp)
10002604:	d9000015 	stw	r4,0(sp)
10002608:	d8802504 	addi	r2,sp,148
1000260c:	d9403617 	ldw	r5,216(sp)
10002610:	d9002c17 	ldw	r4,176(sp)
10002614:	d8800215 	stw	r2,8(sp)
10002618:	d8802604 	addi	r2,sp,152
1000261c:	d8800115 	stw	r2,4(sp)
10002620:	01c000c4 	movi	r7,3
10002624:	980d883a 	mov	r6,r19
10002628:	da003d15 	stw	r8,244(sp)
1000262c:	0002ccc0 	call	10002ccc <_dtoa_r>
10002630:	d8c02917 	ldw	r3,164(sp)
10002634:	da003d17 	ldw	r8,244(sp)
10002638:	1021883a 	mov	r16,r2
1000263c:	00801184 	movi	r2,70
10002640:	80f9883a 	add	fp,r16,r3
10002644:	88bfd926 	beq	r17,r2,100025ac <__alt_data_end+0xf80025ac>
10002648:	003de806 	br	10001dec <__alt_data_end+0xf8001dec>
1000264c:	d9002917 	ldw	r4,164(sp)
10002650:	00c04d0e 	bge	zero,r3,10002788 <___vfprintf_internal_r+0x20e0>
10002654:	2000441e 	bne	r4,zero,10002768 <___vfprintf_internal_r+0x20c0>
10002658:	9480004c 	andi	r18,r18,1
1000265c:	9000421e 	bne	r18,zero,10002768 <___vfprintf_internal_r+0x20c0>
10002660:	1805883a 	mov	r2,r3
10002664:	18007016 	blt	r3,zero,10002828 <___vfprintf_internal_r+0x2180>
10002668:	d8c03217 	ldw	r3,200(sp)
1000266c:	d8c02e15 	stw	r3,184(sp)
10002670:	003e0206 	br	10001e7c <__alt_data_end+0xf8001e7c>
10002674:	df0022c4 	addi	fp,sp,139
10002678:	dc002915 	stw	r16,164(sp)
1000267c:	4027883a 	mov	r19,r8
10002680:	e021883a 	mov	r16,fp
10002684:	b009883a 	mov	r4,r22
10002688:	01400284 	movi	r5,10
1000268c:	000a6580 	call	1000a658 <__modsi3>
10002690:	10800c04 	addi	r2,r2,48
10002694:	843fffc4 	addi	r16,r16,-1
10002698:	b009883a 	mov	r4,r22
1000269c:	01400284 	movi	r5,10
100026a0:	80800005 	stb	r2,0(r16)
100026a4:	000a5d40 	call	1000a5d4 <__divsi3>
100026a8:	102d883a 	mov	r22,r2
100026ac:	00800244 	movi	r2,9
100026b0:	15bff416 	blt	r2,r22,10002684 <__alt_data_end+0xf8002684>
100026b4:	9811883a 	mov	r8,r19
100026b8:	b0800c04 	addi	r2,r22,48
100026bc:	8027883a 	mov	r19,r16
100026c0:	997fffc4 	addi	r5,r19,-1
100026c4:	98bfffc5 	stb	r2,-1(r19)
100026c8:	dc002917 	ldw	r16,164(sp)
100026cc:	2f006a2e 	bgeu	r5,fp,10002878 <___vfprintf_internal_r+0x21d0>
100026d0:	d9c02384 	addi	r7,sp,142
100026d4:	3ccfc83a 	sub	r7,r7,r19
100026d8:	d9002344 	addi	r4,sp,141
100026dc:	e1cf883a 	add	r7,fp,r7
100026e0:	00000106 	br	100026e8 <___vfprintf_internal_r+0x2040>
100026e4:	28800003 	ldbu	r2,0(r5)
100026e8:	20800005 	stb	r2,0(r4)
100026ec:	21000044 	addi	r4,r4,1
100026f0:	29400044 	addi	r5,r5,1
100026f4:	393ffb1e 	bne	r7,r4,100026e4 <__alt_data_end+0xf80026e4>
100026f8:	d8802304 	addi	r2,sp,140
100026fc:	14c5c83a 	sub	r2,r2,r19
10002700:	d8c02344 	addi	r3,sp,141
10002704:	1885883a 	add	r2,r3,r2
10002708:	003f7006 	br	100024cc <__alt_data_end+0xf80024cc>
1000270c:	0005883a 	mov	r2,zero
10002710:	003f0f06 	br	10002350 <__alt_data_end+0xf8002350>
10002714:	d8c03217 	ldw	r3,200(sp)
10002718:	18c00044 	addi	r3,r3,1
1000271c:	d8c02e15 	stw	r3,184(sp)
10002720:	1805883a 	mov	r2,r3
10002724:	183fb20e 	bge	r3,zero,100025f0 <__alt_data_end+0xf80025f0>
10002728:	0005883a 	mov	r2,zero
1000272c:	003fb006 	br	100025f0 <__alt_data_end+0xf80025f0>
10002730:	d9003617 	ldw	r4,216(sp)
10002734:	000d883a 	mov	r6,zero
10002738:	000f883a 	mov	r7,zero
1000273c:	980b883a 	mov	r5,r19
10002740:	d8c03c15 	stw	r3,240(sp)
10002744:	da003d15 	stw	r8,244(sp)
10002748:	000b91c0 	call	1000b91c <__eqdf2>
1000274c:	d8c03c17 	ldw	r3,240(sp)
10002750:	da003d17 	ldw	r8,244(sp)
10002754:	103f9826 	beq	r2,zero,100025b8 <__alt_data_end+0xf80025b8>
10002758:	00800044 	movi	r2,1
1000275c:	10c7c83a 	sub	r3,r2,r3
10002760:	d8c02615 	stw	r3,152(sp)
10002764:	003f9506 	br	100025bc <__alt_data_end+0xf80025bc>
10002768:	d9002917 	ldw	r4,164(sp)
1000276c:	d8c03217 	ldw	r3,200(sp)
10002770:	20800044 	addi	r2,r4,1
10002774:	1885883a 	add	r2,r3,r2
10002778:	d8802e15 	stw	r2,184(sp)
1000277c:	103dbf0e 	bge	r2,zero,10001e7c <__alt_data_end+0xf8001e7c>
10002780:	0005883a 	mov	r2,zero
10002784:	003dbd06 	br	10001e7c <__alt_data_end+0xf8001e7c>
10002788:	2000211e 	bne	r4,zero,10002810 <___vfprintf_internal_r+0x2168>
1000278c:	9480004c 	andi	r18,r18,1
10002790:	90001f1e 	bne	r18,zero,10002810 <___vfprintf_internal_r+0x2168>
10002794:	00800044 	movi	r2,1
10002798:	d8802e15 	stw	r2,184(sp)
1000279c:	003db706 	br	10001e7c <__alt_data_end+0xf8001e7c>
100027a0:	00800b44 	movi	r2,45
100027a4:	05adc83a 	sub	r22,zero,r22
100027a8:	d8802305 	stb	r2,140(sp)
100027ac:	003f3f06 	br	100024ac <__alt_data_end+0xf80024ac>
100027b0:	0005883a 	mov	r2,zero
100027b4:	003f5206 	br	10002500 <__alt_data_end+0xf8002500>
100027b8:	90a4703a 	and	r18,r18,r2
100027bc:	903f4e26 	beq	r18,zero,100024f8 <__alt_data_end+0xf80024f8>
100027c0:	003f4a06 	br	100024ec <__alt_data_end+0xf80024ec>
100027c4:	00800084 	movi	r2,2
100027c8:	10c5c83a 	sub	r2,r2,r3
100027cc:	003f8406 	br	100025e0 <__alt_data_end+0xf80025e0>
100027d0:	d8802d17 	ldw	r2,180(sp)
100027d4:	d9002d17 	ldw	r4,180(sp)
100027d8:	ac400043 	ldbu	r17,1(r21)
100027dc:	10800017 	ldw	r2,0(r2)
100027e0:	582b883a 	mov	r21,r11
100027e4:	d8802915 	stw	r2,164(sp)
100027e8:	20800104 	addi	r2,r4,4
100027ec:	d9002917 	ldw	r4,164(sp)
100027f0:	d8802d15 	stw	r2,180(sp)
100027f4:	203e7a0e 	bge	r4,zero,100021e0 <__alt_data_end+0xf80021e0>
100027f8:	8c403fcc 	andi	r17,r17,255
100027fc:	00bfffc4 	movi	r2,-1
10002800:	8c40201c 	xori	r17,r17,128
10002804:	d8802915 	stw	r2,164(sp)
10002808:	8c7fe004 	addi	r17,r17,-128
1000280c:	00380706 	br	1000082c <__alt_data_end+0xf800082c>
10002810:	d8c02917 	ldw	r3,164(sp)
10002814:	18c00084 	addi	r3,r3,2
10002818:	d8c02e15 	stw	r3,184(sp)
1000281c:	1805883a 	mov	r2,r3
10002820:	183d960e 	bge	r3,zero,10001e7c <__alt_data_end+0xf8001e7c>
10002824:	003fd606 	br	10002780 <__alt_data_end+0xf8002780>
10002828:	0005883a 	mov	r2,zero
1000282c:	003f8e06 	br	10002668 <__alt_data_end+0xf8002668>
10002830:	9080004c 	andi	r2,r18,1
10002834:	103f811e 	bne	r2,zero,1000263c <__alt_data_end+0xf800263c>
10002838:	d8802117 	ldw	r2,132(sp)
1000283c:	1405c83a 	sub	r2,r2,r16
10002840:	d8803315 	stw	r2,204(sp)
10002844:	b47ef326 	beq	r22,r17,10002414 <__alt_data_end+0xf8002414>
10002848:	dd802617 	ldw	r22,152(sp)
1000284c:	003f1106 	br	10002494 <__alt_data_end+0xf8002494>
10002850:	d9c02785 	stb	r7,158(sp)
10002854:	00390406 	br	10000c68 <__alt_data_end+0xf8000c68>
10002858:	d9c02785 	stb	r7,158(sp)
1000285c:	0038d306 	br	10000bac <__alt_data_end+0xf8000bac>
10002860:	d9c02785 	stb	r7,158(sp)
10002864:	003a6106 	br	100011ec <__alt_data_end+0xf80011ec>
10002868:	d9c02785 	stb	r7,158(sp)
1000286c:	003af806 	br	10001450 <__alt_data_end+0xf8001450>
10002870:	0005883a 	mov	r2,zero
10002874:	003d7e06 	br	10001e70 <__alt_data_end+0xf8001e70>
10002878:	d8802344 	addi	r2,sp,141
1000287c:	003f1306 	br	100024cc <__alt_data_end+0xf80024cc>
10002880:	d9c02785 	stb	r7,158(sp)
10002884:	00392306 	br	10000d14 <__alt_data_end+0xf8000d14>
10002888:	d9c02785 	stb	r7,158(sp)
1000288c:	003aa906 	br	10001334 <__alt_data_end+0xf8001334>
10002890:	d9c02785 	stb	r7,158(sp)
10002894:	003a3d06 	br	1000118c <__alt_data_end+0xf800118c>
10002898:	d9c02785 	stb	r7,158(sp)
1000289c:	003aca06 	br	100013c8 <__alt_data_end+0xf80013c8>

100028a0 <__vfprintf_internal>:
100028a0:	00840074 	movhi	r2,4097
100028a4:	1099da04 	addi	r2,r2,26472
100028a8:	300f883a 	mov	r7,r6
100028ac:	280d883a 	mov	r6,r5
100028b0:	200b883a 	mov	r5,r4
100028b4:	11000017 	ldw	r4,0(r2)
100028b8:	00006a81 	jmpi	100006a8 <___vfprintf_internal_r>

100028bc <__sbprintf>:
100028bc:	2880030b 	ldhu	r2,12(r5)
100028c0:	2ac01917 	ldw	r11,100(r5)
100028c4:	2a80038b 	ldhu	r10,14(r5)
100028c8:	2a400717 	ldw	r9,28(r5)
100028cc:	2a000917 	ldw	r8,36(r5)
100028d0:	defee204 	addi	sp,sp,-1144
100028d4:	00c10004 	movi	r3,1024
100028d8:	dc011a15 	stw	r16,1128(sp)
100028dc:	10bfff4c 	andi	r2,r2,65533
100028e0:	2821883a 	mov	r16,r5
100028e4:	d8cb883a 	add	r5,sp,r3
100028e8:	dc811c15 	stw	r18,1136(sp)
100028ec:	dc411b15 	stw	r17,1132(sp)
100028f0:	dfc11d15 	stw	ra,1140(sp)
100028f4:	2025883a 	mov	r18,r4
100028f8:	d881030d 	sth	r2,1036(sp)
100028fc:	dac11915 	stw	r11,1124(sp)
10002900:	da81038d 	sth	r10,1038(sp)
10002904:	da410715 	stw	r9,1052(sp)
10002908:	da010915 	stw	r8,1060(sp)
1000290c:	dec10015 	stw	sp,1024(sp)
10002910:	dec10415 	stw	sp,1040(sp)
10002914:	d8c10215 	stw	r3,1032(sp)
10002918:	d8c10515 	stw	r3,1044(sp)
1000291c:	d8010615 	stw	zero,1048(sp)
10002920:	00006a80 	call	100006a8 <___vfprintf_internal_r>
10002924:	1023883a 	mov	r17,r2
10002928:	10000416 	blt	r2,zero,1000293c <__sbprintf+0x80>
1000292c:	d9410004 	addi	r5,sp,1024
10002930:	9009883a 	mov	r4,r18
10002934:	00045700 	call	10004570 <_fflush_r>
10002938:	10000d1e 	bne	r2,zero,10002970 <__sbprintf+0xb4>
1000293c:	d881030b 	ldhu	r2,1036(sp)
10002940:	1080100c 	andi	r2,r2,64
10002944:	10000326 	beq	r2,zero,10002954 <__sbprintf+0x98>
10002948:	8080030b 	ldhu	r2,12(r16)
1000294c:	10801014 	ori	r2,r2,64
10002950:	8080030d 	sth	r2,12(r16)
10002954:	8805883a 	mov	r2,r17
10002958:	dfc11d17 	ldw	ra,1140(sp)
1000295c:	dc811c17 	ldw	r18,1136(sp)
10002960:	dc411b17 	ldw	r17,1132(sp)
10002964:	dc011a17 	ldw	r16,1128(sp)
10002968:	dec11e04 	addi	sp,sp,1144
1000296c:	f800283a 	ret
10002970:	047fffc4 	movi	r17,-1
10002974:	003ff106 	br	1000293c <__alt_data_end+0xf800293c>

10002978 <__swsetup_r>:
10002978:	00840074 	movhi	r2,4097
1000297c:	defffd04 	addi	sp,sp,-12
10002980:	1099da04 	addi	r2,r2,26472
10002984:	dc400115 	stw	r17,4(sp)
10002988:	2023883a 	mov	r17,r4
1000298c:	11000017 	ldw	r4,0(r2)
10002990:	dc000015 	stw	r16,0(sp)
10002994:	dfc00215 	stw	ra,8(sp)
10002998:	2821883a 	mov	r16,r5
1000299c:	20000226 	beq	r4,zero,100029a8 <__swsetup_r+0x30>
100029a0:	20800e17 	ldw	r2,56(r4)
100029a4:	10003126 	beq	r2,zero,10002a6c <__swsetup_r+0xf4>
100029a8:	8080030b 	ldhu	r2,12(r16)
100029ac:	10c0020c 	andi	r3,r2,8
100029b0:	1009883a 	mov	r4,r2
100029b4:	18000f26 	beq	r3,zero,100029f4 <__swsetup_r+0x7c>
100029b8:	80c00417 	ldw	r3,16(r16)
100029bc:	18001526 	beq	r3,zero,10002a14 <__swsetup_r+0x9c>
100029c0:	1100004c 	andi	r4,r2,1
100029c4:	20001c1e 	bne	r4,zero,10002a38 <__swsetup_r+0xc0>
100029c8:	1080008c 	andi	r2,r2,2
100029cc:	1000291e 	bne	r2,zero,10002a74 <__swsetup_r+0xfc>
100029d0:	80800517 	ldw	r2,20(r16)
100029d4:	80800215 	stw	r2,8(r16)
100029d8:	18001c26 	beq	r3,zero,10002a4c <__swsetup_r+0xd4>
100029dc:	0005883a 	mov	r2,zero
100029e0:	dfc00217 	ldw	ra,8(sp)
100029e4:	dc400117 	ldw	r17,4(sp)
100029e8:	dc000017 	ldw	r16,0(sp)
100029ec:	dec00304 	addi	sp,sp,12
100029f0:	f800283a 	ret
100029f4:	2080040c 	andi	r2,r4,16
100029f8:	10002e26 	beq	r2,zero,10002ab4 <__swsetup_r+0x13c>
100029fc:	2080010c 	andi	r2,r4,4
10002a00:	10001e1e 	bne	r2,zero,10002a7c <__swsetup_r+0x104>
10002a04:	80c00417 	ldw	r3,16(r16)
10002a08:	20800214 	ori	r2,r4,8
10002a0c:	8080030d 	sth	r2,12(r16)
10002a10:	183feb1e 	bne	r3,zero,100029c0 <__alt_data_end+0xf80029c0>
10002a14:	1100a00c 	andi	r4,r2,640
10002a18:	01408004 	movi	r5,512
10002a1c:	217fe826 	beq	r4,r5,100029c0 <__alt_data_end+0xf80029c0>
10002a20:	800b883a 	mov	r5,r16
10002a24:	8809883a 	mov	r4,r17
10002a28:	00054f00 	call	100054f0 <__smakebuf_r>
10002a2c:	8080030b 	ldhu	r2,12(r16)
10002a30:	80c00417 	ldw	r3,16(r16)
10002a34:	003fe206 	br	100029c0 <__alt_data_end+0xf80029c0>
10002a38:	80800517 	ldw	r2,20(r16)
10002a3c:	80000215 	stw	zero,8(r16)
10002a40:	0085c83a 	sub	r2,zero,r2
10002a44:	80800615 	stw	r2,24(r16)
10002a48:	183fe41e 	bne	r3,zero,100029dc <__alt_data_end+0xf80029dc>
10002a4c:	80c0030b 	ldhu	r3,12(r16)
10002a50:	0005883a 	mov	r2,zero
10002a54:	1900200c 	andi	r4,r3,128
10002a58:	203fe126 	beq	r4,zero,100029e0 <__alt_data_end+0xf80029e0>
10002a5c:	18c01014 	ori	r3,r3,64
10002a60:	80c0030d 	sth	r3,12(r16)
10002a64:	00bfffc4 	movi	r2,-1
10002a68:	003fdd06 	br	100029e0 <__alt_data_end+0xf80029e0>
10002a6c:	000494c0 	call	1000494c <__sinit>
10002a70:	003fcd06 	br	100029a8 <__alt_data_end+0xf80029a8>
10002a74:	0005883a 	mov	r2,zero
10002a78:	003fd606 	br	100029d4 <__alt_data_end+0xf80029d4>
10002a7c:	81400c17 	ldw	r5,48(r16)
10002a80:	28000626 	beq	r5,zero,10002a9c <__swsetup_r+0x124>
10002a84:	80801004 	addi	r2,r16,64
10002a88:	28800326 	beq	r5,r2,10002a98 <__swsetup_r+0x120>
10002a8c:	8809883a 	mov	r4,r17
10002a90:	0004ac00 	call	10004ac0 <_free_r>
10002a94:	8100030b 	ldhu	r4,12(r16)
10002a98:	80000c15 	stw	zero,48(r16)
10002a9c:	80c00417 	ldw	r3,16(r16)
10002aa0:	00bff6c4 	movi	r2,-37
10002aa4:	1108703a 	and	r4,r2,r4
10002aa8:	80000115 	stw	zero,4(r16)
10002aac:	80c00015 	stw	r3,0(r16)
10002ab0:	003fd506 	br	10002a08 <__alt_data_end+0xf8002a08>
10002ab4:	00800244 	movi	r2,9
10002ab8:	88800015 	stw	r2,0(r17)
10002abc:	20801014 	ori	r2,r4,64
10002ac0:	8080030d 	sth	r2,12(r16)
10002ac4:	00bfffc4 	movi	r2,-1
10002ac8:	003fc506 	br	100029e0 <__alt_data_end+0xf80029e0>

10002acc <quorem>:
10002acc:	defff704 	addi	sp,sp,-36
10002ad0:	dc800215 	stw	r18,8(sp)
10002ad4:	20800417 	ldw	r2,16(r4)
10002ad8:	2c800417 	ldw	r18,16(r5)
10002adc:	dfc00815 	stw	ra,32(sp)
10002ae0:	ddc00715 	stw	r23,28(sp)
10002ae4:	dd800615 	stw	r22,24(sp)
10002ae8:	dd400515 	stw	r21,20(sp)
10002aec:	dd000415 	stw	r20,16(sp)
10002af0:	dcc00315 	stw	r19,12(sp)
10002af4:	dc400115 	stw	r17,4(sp)
10002af8:	dc000015 	stw	r16,0(sp)
10002afc:	14807116 	blt	r2,r18,10002cc4 <quorem+0x1f8>
10002b00:	94bfffc4 	addi	r18,r18,-1
10002b04:	94ad883a 	add	r22,r18,r18
10002b08:	b5ad883a 	add	r22,r22,r22
10002b0c:	2c400504 	addi	r17,r5,20
10002b10:	8da9883a 	add	r20,r17,r22
10002b14:	25400504 	addi	r21,r4,20
10002b18:	282f883a 	mov	r23,r5
10002b1c:	adad883a 	add	r22,r21,r22
10002b20:	a1400017 	ldw	r5,0(r20)
10002b24:	2021883a 	mov	r16,r4
10002b28:	b1000017 	ldw	r4,0(r22)
10002b2c:	29400044 	addi	r5,r5,1
10002b30:	000a6cc0 	call	1000a6cc <__udivsi3>
10002b34:	1027883a 	mov	r19,r2
10002b38:	10002c26 	beq	r2,zero,10002bec <quorem+0x120>
10002b3c:	a813883a 	mov	r9,r21
10002b40:	880b883a 	mov	r5,r17
10002b44:	0009883a 	mov	r4,zero
10002b48:	000d883a 	mov	r6,zero
10002b4c:	2a000017 	ldw	r8,0(r5)
10002b50:	49c00017 	ldw	r7,0(r9)
10002b54:	29400104 	addi	r5,r5,4
10002b58:	40bfffcc 	andi	r2,r8,65535
10002b5c:	14c5383a 	mul	r2,r2,r19
10002b60:	4010d43a 	srli	r8,r8,16
10002b64:	38ffffcc 	andi	r3,r7,65535
10002b68:	1105883a 	add	r2,r2,r4
10002b6c:	1008d43a 	srli	r4,r2,16
10002b70:	44d1383a 	mul	r8,r8,r19
10002b74:	198d883a 	add	r6,r3,r6
10002b78:	10ffffcc 	andi	r3,r2,65535
10002b7c:	30c7c83a 	sub	r3,r6,r3
10002b80:	380ed43a 	srli	r7,r7,16
10002b84:	4105883a 	add	r2,r8,r4
10002b88:	180dd43a 	srai	r6,r3,16
10002b8c:	113fffcc 	andi	r4,r2,65535
10002b90:	390fc83a 	sub	r7,r7,r4
10002b94:	398d883a 	add	r6,r7,r6
10002b98:	300e943a 	slli	r7,r6,16
10002b9c:	18ffffcc 	andi	r3,r3,65535
10002ba0:	1008d43a 	srli	r4,r2,16
10002ba4:	38ceb03a 	or	r7,r7,r3
10002ba8:	49c00015 	stw	r7,0(r9)
10002bac:	300dd43a 	srai	r6,r6,16
10002bb0:	4a400104 	addi	r9,r9,4
10002bb4:	a17fe52e 	bgeu	r20,r5,10002b4c <__alt_data_end+0xf8002b4c>
10002bb8:	b0800017 	ldw	r2,0(r22)
10002bbc:	10000b1e 	bne	r2,zero,10002bec <quorem+0x120>
10002bc0:	b0bfff04 	addi	r2,r22,-4
10002bc4:	a880082e 	bgeu	r21,r2,10002be8 <quorem+0x11c>
10002bc8:	b0ffff17 	ldw	r3,-4(r22)
10002bcc:	18000326 	beq	r3,zero,10002bdc <quorem+0x110>
10002bd0:	00000506 	br	10002be8 <quorem+0x11c>
10002bd4:	10c00017 	ldw	r3,0(r2)
10002bd8:	1800031e 	bne	r3,zero,10002be8 <quorem+0x11c>
10002bdc:	10bfff04 	addi	r2,r2,-4
10002be0:	94bfffc4 	addi	r18,r18,-1
10002be4:	a8bffb36 	bltu	r21,r2,10002bd4 <__alt_data_end+0xf8002bd4>
10002be8:	84800415 	stw	r18,16(r16)
10002bec:	b80b883a 	mov	r5,r23
10002bf0:	8009883a 	mov	r4,r16
10002bf4:	0006c300 	call	10006c30 <__mcmp>
10002bf8:	10002616 	blt	r2,zero,10002c94 <quorem+0x1c8>
10002bfc:	9cc00044 	addi	r19,r19,1
10002c00:	a805883a 	mov	r2,r21
10002c04:	000b883a 	mov	r5,zero
10002c08:	11000017 	ldw	r4,0(r2)
10002c0c:	89800017 	ldw	r6,0(r17)
10002c10:	10800104 	addi	r2,r2,4
10002c14:	20ffffcc 	andi	r3,r4,65535
10002c18:	194b883a 	add	r5,r3,r5
10002c1c:	30ffffcc 	andi	r3,r6,65535
10002c20:	28c7c83a 	sub	r3,r5,r3
10002c24:	300cd43a 	srli	r6,r6,16
10002c28:	2008d43a 	srli	r4,r4,16
10002c2c:	180bd43a 	srai	r5,r3,16
10002c30:	18ffffcc 	andi	r3,r3,65535
10002c34:	2189c83a 	sub	r4,r4,r6
10002c38:	2149883a 	add	r4,r4,r5
10002c3c:	200c943a 	slli	r6,r4,16
10002c40:	8c400104 	addi	r17,r17,4
10002c44:	200bd43a 	srai	r5,r4,16
10002c48:	30c6b03a 	or	r3,r6,r3
10002c4c:	10ffff15 	stw	r3,-4(r2)
10002c50:	a47fed2e 	bgeu	r20,r17,10002c08 <__alt_data_end+0xf8002c08>
10002c54:	9485883a 	add	r2,r18,r18
10002c58:	1085883a 	add	r2,r2,r2
10002c5c:	a887883a 	add	r3,r21,r2
10002c60:	18800017 	ldw	r2,0(r3)
10002c64:	10000b1e 	bne	r2,zero,10002c94 <quorem+0x1c8>
10002c68:	18bfff04 	addi	r2,r3,-4
10002c6c:	a880082e 	bgeu	r21,r2,10002c90 <quorem+0x1c4>
10002c70:	18ffff17 	ldw	r3,-4(r3)
10002c74:	18000326 	beq	r3,zero,10002c84 <quorem+0x1b8>
10002c78:	00000506 	br	10002c90 <quorem+0x1c4>
10002c7c:	10c00017 	ldw	r3,0(r2)
10002c80:	1800031e 	bne	r3,zero,10002c90 <quorem+0x1c4>
10002c84:	10bfff04 	addi	r2,r2,-4
10002c88:	94bfffc4 	addi	r18,r18,-1
10002c8c:	a8bffb36 	bltu	r21,r2,10002c7c <__alt_data_end+0xf8002c7c>
10002c90:	84800415 	stw	r18,16(r16)
10002c94:	9805883a 	mov	r2,r19
10002c98:	dfc00817 	ldw	ra,32(sp)
10002c9c:	ddc00717 	ldw	r23,28(sp)
10002ca0:	dd800617 	ldw	r22,24(sp)
10002ca4:	dd400517 	ldw	r21,20(sp)
10002ca8:	dd000417 	ldw	r20,16(sp)
10002cac:	dcc00317 	ldw	r19,12(sp)
10002cb0:	dc800217 	ldw	r18,8(sp)
10002cb4:	dc400117 	ldw	r17,4(sp)
10002cb8:	dc000017 	ldw	r16,0(sp)
10002cbc:	dec00904 	addi	sp,sp,36
10002cc0:	f800283a 	ret
10002cc4:	0005883a 	mov	r2,zero
10002cc8:	003ff306 	br	10002c98 <__alt_data_end+0xf8002c98>

10002ccc <_dtoa_r>:
10002ccc:	20801017 	ldw	r2,64(r4)
10002cd0:	deffde04 	addi	sp,sp,-136
10002cd4:	df002015 	stw	fp,128(sp)
10002cd8:	dcc01b15 	stw	r19,108(sp)
10002cdc:	dc801a15 	stw	r18,104(sp)
10002ce0:	dc401915 	stw	r17,100(sp)
10002ce4:	dc001815 	stw	r16,96(sp)
10002ce8:	dfc02115 	stw	ra,132(sp)
10002cec:	ddc01f15 	stw	r23,124(sp)
10002cf0:	dd801e15 	stw	r22,120(sp)
10002cf4:	dd401d15 	stw	r21,116(sp)
10002cf8:	dd001c15 	stw	r20,112(sp)
10002cfc:	d9c00315 	stw	r7,12(sp)
10002d00:	2039883a 	mov	fp,r4
10002d04:	3023883a 	mov	r17,r6
10002d08:	2825883a 	mov	r18,r5
10002d0c:	dc002417 	ldw	r16,144(sp)
10002d10:	3027883a 	mov	r19,r6
10002d14:	10000826 	beq	r2,zero,10002d38 <_dtoa_r+0x6c>
10002d18:	21801117 	ldw	r6,68(r4)
10002d1c:	00c00044 	movi	r3,1
10002d20:	100b883a 	mov	r5,r2
10002d24:	1986983a 	sll	r3,r3,r6
10002d28:	11800115 	stw	r6,4(r2)
10002d2c:	10c00215 	stw	r3,8(r2)
10002d30:	00064100 	call	10006410 <_Bfree>
10002d34:	e0001015 	stw	zero,64(fp)
10002d38:	88002e16 	blt	r17,zero,10002df4 <_dtoa_r+0x128>
10002d3c:	80000015 	stw	zero,0(r16)
10002d40:	889ffc2c 	andhi	r2,r17,32752
10002d44:	00dffc34 	movhi	r3,32752
10002d48:	10c01c26 	beq	r2,r3,10002dbc <_dtoa_r+0xf0>
10002d4c:	000d883a 	mov	r6,zero
10002d50:	000f883a 	mov	r7,zero
10002d54:	9009883a 	mov	r4,r18
10002d58:	980b883a 	mov	r5,r19
10002d5c:	000b91c0 	call	1000b91c <__eqdf2>
10002d60:	10002b1e 	bne	r2,zero,10002e10 <_dtoa_r+0x144>
10002d64:	d9c02317 	ldw	r7,140(sp)
10002d68:	00800044 	movi	r2,1
10002d6c:	38800015 	stw	r2,0(r7)
10002d70:	d8802517 	ldw	r2,148(sp)
10002d74:	10019e26 	beq	r2,zero,100033f0 <_dtoa_r+0x724>
10002d78:	d8c02517 	ldw	r3,148(sp)
10002d7c:	00840074 	movhi	r2,4097
10002d80:	10925144 	addi	r2,r2,18757
10002d84:	18800015 	stw	r2,0(r3)
10002d88:	10bfffc4 	addi	r2,r2,-1
10002d8c:	dfc02117 	ldw	ra,132(sp)
10002d90:	df002017 	ldw	fp,128(sp)
10002d94:	ddc01f17 	ldw	r23,124(sp)
10002d98:	dd801e17 	ldw	r22,120(sp)
10002d9c:	dd401d17 	ldw	r21,116(sp)
10002da0:	dd001c17 	ldw	r20,112(sp)
10002da4:	dcc01b17 	ldw	r19,108(sp)
10002da8:	dc801a17 	ldw	r18,104(sp)
10002dac:	dc401917 	ldw	r17,100(sp)
10002db0:	dc001817 	ldw	r16,96(sp)
10002db4:	dec02204 	addi	sp,sp,136
10002db8:	f800283a 	ret
10002dbc:	d8c02317 	ldw	r3,140(sp)
10002dc0:	0089c3c4 	movi	r2,9999
10002dc4:	18800015 	stw	r2,0(r3)
10002dc8:	90017726 	beq	r18,zero,100033a8 <_dtoa_r+0x6dc>
10002dcc:	00840074 	movhi	r2,4097
10002dd0:	10925d04 	addi	r2,r2,18804
10002dd4:	d9002517 	ldw	r4,148(sp)
10002dd8:	203fec26 	beq	r4,zero,10002d8c <__alt_data_end+0xf8002d8c>
10002ddc:	10c000c7 	ldb	r3,3(r2)
10002de0:	1801781e 	bne	r3,zero,100033c4 <_dtoa_r+0x6f8>
10002de4:	10c000c4 	addi	r3,r2,3
10002de8:	d9802517 	ldw	r6,148(sp)
10002dec:	30c00015 	stw	r3,0(r6)
10002df0:	003fe606 	br	10002d8c <__alt_data_end+0xf8002d8c>
10002df4:	04e00034 	movhi	r19,32768
10002df8:	9cffffc4 	addi	r19,r19,-1
10002dfc:	00800044 	movi	r2,1
10002e00:	8ce6703a 	and	r19,r17,r19
10002e04:	80800015 	stw	r2,0(r16)
10002e08:	9823883a 	mov	r17,r19
10002e0c:	003fcc06 	br	10002d40 <__alt_data_end+0xf8002d40>
10002e10:	d8800204 	addi	r2,sp,8
10002e14:	d8800015 	stw	r2,0(sp)
10002e18:	d9c00104 	addi	r7,sp,4
10002e1c:	900b883a 	mov	r5,r18
10002e20:	980d883a 	mov	r6,r19
10002e24:	e009883a 	mov	r4,fp
10002e28:	8820d53a 	srli	r16,r17,20
10002e2c:	0006ffc0 	call	10006ffc <__d2b>
10002e30:	d8800915 	stw	r2,36(sp)
10002e34:	8001651e 	bne	r16,zero,100033cc <_dtoa_r+0x700>
10002e38:	dd800217 	ldw	r22,8(sp)
10002e3c:	dc000117 	ldw	r16,4(sp)
10002e40:	00800804 	movi	r2,32
10002e44:	b421883a 	add	r16,r22,r16
10002e48:	80c10c84 	addi	r3,r16,1074
10002e4c:	10c2d10e 	bge	r2,r3,10003994 <_dtoa_r+0xcc8>
10002e50:	00801004 	movi	r2,64
10002e54:	81010484 	addi	r4,r16,1042
10002e58:	10c7c83a 	sub	r3,r2,r3
10002e5c:	9108d83a 	srl	r4,r18,r4
10002e60:	88e2983a 	sll	r17,r17,r3
10002e64:	2448b03a 	or	r4,r4,r17
10002e68:	000cce40 	call	1000cce4 <__floatunsidf>
10002e6c:	017f8434 	movhi	r5,65040
10002e70:	01800044 	movi	r6,1
10002e74:	1009883a 	mov	r4,r2
10002e78:	194b883a 	add	r5,r3,r5
10002e7c:	843fffc4 	addi	r16,r16,-1
10002e80:	d9801115 	stw	r6,68(sp)
10002e84:	000d883a 	mov	r6,zero
10002e88:	01cffe34 	movhi	r7,16376
10002e8c:	000c28c0 	call	1000c28c <__subdf3>
10002e90:	0198dbf4 	movhi	r6,25455
10002e94:	01cff4f4 	movhi	r7,16339
10002e98:	3190d844 	addi	r6,r6,17249
10002e9c:	39e1e9c4 	addi	r7,r7,-30809
10002ea0:	1009883a 	mov	r4,r2
10002ea4:	180b883a 	mov	r5,r3
10002ea8:	000bb740 	call	1000bb74 <__muldf3>
10002eac:	01a2d874 	movhi	r6,35681
10002eb0:	01cff1f4 	movhi	r7,16327
10002eb4:	31b22cc4 	addi	r6,r6,-14157
10002eb8:	39e28a04 	addi	r7,r7,-30168
10002ebc:	180b883a 	mov	r5,r3
10002ec0:	1009883a 	mov	r4,r2
10002ec4:	000a7880 	call	1000a788 <__adddf3>
10002ec8:	8009883a 	mov	r4,r16
10002ecc:	1029883a 	mov	r20,r2
10002ed0:	1823883a 	mov	r17,r3
10002ed4:	000cc080 	call	1000cc08 <__floatsidf>
10002ed8:	019427f4 	movhi	r6,20639
10002edc:	01cff4f4 	movhi	r7,16339
10002ee0:	319e7ec4 	addi	r6,r6,31227
10002ee4:	39d104c4 	addi	r7,r7,17427
10002ee8:	1009883a 	mov	r4,r2
10002eec:	180b883a 	mov	r5,r3
10002ef0:	000bb740 	call	1000bb74 <__muldf3>
10002ef4:	100d883a 	mov	r6,r2
10002ef8:	180f883a 	mov	r7,r3
10002efc:	a009883a 	mov	r4,r20
10002f00:	880b883a 	mov	r5,r17
10002f04:	000a7880 	call	1000a788 <__adddf3>
10002f08:	1009883a 	mov	r4,r2
10002f0c:	180b883a 	mov	r5,r3
10002f10:	1029883a 	mov	r20,r2
10002f14:	1823883a 	mov	r17,r3
10002f18:	000cb880 	call	1000cb88 <__fixdfsi>
10002f1c:	000d883a 	mov	r6,zero
10002f20:	000f883a 	mov	r7,zero
10002f24:	a009883a 	mov	r4,r20
10002f28:	880b883a 	mov	r5,r17
10002f2c:	d8800515 	stw	r2,20(sp)
10002f30:	000ba800 	call	1000ba80 <__ledf2>
10002f34:	10028716 	blt	r2,zero,10003954 <_dtoa_r+0xc88>
10002f38:	d8c00517 	ldw	r3,20(sp)
10002f3c:	00800584 	movi	r2,22
10002f40:	10c27536 	bltu	r2,r3,10003918 <_dtoa_r+0xc4c>
10002f44:	180490fa 	slli	r2,r3,3
10002f48:	00c40074 	movhi	r3,4097
10002f4c:	18d27904 	addi	r3,r3,18916
10002f50:	1885883a 	add	r2,r3,r2
10002f54:	11000017 	ldw	r4,0(r2)
10002f58:	11400117 	ldw	r5,4(r2)
10002f5c:	900d883a 	mov	r6,r18
10002f60:	980f883a 	mov	r7,r19
10002f64:	000b9a40 	call	1000b9a4 <__gedf2>
10002f68:	00828d0e 	bge	zero,r2,100039a0 <_dtoa_r+0xcd4>
10002f6c:	d9000517 	ldw	r4,20(sp)
10002f70:	d8000e15 	stw	zero,56(sp)
10002f74:	213fffc4 	addi	r4,r4,-1
10002f78:	d9000515 	stw	r4,20(sp)
10002f7c:	b42dc83a 	sub	r22,r22,r16
10002f80:	b5bfffc4 	addi	r22,r22,-1
10002f84:	b0026f16 	blt	r22,zero,10003944 <_dtoa_r+0xc78>
10002f88:	d8000815 	stw	zero,32(sp)
10002f8c:	d9c00517 	ldw	r7,20(sp)
10002f90:	38026416 	blt	r7,zero,10003924 <_dtoa_r+0xc58>
10002f94:	b1ed883a 	add	r22,r22,r7
10002f98:	d9c00d15 	stw	r7,52(sp)
10002f9c:	d8000a15 	stw	zero,40(sp)
10002fa0:	d9800317 	ldw	r6,12(sp)
10002fa4:	00800244 	movi	r2,9
10002fa8:	11811436 	bltu	r2,r6,100033fc <_dtoa_r+0x730>
10002fac:	00800144 	movi	r2,5
10002fb0:	1184e10e 	bge	r2,r6,10004338 <_dtoa_r+0x166c>
10002fb4:	31bfff04 	addi	r6,r6,-4
10002fb8:	d9800315 	stw	r6,12(sp)
10002fbc:	0023883a 	mov	r17,zero
10002fc0:	d9800317 	ldw	r6,12(sp)
10002fc4:	008000c4 	movi	r2,3
10002fc8:	30836726 	beq	r6,r2,10003d68 <_dtoa_r+0x109c>
10002fcc:	1183410e 	bge	r2,r6,10003cd4 <_dtoa_r+0x1008>
10002fd0:	d9c00317 	ldw	r7,12(sp)
10002fd4:	00800104 	movi	r2,4
10002fd8:	38827c26 	beq	r7,r2,100039cc <_dtoa_r+0xd00>
10002fdc:	00800144 	movi	r2,5
10002fe0:	3884c41e 	bne	r7,r2,100042f4 <_dtoa_r+0x1628>
10002fe4:	00800044 	movi	r2,1
10002fe8:	d8800b15 	stw	r2,44(sp)
10002fec:	d8c00517 	ldw	r3,20(sp)
10002ff0:	d9002217 	ldw	r4,136(sp)
10002ff4:	1907883a 	add	r3,r3,r4
10002ff8:	19800044 	addi	r6,r3,1
10002ffc:	d8c00c15 	stw	r3,48(sp)
10003000:	d9800615 	stw	r6,24(sp)
10003004:	0183a40e 	bge	zero,r6,10003e98 <_dtoa_r+0x11cc>
10003008:	d9800617 	ldw	r6,24(sp)
1000300c:	3021883a 	mov	r16,r6
10003010:	e0001115 	stw	zero,68(fp)
10003014:	008005c4 	movi	r2,23
10003018:	1184c92e 	bgeu	r2,r6,10004340 <_dtoa_r+0x1674>
1000301c:	00c00044 	movi	r3,1
10003020:	00800104 	movi	r2,4
10003024:	1085883a 	add	r2,r2,r2
10003028:	11000504 	addi	r4,r2,20
1000302c:	180b883a 	mov	r5,r3
10003030:	18c00044 	addi	r3,r3,1
10003034:	313ffb2e 	bgeu	r6,r4,10003024 <__alt_data_end+0xf8003024>
10003038:	e1401115 	stw	r5,68(fp)
1000303c:	e009883a 	mov	r4,fp
10003040:	00063680 	call	10006368 <_Balloc>
10003044:	d8800715 	stw	r2,28(sp)
10003048:	e0801015 	stw	r2,64(fp)
1000304c:	00800384 	movi	r2,14
10003050:	1400f736 	bltu	r2,r16,10003430 <_dtoa_r+0x764>
10003054:	8800f626 	beq	r17,zero,10003430 <_dtoa_r+0x764>
10003058:	d9c00517 	ldw	r7,20(sp)
1000305c:	01c39a0e 	bge	zero,r7,10003ec8 <_dtoa_r+0x11fc>
10003060:	388003cc 	andi	r2,r7,15
10003064:	100490fa 	slli	r2,r2,3
10003068:	382bd13a 	srai	r21,r7,4
1000306c:	00c40074 	movhi	r3,4097
10003070:	18d27904 	addi	r3,r3,18916
10003074:	1885883a 	add	r2,r3,r2
10003078:	a8c0040c 	andi	r3,r21,16
1000307c:	12400017 	ldw	r9,0(r2)
10003080:	12000117 	ldw	r8,4(r2)
10003084:	18037926 	beq	r3,zero,10003e6c <_dtoa_r+0x11a0>
10003088:	00840074 	movhi	r2,4097
1000308c:	10926f04 	addi	r2,r2,18876
10003090:	11800817 	ldw	r6,32(r2)
10003094:	11c00917 	ldw	r7,36(r2)
10003098:	9009883a 	mov	r4,r18
1000309c:	980b883a 	mov	r5,r19
100030a0:	da001715 	stw	r8,92(sp)
100030a4:	da401615 	stw	r9,88(sp)
100030a8:	000b0340 	call	1000b034 <__divdf3>
100030ac:	da001717 	ldw	r8,92(sp)
100030b0:	da401617 	ldw	r9,88(sp)
100030b4:	ad4003cc 	andi	r21,r21,15
100030b8:	040000c4 	movi	r16,3
100030bc:	1023883a 	mov	r17,r2
100030c0:	1829883a 	mov	r20,r3
100030c4:	a8001126 	beq	r21,zero,1000310c <_dtoa_r+0x440>
100030c8:	05c40074 	movhi	r23,4097
100030cc:	bdd26f04 	addi	r23,r23,18876
100030d0:	4805883a 	mov	r2,r9
100030d4:	4007883a 	mov	r3,r8
100030d8:	a980004c 	andi	r6,r21,1
100030dc:	1009883a 	mov	r4,r2
100030e0:	a82bd07a 	srai	r21,r21,1
100030e4:	180b883a 	mov	r5,r3
100030e8:	30000426 	beq	r6,zero,100030fc <_dtoa_r+0x430>
100030ec:	b9800017 	ldw	r6,0(r23)
100030f0:	b9c00117 	ldw	r7,4(r23)
100030f4:	84000044 	addi	r16,r16,1
100030f8:	000bb740 	call	1000bb74 <__muldf3>
100030fc:	bdc00204 	addi	r23,r23,8
10003100:	a83ff51e 	bne	r21,zero,100030d8 <__alt_data_end+0xf80030d8>
10003104:	1013883a 	mov	r9,r2
10003108:	1811883a 	mov	r8,r3
1000310c:	480d883a 	mov	r6,r9
10003110:	400f883a 	mov	r7,r8
10003114:	8809883a 	mov	r4,r17
10003118:	a00b883a 	mov	r5,r20
1000311c:	000b0340 	call	1000b034 <__divdf3>
10003120:	d8800f15 	stw	r2,60(sp)
10003124:	d8c01015 	stw	r3,64(sp)
10003128:	d8c00e17 	ldw	r3,56(sp)
1000312c:	18000626 	beq	r3,zero,10003148 <_dtoa_r+0x47c>
10003130:	d9000f17 	ldw	r4,60(sp)
10003134:	d9401017 	ldw	r5,64(sp)
10003138:	000d883a 	mov	r6,zero
1000313c:	01cffc34 	movhi	r7,16368
10003140:	000ba800 	call	1000ba80 <__ledf2>
10003144:	10040b16 	blt	r2,zero,10004174 <_dtoa_r+0x14a8>
10003148:	8009883a 	mov	r4,r16
1000314c:	000cc080 	call	1000cc08 <__floatsidf>
10003150:	d9800f17 	ldw	r6,60(sp)
10003154:	d9c01017 	ldw	r7,64(sp)
10003158:	1009883a 	mov	r4,r2
1000315c:	180b883a 	mov	r5,r3
10003160:	000bb740 	call	1000bb74 <__muldf3>
10003164:	000d883a 	mov	r6,zero
10003168:	01d00734 	movhi	r7,16412
1000316c:	1009883a 	mov	r4,r2
10003170:	180b883a 	mov	r5,r3
10003174:	000a7880 	call	1000a788 <__adddf3>
10003178:	1021883a 	mov	r16,r2
1000317c:	d8800617 	ldw	r2,24(sp)
10003180:	047f3034 	movhi	r17,64704
10003184:	1c63883a 	add	r17,r3,r17
10003188:	10031826 	beq	r2,zero,10003dec <_dtoa_r+0x1120>
1000318c:	d8c00517 	ldw	r3,20(sp)
10003190:	db000617 	ldw	r12,24(sp)
10003194:	d8c01315 	stw	r3,76(sp)
10003198:	d9000b17 	ldw	r4,44(sp)
1000319c:	20038f26 	beq	r4,zero,10003fdc <_dtoa_r+0x1310>
100031a0:	60bfffc4 	addi	r2,r12,-1
100031a4:	100490fa 	slli	r2,r2,3
100031a8:	00c40074 	movhi	r3,4097
100031ac:	18d27904 	addi	r3,r3,18916
100031b0:	1885883a 	add	r2,r3,r2
100031b4:	11800017 	ldw	r6,0(r2)
100031b8:	11c00117 	ldw	r7,4(r2)
100031bc:	d8800717 	ldw	r2,28(sp)
100031c0:	0009883a 	mov	r4,zero
100031c4:	014ff834 	movhi	r5,16352
100031c8:	db001615 	stw	r12,88(sp)
100031cc:	15c00044 	addi	r23,r2,1
100031d0:	000b0340 	call	1000b034 <__divdf3>
100031d4:	800d883a 	mov	r6,r16
100031d8:	880f883a 	mov	r7,r17
100031dc:	1009883a 	mov	r4,r2
100031e0:	180b883a 	mov	r5,r3
100031e4:	000c28c0 	call	1000c28c <__subdf3>
100031e8:	d9401017 	ldw	r5,64(sp)
100031ec:	d9000f17 	ldw	r4,60(sp)
100031f0:	102b883a 	mov	r21,r2
100031f4:	d8c01215 	stw	r3,72(sp)
100031f8:	000cb880 	call	1000cb88 <__fixdfsi>
100031fc:	1009883a 	mov	r4,r2
10003200:	1029883a 	mov	r20,r2
10003204:	000cc080 	call	1000cc08 <__floatsidf>
10003208:	d9000f17 	ldw	r4,60(sp)
1000320c:	d9401017 	ldw	r5,64(sp)
10003210:	100d883a 	mov	r6,r2
10003214:	180f883a 	mov	r7,r3
10003218:	000c28c0 	call	1000c28c <__subdf3>
1000321c:	1823883a 	mov	r17,r3
10003220:	d8c00717 	ldw	r3,28(sp)
10003224:	d9401217 	ldw	r5,72(sp)
10003228:	a2000c04 	addi	r8,r20,48
1000322c:	1021883a 	mov	r16,r2
10003230:	1a000005 	stb	r8,0(r3)
10003234:	800d883a 	mov	r6,r16
10003238:	880f883a 	mov	r7,r17
1000323c:	a809883a 	mov	r4,r21
10003240:	4029883a 	mov	r20,r8
10003244:	000b9a40 	call	1000b9a4 <__gedf2>
10003248:	00841d16 	blt	zero,r2,100042c0 <_dtoa_r+0x15f4>
1000324c:	800d883a 	mov	r6,r16
10003250:	880f883a 	mov	r7,r17
10003254:	0009883a 	mov	r4,zero
10003258:	014ffc34 	movhi	r5,16368
1000325c:	000c28c0 	call	1000c28c <__subdf3>
10003260:	d9401217 	ldw	r5,72(sp)
10003264:	100d883a 	mov	r6,r2
10003268:	180f883a 	mov	r7,r3
1000326c:	a809883a 	mov	r4,r21
10003270:	000b9a40 	call	1000b9a4 <__gedf2>
10003274:	db001617 	ldw	r12,88(sp)
10003278:	00840e16 	blt	zero,r2,100042b4 <_dtoa_r+0x15e8>
1000327c:	00800044 	movi	r2,1
10003280:	13006b0e 	bge	r2,r12,10003430 <_dtoa_r+0x764>
10003284:	d9000717 	ldw	r4,28(sp)
10003288:	dd800f15 	stw	r22,60(sp)
1000328c:	dcc01015 	stw	r19,64(sp)
10003290:	2319883a 	add	r12,r4,r12
10003294:	dcc01217 	ldw	r19,72(sp)
10003298:	602d883a 	mov	r22,r12
1000329c:	dc801215 	stw	r18,72(sp)
100032a0:	b825883a 	mov	r18,r23
100032a4:	00000906 	br	100032cc <_dtoa_r+0x600>
100032a8:	000c28c0 	call	1000c28c <__subdf3>
100032ac:	a80d883a 	mov	r6,r21
100032b0:	980f883a 	mov	r7,r19
100032b4:	1009883a 	mov	r4,r2
100032b8:	180b883a 	mov	r5,r3
100032bc:	000ba800 	call	1000ba80 <__ledf2>
100032c0:	1003e816 	blt	r2,zero,10004264 <_dtoa_r+0x1598>
100032c4:	b825883a 	mov	r18,r23
100032c8:	bd83e926 	beq	r23,r22,10004270 <_dtoa_r+0x15a4>
100032cc:	a809883a 	mov	r4,r21
100032d0:	980b883a 	mov	r5,r19
100032d4:	000d883a 	mov	r6,zero
100032d8:	01d00934 	movhi	r7,16420
100032dc:	000bb740 	call	1000bb74 <__muldf3>
100032e0:	000d883a 	mov	r6,zero
100032e4:	01d00934 	movhi	r7,16420
100032e8:	8009883a 	mov	r4,r16
100032ec:	880b883a 	mov	r5,r17
100032f0:	102b883a 	mov	r21,r2
100032f4:	1827883a 	mov	r19,r3
100032f8:	000bb740 	call	1000bb74 <__muldf3>
100032fc:	180b883a 	mov	r5,r3
10003300:	1009883a 	mov	r4,r2
10003304:	1821883a 	mov	r16,r3
10003308:	1023883a 	mov	r17,r2
1000330c:	000cb880 	call	1000cb88 <__fixdfsi>
10003310:	1009883a 	mov	r4,r2
10003314:	1029883a 	mov	r20,r2
10003318:	000cc080 	call	1000cc08 <__floatsidf>
1000331c:	8809883a 	mov	r4,r17
10003320:	800b883a 	mov	r5,r16
10003324:	100d883a 	mov	r6,r2
10003328:	180f883a 	mov	r7,r3
1000332c:	000c28c0 	call	1000c28c <__subdf3>
10003330:	a5000c04 	addi	r20,r20,48
10003334:	a80d883a 	mov	r6,r21
10003338:	980f883a 	mov	r7,r19
1000333c:	1009883a 	mov	r4,r2
10003340:	180b883a 	mov	r5,r3
10003344:	95000005 	stb	r20,0(r18)
10003348:	1021883a 	mov	r16,r2
1000334c:	1823883a 	mov	r17,r3
10003350:	000ba800 	call	1000ba80 <__ledf2>
10003354:	bdc00044 	addi	r23,r23,1
10003358:	800d883a 	mov	r6,r16
1000335c:	880f883a 	mov	r7,r17
10003360:	0009883a 	mov	r4,zero
10003364:	014ffc34 	movhi	r5,16368
10003368:	103fcf0e 	bge	r2,zero,100032a8 <__alt_data_end+0xf80032a8>
1000336c:	d8c01317 	ldw	r3,76(sp)
10003370:	d8c00515 	stw	r3,20(sp)
10003374:	d9400917 	ldw	r5,36(sp)
10003378:	e009883a 	mov	r4,fp
1000337c:	00064100 	call	10006410 <_Bfree>
10003380:	d9000517 	ldw	r4,20(sp)
10003384:	d9802317 	ldw	r6,140(sp)
10003388:	d9c02517 	ldw	r7,148(sp)
1000338c:	b8000005 	stb	zero,0(r23)
10003390:	20800044 	addi	r2,r4,1
10003394:	30800015 	stw	r2,0(r6)
10003398:	3802aa26 	beq	r7,zero,10003e44 <_dtoa_r+0x1178>
1000339c:	3dc00015 	stw	r23,0(r7)
100033a0:	d8800717 	ldw	r2,28(sp)
100033a4:	003e7906 	br	10002d8c <__alt_data_end+0xf8002d8c>
100033a8:	00800434 	movhi	r2,16
100033ac:	10bfffc4 	addi	r2,r2,-1
100033b0:	88a2703a 	and	r17,r17,r2
100033b4:	883e851e 	bne	r17,zero,10002dcc <__alt_data_end+0xf8002dcc>
100033b8:	00840074 	movhi	r2,4097
100033bc:	10925a04 	addi	r2,r2,18792
100033c0:	003e8406 	br	10002dd4 <__alt_data_end+0xf8002dd4>
100033c4:	10c00204 	addi	r3,r2,8
100033c8:	003e8706 	br	10002de8 <__alt_data_end+0xf8002de8>
100033cc:	01400434 	movhi	r5,16
100033d0:	297fffc4 	addi	r5,r5,-1
100033d4:	994a703a 	and	r5,r19,r5
100033d8:	9009883a 	mov	r4,r18
100033dc:	843f0044 	addi	r16,r16,-1023
100033e0:	294ffc34 	orhi	r5,r5,16368
100033e4:	dd800217 	ldw	r22,8(sp)
100033e8:	d8001115 	stw	zero,68(sp)
100033ec:	003ea506 	br	10002e84 <__alt_data_end+0xf8002e84>
100033f0:	00840074 	movhi	r2,4097
100033f4:	10925104 	addi	r2,r2,18756
100033f8:	003e6406 	br	10002d8c <__alt_data_end+0xf8002d8c>
100033fc:	e0001115 	stw	zero,68(fp)
10003400:	000b883a 	mov	r5,zero
10003404:	e009883a 	mov	r4,fp
10003408:	00063680 	call	10006368 <_Balloc>
1000340c:	01bfffc4 	movi	r6,-1
10003410:	01c00044 	movi	r7,1
10003414:	d8800715 	stw	r2,28(sp)
10003418:	d9800c15 	stw	r6,48(sp)
1000341c:	e0801015 	stw	r2,64(fp)
10003420:	d8000315 	stw	zero,12(sp)
10003424:	d9c00b15 	stw	r7,44(sp)
10003428:	d9800615 	stw	r6,24(sp)
1000342c:	d8002215 	stw	zero,136(sp)
10003430:	d8800117 	ldw	r2,4(sp)
10003434:	10008916 	blt	r2,zero,1000365c <_dtoa_r+0x990>
10003438:	d9000517 	ldw	r4,20(sp)
1000343c:	00c00384 	movi	r3,14
10003440:	19008616 	blt	r3,r4,1000365c <_dtoa_r+0x990>
10003444:	200490fa 	slli	r2,r4,3
10003448:	00c40074 	movhi	r3,4097
1000344c:	d9802217 	ldw	r6,136(sp)
10003450:	18d27904 	addi	r3,r3,18916
10003454:	1885883a 	add	r2,r3,r2
10003458:	14000017 	ldw	r16,0(r2)
1000345c:	14400117 	ldw	r17,4(r2)
10003460:	30016316 	blt	r6,zero,100039f0 <_dtoa_r+0xd24>
10003464:	800d883a 	mov	r6,r16
10003468:	880f883a 	mov	r7,r17
1000346c:	9009883a 	mov	r4,r18
10003470:	980b883a 	mov	r5,r19
10003474:	000b0340 	call	1000b034 <__divdf3>
10003478:	180b883a 	mov	r5,r3
1000347c:	1009883a 	mov	r4,r2
10003480:	000cb880 	call	1000cb88 <__fixdfsi>
10003484:	1009883a 	mov	r4,r2
10003488:	102b883a 	mov	r21,r2
1000348c:	000cc080 	call	1000cc08 <__floatsidf>
10003490:	800d883a 	mov	r6,r16
10003494:	880f883a 	mov	r7,r17
10003498:	1009883a 	mov	r4,r2
1000349c:	180b883a 	mov	r5,r3
100034a0:	000bb740 	call	1000bb74 <__muldf3>
100034a4:	100d883a 	mov	r6,r2
100034a8:	180f883a 	mov	r7,r3
100034ac:	9009883a 	mov	r4,r18
100034b0:	980b883a 	mov	r5,r19
100034b4:	000c28c0 	call	1000c28c <__subdf3>
100034b8:	d9c00717 	ldw	r7,28(sp)
100034bc:	1009883a 	mov	r4,r2
100034c0:	a8800c04 	addi	r2,r21,48
100034c4:	38800005 	stb	r2,0(r7)
100034c8:	3dc00044 	addi	r23,r7,1
100034cc:	d9c00617 	ldw	r7,24(sp)
100034d0:	01800044 	movi	r6,1
100034d4:	180b883a 	mov	r5,r3
100034d8:	2005883a 	mov	r2,r4
100034dc:	39803826 	beq	r7,r6,100035c0 <_dtoa_r+0x8f4>
100034e0:	000d883a 	mov	r6,zero
100034e4:	01d00934 	movhi	r7,16420
100034e8:	000bb740 	call	1000bb74 <__muldf3>
100034ec:	000d883a 	mov	r6,zero
100034f0:	000f883a 	mov	r7,zero
100034f4:	1009883a 	mov	r4,r2
100034f8:	180b883a 	mov	r5,r3
100034fc:	1025883a 	mov	r18,r2
10003500:	1827883a 	mov	r19,r3
10003504:	000b91c0 	call	1000b91c <__eqdf2>
10003508:	103f9a26 	beq	r2,zero,10003374 <__alt_data_end+0xf8003374>
1000350c:	d9c00617 	ldw	r7,24(sp)
10003510:	d8c00717 	ldw	r3,28(sp)
10003514:	b829883a 	mov	r20,r23
10003518:	38bfffc4 	addi	r2,r7,-1
1000351c:	18ad883a 	add	r22,r3,r2
10003520:	00000a06 	br	1000354c <_dtoa_r+0x880>
10003524:	000bb740 	call	1000bb74 <__muldf3>
10003528:	000d883a 	mov	r6,zero
1000352c:	000f883a 	mov	r7,zero
10003530:	1009883a 	mov	r4,r2
10003534:	180b883a 	mov	r5,r3
10003538:	1025883a 	mov	r18,r2
1000353c:	1827883a 	mov	r19,r3
10003540:	b829883a 	mov	r20,r23
10003544:	000b91c0 	call	1000b91c <__eqdf2>
10003548:	103f8a26 	beq	r2,zero,10003374 <__alt_data_end+0xf8003374>
1000354c:	800d883a 	mov	r6,r16
10003550:	880f883a 	mov	r7,r17
10003554:	9009883a 	mov	r4,r18
10003558:	980b883a 	mov	r5,r19
1000355c:	000b0340 	call	1000b034 <__divdf3>
10003560:	180b883a 	mov	r5,r3
10003564:	1009883a 	mov	r4,r2
10003568:	000cb880 	call	1000cb88 <__fixdfsi>
1000356c:	1009883a 	mov	r4,r2
10003570:	102b883a 	mov	r21,r2
10003574:	000cc080 	call	1000cc08 <__floatsidf>
10003578:	800d883a 	mov	r6,r16
1000357c:	880f883a 	mov	r7,r17
10003580:	1009883a 	mov	r4,r2
10003584:	180b883a 	mov	r5,r3
10003588:	000bb740 	call	1000bb74 <__muldf3>
1000358c:	100d883a 	mov	r6,r2
10003590:	180f883a 	mov	r7,r3
10003594:	9009883a 	mov	r4,r18
10003598:	980b883a 	mov	r5,r19
1000359c:	000c28c0 	call	1000c28c <__subdf3>
100035a0:	aa000c04 	addi	r8,r21,48
100035a4:	a2000005 	stb	r8,0(r20)
100035a8:	000d883a 	mov	r6,zero
100035ac:	01d00934 	movhi	r7,16420
100035b0:	1009883a 	mov	r4,r2
100035b4:	180b883a 	mov	r5,r3
100035b8:	a5c00044 	addi	r23,r20,1
100035bc:	b53fd91e 	bne	r22,r20,10003524 <__alt_data_end+0xf8003524>
100035c0:	100d883a 	mov	r6,r2
100035c4:	180f883a 	mov	r7,r3
100035c8:	1009883a 	mov	r4,r2
100035cc:	180b883a 	mov	r5,r3
100035d0:	000a7880 	call	1000a788 <__adddf3>
100035d4:	100d883a 	mov	r6,r2
100035d8:	180f883a 	mov	r7,r3
100035dc:	8009883a 	mov	r4,r16
100035e0:	880b883a 	mov	r5,r17
100035e4:	1027883a 	mov	r19,r2
100035e8:	1825883a 	mov	r18,r3
100035ec:	000ba800 	call	1000ba80 <__ledf2>
100035f0:	10000816 	blt	r2,zero,10003614 <_dtoa_r+0x948>
100035f4:	980d883a 	mov	r6,r19
100035f8:	900f883a 	mov	r7,r18
100035fc:	8009883a 	mov	r4,r16
10003600:	880b883a 	mov	r5,r17
10003604:	000b91c0 	call	1000b91c <__eqdf2>
10003608:	103f5a1e 	bne	r2,zero,10003374 <__alt_data_end+0xf8003374>
1000360c:	ad40004c 	andi	r21,r21,1
10003610:	a83f5826 	beq	r21,zero,10003374 <__alt_data_end+0xf8003374>
10003614:	bd3fffc3 	ldbu	r20,-1(r23)
10003618:	b8bfffc4 	addi	r2,r23,-1
1000361c:	1007883a 	mov	r3,r2
10003620:	01400e44 	movi	r5,57
10003624:	d9800717 	ldw	r6,28(sp)
10003628:	00000506 	br	10003640 <_dtoa_r+0x974>
1000362c:	18ffffc4 	addi	r3,r3,-1
10003630:	11824726 	beq	r2,r6,10003f50 <_dtoa_r+0x1284>
10003634:	1d000003 	ldbu	r20,0(r3)
10003638:	102f883a 	mov	r23,r2
1000363c:	10bfffc4 	addi	r2,r2,-1
10003640:	a1003fcc 	andi	r4,r20,255
10003644:	2100201c 	xori	r4,r4,128
10003648:	213fe004 	addi	r4,r4,-128
1000364c:	217ff726 	beq	r4,r5,1000362c <__alt_data_end+0xf800362c>
10003650:	a2000044 	addi	r8,r20,1
10003654:	12000005 	stb	r8,0(r2)
10003658:	003f4606 	br	10003374 <__alt_data_end+0xf8003374>
1000365c:	d9000b17 	ldw	r4,44(sp)
10003660:	2000c826 	beq	r4,zero,10003984 <_dtoa_r+0xcb8>
10003664:	d9800317 	ldw	r6,12(sp)
10003668:	00c00044 	movi	r3,1
1000366c:	1980f90e 	bge	r3,r6,10003a54 <_dtoa_r+0xd88>
10003670:	d8800617 	ldw	r2,24(sp)
10003674:	d8c00a17 	ldw	r3,40(sp)
10003678:	157fffc4 	addi	r21,r2,-1
1000367c:	1d41f316 	blt	r3,r21,10003e4c <_dtoa_r+0x1180>
10003680:	1d6bc83a 	sub	r21,r3,r21
10003684:	d9c00617 	ldw	r7,24(sp)
10003688:	3802aa16 	blt	r7,zero,10004134 <_dtoa_r+0x1468>
1000368c:	dd000817 	ldw	r20,32(sp)
10003690:	d8800617 	ldw	r2,24(sp)
10003694:	d8c00817 	ldw	r3,32(sp)
10003698:	01400044 	movi	r5,1
1000369c:	e009883a 	mov	r4,fp
100036a0:	1887883a 	add	r3,r3,r2
100036a4:	d8c00815 	stw	r3,32(sp)
100036a8:	b0ad883a 	add	r22,r22,r2
100036ac:	00067740 	call	10006774 <__i2b>
100036b0:	1023883a 	mov	r17,r2
100036b4:	a0000826 	beq	r20,zero,100036d8 <_dtoa_r+0xa0c>
100036b8:	0580070e 	bge	zero,r22,100036d8 <_dtoa_r+0xa0c>
100036bc:	a005883a 	mov	r2,r20
100036c0:	b500b916 	blt	r22,r20,100039a8 <_dtoa_r+0xcdc>
100036c4:	d9000817 	ldw	r4,32(sp)
100036c8:	a0a9c83a 	sub	r20,r20,r2
100036cc:	b0adc83a 	sub	r22,r22,r2
100036d0:	2089c83a 	sub	r4,r4,r2
100036d4:	d9000815 	stw	r4,32(sp)
100036d8:	d9800a17 	ldw	r6,40(sp)
100036dc:	0181810e 	bge	zero,r6,10003ce4 <_dtoa_r+0x1018>
100036e0:	d9c00b17 	ldw	r7,44(sp)
100036e4:	3800b326 	beq	r7,zero,100039b4 <_dtoa_r+0xce8>
100036e8:	a800b226 	beq	r21,zero,100039b4 <_dtoa_r+0xce8>
100036ec:	880b883a 	mov	r5,r17
100036f0:	a80d883a 	mov	r6,r21
100036f4:	e009883a 	mov	r4,fp
100036f8:	00069a80 	call	100069a8 <__pow5mult>
100036fc:	d9800917 	ldw	r6,36(sp)
10003700:	100b883a 	mov	r5,r2
10003704:	e009883a 	mov	r4,fp
10003708:	1023883a 	mov	r17,r2
1000370c:	00067b00 	call	100067b0 <__multiply>
10003710:	1021883a 	mov	r16,r2
10003714:	d8800a17 	ldw	r2,40(sp)
10003718:	d9400917 	ldw	r5,36(sp)
1000371c:	e009883a 	mov	r4,fp
10003720:	1545c83a 	sub	r2,r2,r21
10003724:	d8800a15 	stw	r2,40(sp)
10003728:	00064100 	call	10006410 <_Bfree>
1000372c:	d8c00a17 	ldw	r3,40(sp)
10003730:	18009f1e 	bne	r3,zero,100039b0 <_dtoa_r+0xce4>
10003734:	05c00044 	movi	r23,1
10003738:	e009883a 	mov	r4,fp
1000373c:	b80b883a 	mov	r5,r23
10003740:	00067740 	call	10006774 <__i2b>
10003744:	d9000d17 	ldw	r4,52(sp)
10003748:	102b883a 	mov	r21,r2
1000374c:	2000ce26 	beq	r4,zero,10003a88 <_dtoa_r+0xdbc>
10003750:	200d883a 	mov	r6,r4
10003754:	100b883a 	mov	r5,r2
10003758:	e009883a 	mov	r4,fp
1000375c:	00069a80 	call	100069a8 <__pow5mult>
10003760:	d9800317 	ldw	r6,12(sp)
10003764:	102b883a 	mov	r21,r2
10003768:	b981810e 	bge	r23,r6,10003d70 <_dtoa_r+0x10a4>
1000376c:	0027883a 	mov	r19,zero
10003770:	a8800417 	ldw	r2,16(r21)
10003774:	05c00804 	movi	r23,32
10003778:	10800104 	addi	r2,r2,4
1000377c:	1085883a 	add	r2,r2,r2
10003780:	1085883a 	add	r2,r2,r2
10003784:	a885883a 	add	r2,r21,r2
10003788:	11000017 	ldw	r4,0(r2)
1000378c:	000665c0 	call	1000665c <__hi0bits>
10003790:	b885c83a 	sub	r2,r23,r2
10003794:	1585883a 	add	r2,r2,r22
10003798:	108007cc 	andi	r2,r2,31
1000379c:	1000b326 	beq	r2,zero,10003a6c <_dtoa_r+0xda0>
100037a0:	00c00804 	movi	r3,32
100037a4:	1887c83a 	sub	r3,r3,r2
100037a8:	01000104 	movi	r4,4
100037ac:	20c2cd0e 	bge	r4,r3,100042e4 <_dtoa_r+0x1618>
100037b0:	00c00704 	movi	r3,28
100037b4:	1885c83a 	sub	r2,r3,r2
100037b8:	d8c00817 	ldw	r3,32(sp)
100037bc:	a0a9883a 	add	r20,r20,r2
100037c0:	b0ad883a 	add	r22,r22,r2
100037c4:	1887883a 	add	r3,r3,r2
100037c8:	d8c00815 	stw	r3,32(sp)
100037cc:	d9800817 	ldw	r6,32(sp)
100037d0:	0180040e 	bge	zero,r6,100037e4 <_dtoa_r+0xb18>
100037d4:	800b883a 	mov	r5,r16
100037d8:	e009883a 	mov	r4,fp
100037dc:	0006ae80 	call	10006ae8 <__lshift>
100037e0:	1021883a 	mov	r16,r2
100037e4:	0580050e 	bge	zero,r22,100037fc <_dtoa_r+0xb30>
100037e8:	a80b883a 	mov	r5,r21
100037ec:	b00d883a 	mov	r6,r22
100037f0:	e009883a 	mov	r4,fp
100037f4:	0006ae80 	call	10006ae8 <__lshift>
100037f8:	102b883a 	mov	r21,r2
100037fc:	d9c00e17 	ldw	r7,56(sp)
10003800:	3801211e 	bne	r7,zero,10003c88 <_dtoa_r+0xfbc>
10003804:	d9800617 	ldw	r6,24(sp)
10003808:	0181380e 	bge	zero,r6,10003cec <_dtoa_r+0x1020>
1000380c:	d8c00b17 	ldw	r3,44(sp)
10003810:	1800ab1e 	bne	r3,zero,10003ac0 <_dtoa_r+0xdf4>
10003814:	dc800717 	ldw	r18,28(sp)
10003818:	dcc00617 	ldw	r19,24(sp)
1000381c:	9029883a 	mov	r20,r18
10003820:	00000206 	br	1000382c <_dtoa_r+0xb60>
10003824:	00064380 	call	10006438 <__multadd>
10003828:	1021883a 	mov	r16,r2
1000382c:	a80b883a 	mov	r5,r21
10003830:	8009883a 	mov	r4,r16
10003834:	0002acc0 	call	10002acc <quorem>
10003838:	10800c04 	addi	r2,r2,48
1000383c:	90800005 	stb	r2,0(r18)
10003840:	94800044 	addi	r18,r18,1
10003844:	9507c83a 	sub	r3,r18,r20
10003848:	000f883a 	mov	r7,zero
1000384c:	01800284 	movi	r6,10
10003850:	800b883a 	mov	r5,r16
10003854:	e009883a 	mov	r4,fp
10003858:	1cfff216 	blt	r3,r19,10003824 <__alt_data_end+0xf8003824>
1000385c:	1011883a 	mov	r8,r2
10003860:	d8800617 	ldw	r2,24(sp)
10003864:	0082370e 	bge	zero,r2,10004144 <_dtoa_r+0x1478>
10003868:	d9000717 	ldw	r4,28(sp)
1000386c:	0025883a 	mov	r18,zero
10003870:	20af883a 	add	r23,r4,r2
10003874:	01800044 	movi	r6,1
10003878:	800b883a 	mov	r5,r16
1000387c:	e009883a 	mov	r4,fp
10003880:	da001715 	stw	r8,92(sp)
10003884:	0006ae80 	call	10006ae8 <__lshift>
10003888:	a80b883a 	mov	r5,r21
1000388c:	1009883a 	mov	r4,r2
10003890:	d8800915 	stw	r2,36(sp)
10003894:	0006c300 	call	10006c30 <__mcmp>
10003898:	da001717 	ldw	r8,92(sp)
1000389c:	0081800e 	bge	zero,r2,10003ea0 <_dtoa_r+0x11d4>
100038a0:	b93fffc3 	ldbu	r4,-1(r23)
100038a4:	b8bfffc4 	addi	r2,r23,-1
100038a8:	1007883a 	mov	r3,r2
100038ac:	01800e44 	movi	r6,57
100038b0:	d9c00717 	ldw	r7,28(sp)
100038b4:	00000506 	br	100038cc <_dtoa_r+0xc00>
100038b8:	18ffffc4 	addi	r3,r3,-1
100038bc:	11c12326 	beq	r2,r7,10003d4c <_dtoa_r+0x1080>
100038c0:	19000003 	ldbu	r4,0(r3)
100038c4:	102f883a 	mov	r23,r2
100038c8:	10bfffc4 	addi	r2,r2,-1
100038cc:	21403fcc 	andi	r5,r4,255
100038d0:	2940201c 	xori	r5,r5,128
100038d4:	297fe004 	addi	r5,r5,-128
100038d8:	29bff726 	beq	r5,r6,100038b8 <__alt_data_end+0xf80038b8>
100038dc:	21000044 	addi	r4,r4,1
100038e0:	11000005 	stb	r4,0(r2)
100038e4:	a80b883a 	mov	r5,r21
100038e8:	e009883a 	mov	r4,fp
100038ec:	00064100 	call	10006410 <_Bfree>
100038f0:	883ea026 	beq	r17,zero,10003374 <__alt_data_end+0xf8003374>
100038f4:	90000426 	beq	r18,zero,10003908 <_dtoa_r+0xc3c>
100038f8:	94400326 	beq	r18,r17,10003908 <_dtoa_r+0xc3c>
100038fc:	900b883a 	mov	r5,r18
10003900:	e009883a 	mov	r4,fp
10003904:	00064100 	call	10006410 <_Bfree>
10003908:	880b883a 	mov	r5,r17
1000390c:	e009883a 	mov	r4,fp
10003910:	00064100 	call	10006410 <_Bfree>
10003914:	003e9706 	br	10003374 <__alt_data_end+0xf8003374>
10003918:	01800044 	movi	r6,1
1000391c:	d9800e15 	stw	r6,56(sp)
10003920:	003d9606 	br	10002f7c <__alt_data_end+0xf8002f7c>
10003924:	d8800817 	ldw	r2,32(sp)
10003928:	d8c00517 	ldw	r3,20(sp)
1000392c:	d8000d15 	stw	zero,52(sp)
10003930:	10c5c83a 	sub	r2,r2,r3
10003934:	00c9c83a 	sub	r4,zero,r3
10003938:	d8800815 	stw	r2,32(sp)
1000393c:	d9000a15 	stw	r4,40(sp)
10003940:	003d9706 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10003944:	05adc83a 	sub	r22,zero,r22
10003948:	dd800815 	stw	r22,32(sp)
1000394c:	002d883a 	mov	r22,zero
10003950:	003d8e06 	br	10002f8c <__alt_data_end+0xf8002f8c>
10003954:	d9000517 	ldw	r4,20(sp)
10003958:	000cc080 	call	1000cc08 <__floatsidf>
1000395c:	100d883a 	mov	r6,r2
10003960:	180f883a 	mov	r7,r3
10003964:	a009883a 	mov	r4,r20
10003968:	880b883a 	mov	r5,r17
1000396c:	000b91c0 	call	1000b91c <__eqdf2>
10003970:	103d7126 	beq	r2,zero,10002f38 <__alt_data_end+0xf8002f38>
10003974:	d9c00517 	ldw	r7,20(sp)
10003978:	39ffffc4 	addi	r7,r7,-1
1000397c:	d9c00515 	stw	r7,20(sp)
10003980:	003d6d06 	br	10002f38 <__alt_data_end+0xf8002f38>
10003984:	dd400a17 	ldw	r21,40(sp)
10003988:	dd000817 	ldw	r20,32(sp)
1000398c:	0023883a 	mov	r17,zero
10003990:	003f4806 	br	100036b4 <__alt_data_end+0xf80036b4>
10003994:	10e3c83a 	sub	r17,r2,r3
10003998:	9448983a 	sll	r4,r18,r17
1000399c:	003d3206 	br	10002e68 <__alt_data_end+0xf8002e68>
100039a0:	d8000e15 	stw	zero,56(sp)
100039a4:	003d7506 	br	10002f7c <__alt_data_end+0xf8002f7c>
100039a8:	b005883a 	mov	r2,r22
100039ac:	003f4506 	br	100036c4 <__alt_data_end+0xf80036c4>
100039b0:	dc000915 	stw	r16,36(sp)
100039b4:	d9800a17 	ldw	r6,40(sp)
100039b8:	d9400917 	ldw	r5,36(sp)
100039bc:	e009883a 	mov	r4,fp
100039c0:	00069a80 	call	100069a8 <__pow5mult>
100039c4:	1021883a 	mov	r16,r2
100039c8:	003f5a06 	br	10003734 <__alt_data_end+0xf8003734>
100039cc:	01c00044 	movi	r7,1
100039d0:	d9c00b15 	stw	r7,44(sp)
100039d4:	d8802217 	ldw	r2,136(sp)
100039d8:	0081280e 	bge	zero,r2,10003e7c <_dtoa_r+0x11b0>
100039dc:	100d883a 	mov	r6,r2
100039e0:	1021883a 	mov	r16,r2
100039e4:	d8800c15 	stw	r2,48(sp)
100039e8:	d8800615 	stw	r2,24(sp)
100039ec:	003d8806 	br	10003010 <__alt_data_end+0xf8003010>
100039f0:	d8800617 	ldw	r2,24(sp)
100039f4:	00be9b16 	blt	zero,r2,10003464 <__alt_data_end+0xf8003464>
100039f8:	10010f1e 	bne	r2,zero,10003e38 <_dtoa_r+0x116c>
100039fc:	880b883a 	mov	r5,r17
10003a00:	000d883a 	mov	r6,zero
10003a04:	01d00534 	movhi	r7,16404
10003a08:	8009883a 	mov	r4,r16
10003a0c:	000bb740 	call	1000bb74 <__muldf3>
10003a10:	900d883a 	mov	r6,r18
10003a14:	980f883a 	mov	r7,r19
10003a18:	1009883a 	mov	r4,r2
10003a1c:	180b883a 	mov	r5,r3
10003a20:	000b9a40 	call	1000b9a4 <__gedf2>
10003a24:	002b883a 	mov	r21,zero
10003a28:	0023883a 	mov	r17,zero
10003a2c:	1000bf16 	blt	r2,zero,10003d2c <_dtoa_r+0x1060>
10003a30:	d9802217 	ldw	r6,136(sp)
10003a34:	ddc00717 	ldw	r23,28(sp)
10003a38:	018c303a 	nor	r6,zero,r6
10003a3c:	d9800515 	stw	r6,20(sp)
10003a40:	a80b883a 	mov	r5,r21
10003a44:	e009883a 	mov	r4,fp
10003a48:	00064100 	call	10006410 <_Bfree>
10003a4c:	883e4926 	beq	r17,zero,10003374 <__alt_data_end+0xf8003374>
10003a50:	003fad06 	br	10003908 <__alt_data_end+0xf8003908>
10003a54:	d9c01117 	ldw	r7,68(sp)
10003a58:	3801bc26 	beq	r7,zero,1000414c <_dtoa_r+0x1480>
10003a5c:	10810cc4 	addi	r2,r2,1075
10003a60:	dd400a17 	ldw	r21,40(sp)
10003a64:	dd000817 	ldw	r20,32(sp)
10003a68:	003f0a06 	br	10003694 <__alt_data_end+0xf8003694>
10003a6c:	00800704 	movi	r2,28
10003a70:	d9000817 	ldw	r4,32(sp)
10003a74:	a0a9883a 	add	r20,r20,r2
10003a78:	b0ad883a 	add	r22,r22,r2
10003a7c:	2089883a 	add	r4,r4,r2
10003a80:	d9000815 	stw	r4,32(sp)
10003a84:	003f5106 	br	100037cc <__alt_data_end+0xf80037cc>
10003a88:	d8c00317 	ldw	r3,12(sp)
10003a8c:	b8c1fc0e 	bge	r23,r3,10004280 <_dtoa_r+0x15b4>
10003a90:	0027883a 	mov	r19,zero
10003a94:	b805883a 	mov	r2,r23
10003a98:	003f3e06 	br	10003794 <__alt_data_end+0xf8003794>
10003a9c:	880b883a 	mov	r5,r17
10003aa0:	e009883a 	mov	r4,fp
10003aa4:	000f883a 	mov	r7,zero
10003aa8:	01800284 	movi	r6,10
10003aac:	00064380 	call	10006438 <__multadd>
10003ab0:	d9000c17 	ldw	r4,48(sp)
10003ab4:	1023883a 	mov	r17,r2
10003ab8:	0102040e 	bge	zero,r4,100042cc <_dtoa_r+0x1600>
10003abc:	d9000615 	stw	r4,24(sp)
10003ac0:	0500050e 	bge	zero,r20,10003ad8 <_dtoa_r+0xe0c>
10003ac4:	880b883a 	mov	r5,r17
10003ac8:	a00d883a 	mov	r6,r20
10003acc:	e009883a 	mov	r4,fp
10003ad0:	0006ae80 	call	10006ae8 <__lshift>
10003ad4:	1023883a 	mov	r17,r2
10003ad8:	9801241e 	bne	r19,zero,10003f6c <_dtoa_r+0x12a0>
10003adc:	8829883a 	mov	r20,r17
10003ae0:	d9000617 	ldw	r4,24(sp)
10003ae4:	dcc00717 	ldw	r19,28(sp)
10003ae8:	9480004c 	andi	r18,r18,1
10003aec:	20bfffc4 	addi	r2,r4,-1
10003af0:	9885883a 	add	r2,r19,r2
10003af4:	d8800415 	stw	r2,16(sp)
10003af8:	dc800615 	stw	r18,24(sp)
10003afc:	a80b883a 	mov	r5,r21
10003b00:	8009883a 	mov	r4,r16
10003b04:	0002acc0 	call	10002acc <quorem>
10003b08:	880b883a 	mov	r5,r17
10003b0c:	8009883a 	mov	r4,r16
10003b10:	102f883a 	mov	r23,r2
10003b14:	0006c300 	call	10006c30 <__mcmp>
10003b18:	a80b883a 	mov	r5,r21
10003b1c:	a00d883a 	mov	r6,r20
10003b20:	e009883a 	mov	r4,fp
10003b24:	102d883a 	mov	r22,r2
10003b28:	0006c900 	call	10006c90 <__mdiff>
10003b2c:	1007883a 	mov	r3,r2
10003b30:	10800317 	ldw	r2,12(r2)
10003b34:	bc800c04 	addi	r18,r23,48
10003b38:	180b883a 	mov	r5,r3
10003b3c:	10004e1e 	bne	r2,zero,10003c78 <_dtoa_r+0xfac>
10003b40:	8009883a 	mov	r4,r16
10003b44:	d8c01615 	stw	r3,88(sp)
10003b48:	0006c300 	call	10006c30 <__mcmp>
10003b4c:	d8c01617 	ldw	r3,88(sp)
10003b50:	e009883a 	mov	r4,fp
10003b54:	d8801615 	stw	r2,88(sp)
10003b58:	180b883a 	mov	r5,r3
10003b5c:	00064100 	call	10006410 <_Bfree>
10003b60:	d8801617 	ldw	r2,88(sp)
10003b64:	1000041e 	bne	r2,zero,10003b78 <_dtoa_r+0xeac>
10003b68:	d9800317 	ldw	r6,12(sp)
10003b6c:	3000021e 	bne	r6,zero,10003b78 <_dtoa_r+0xeac>
10003b70:	d8c00617 	ldw	r3,24(sp)
10003b74:	18003726 	beq	r3,zero,10003c54 <_dtoa_r+0xf88>
10003b78:	b0002016 	blt	r22,zero,10003bfc <_dtoa_r+0xf30>
10003b7c:	b000041e 	bne	r22,zero,10003b90 <_dtoa_r+0xec4>
10003b80:	d9000317 	ldw	r4,12(sp)
10003b84:	2000021e 	bne	r4,zero,10003b90 <_dtoa_r+0xec4>
10003b88:	d8c00617 	ldw	r3,24(sp)
10003b8c:	18001b26 	beq	r3,zero,10003bfc <_dtoa_r+0xf30>
10003b90:	00810716 	blt	zero,r2,10003fb0 <_dtoa_r+0x12e4>
10003b94:	d8c00417 	ldw	r3,16(sp)
10003b98:	9d800044 	addi	r22,r19,1
10003b9c:	9c800005 	stb	r18,0(r19)
10003ba0:	b02f883a 	mov	r23,r22
10003ba4:	98c10626 	beq	r19,r3,10003fc0 <_dtoa_r+0x12f4>
10003ba8:	800b883a 	mov	r5,r16
10003bac:	000f883a 	mov	r7,zero
10003bb0:	01800284 	movi	r6,10
10003bb4:	e009883a 	mov	r4,fp
10003bb8:	00064380 	call	10006438 <__multadd>
10003bbc:	1021883a 	mov	r16,r2
10003bc0:	000f883a 	mov	r7,zero
10003bc4:	01800284 	movi	r6,10
10003bc8:	880b883a 	mov	r5,r17
10003bcc:	e009883a 	mov	r4,fp
10003bd0:	8d002526 	beq	r17,r20,10003c68 <_dtoa_r+0xf9c>
10003bd4:	00064380 	call	10006438 <__multadd>
10003bd8:	a00b883a 	mov	r5,r20
10003bdc:	000f883a 	mov	r7,zero
10003be0:	01800284 	movi	r6,10
10003be4:	e009883a 	mov	r4,fp
10003be8:	1023883a 	mov	r17,r2
10003bec:	00064380 	call	10006438 <__multadd>
10003bf0:	1029883a 	mov	r20,r2
10003bf4:	b027883a 	mov	r19,r22
10003bf8:	003fc006 	br	10003afc <__alt_data_end+0xf8003afc>
10003bfc:	9011883a 	mov	r8,r18
10003c00:	00800e0e 	bge	zero,r2,10003c3c <_dtoa_r+0xf70>
10003c04:	800b883a 	mov	r5,r16
10003c08:	01800044 	movi	r6,1
10003c0c:	e009883a 	mov	r4,fp
10003c10:	da001715 	stw	r8,92(sp)
10003c14:	0006ae80 	call	10006ae8 <__lshift>
10003c18:	a80b883a 	mov	r5,r21
10003c1c:	1009883a 	mov	r4,r2
10003c20:	1021883a 	mov	r16,r2
10003c24:	0006c300 	call	10006c30 <__mcmp>
10003c28:	da001717 	ldw	r8,92(sp)
10003c2c:	0081960e 	bge	zero,r2,10004288 <_dtoa_r+0x15bc>
10003c30:	00800e44 	movi	r2,57
10003c34:	40817026 	beq	r8,r2,100041f8 <_dtoa_r+0x152c>
10003c38:	ba000c44 	addi	r8,r23,49
10003c3c:	8825883a 	mov	r18,r17
10003c40:	9dc00044 	addi	r23,r19,1
10003c44:	9a000005 	stb	r8,0(r19)
10003c48:	a023883a 	mov	r17,r20
10003c4c:	dc000915 	stw	r16,36(sp)
10003c50:	003f2406 	br	100038e4 <__alt_data_end+0xf80038e4>
10003c54:	00800e44 	movi	r2,57
10003c58:	9011883a 	mov	r8,r18
10003c5c:	90816626 	beq	r18,r2,100041f8 <_dtoa_r+0x152c>
10003c60:	05bff516 	blt	zero,r22,10003c38 <__alt_data_end+0xf8003c38>
10003c64:	003ff506 	br	10003c3c <__alt_data_end+0xf8003c3c>
10003c68:	00064380 	call	10006438 <__multadd>
10003c6c:	1023883a 	mov	r17,r2
10003c70:	1029883a 	mov	r20,r2
10003c74:	003fdf06 	br	10003bf4 <__alt_data_end+0xf8003bf4>
10003c78:	e009883a 	mov	r4,fp
10003c7c:	00064100 	call	10006410 <_Bfree>
10003c80:	00800044 	movi	r2,1
10003c84:	003fbc06 	br	10003b78 <__alt_data_end+0xf8003b78>
10003c88:	a80b883a 	mov	r5,r21
10003c8c:	8009883a 	mov	r4,r16
10003c90:	0006c300 	call	10006c30 <__mcmp>
10003c94:	103edb0e 	bge	r2,zero,10003804 <__alt_data_end+0xf8003804>
10003c98:	800b883a 	mov	r5,r16
10003c9c:	000f883a 	mov	r7,zero
10003ca0:	01800284 	movi	r6,10
10003ca4:	e009883a 	mov	r4,fp
10003ca8:	00064380 	call	10006438 <__multadd>
10003cac:	1021883a 	mov	r16,r2
10003cb0:	d8800517 	ldw	r2,20(sp)
10003cb4:	d8c00b17 	ldw	r3,44(sp)
10003cb8:	10bfffc4 	addi	r2,r2,-1
10003cbc:	d8800515 	stw	r2,20(sp)
10003cc0:	183f761e 	bne	r3,zero,10003a9c <__alt_data_end+0xf8003a9c>
10003cc4:	d9000c17 	ldw	r4,48(sp)
10003cc8:	0101730e 	bge	zero,r4,10004298 <_dtoa_r+0x15cc>
10003ccc:	d9000615 	stw	r4,24(sp)
10003cd0:	003ed006 	br	10003814 <__alt_data_end+0xf8003814>
10003cd4:	00800084 	movi	r2,2
10003cd8:	3081861e 	bne	r6,r2,100042f4 <_dtoa_r+0x1628>
10003cdc:	d8000b15 	stw	zero,44(sp)
10003ce0:	003f3c06 	br	100039d4 <__alt_data_end+0xf80039d4>
10003ce4:	dc000917 	ldw	r16,36(sp)
10003ce8:	003e9206 	br	10003734 <__alt_data_end+0xf8003734>
10003cec:	d9c00317 	ldw	r7,12(sp)
10003cf0:	00800084 	movi	r2,2
10003cf4:	11fec50e 	bge	r2,r7,1000380c <__alt_data_end+0xf800380c>
10003cf8:	d9000617 	ldw	r4,24(sp)
10003cfc:	20013c1e 	bne	r4,zero,100041f0 <_dtoa_r+0x1524>
10003d00:	a80b883a 	mov	r5,r21
10003d04:	000f883a 	mov	r7,zero
10003d08:	01800144 	movi	r6,5
10003d0c:	e009883a 	mov	r4,fp
10003d10:	00064380 	call	10006438 <__multadd>
10003d14:	100b883a 	mov	r5,r2
10003d18:	8009883a 	mov	r4,r16
10003d1c:	102b883a 	mov	r21,r2
10003d20:	0006c300 	call	10006c30 <__mcmp>
10003d24:	dc000915 	stw	r16,36(sp)
10003d28:	00bf410e 	bge	zero,r2,10003a30 <__alt_data_end+0xf8003a30>
10003d2c:	d9c00717 	ldw	r7,28(sp)
10003d30:	00800c44 	movi	r2,49
10003d34:	38800005 	stb	r2,0(r7)
10003d38:	d8800517 	ldw	r2,20(sp)
10003d3c:	3dc00044 	addi	r23,r7,1
10003d40:	10800044 	addi	r2,r2,1
10003d44:	d8800515 	stw	r2,20(sp)
10003d48:	003f3d06 	br	10003a40 <__alt_data_end+0xf8003a40>
10003d4c:	d9800517 	ldw	r6,20(sp)
10003d50:	d9c00717 	ldw	r7,28(sp)
10003d54:	00800c44 	movi	r2,49
10003d58:	31800044 	addi	r6,r6,1
10003d5c:	d9800515 	stw	r6,20(sp)
10003d60:	38800005 	stb	r2,0(r7)
10003d64:	003edf06 	br	100038e4 <__alt_data_end+0xf80038e4>
10003d68:	d8000b15 	stw	zero,44(sp)
10003d6c:	003c9f06 	br	10002fec <__alt_data_end+0xf8002fec>
10003d70:	903e7e1e 	bne	r18,zero,1000376c <__alt_data_end+0xf800376c>
10003d74:	00800434 	movhi	r2,16
10003d78:	10bfffc4 	addi	r2,r2,-1
10003d7c:	9884703a 	and	r2,r19,r2
10003d80:	1000ea1e 	bne	r2,zero,1000412c <_dtoa_r+0x1460>
10003d84:	9cdffc2c 	andhi	r19,r19,32752
10003d88:	9800e826 	beq	r19,zero,1000412c <_dtoa_r+0x1460>
10003d8c:	d9c00817 	ldw	r7,32(sp)
10003d90:	b5800044 	addi	r22,r22,1
10003d94:	04c00044 	movi	r19,1
10003d98:	39c00044 	addi	r7,r7,1
10003d9c:	d9c00815 	stw	r7,32(sp)
10003da0:	d8800d17 	ldw	r2,52(sp)
10003da4:	103e721e 	bne	r2,zero,10003770 <__alt_data_end+0xf8003770>
10003da8:	00800044 	movi	r2,1
10003dac:	003e7906 	br	10003794 <__alt_data_end+0xf8003794>
10003db0:	8009883a 	mov	r4,r16
10003db4:	000cc080 	call	1000cc08 <__floatsidf>
10003db8:	d9800f17 	ldw	r6,60(sp)
10003dbc:	d9c01017 	ldw	r7,64(sp)
10003dc0:	1009883a 	mov	r4,r2
10003dc4:	180b883a 	mov	r5,r3
10003dc8:	000bb740 	call	1000bb74 <__muldf3>
10003dcc:	000d883a 	mov	r6,zero
10003dd0:	01d00734 	movhi	r7,16412
10003dd4:	1009883a 	mov	r4,r2
10003dd8:	180b883a 	mov	r5,r3
10003ddc:	000a7880 	call	1000a788 <__adddf3>
10003de0:	047f3034 	movhi	r17,64704
10003de4:	1021883a 	mov	r16,r2
10003de8:	1c63883a 	add	r17,r3,r17
10003dec:	d9000f17 	ldw	r4,60(sp)
10003df0:	d9401017 	ldw	r5,64(sp)
10003df4:	000d883a 	mov	r6,zero
10003df8:	01d00534 	movhi	r7,16404
10003dfc:	000c28c0 	call	1000c28c <__subdf3>
10003e00:	800d883a 	mov	r6,r16
10003e04:	880f883a 	mov	r7,r17
10003e08:	1009883a 	mov	r4,r2
10003e0c:	180b883a 	mov	r5,r3
10003e10:	102b883a 	mov	r21,r2
10003e14:	1829883a 	mov	r20,r3
10003e18:	000b9a40 	call	1000b9a4 <__gedf2>
10003e1c:	00806c16 	blt	zero,r2,10003fd0 <_dtoa_r+0x1304>
10003e20:	89e0003c 	xorhi	r7,r17,32768
10003e24:	800d883a 	mov	r6,r16
10003e28:	a809883a 	mov	r4,r21
10003e2c:	a00b883a 	mov	r5,r20
10003e30:	000ba800 	call	1000ba80 <__ledf2>
10003e34:	103d7e0e 	bge	r2,zero,10003430 <__alt_data_end+0xf8003430>
10003e38:	002b883a 	mov	r21,zero
10003e3c:	0023883a 	mov	r17,zero
10003e40:	003efb06 	br	10003a30 <__alt_data_end+0xf8003a30>
10003e44:	d8800717 	ldw	r2,28(sp)
10003e48:	003bd006 	br	10002d8c <__alt_data_end+0xf8002d8c>
10003e4c:	d9000a17 	ldw	r4,40(sp)
10003e50:	d9800d17 	ldw	r6,52(sp)
10003e54:	dd400a15 	stw	r21,40(sp)
10003e58:	a905c83a 	sub	r2,r21,r4
10003e5c:	308d883a 	add	r6,r6,r2
10003e60:	d9800d15 	stw	r6,52(sp)
10003e64:	002b883a 	mov	r21,zero
10003e68:	003e0606 	br	10003684 <__alt_data_end+0xf8003684>
10003e6c:	9023883a 	mov	r17,r18
10003e70:	9829883a 	mov	r20,r19
10003e74:	04000084 	movi	r16,2
10003e78:	003c9206 	br	100030c4 <__alt_data_end+0xf80030c4>
10003e7c:	04000044 	movi	r16,1
10003e80:	dc000c15 	stw	r16,48(sp)
10003e84:	dc000615 	stw	r16,24(sp)
10003e88:	dc002215 	stw	r16,136(sp)
10003e8c:	e0001115 	stw	zero,68(fp)
10003e90:	000b883a 	mov	r5,zero
10003e94:	003c6906 	br	1000303c <__alt_data_end+0xf800303c>
10003e98:	3021883a 	mov	r16,r6
10003e9c:	003ffb06 	br	10003e8c <__alt_data_end+0xf8003e8c>
10003ea0:	1000021e 	bne	r2,zero,10003eac <_dtoa_r+0x11e0>
10003ea4:	4200004c 	andi	r8,r8,1
10003ea8:	403e7d1e 	bne	r8,zero,100038a0 <__alt_data_end+0xf80038a0>
10003eac:	01000c04 	movi	r4,48
10003eb0:	00000106 	br	10003eb8 <_dtoa_r+0x11ec>
10003eb4:	102f883a 	mov	r23,r2
10003eb8:	b8bfffc4 	addi	r2,r23,-1
10003ebc:	10c00007 	ldb	r3,0(r2)
10003ec0:	193ffc26 	beq	r3,r4,10003eb4 <__alt_data_end+0xf8003eb4>
10003ec4:	003e8706 	br	100038e4 <__alt_data_end+0xf80038e4>
10003ec8:	d8800517 	ldw	r2,20(sp)
10003ecc:	00a3c83a 	sub	r17,zero,r2
10003ed0:	8800a426 	beq	r17,zero,10004164 <_dtoa_r+0x1498>
10003ed4:	888003cc 	andi	r2,r17,15
10003ed8:	100490fa 	slli	r2,r2,3
10003edc:	00c40074 	movhi	r3,4097
10003ee0:	18d27904 	addi	r3,r3,18916
10003ee4:	1885883a 	add	r2,r3,r2
10003ee8:	11800017 	ldw	r6,0(r2)
10003eec:	11c00117 	ldw	r7,4(r2)
10003ef0:	9009883a 	mov	r4,r18
10003ef4:	980b883a 	mov	r5,r19
10003ef8:	8823d13a 	srai	r17,r17,4
10003efc:	000bb740 	call	1000bb74 <__muldf3>
10003f00:	d8800f15 	stw	r2,60(sp)
10003f04:	d8c01015 	stw	r3,64(sp)
10003f08:	8800e826 	beq	r17,zero,100042ac <_dtoa_r+0x15e0>
10003f0c:	05040074 	movhi	r20,4097
10003f10:	a5126f04 	addi	r20,r20,18876
10003f14:	04000084 	movi	r16,2
10003f18:	8980004c 	andi	r6,r17,1
10003f1c:	1009883a 	mov	r4,r2
10003f20:	8823d07a 	srai	r17,r17,1
10003f24:	180b883a 	mov	r5,r3
10003f28:	30000426 	beq	r6,zero,10003f3c <_dtoa_r+0x1270>
10003f2c:	a1800017 	ldw	r6,0(r20)
10003f30:	a1c00117 	ldw	r7,4(r20)
10003f34:	84000044 	addi	r16,r16,1
10003f38:	000bb740 	call	1000bb74 <__muldf3>
10003f3c:	a5000204 	addi	r20,r20,8
10003f40:	883ff51e 	bne	r17,zero,10003f18 <__alt_data_end+0xf8003f18>
10003f44:	d8800f15 	stw	r2,60(sp)
10003f48:	d8c01015 	stw	r3,64(sp)
10003f4c:	003c7606 	br	10003128 <__alt_data_end+0xf8003128>
10003f50:	00c00c04 	movi	r3,48
10003f54:	10c00005 	stb	r3,0(r2)
10003f58:	d8c00517 	ldw	r3,20(sp)
10003f5c:	bd3fffc3 	ldbu	r20,-1(r23)
10003f60:	18c00044 	addi	r3,r3,1
10003f64:	d8c00515 	stw	r3,20(sp)
10003f68:	003db906 	br	10003650 <__alt_data_end+0xf8003650>
10003f6c:	89400117 	ldw	r5,4(r17)
10003f70:	e009883a 	mov	r4,fp
10003f74:	00063680 	call	10006368 <_Balloc>
10003f78:	89800417 	ldw	r6,16(r17)
10003f7c:	89400304 	addi	r5,r17,12
10003f80:	11000304 	addi	r4,r2,12
10003f84:	31800084 	addi	r6,r6,2
10003f88:	318d883a 	add	r6,r6,r6
10003f8c:	318d883a 	add	r6,r6,r6
10003f90:	1027883a 	mov	r19,r2
10003f94:	0005f9c0 	call	10005f9c <memcpy>
10003f98:	01800044 	movi	r6,1
10003f9c:	980b883a 	mov	r5,r19
10003fa0:	e009883a 	mov	r4,fp
10003fa4:	0006ae80 	call	10006ae8 <__lshift>
10003fa8:	1029883a 	mov	r20,r2
10003fac:	003ecc06 	br	10003ae0 <__alt_data_end+0xf8003ae0>
10003fb0:	00800e44 	movi	r2,57
10003fb4:	90809026 	beq	r18,r2,100041f8 <_dtoa_r+0x152c>
10003fb8:	92000044 	addi	r8,r18,1
10003fbc:	003f1f06 	br	10003c3c <__alt_data_end+0xf8003c3c>
10003fc0:	9011883a 	mov	r8,r18
10003fc4:	8825883a 	mov	r18,r17
10003fc8:	a023883a 	mov	r17,r20
10003fcc:	003e2906 	br	10003874 <__alt_data_end+0xf8003874>
10003fd0:	002b883a 	mov	r21,zero
10003fd4:	0023883a 	mov	r17,zero
10003fd8:	003f5406 	br	10003d2c <__alt_data_end+0xf8003d2c>
10003fdc:	61bfffc4 	addi	r6,r12,-1
10003fe0:	300490fa 	slli	r2,r6,3
10003fe4:	00c40074 	movhi	r3,4097
10003fe8:	18d27904 	addi	r3,r3,18916
10003fec:	1885883a 	add	r2,r3,r2
10003ff0:	11000017 	ldw	r4,0(r2)
10003ff4:	11400117 	ldw	r5,4(r2)
10003ff8:	d8800717 	ldw	r2,28(sp)
10003ffc:	880f883a 	mov	r7,r17
10004000:	d9801215 	stw	r6,72(sp)
10004004:	800d883a 	mov	r6,r16
10004008:	db001615 	stw	r12,88(sp)
1000400c:	15c00044 	addi	r23,r2,1
10004010:	000bb740 	call	1000bb74 <__muldf3>
10004014:	d9401017 	ldw	r5,64(sp)
10004018:	d9000f17 	ldw	r4,60(sp)
1000401c:	d8c01515 	stw	r3,84(sp)
10004020:	d8801415 	stw	r2,80(sp)
10004024:	000cb880 	call	1000cb88 <__fixdfsi>
10004028:	1009883a 	mov	r4,r2
1000402c:	1021883a 	mov	r16,r2
10004030:	000cc080 	call	1000cc08 <__floatsidf>
10004034:	d9000f17 	ldw	r4,60(sp)
10004038:	d9401017 	ldw	r5,64(sp)
1000403c:	100d883a 	mov	r6,r2
10004040:	180f883a 	mov	r7,r3
10004044:	000c28c0 	call	1000c28c <__subdf3>
10004048:	1829883a 	mov	r20,r3
1000404c:	d8c00717 	ldw	r3,28(sp)
10004050:	84000c04 	addi	r16,r16,48
10004054:	1023883a 	mov	r17,r2
10004058:	1c000005 	stb	r16,0(r3)
1000405c:	db001617 	ldw	r12,88(sp)
10004060:	00800044 	movi	r2,1
10004064:	60802226 	beq	r12,r2,100040f0 <_dtoa_r+0x1424>
10004068:	d9c00717 	ldw	r7,28(sp)
1000406c:	8805883a 	mov	r2,r17
10004070:	b82b883a 	mov	r21,r23
10004074:	3b19883a 	add	r12,r7,r12
10004078:	6023883a 	mov	r17,r12
1000407c:	a007883a 	mov	r3,r20
10004080:	dc800f15 	stw	r18,60(sp)
10004084:	000d883a 	mov	r6,zero
10004088:	01d00934 	movhi	r7,16420
1000408c:	1009883a 	mov	r4,r2
10004090:	180b883a 	mov	r5,r3
10004094:	000bb740 	call	1000bb74 <__muldf3>
10004098:	180b883a 	mov	r5,r3
1000409c:	1009883a 	mov	r4,r2
100040a0:	1829883a 	mov	r20,r3
100040a4:	1025883a 	mov	r18,r2
100040a8:	000cb880 	call	1000cb88 <__fixdfsi>
100040ac:	1009883a 	mov	r4,r2
100040b0:	1021883a 	mov	r16,r2
100040b4:	000cc080 	call	1000cc08 <__floatsidf>
100040b8:	100d883a 	mov	r6,r2
100040bc:	180f883a 	mov	r7,r3
100040c0:	9009883a 	mov	r4,r18
100040c4:	a00b883a 	mov	r5,r20
100040c8:	84000c04 	addi	r16,r16,48
100040cc:	000c28c0 	call	1000c28c <__subdf3>
100040d0:	ad400044 	addi	r21,r21,1
100040d4:	ac3fffc5 	stb	r16,-1(r21)
100040d8:	ac7fea1e 	bne	r21,r17,10004084 <__alt_data_end+0xf8004084>
100040dc:	1023883a 	mov	r17,r2
100040e0:	d8801217 	ldw	r2,72(sp)
100040e4:	dc800f17 	ldw	r18,60(sp)
100040e8:	1829883a 	mov	r20,r3
100040ec:	b8af883a 	add	r23,r23,r2
100040f0:	d9001417 	ldw	r4,80(sp)
100040f4:	d9401517 	ldw	r5,84(sp)
100040f8:	000d883a 	mov	r6,zero
100040fc:	01cff834 	movhi	r7,16352
10004100:	000a7880 	call	1000a788 <__adddf3>
10004104:	880d883a 	mov	r6,r17
10004108:	a00f883a 	mov	r7,r20
1000410c:	1009883a 	mov	r4,r2
10004110:	180b883a 	mov	r5,r3
10004114:	000ba800 	call	1000ba80 <__ledf2>
10004118:	10003e0e 	bge	r2,zero,10004214 <_dtoa_r+0x1548>
1000411c:	d9001317 	ldw	r4,76(sp)
10004120:	bd3fffc3 	ldbu	r20,-1(r23)
10004124:	d9000515 	stw	r4,20(sp)
10004128:	003d3b06 	br	10003618 <__alt_data_end+0xf8003618>
1000412c:	0027883a 	mov	r19,zero
10004130:	003f1b06 	br	10003da0 <__alt_data_end+0xf8003da0>
10004134:	d8800817 	ldw	r2,32(sp)
10004138:	11e9c83a 	sub	r20,r2,r7
1000413c:	0005883a 	mov	r2,zero
10004140:	003d5406 	br	10003694 <__alt_data_end+0xf8003694>
10004144:	00800044 	movi	r2,1
10004148:	003dc706 	br	10003868 <__alt_data_end+0xf8003868>
1000414c:	d8c00217 	ldw	r3,8(sp)
10004150:	00800d84 	movi	r2,54
10004154:	dd400a17 	ldw	r21,40(sp)
10004158:	10c5c83a 	sub	r2,r2,r3
1000415c:	dd000817 	ldw	r20,32(sp)
10004160:	003d4c06 	br	10003694 <__alt_data_end+0xf8003694>
10004164:	dc800f15 	stw	r18,60(sp)
10004168:	dcc01015 	stw	r19,64(sp)
1000416c:	04000084 	movi	r16,2
10004170:	003bed06 	br	10003128 <__alt_data_end+0xf8003128>
10004174:	d9000617 	ldw	r4,24(sp)
10004178:	203f0d26 	beq	r4,zero,10003db0 <__alt_data_end+0xf8003db0>
1000417c:	d9800c17 	ldw	r6,48(sp)
10004180:	01bcab0e 	bge	zero,r6,10003430 <__alt_data_end+0xf8003430>
10004184:	d9401017 	ldw	r5,64(sp)
10004188:	d9000f17 	ldw	r4,60(sp)
1000418c:	000d883a 	mov	r6,zero
10004190:	01d00934 	movhi	r7,16420
10004194:	000bb740 	call	1000bb74 <__muldf3>
10004198:	81000044 	addi	r4,r16,1
1000419c:	d8800f15 	stw	r2,60(sp)
100041a0:	d8c01015 	stw	r3,64(sp)
100041a4:	000cc080 	call	1000cc08 <__floatsidf>
100041a8:	d9800f17 	ldw	r6,60(sp)
100041ac:	d9c01017 	ldw	r7,64(sp)
100041b0:	1009883a 	mov	r4,r2
100041b4:	180b883a 	mov	r5,r3
100041b8:	000bb740 	call	1000bb74 <__muldf3>
100041bc:	01d00734 	movhi	r7,16412
100041c0:	000d883a 	mov	r6,zero
100041c4:	1009883a 	mov	r4,r2
100041c8:	180b883a 	mov	r5,r3
100041cc:	000a7880 	call	1000a788 <__adddf3>
100041d0:	d9c00517 	ldw	r7,20(sp)
100041d4:	047f3034 	movhi	r17,64704
100041d8:	1021883a 	mov	r16,r2
100041dc:	39ffffc4 	addi	r7,r7,-1
100041e0:	d9c01315 	stw	r7,76(sp)
100041e4:	1c63883a 	add	r17,r3,r17
100041e8:	db000c17 	ldw	r12,48(sp)
100041ec:	003bea06 	br	10003198 <__alt_data_end+0xf8003198>
100041f0:	dc000915 	stw	r16,36(sp)
100041f4:	003e0e06 	br	10003a30 <__alt_data_end+0xf8003a30>
100041f8:	01000e44 	movi	r4,57
100041fc:	8825883a 	mov	r18,r17
10004200:	9dc00044 	addi	r23,r19,1
10004204:	99000005 	stb	r4,0(r19)
10004208:	a023883a 	mov	r17,r20
1000420c:	dc000915 	stw	r16,36(sp)
10004210:	003da406 	br	100038a4 <__alt_data_end+0xf80038a4>
10004214:	d9801417 	ldw	r6,80(sp)
10004218:	d9c01517 	ldw	r7,84(sp)
1000421c:	0009883a 	mov	r4,zero
10004220:	014ff834 	movhi	r5,16352
10004224:	000c28c0 	call	1000c28c <__subdf3>
10004228:	880d883a 	mov	r6,r17
1000422c:	a00f883a 	mov	r7,r20
10004230:	1009883a 	mov	r4,r2
10004234:	180b883a 	mov	r5,r3
10004238:	000b9a40 	call	1000b9a4 <__gedf2>
1000423c:	00bc7c0e 	bge	zero,r2,10003430 <__alt_data_end+0xf8003430>
10004240:	01000c04 	movi	r4,48
10004244:	00000106 	br	1000424c <_dtoa_r+0x1580>
10004248:	102f883a 	mov	r23,r2
1000424c:	b8bfffc4 	addi	r2,r23,-1
10004250:	10c00007 	ldb	r3,0(r2)
10004254:	193ffc26 	beq	r3,r4,10004248 <__alt_data_end+0xf8004248>
10004258:	d9801317 	ldw	r6,76(sp)
1000425c:	d9800515 	stw	r6,20(sp)
10004260:	003c4406 	br	10003374 <__alt_data_end+0xf8003374>
10004264:	d9801317 	ldw	r6,76(sp)
10004268:	d9800515 	stw	r6,20(sp)
1000426c:	003cea06 	br	10003618 <__alt_data_end+0xf8003618>
10004270:	dd800f17 	ldw	r22,60(sp)
10004274:	dcc01017 	ldw	r19,64(sp)
10004278:	dc801217 	ldw	r18,72(sp)
1000427c:	003c6c06 	br	10003430 <__alt_data_end+0xf8003430>
10004280:	903e031e 	bne	r18,zero,10003a90 <__alt_data_end+0xf8003a90>
10004284:	003ebb06 	br	10003d74 <__alt_data_end+0xf8003d74>
10004288:	103e6c1e 	bne	r2,zero,10003c3c <__alt_data_end+0xf8003c3c>
1000428c:	4080004c 	andi	r2,r8,1
10004290:	103e6a26 	beq	r2,zero,10003c3c <__alt_data_end+0xf8003c3c>
10004294:	003e6606 	br	10003c30 <__alt_data_end+0xf8003c30>
10004298:	d8c00317 	ldw	r3,12(sp)
1000429c:	00800084 	movi	r2,2
100042a0:	10c02916 	blt	r2,r3,10004348 <_dtoa_r+0x167c>
100042a4:	d9000c17 	ldw	r4,48(sp)
100042a8:	003e8806 	br	10003ccc <__alt_data_end+0xf8003ccc>
100042ac:	04000084 	movi	r16,2
100042b0:	003b9d06 	br	10003128 <__alt_data_end+0xf8003128>
100042b4:	d9001317 	ldw	r4,76(sp)
100042b8:	d9000515 	stw	r4,20(sp)
100042bc:	003cd606 	br	10003618 <__alt_data_end+0xf8003618>
100042c0:	d8801317 	ldw	r2,76(sp)
100042c4:	d8800515 	stw	r2,20(sp)
100042c8:	003c2a06 	br	10003374 <__alt_data_end+0xf8003374>
100042cc:	d9800317 	ldw	r6,12(sp)
100042d0:	00800084 	movi	r2,2
100042d4:	11801516 	blt	r2,r6,1000432c <_dtoa_r+0x1660>
100042d8:	d9c00c17 	ldw	r7,48(sp)
100042dc:	d9c00615 	stw	r7,24(sp)
100042e0:	003df706 	br	10003ac0 <__alt_data_end+0xf8003ac0>
100042e4:	193d3926 	beq	r3,r4,100037cc <__alt_data_end+0xf80037cc>
100042e8:	00c00f04 	movi	r3,60
100042ec:	1885c83a 	sub	r2,r3,r2
100042f0:	003ddf06 	br	10003a70 <__alt_data_end+0xf8003a70>
100042f4:	e009883a 	mov	r4,fp
100042f8:	e0001115 	stw	zero,68(fp)
100042fc:	000b883a 	mov	r5,zero
10004300:	00063680 	call	10006368 <_Balloc>
10004304:	d8800715 	stw	r2,28(sp)
10004308:	d8c00717 	ldw	r3,28(sp)
1000430c:	00bfffc4 	movi	r2,-1
10004310:	01000044 	movi	r4,1
10004314:	d8800c15 	stw	r2,48(sp)
10004318:	e0c01015 	stw	r3,64(fp)
1000431c:	d9000b15 	stw	r4,44(sp)
10004320:	d8800615 	stw	r2,24(sp)
10004324:	d8002215 	stw	zero,136(sp)
10004328:	003c4106 	br	10003430 <__alt_data_end+0xf8003430>
1000432c:	d8c00c17 	ldw	r3,48(sp)
10004330:	d8c00615 	stw	r3,24(sp)
10004334:	003e7006 	br	10003cf8 <__alt_data_end+0xf8003cf8>
10004338:	04400044 	movi	r17,1
1000433c:	003b2006 	br	10002fc0 <__alt_data_end+0xf8002fc0>
10004340:	000b883a 	mov	r5,zero
10004344:	003b3d06 	br	1000303c <__alt_data_end+0xf800303c>
10004348:	d8800c17 	ldw	r2,48(sp)
1000434c:	d8800615 	stw	r2,24(sp)
10004350:	003e6906 	br	10003cf8 <__alt_data_end+0xf8003cf8>

10004354 <__sflush_r>:
10004354:	2880030b 	ldhu	r2,12(r5)
10004358:	defffb04 	addi	sp,sp,-20
1000435c:	dcc00315 	stw	r19,12(sp)
10004360:	dc400115 	stw	r17,4(sp)
10004364:	dfc00415 	stw	ra,16(sp)
10004368:	dc800215 	stw	r18,8(sp)
1000436c:	dc000015 	stw	r16,0(sp)
10004370:	10c0020c 	andi	r3,r2,8
10004374:	2823883a 	mov	r17,r5
10004378:	2027883a 	mov	r19,r4
1000437c:	1800311e 	bne	r3,zero,10004444 <__sflush_r+0xf0>
10004380:	28c00117 	ldw	r3,4(r5)
10004384:	10820014 	ori	r2,r2,2048
10004388:	2880030d 	sth	r2,12(r5)
1000438c:	00c04b0e 	bge	zero,r3,100044bc <__sflush_r+0x168>
10004390:	8a000a17 	ldw	r8,40(r17)
10004394:	40002326 	beq	r8,zero,10004424 <__sflush_r+0xd0>
10004398:	9c000017 	ldw	r16,0(r19)
1000439c:	10c4000c 	andi	r3,r2,4096
100043a0:	98000015 	stw	zero,0(r19)
100043a4:	18004826 	beq	r3,zero,100044c8 <__sflush_r+0x174>
100043a8:	89801417 	ldw	r6,80(r17)
100043ac:	10c0010c 	andi	r3,r2,4
100043b0:	18000626 	beq	r3,zero,100043cc <__sflush_r+0x78>
100043b4:	88c00117 	ldw	r3,4(r17)
100043b8:	88800c17 	ldw	r2,48(r17)
100043bc:	30cdc83a 	sub	r6,r6,r3
100043c0:	10000226 	beq	r2,zero,100043cc <__sflush_r+0x78>
100043c4:	88800f17 	ldw	r2,60(r17)
100043c8:	308dc83a 	sub	r6,r6,r2
100043cc:	89400717 	ldw	r5,28(r17)
100043d0:	000f883a 	mov	r7,zero
100043d4:	9809883a 	mov	r4,r19
100043d8:	403ee83a 	callr	r8
100043dc:	00ffffc4 	movi	r3,-1
100043e0:	10c04426 	beq	r2,r3,100044f4 <__sflush_r+0x1a0>
100043e4:	88c0030b 	ldhu	r3,12(r17)
100043e8:	89000417 	ldw	r4,16(r17)
100043ec:	88000115 	stw	zero,4(r17)
100043f0:	197dffcc 	andi	r5,r3,63487
100043f4:	8940030d 	sth	r5,12(r17)
100043f8:	89000015 	stw	r4,0(r17)
100043fc:	18c4000c 	andi	r3,r3,4096
10004400:	18002c1e 	bne	r3,zero,100044b4 <__sflush_r+0x160>
10004404:	89400c17 	ldw	r5,48(r17)
10004408:	9c000015 	stw	r16,0(r19)
1000440c:	28000526 	beq	r5,zero,10004424 <__sflush_r+0xd0>
10004410:	88801004 	addi	r2,r17,64
10004414:	28800226 	beq	r5,r2,10004420 <__sflush_r+0xcc>
10004418:	9809883a 	mov	r4,r19
1000441c:	0004ac00 	call	10004ac0 <_free_r>
10004420:	88000c15 	stw	zero,48(r17)
10004424:	0005883a 	mov	r2,zero
10004428:	dfc00417 	ldw	ra,16(sp)
1000442c:	dcc00317 	ldw	r19,12(sp)
10004430:	dc800217 	ldw	r18,8(sp)
10004434:	dc400117 	ldw	r17,4(sp)
10004438:	dc000017 	ldw	r16,0(sp)
1000443c:	dec00504 	addi	sp,sp,20
10004440:	f800283a 	ret
10004444:	2c800417 	ldw	r18,16(r5)
10004448:	903ff626 	beq	r18,zero,10004424 <__alt_data_end+0xf8004424>
1000444c:	2c000017 	ldw	r16,0(r5)
10004450:	108000cc 	andi	r2,r2,3
10004454:	2c800015 	stw	r18,0(r5)
10004458:	84a1c83a 	sub	r16,r16,r18
1000445c:	1000131e 	bne	r2,zero,100044ac <__sflush_r+0x158>
10004460:	28800517 	ldw	r2,20(r5)
10004464:	88800215 	stw	r2,8(r17)
10004468:	04000316 	blt	zero,r16,10004478 <__sflush_r+0x124>
1000446c:	003fed06 	br	10004424 <__alt_data_end+0xf8004424>
10004470:	90a5883a 	add	r18,r18,r2
10004474:	043feb0e 	bge	zero,r16,10004424 <__alt_data_end+0xf8004424>
10004478:	88800917 	ldw	r2,36(r17)
1000447c:	89400717 	ldw	r5,28(r17)
10004480:	800f883a 	mov	r7,r16
10004484:	900d883a 	mov	r6,r18
10004488:	9809883a 	mov	r4,r19
1000448c:	103ee83a 	callr	r2
10004490:	80a1c83a 	sub	r16,r16,r2
10004494:	00bff616 	blt	zero,r2,10004470 <__alt_data_end+0xf8004470>
10004498:	88c0030b 	ldhu	r3,12(r17)
1000449c:	00bfffc4 	movi	r2,-1
100044a0:	18c01014 	ori	r3,r3,64
100044a4:	88c0030d 	sth	r3,12(r17)
100044a8:	003fdf06 	br	10004428 <__alt_data_end+0xf8004428>
100044ac:	0005883a 	mov	r2,zero
100044b0:	003fec06 	br	10004464 <__alt_data_end+0xf8004464>
100044b4:	88801415 	stw	r2,80(r17)
100044b8:	003fd206 	br	10004404 <__alt_data_end+0xf8004404>
100044bc:	28c00f17 	ldw	r3,60(r5)
100044c0:	00ffb316 	blt	zero,r3,10004390 <__alt_data_end+0xf8004390>
100044c4:	003fd706 	br	10004424 <__alt_data_end+0xf8004424>
100044c8:	89400717 	ldw	r5,28(r17)
100044cc:	000d883a 	mov	r6,zero
100044d0:	01c00044 	movi	r7,1
100044d4:	9809883a 	mov	r4,r19
100044d8:	403ee83a 	callr	r8
100044dc:	100d883a 	mov	r6,r2
100044e0:	00bfffc4 	movi	r2,-1
100044e4:	30801426 	beq	r6,r2,10004538 <__sflush_r+0x1e4>
100044e8:	8880030b 	ldhu	r2,12(r17)
100044ec:	8a000a17 	ldw	r8,40(r17)
100044f0:	003fae06 	br	100043ac <__alt_data_end+0xf80043ac>
100044f4:	98c00017 	ldw	r3,0(r19)
100044f8:	183fba26 	beq	r3,zero,100043e4 <__alt_data_end+0xf80043e4>
100044fc:	01000744 	movi	r4,29
10004500:	19000626 	beq	r3,r4,1000451c <__sflush_r+0x1c8>
10004504:	01000584 	movi	r4,22
10004508:	19000426 	beq	r3,r4,1000451c <__sflush_r+0x1c8>
1000450c:	88c0030b 	ldhu	r3,12(r17)
10004510:	18c01014 	ori	r3,r3,64
10004514:	88c0030d 	sth	r3,12(r17)
10004518:	003fc306 	br	10004428 <__alt_data_end+0xf8004428>
1000451c:	8880030b 	ldhu	r2,12(r17)
10004520:	88c00417 	ldw	r3,16(r17)
10004524:	88000115 	stw	zero,4(r17)
10004528:	10bdffcc 	andi	r2,r2,63487
1000452c:	8880030d 	sth	r2,12(r17)
10004530:	88c00015 	stw	r3,0(r17)
10004534:	003fb306 	br	10004404 <__alt_data_end+0xf8004404>
10004538:	98800017 	ldw	r2,0(r19)
1000453c:	103fea26 	beq	r2,zero,100044e8 <__alt_data_end+0xf80044e8>
10004540:	00c00744 	movi	r3,29
10004544:	10c00226 	beq	r2,r3,10004550 <__sflush_r+0x1fc>
10004548:	00c00584 	movi	r3,22
1000454c:	10c0031e 	bne	r2,r3,1000455c <__sflush_r+0x208>
10004550:	9c000015 	stw	r16,0(r19)
10004554:	0005883a 	mov	r2,zero
10004558:	003fb306 	br	10004428 <__alt_data_end+0xf8004428>
1000455c:	88c0030b 	ldhu	r3,12(r17)
10004560:	3005883a 	mov	r2,r6
10004564:	18c01014 	ori	r3,r3,64
10004568:	88c0030d 	sth	r3,12(r17)
1000456c:	003fae06 	br	10004428 <__alt_data_end+0xf8004428>

10004570 <_fflush_r>:
10004570:	defffd04 	addi	sp,sp,-12
10004574:	dc000115 	stw	r16,4(sp)
10004578:	dfc00215 	stw	ra,8(sp)
1000457c:	2021883a 	mov	r16,r4
10004580:	20000226 	beq	r4,zero,1000458c <_fflush_r+0x1c>
10004584:	20800e17 	ldw	r2,56(r4)
10004588:	10000c26 	beq	r2,zero,100045bc <_fflush_r+0x4c>
1000458c:	2880030f 	ldh	r2,12(r5)
10004590:	1000051e 	bne	r2,zero,100045a8 <_fflush_r+0x38>
10004594:	0005883a 	mov	r2,zero
10004598:	dfc00217 	ldw	ra,8(sp)
1000459c:	dc000117 	ldw	r16,4(sp)
100045a0:	dec00304 	addi	sp,sp,12
100045a4:	f800283a 	ret
100045a8:	8009883a 	mov	r4,r16
100045ac:	dfc00217 	ldw	ra,8(sp)
100045b0:	dc000117 	ldw	r16,4(sp)
100045b4:	dec00304 	addi	sp,sp,12
100045b8:	00043541 	jmpi	10004354 <__sflush_r>
100045bc:	d9400015 	stw	r5,0(sp)
100045c0:	000494c0 	call	1000494c <__sinit>
100045c4:	d9400017 	ldw	r5,0(sp)
100045c8:	003ff006 	br	1000458c <__alt_data_end+0xf800458c>

100045cc <fflush>:
100045cc:	20000526 	beq	r4,zero,100045e4 <fflush+0x18>
100045d0:	00840074 	movhi	r2,4097
100045d4:	1099da04 	addi	r2,r2,26472
100045d8:	200b883a 	mov	r5,r4
100045dc:	11000017 	ldw	r4,0(r2)
100045e0:	00045701 	jmpi	10004570 <_fflush_r>
100045e4:	00840074 	movhi	r2,4097
100045e8:	1099d904 	addi	r2,r2,26468
100045ec:	11000017 	ldw	r4,0(r2)
100045f0:	01440034 	movhi	r5,4096
100045f4:	29515c04 	addi	r5,r5,17776
100045f8:	00053501 	jmpi	10005350 <_fwalk_reent>

100045fc <__fp_unlock>:
100045fc:	0005883a 	mov	r2,zero
10004600:	f800283a 	ret

10004604 <_cleanup_r>:
10004604:	01440074 	movhi	r5,4097
10004608:	2964da04 	addi	r5,r5,-27800
1000460c:	00053501 	jmpi	10005350 <_fwalk_reent>

10004610 <__sinit.part.1>:
10004610:	defff704 	addi	sp,sp,-36
10004614:	00c40034 	movhi	r3,4096
10004618:	dfc00815 	stw	ra,32(sp)
1000461c:	ddc00715 	stw	r23,28(sp)
10004620:	dd800615 	stw	r22,24(sp)
10004624:	dd400515 	stw	r21,20(sp)
10004628:	dd000415 	stw	r20,16(sp)
1000462c:	dcc00315 	stw	r19,12(sp)
10004630:	dc800215 	stw	r18,8(sp)
10004634:	dc400115 	stw	r17,4(sp)
10004638:	dc000015 	stw	r16,0(sp)
1000463c:	18d18104 	addi	r3,r3,17924
10004640:	24000117 	ldw	r16,4(r4)
10004644:	20c00f15 	stw	r3,60(r4)
10004648:	2080bb04 	addi	r2,r4,748
1000464c:	00c000c4 	movi	r3,3
10004650:	20c0b915 	stw	r3,740(r4)
10004654:	2080ba15 	stw	r2,744(r4)
10004658:	2000b815 	stw	zero,736(r4)
1000465c:	05c00204 	movi	r23,8
10004660:	00800104 	movi	r2,4
10004664:	2025883a 	mov	r18,r4
10004668:	b80d883a 	mov	r6,r23
1000466c:	81001704 	addi	r4,r16,92
10004670:	000b883a 	mov	r5,zero
10004674:	80000015 	stw	zero,0(r16)
10004678:	80000115 	stw	zero,4(r16)
1000467c:	80000215 	stw	zero,8(r16)
10004680:	8080030d 	sth	r2,12(r16)
10004684:	80001915 	stw	zero,100(r16)
10004688:	8000038d 	sth	zero,14(r16)
1000468c:	80000415 	stw	zero,16(r16)
10004690:	80000515 	stw	zero,20(r16)
10004694:	80000615 	stw	zero,24(r16)
10004698:	00062400 	call	10006240 <memset>
1000469c:	05840034 	movhi	r22,4096
100046a0:	94400217 	ldw	r17,8(r18)
100046a4:	05440034 	movhi	r21,4096
100046a8:	05040034 	movhi	r20,4096
100046ac:	04c40034 	movhi	r19,4096
100046b0:	b59e6404 	addi	r22,r22,31120
100046b4:	ad5e7b04 	addi	r21,r21,31212
100046b8:	a51e9a04 	addi	r20,r20,31336
100046bc:	9cdeb104 	addi	r19,r19,31428
100046c0:	85800815 	stw	r22,32(r16)
100046c4:	85400915 	stw	r21,36(r16)
100046c8:	85000a15 	stw	r20,40(r16)
100046cc:	84c00b15 	stw	r19,44(r16)
100046d0:	84000715 	stw	r16,28(r16)
100046d4:	00800284 	movi	r2,10
100046d8:	8880030d 	sth	r2,12(r17)
100046dc:	00800044 	movi	r2,1
100046e0:	b80d883a 	mov	r6,r23
100046e4:	89001704 	addi	r4,r17,92
100046e8:	000b883a 	mov	r5,zero
100046ec:	88000015 	stw	zero,0(r17)
100046f0:	88000115 	stw	zero,4(r17)
100046f4:	88000215 	stw	zero,8(r17)
100046f8:	88001915 	stw	zero,100(r17)
100046fc:	8880038d 	sth	r2,14(r17)
10004700:	88000415 	stw	zero,16(r17)
10004704:	88000515 	stw	zero,20(r17)
10004708:	88000615 	stw	zero,24(r17)
1000470c:	00062400 	call	10006240 <memset>
10004710:	94000317 	ldw	r16,12(r18)
10004714:	00800484 	movi	r2,18
10004718:	8c400715 	stw	r17,28(r17)
1000471c:	8d800815 	stw	r22,32(r17)
10004720:	8d400915 	stw	r21,36(r17)
10004724:	8d000a15 	stw	r20,40(r17)
10004728:	8cc00b15 	stw	r19,44(r17)
1000472c:	8080030d 	sth	r2,12(r16)
10004730:	00800084 	movi	r2,2
10004734:	80000015 	stw	zero,0(r16)
10004738:	80000115 	stw	zero,4(r16)
1000473c:	80000215 	stw	zero,8(r16)
10004740:	80001915 	stw	zero,100(r16)
10004744:	8080038d 	sth	r2,14(r16)
10004748:	80000415 	stw	zero,16(r16)
1000474c:	80000515 	stw	zero,20(r16)
10004750:	80000615 	stw	zero,24(r16)
10004754:	b80d883a 	mov	r6,r23
10004758:	000b883a 	mov	r5,zero
1000475c:	81001704 	addi	r4,r16,92
10004760:	00062400 	call	10006240 <memset>
10004764:	00800044 	movi	r2,1
10004768:	84000715 	stw	r16,28(r16)
1000476c:	85800815 	stw	r22,32(r16)
10004770:	85400915 	stw	r21,36(r16)
10004774:	85000a15 	stw	r20,40(r16)
10004778:	84c00b15 	stw	r19,44(r16)
1000477c:	90800e15 	stw	r2,56(r18)
10004780:	dfc00817 	ldw	ra,32(sp)
10004784:	ddc00717 	ldw	r23,28(sp)
10004788:	dd800617 	ldw	r22,24(sp)
1000478c:	dd400517 	ldw	r21,20(sp)
10004790:	dd000417 	ldw	r20,16(sp)
10004794:	dcc00317 	ldw	r19,12(sp)
10004798:	dc800217 	ldw	r18,8(sp)
1000479c:	dc400117 	ldw	r17,4(sp)
100047a0:	dc000017 	ldw	r16,0(sp)
100047a4:	dec00904 	addi	sp,sp,36
100047a8:	f800283a 	ret

100047ac <__fp_lock>:
100047ac:	0005883a 	mov	r2,zero
100047b0:	f800283a 	ret

100047b4 <__sfmoreglue>:
100047b4:	defffc04 	addi	sp,sp,-16
100047b8:	dc400115 	stw	r17,4(sp)
100047bc:	2c7fffc4 	addi	r17,r5,-1
100047c0:	8c401a24 	muli	r17,r17,104
100047c4:	dc800215 	stw	r18,8(sp)
100047c8:	2825883a 	mov	r18,r5
100047cc:	89401d04 	addi	r5,r17,116
100047d0:	dc000015 	stw	r16,0(sp)
100047d4:	dfc00315 	stw	ra,12(sp)
100047d8:	00056ac0 	call	100056ac <_malloc_r>
100047dc:	1021883a 	mov	r16,r2
100047e0:	10000726 	beq	r2,zero,10004800 <__sfmoreglue+0x4c>
100047e4:	11000304 	addi	r4,r2,12
100047e8:	10000015 	stw	zero,0(r2)
100047ec:	14800115 	stw	r18,4(r2)
100047f0:	11000215 	stw	r4,8(r2)
100047f4:	89801a04 	addi	r6,r17,104
100047f8:	000b883a 	mov	r5,zero
100047fc:	00062400 	call	10006240 <memset>
10004800:	8005883a 	mov	r2,r16
10004804:	dfc00317 	ldw	ra,12(sp)
10004808:	dc800217 	ldw	r18,8(sp)
1000480c:	dc400117 	ldw	r17,4(sp)
10004810:	dc000017 	ldw	r16,0(sp)
10004814:	dec00404 	addi	sp,sp,16
10004818:	f800283a 	ret

1000481c <__sfp>:
1000481c:	defffb04 	addi	sp,sp,-20
10004820:	dc000015 	stw	r16,0(sp)
10004824:	04040074 	movhi	r16,4097
10004828:	8419d904 	addi	r16,r16,26468
1000482c:	dcc00315 	stw	r19,12(sp)
10004830:	2027883a 	mov	r19,r4
10004834:	81000017 	ldw	r4,0(r16)
10004838:	dfc00415 	stw	ra,16(sp)
1000483c:	dc800215 	stw	r18,8(sp)
10004840:	20800e17 	ldw	r2,56(r4)
10004844:	dc400115 	stw	r17,4(sp)
10004848:	1000021e 	bne	r2,zero,10004854 <__sfp+0x38>
1000484c:	00046100 	call	10004610 <__sinit.part.1>
10004850:	81000017 	ldw	r4,0(r16)
10004854:	2480b804 	addi	r18,r4,736
10004858:	047fffc4 	movi	r17,-1
1000485c:	91000117 	ldw	r4,4(r18)
10004860:	94000217 	ldw	r16,8(r18)
10004864:	213fffc4 	addi	r4,r4,-1
10004868:	20000a16 	blt	r4,zero,10004894 <__sfp+0x78>
1000486c:	8080030f 	ldh	r2,12(r16)
10004870:	10000c26 	beq	r2,zero,100048a4 <__sfp+0x88>
10004874:	80c01d04 	addi	r3,r16,116
10004878:	00000206 	br	10004884 <__sfp+0x68>
1000487c:	18bfe60f 	ldh	r2,-104(r3)
10004880:	10000826 	beq	r2,zero,100048a4 <__sfp+0x88>
10004884:	213fffc4 	addi	r4,r4,-1
10004888:	1c3ffd04 	addi	r16,r3,-12
1000488c:	18c01a04 	addi	r3,r3,104
10004890:	247ffa1e 	bne	r4,r17,1000487c <__alt_data_end+0xf800487c>
10004894:	90800017 	ldw	r2,0(r18)
10004898:	10001d26 	beq	r2,zero,10004910 <__sfp+0xf4>
1000489c:	1025883a 	mov	r18,r2
100048a0:	003fee06 	br	1000485c <__alt_data_end+0xf800485c>
100048a4:	00bfffc4 	movi	r2,-1
100048a8:	8080038d 	sth	r2,14(r16)
100048ac:	00800044 	movi	r2,1
100048b0:	8080030d 	sth	r2,12(r16)
100048b4:	80001915 	stw	zero,100(r16)
100048b8:	80000015 	stw	zero,0(r16)
100048bc:	80000215 	stw	zero,8(r16)
100048c0:	80000115 	stw	zero,4(r16)
100048c4:	80000415 	stw	zero,16(r16)
100048c8:	80000515 	stw	zero,20(r16)
100048cc:	80000615 	stw	zero,24(r16)
100048d0:	01800204 	movi	r6,8
100048d4:	000b883a 	mov	r5,zero
100048d8:	81001704 	addi	r4,r16,92
100048dc:	00062400 	call	10006240 <memset>
100048e0:	8005883a 	mov	r2,r16
100048e4:	80000c15 	stw	zero,48(r16)
100048e8:	80000d15 	stw	zero,52(r16)
100048ec:	80001115 	stw	zero,68(r16)
100048f0:	80001215 	stw	zero,72(r16)
100048f4:	dfc00417 	ldw	ra,16(sp)
100048f8:	dcc00317 	ldw	r19,12(sp)
100048fc:	dc800217 	ldw	r18,8(sp)
10004900:	dc400117 	ldw	r17,4(sp)
10004904:	dc000017 	ldw	r16,0(sp)
10004908:	dec00504 	addi	sp,sp,20
1000490c:	f800283a 	ret
10004910:	01400104 	movi	r5,4
10004914:	9809883a 	mov	r4,r19
10004918:	00047b40 	call	100047b4 <__sfmoreglue>
1000491c:	90800015 	stw	r2,0(r18)
10004920:	103fde1e 	bne	r2,zero,1000489c <__alt_data_end+0xf800489c>
10004924:	00800304 	movi	r2,12
10004928:	98800015 	stw	r2,0(r19)
1000492c:	0005883a 	mov	r2,zero
10004930:	003ff006 	br	100048f4 <__alt_data_end+0xf80048f4>

10004934 <_cleanup>:
10004934:	00840074 	movhi	r2,4097
10004938:	1099d904 	addi	r2,r2,26468
1000493c:	11000017 	ldw	r4,0(r2)
10004940:	01440074 	movhi	r5,4097
10004944:	2964da04 	addi	r5,r5,-27800
10004948:	00053501 	jmpi	10005350 <_fwalk_reent>

1000494c <__sinit>:
1000494c:	20800e17 	ldw	r2,56(r4)
10004950:	10000126 	beq	r2,zero,10004958 <__sinit+0xc>
10004954:	f800283a 	ret
10004958:	00046101 	jmpi	10004610 <__sinit.part.1>

1000495c <__sfp_lock_acquire>:
1000495c:	f800283a 	ret

10004960 <__sfp_lock_release>:
10004960:	f800283a 	ret

10004964 <__sinit_lock_acquire>:
10004964:	f800283a 	ret

10004968 <__sinit_lock_release>:
10004968:	f800283a 	ret

1000496c <__fp_lock_all>:
1000496c:	00840074 	movhi	r2,4097
10004970:	1099da04 	addi	r2,r2,26472
10004974:	11000017 	ldw	r4,0(r2)
10004978:	01440034 	movhi	r5,4096
1000497c:	2951eb04 	addi	r5,r5,18348
10004980:	000528c1 	jmpi	1000528c <_fwalk>

10004984 <__fp_unlock_all>:
10004984:	00840074 	movhi	r2,4097
10004988:	1099da04 	addi	r2,r2,26472
1000498c:	11000017 	ldw	r4,0(r2)
10004990:	01440034 	movhi	r5,4096
10004994:	29517f04 	addi	r5,r5,17916
10004998:	000528c1 	jmpi	1000528c <_fwalk>

1000499c <_malloc_trim_r>:
1000499c:	defffb04 	addi	sp,sp,-20
100049a0:	dcc00315 	stw	r19,12(sp)
100049a4:	04c40074 	movhi	r19,4097
100049a8:	dc800215 	stw	r18,8(sp)
100049ac:	dc400115 	stw	r17,4(sp)
100049b0:	dc000015 	stw	r16,0(sp)
100049b4:	dfc00415 	stw	ra,16(sp)
100049b8:	2821883a 	mov	r16,r5
100049bc:	9cd43504 	addi	r19,r19,20692
100049c0:	2025883a 	mov	r18,r4
100049c4:	000d36c0 	call	1000d36c <__malloc_lock>
100049c8:	98800217 	ldw	r2,8(r19)
100049cc:	14400117 	ldw	r17,4(r2)
100049d0:	00bfff04 	movi	r2,-4
100049d4:	88a2703a 	and	r17,r17,r2
100049d8:	8c21c83a 	sub	r16,r17,r16
100049dc:	8403fbc4 	addi	r16,r16,4079
100049e0:	8020d33a 	srli	r16,r16,12
100049e4:	0083ffc4 	movi	r2,4095
100049e8:	843fffc4 	addi	r16,r16,-1
100049ec:	8020933a 	slli	r16,r16,12
100049f0:	1400060e 	bge	r2,r16,10004a0c <_malloc_trim_r+0x70>
100049f4:	000b883a 	mov	r5,zero
100049f8:	9009883a 	mov	r4,r18
100049fc:	000793c0 	call	1000793c <_sbrk_r>
10004a00:	98c00217 	ldw	r3,8(r19)
10004a04:	1c47883a 	add	r3,r3,r17
10004a08:	10c00a26 	beq	r2,r3,10004a34 <_malloc_trim_r+0x98>
10004a0c:	9009883a 	mov	r4,r18
10004a10:	000d3900 	call	1000d390 <__malloc_unlock>
10004a14:	0005883a 	mov	r2,zero
10004a18:	dfc00417 	ldw	ra,16(sp)
10004a1c:	dcc00317 	ldw	r19,12(sp)
10004a20:	dc800217 	ldw	r18,8(sp)
10004a24:	dc400117 	ldw	r17,4(sp)
10004a28:	dc000017 	ldw	r16,0(sp)
10004a2c:	dec00504 	addi	sp,sp,20
10004a30:	f800283a 	ret
10004a34:	040bc83a 	sub	r5,zero,r16
10004a38:	9009883a 	mov	r4,r18
10004a3c:	000793c0 	call	1000793c <_sbrk_r>
10004a40:	00ffffc4 	movi	r3,-1
10004a44:	10c00d26 	beq	r2,r3,10004a7c <_malloc_trim_r+0xe0>
10004a48:	00c400b4 	movhi	r3,4098
10004a4c:	18e0e204 	addi	r3,r3,-31864
10004a50:	18800017 	ldw	r2,0(r3)
10004a54:	99000217 	ldw	r4,8(r19)
10004a58:	8c23c83a 	sub	r17,r17,r16
10004a5c:	8c400054 	ori	r17,r17,1
10004a60:	1421c83a 	sub	r16,r2,r16
10004a64:	24400115 	stw	r17,4(r4)
10004a68:	9009883a 	mov	r4,r18
10004a6c:	1c000015 	stw	r16,0(r3)
10004a70:	000d3900 	call	1000d390 <__malloc_unlock>
10004a74:	00800044 	movi	r2,1
10004a78:	003fe706 	br	10004a18 <__alt_data_end+0xf8004a18>
10004a7c:	000b883a 	mov	r5,zero
10004a80:	9009883a 	mov	r4,r18
10004a84:	000793c0 	call	1000793c <_sbrk_r>
10004a88:	99000217 	ldw	r4,8(r19)
10004a8c:	014003c4 	movi	r5,15
10004a90:	1107c83a 	sub	r3,r2,r4
10004a94:	28ffdd0e 	bge	r5,r3,10004a0c <__alt_data_end+0xf8004a0c>
10004a98:	01440074 	movhi	r5,4097
10004a9c:	2959dc04 	addi	r5,r5,26480
10004aa0:	29400017 	ldw	r5,0(r5)
10004aa4:	18c00054 	ori	r3,r3,1
10004aa8:	20c00115 	stw	r3,4(r4)
10004aac:	00c400b4 	movhi	r3,4098
10004ab0:	1145c83a 	sub	r2,r2,r5
10004ab4:	18e0e204 	addi	r3,r3,-31864
10004ab8:	18800015 	stw	r2,0(r3)
10004abc:	003fd306 	br	10004a0c <__alt_data_end+0xf8004a0c>

10004ac0 <_free_r>:
10004ac0:	28004126 	beq	r5,zero,10004bc8 <_free_r+0x108>
10004ac4:	defffd04 	addi	sp,sp,-12
10004ac8:	dc400115 	stw	r17,4(sp)
10004acc:	dc000015 	stw	r16,0(sp)
10004ad0:	2023883a 	mov	r17,r4
10004ad4:	2821883a 	mov	r16,r5
10004ad8:	dfc00215 	stw	ra,8(sp)
10004adc:	000d36c0 	call	1000d36c <__malloc_lock>
10004ae0:	81ffff17 	ldw	r7,-4(r16)
10004ae4:	00bfff84 	movi	r2,-2
10004ae8:	01040074 	movhi	r4,4097
10004aec:	81bffe04 	addi	r6,r16,-8
10004af0:	3884703a 	and	r2,r7,r2
10004af4:	21143504 	addi	r4,r4,20692
10004af8:	308b883a 	add	r5,r6,r2
10004afc:	2a400117 	ldw	r9,4(r5)
10004b00:	22000217 	ldw	r8,8(r4)
10004b04:	00ffff04 	movi	r3,-4
10004b08:	48c6703a 	and	r3,r9,r3
10004b0c:	2a005726 	beq	r5,r8,10004c6c <_free_r+0x1ac>
10004b10:	28c00115 	stw	r3,4(r5)
10004b14:	39c0004c 	andi	r7,r7,1
10004b18:	3800091e 	bne	r7,zero,10004b40 <_free_r+0x80>
10004b1c:	823ffe17 	ldw	r8,-8(r16)
10004b20:	22400204 	addi	r9,r4,8
10004b24:	320dc83a 	sub	r6,r6,r8
10004b28:	31c00217 	ldw	r7,8(r6)
10004b2c:	1205883a 	add	r2,r2,r8
10004b30:	3a406526 	beq	r7,r9,10004cc8 <_free_r+0x208>
10004b34:	32000317 	ldw	r8,12(r6)
10004b38:	3a000315 	stw	r8,12(r7)
10004b3c:	41c00215 	stw	r7,8(r8)
10004b40:	28cf883a 	add	r7,r5,r3
10004b44:	39c00117 	ldw	r7,4(r7)
10004b48:	39c0004c 	andi	r7,r7,1
10004b4c:	38003a26 	beq	r7,zero,10004c38 <_free_r+0x178>
10004b50:	10c00054 	ori	r3,r2,1
10004b54:	30c00115 	stw	r3,4(r6)
10004b58:	3087883a 	add	r3,r6,r2
10004b5c:	18800015 	stw	r2,0(r3)
10004b60:	00c07fc4 	movi	r3,511
10004b64:	18801936 	bltu	r3,r2,10004bcc <_free_r+0x10c>
10004b68:	1004d0fa 	srli	r2,r2,3
10004b6c:	01c00044 	movi	r7,1
10004b70:	21400117 	ldw	r5,4(r4)
10004b74:	10c00044 	addi	r3,r2,1
10004b78:	18c7883a 	add	r3,r3,r3
10004b7c:	1005d0ba 	srai	r2,r2,2
10004b80:	18c7883a 	add	r3,r3,r3
10004b84:	18c7883a 	add	r3,r3,r3
10004b88:	1907883a 	add	r3,r3,r4
10004b8c:	3884983a 	sll	r2,r7,r2
10004b90:	19c00017 	ldw	r7,0(r3)
10004b94:	1a3ffe04 	addi	r8,r3,-8
10004b98:	1144b03a 	or	r2,r2,r5
10004b9c:	32000315 	stw	r8,12(r6)
10004ba0:	31c00215 	stw	r7,8(r6)
10004ba4:	20800115 	stw	r2,4(r4)
10004ba8:	19800015 	stw	r6,0(r3)
10004bac:	39800315 	stw	r6,12(r7)
10004bb0:	8809883a 	mov	r4,r17
10004bb4:	dfc00217 	ldw	ra,8(sp)
10004bb8:	dc400117 	ldw	r17,4(sp)
10004bbc:	dc000017 	ldw	r16,0(sp)
10004bc0:	dec00304 	addi	sp,sp,12
10004bc4:	000d3901 	jmpi	1000d390 <__malloc_unlock>
10004bc8:	f800283a 	ret
10004bcc:	100ad27a 	srli	r5,r2,9
10004bd0:	00c00104 	movi	r3,4
10004bd4:	19404a36 	bltu	r3,r5,10004d00 <_free_r+0x240>
10004bd8:	100ad1ba 	srli	r5,r2,6
10004bdc:	28c00e44 	addi	r3,r5,57
10004be0:	18c7883a 	add	r3,r3,r3
10004be4:	29400e04 	addi	r5,r5,56
10004be8:	18c7883a 	add	r3,r3,r3
10004bec:	18c7883a 	add	r3,r3,r3
10004bf0:	1909883a 	add	r4,r3,r4
10004bf4:	20c00017 	ldw	r3,0(r4)
10004bf8:	01c40074 	movhi	r7,4097
10004bfc:	213ffe04 	addi	r4,r4,-8
10004c00:	39d43504 	addi	r7,r7,20692
10004c04:	20c04426 	beq	r4,r3,10004d18 <_free_r+0x258>
10004c08:	01ffff04 	movi	r7,-4
10004c0c:	19400117 	ldw	r5,4(r3)
10004c10:	29ca703a 	and	r5,r5,r7
10004c14:	1140022e 	bgeu	r2,r5,10004c20 <_free_r+0x160>
10004c18:	18c00217 	ldw	r3,8(r3)
10004c1c:	20fffb1e 	bne	r4,r3,10004c0c <__alt_data_end+0xf8004c0c>
10004c20:	19000317 	ldw	r4,12(r3)
10004c24:	31000315 	stw	r4,12(r6)
10004c28:	30c00215 	stw	r3,8(r6)
10004c2c:	21800215 	stw	r6,8(r4)
10004c30:	19800315 	stw	r6,12(r3)
10004c34:	003fde06 	br	10004bb0 <__alt_data_end+0xf8004bb0>
10004c38:	29c00217 	ldw	r7,8(r5)
10004c3c:	10c5883a 	add	r2,r2,r3
10004c40:	00c40074 	movhi	r3,4097
10004c44:	18d43704 	addi	r3,r3,20700
10004c48:	38c03b26 	beq	r7,r3,10004d38 <_free_r+0x278>
10004c4c:	2a000317 	ldw	r8,12(r5)
10004c50:	11400054 	ori	r5,r2,1
10004c54:	3087883a 	add	r3,r6,r2
10004c58:	3a000315 	stw	r8,12(r7)
10004c5c:	41c00215 	stw	r7,8(r8)
10004c60:	31400115 	stw	r5,4(r6)
10004c64:	18800015 	stw	r2,0(r3)
10004c68:	003fbd06 	br	10004b60 <__alt_data_end+0xf8004b60>
10004c6c:	39c0004c 	andi	r7,r7,1
10004c70:	10c5883a 	add	r2,r2,r3
10004c74:	3800071e 	bne	r7,zero,10004c94 <_free_r+0x1d4>
10004c78:	81fffe17 	ldw	r7,-8(r16)
10004c7c:	31cdc83a 	sub	r6,r6,r7
10004c80:	30c00317 	ldw	r3,12(r6)
10004c84:	31400217 	ldw	r5,8(r6)
10004c88:	11c5883a 	add	r2,r2,r7
10004c8c:	28c00315 	stw	r3,12(r5)
10004c90:	19400215 	stw	r5,8(r3)
10004c94:	10c00054 	ori	r3,r2,1
10004c98:	30c00115 	stw	r3,4(r6)
10004c9c:	00c40074 	movhi	r3,4097
10004ca0:	18d9dd04 	addi	r3,r3,26484
10004ca4:	18c00017 	ldw	r3,0(r3)
10004ca8:	21800215 	stw	r6,8(r4)
10004cac:	10ffc036 	bltu	r2,r3,10004bb0 <__alt_data_end+0xf8004bb0>
10004cb0:	008400b4 	movhi	r2,4098
10004cb4:	10a0cc04 	addi	r2,r2,-31952
10004cb8:	11400017 	ldw	r5,0(r2)
10004cbc:	8809883a 	mov	r4,r17
10004cc0:	000499c0 	call	1000499c <_malloc_trim_r>
10004cc4:	003fba06 	br	10004bb0 <__alt_data_end+0xf8004bb0>
10004cc8:	28c9883a 	add	r4,r5,r3
10004ccc:	21000117 	ldw	r4,4(r4)
10004cd0:	2100004c 	andi	r4,r4,1
10004cd4:	2000391e 	bne	r4,zero,10004dbc <_free_r+0x2fc>
10004cd8:	29c00217 	ldw	r7,8(r5)
10004cdc:	29000317 	ldw	r4,12(r5)
10004ce0:	1885883a 	add	r2,r3,r2
10004ce4:	10c00054 	ori	r3,r2,1
10004ce8:	39000315 	stw	r4,12(r7)
10004cec:	21c00215 	stw	r7,8(r4)
10004cf0:	30c00115 	stw	r3,4(r6)
10004cf4:	308d883a 	add	r6,r6,r2
10004cf8:	30800015 	stw	r2,0(r6)
10004cfc:	003fac06 	br	10004bb0 <__alt_data_end+0xf8004bb0>
10004d00:	00c00504 	movi	r3,20
10004d04:	19401536 	bltu	r3,r5,10004d5c <_free_r+0x29c>
10004d08:	28c01704 	addi	r3,r5,92
10004d0c:	18c7883a 	add	r3,r3,r3
10004d10:	294016c4 	addi	r5,r5,91
10004d14:	003fb406 	br	10004be8 <__alt_data_end+0xf8004be8>
10004d18:	280bd0ba 	srai	r5,r5,2
10004d1c:	00c00044 	movi	r3,1
10004d20:	38800117 	ldw	r2,4(r7)
10004d24:	194a983a 	sll	r5,r3,r5
10004d28:	2007883a 	mov	r3,r4
10004d2c:	2884b03a 	or	r2,r5,r2
10004d30:	38800115 	stw	r2,4(r7)
10004d34:	003fbb06 	br	10004c24 <__alt_data_end+0xf8004c24>
10004d38:	21800515 	stw	r6,20(r4)
10004d3c:	21800415 	stw	r6,16(r4)
10004d40:	10c00054 	ori	r3,r2,1
10004d44:	31c00315 	stw	r7,12(r6)
10004d48:	31c00215 	stw	r7,8(r6)
10004d4c:	30c00115 	stw	r3,4(r6)
10004d50:	308d883a 	add	r6,r6,r2
10004d54:	30800015 	stw	r2,0(r6)
10004d58:	003f9506 	br	10004bb0 <__alt_data_end+0xf8004bb0>
10004d5c:	00c01504 	movi	r3,84
10004d60:	19400536 	bltu	r3,r5,10004d78 <_free_r+0x2b8>
10004d64:	100ad33a 	srli	r5,r2,12
10004d68:	28c01bc4 	addi	r3,r5,111
10004d6c:	18c7883a 	add	r3,r3,r3
10004d70:	29401b84 	addi	r5,r5,110
10004d74:	003f9c06 	br	10004be8 <__alt_data_end+0xf8004be8>
10004d78:	00c05504 	movi	r3,340
10004d7c:	19400536 	bltu	r3,r5,10004d94 <_free_r+0x2d4>
10004d80:	100ad3fa 	srli	r5,r2,15
10004d84:	28c01e04 	addi	r3,r5,120
10004d88:	18c7883a 	add	r3,r3,r3
10004d8c:	29401dc4 	addi	r5,r5,119
10004d90:	003f9506 	br	10004be8 <__alt_data_end+0xf8004be8>
10004d94:	00c15504 	movi	r3,1364
10004d98:	19400536 	bltu	r3,r5,10004db0 <_free_r+0x2f0>
10004d9c:	100ad4ba 	srli	r5,r2,18
10004da0:	28c01f44 	addi	r3,r5,125
10004da4:	18c7883a 	add	r3,r3,r3
10004da8:	29401f04 	addi	r5,r5,124
10004dac:	003f8e06 	br	10004be8 <__alt_data_end+0xf8004be8>
10004db0:	00c03f84 	movi	r3,254
10004db4:	01401f84 	movi	r5,126
10004db8:	003f8b06 	br	10004be8 <__alt_data_end+0xf8004be8>
10004dbc:	10c00054 	ori	r3,r2,1
10004dc0:	30c00115 	stw	r3,4(r6)
10004dc4:	308d883a 	add	r6,r6,r2
10004dc8:	30800015 	stw	r2,0(r6)
10004dcc:	003f7806 	br	10004bb0 <__alt_data_end+0xf8004bb0>

10004dd0 <__sfvwrite_r>:
10004dd0:	30800217 	ldw	r2,8(r6)
10004dd4:	10006726 	beq	r2,zero,10004f74 <__sfvwrite_r+0x1a4>
10004dd8:	28c0030b 	ldhu	r3,12(r5)
10004ddc:	defff404 	addi	sp,sp,-48
10004de0:	dd400715 	stw	r21,28(sp)
10004de4:	dd000615 	stw	r20,24(sp)
10004de8:	dc000215 	stw	r16,8(sp)
10004dec:	dfc00b15 	stw	ra,44(sp)
10004df0:	df000a15 	stw	fp,40(sp)
10004df4:	ddc00915 	stw	r23,36(sp)
10004df8:	dd800815 	stw	r22,32(sp)
10004dfc:	dcc00515 	stw	r19,20(sp)
10004e00:	dc800415 	stw	r18,16(sp)
10004e04:	dc400315 	stw	r17,12(sp)
10004e08:	1880020c 	andi	r2,r3,8
10004e0c:	2821883a 	mov	r16,r5
10004e10:	202b883a 	mov	r21,r4
10004e14:	3029883a 	mov	r20,r6
10004e18:	10002726 	beq	r2,zero,10004eb8 <__sfvwrite_r+0xe8>
10004e1c:	28800417 	ldw	r2,16(r5)
10004e20:	10002526 	beq	r2,zero,10004eb8 <__sfvwrite_r+0xe8>
10004e24:	1880008c 	andi	r2,r3,2
10004e28:	a4400017 	ldw	r17,0(r20)
10004e2c:	10002a26 	beq	r2,zero,10004ed8 <__sfvwrite_r+0x108>
10004e30:	05a00034 	movhi	r22,32768
10004e34:	0027883a 	mov	r19,zero
10004e38:	0025883a 	mov	r18,zero
10004e3c:	b5bf0004 	addi	r22,r22,-1024
10004e40:	980d883a 	mov	r6,r19
10004e44:	a809883a 	mov	r4,r21
10004e48:	90004626 	beq	r18,zero,10004f64 <__sfvwrite_r+0x194>
10004e4c:	900f883a 	mov	r7,r18
10004e50:	b480022e 	bgeu	r22,r18,10004e5c <__sfvwrite_r+0x8c>
10004e54:	01e00034 	movhi	r7,32768
10004e58:	39ff0004 	addi	r7,r7,-1024
10004e5c:	80800917 	ldw	r2,36(r16)
10004e60:	81400717 	ldw	r5,28(r16)
10004e64:	103ee83a 	callr	r2
10004e68:	0080570e 	bge	zero,r2,10004fc8 <__sfvwrite_r+0x1f8>
10004e6c:	a0c00217 	ldw	r3,8(r20)
10004e70:	98a7883a 	add	r19,r19,r2
10004e74:	90a5c83a 	sub	r18,r18,r2
10004e78:	1885c83a 	sub	r2,r3,r2
10004e7c:	a0800215 	stw	r2,8(r20)
10004e80:	103fef1e 	bne	r2,zero,10004e40 <__alt_data_end+0xf8004e40>
10004e84:	0005883a 	mov	r2,zero
10004e88:	dfc00b17 	ldw	ra,44(sp)
10004e8c:	df000a17 	ldw	fp,40(sp)
10004e90:	ddc00917 	ldw	r23,36(sp)
10004e94:	dd800817 	ldw	r22,32(sp)
10004e98:	dd400717 	ldw	r21,28(sp)
10004e9c:	dd000617 	ldw	r20,24(sp)
10004ea0:	dcc00517 	ldw	r19,20(sp)
10004ea4:	dc800417 	ldw	r18,16(sp)
10004ea8:	dc400317 	ldw	r17,12(sp)
10004eac:	dc000217 	ldw	r16,8(sp)
10004eb0:	dec00c04 	addi	sp,sp,48
10004eb4:	f800283a 	ret
10004eb8:	800b883a 	mov	r5,r16
10004ebc:	a809883a 	mov	r4,r21
10004ec0:	00029780 	call	10002978 <__swsetup_r>
10004ec4:	1000eb1e 	bne	r2,zero,10005274 <__sfvwrite_r+0x4a4>
10004ec8:	80c0030b 	ldhu	r3,12(r16)
10004ecc:	a4400017 	ldw	r17,0(r20)
10004ed0:	1880008c 	andi	r2,r3,2
10004ed4:	103fd61e 	bne	r2,zero,10004e30 <__alt_data_end+0xf8004e30>
10004ed8:	1880004c 	andi	r2,r3,1
10004edc:	10003f1e 	bne	r2,zero,10004fdc <__sfvwrite_r+0x20c>
10004ee0:	0039883a 	mov	fp,zero
10004ee4:	0025883a 	mov	r18,zero
10004ee8:	90001a26 	beq	r18,zero,10004f54 <__sfvwrite_r+0x184>
10004eec:	1880800c 	andi	r2,r3,512
10004ef0:	84c00217 	ldw	r19,8(r16)
10004ef4:	10002126 	beq	r2,zero,10004f7c <__sfvwrite_r+0x1ac>
10004ef8:	982f883a 	mov	r23,r19
10004efc:	94c09336 	bltu	r18,r19,1000514c <__sfvwrite_r+0x37c>
10004f00:	1881200c 	andi	r2,r3,1152
10004f04:	10009e1e 	bne	r2,zero,10005180 <__sfvwrite_r+0x3b0>
10004f08:	81000017 	ldw	r4,0(r16)
10004f0c:	b80d883a 	mov	r6,r23
10004f10:	e00b883a 	mov	r5,fp
10004f14:	00060e40 	call	100060e4 <memmove>
10004f18:	80c00217 	ldw	r3,8(r16)
10004f1c:	81000017 	ldw	r4,0(r16)
10004f20:	9005883a 	mov	r2,r18
10004f24:	1ce7c83a 	sub	r19,r3,r19
10004f28:	25cf883a 	add	r7,r4,r23
10004f2c:	84c00215 	stw	r19,8(r16)
10004f30:	81c00015 	stw	r7,0(r16)
10004f34:	a0c00217 	ldw	r3,8(r20)
10004f38:	e0b9883a 	add	fp,fp,r2
10004f3c:	90a5c83a 	sub	r18,r18,r2
10004f40:	18a7c83a 	sub	r19,r3,r2
10004f44:	a4c00215 	stw	r19,8(r20)
10004f48:	983fce26 	beq	r19,zero,10004e84 <__alt_data_end+0xf8004e84>
10004f4c:	80c0030b 	ldhu	r3,12(r16)
10004f50:	903fe61e 	bne	r18,zero,10004eec <__alt_data_end+0xf8004eec>
10004f54:	8f000017 	ldw	fp,0(r17)
10004f58:	8c800117 	ldw	r18,4(r17)
10004f5c:	8c400204 	addi	r17,r17,8
10004f60:	003fe106 	br	10004ee8 <__alt_data_end+0xf8004ee8>
10004f64:	8cc00017 	ldw	r19,0(r17)
10004f68:	8c800117 	ldw	r18,4(r17)
10004f6c:	8c400204 	addi	r17,r17,8
10004f70:	003fb306 	br	10004e40 <__alt_data_end+0xf8004e40>
10004f74:	0005883a 	mov	r2,zero
10004f78:	f800283a 	ret
10004f7c:	81000017 	ldw	r4,0(r16)
10004f80:	80800417 	ldw	r2,16(r16)
10004f84:	11005736 	bltu	r2,r4,100050e4 <__sfvwrite_r+0x314>
10004f88:	85c00517 	ldw	r23,20(r16)
10004f8c:	95c05536 	bltu	r18,r23,100050e4 <__sfvwrite_r+0x314>
10004f90:	00a00034 	movhi	r2,32768
10004f94:	10bfffc4 	addi	r2,r2,-1
10004f98:	9009883a 	mov	r4,r18
10004f9c:	1480012e 	bgeu	r2,r18,10004fa4 <__sfvwrite_r+0x1d4>
10004fa0:	1009883a 	mov	r4,r2
10004fa4:	b80b883a 	mov	r5,r23
10004fa8:	000a5d40 	call	1000a5d4 <__divsi3>
10004fac:	15cf383a 	mul	r7,r2,r23
10004fb0:	81400717 	ldw	r5,28(r16)
10004fb4:	80800917 	ldw	r2,36(r16)
10004fb8:	e00d883a 	mov	r6,fp
10004fbc:	a809883a 	mov	r4,r21
10004fc0:	103ee83a 	callr	r2
10004fc4:	00bfdb16 	blt	zero,r2,10004f34 <__alt_data_end+0xf8004f34>
10004fc8:	8080030b 	ldhu	r2,12(r16)
10004fcc:	10801014 	ori	r2,r2,64
10004fd0:	8080030d 	sth	r2,12(r16)
10004fd4:	00bfffc4 	movi	r2,-1
10004fd8:	003fab06 	br	10004e88 <__alt_data_end+0xf8004e88>
10004fdc:	0027883a 	mov	r19,zero
10004fe0:	0011883a 	mov	r8,zero
10004fe4:	0039883a 	mov	fp,zero
10004fe8:	0025883a 	mov	r18,zero
10004fec:	90001f26 	beq	r18,zero,1000506c <__sfvwrite_r+0x29c>
10004ff0:	40005a26 	beq	r8,zero,1000515c <__sfvwrite_r+0x38c>
10004ff4:	982d883a 	mov	r22,r19
10004ff8:	94c0012e 	bgeu	r18,r19,10005000 <__sfvwrite_r+0x230>
10004ffc:	902d883a 	mov	r22,r18
10005000:	81000017 	ldw	r4,0(r16)
10005004:	80800417 	ldw	r2,16(r16)
10005008:	b02f883a 	mov	r23,r22
1000500c:	81c00517 	ldw	r7,20(r16)
10005010:	1100032e 	bgeu	r2,r4,10005020 <__sfvwrite_r+0x250>
10005014:	80c00217 	ldw	r3,8(r16)
10005018:	38c7883a 	add	r3,r7,r3
1000501c:	1d801816 	blt	r3,r22,10005080 <__sfvwrite_r+0x2b0>
10005020:	b1c03e16 	blt	r22,r7,1000511c <__sfvwrite_r+0x34c>
10005024:	80800917 	ldw	r2,36(r16)
10005028:	81400717 	ldw	r5,28(r16)
1000502c:	e00d883a 	mov	r6,fp
10005030:	da000115 	stw	r8,4(sp)
10005034:	a809883a 	mov	r4,r21
10005038:	103ee83a 	callr	r2
1000503c:	102f883a 	mov	r23,r2
10005040:	da000117 	ldw	r8,4(sp)
10005044:	00bfe00e 	bge	zero,r2,10004fc8 <__alt_data_end+0xf8004fc8>
10005048:	9de7c83a 	sub	r19,r19,r23
1000504c:	98001f26 	beq	r19,zero,100050cc <__sfvwrite_r+0x2fc>
10005050:	a0800217 	ldw	r2,8(r20)
10005054:	e5f9883a 	add	fp,fp,r23
10005058:	95e5c83a 	sub	r18,r18,r23
1000505c:	15efc83a 	sub	r23,r2,r23
10005060:	a5c00215 	stw	r23,8(r20)
10005064:	b83f8726 	beq	r23,zero,10004e84 <__alt_data_end+0xf8004e84>
10005068:	903fe11e 	bne	r18,zero,10004ff0 <__alt_data_end+0xf8004ff0>
1000506c:	8f000017 	ldw	fp,0(r17)
10005070:	8c800117 	ldw	r18,4(r17)
10005074:	0011883a 	mov	r8,zero
10005078:	8c400204 	addi	r17,r17,8
1000507c:	003fdb06 	br	10004fec <__alt_data_end+0xf8004fec>
10005080:	180d883a 	mov	r6,r3
10005084:	e00b883a 	mov	r5,fp
10005088:	da000115 	stw	r8,4(sp)
1000508c:	d8c00015 	stw	r3,0(sp)
10005090:	00060e40 	call	100060e4 <memmove>
10005094:	d8c00017 	ldw	r3,0(sp)
10005098:	80800017 	ldw	r2,0(r16)
1000509c:	800b883a 	mov	r5,r16
100050a0:	a809883a 	mov	r4,r21
100050a4:	10c5883a 	add	r2,r2,r3
100050a8:	80800015 	stw	r2,0(r16)
100050ac:	d8c00015 	stw	r3,0(sp)
100050b0:	00045700 	call	10004570 <_fflush_r>
100050b4:	d8c00017 	ldw	r3,0(sp)
100050b8:	da000117 	ldw	r8,4(sp)
100050bc:	103fc21e 	bne	r2,zero,10004fc8 <__alt_data_end+0xf8004fc8>
100050c0:	182f883a 	mov	r23,r3
100050c4:	9de7c83a 	sub	r19,r19,r23
100050c8:	983fe11e 	bne	r19,zero,10005050 <__alt_data_end+0xf8005050>
100050cc:	800b883a 	mov	r5,r16
100050d0:	a809883a 	mov	r4,r21
100050d4:	00045700 	call	10004570 <_fflush_r>
100050d8:	103fbb1e 	bne	r2,zero,10004fc8 <__alt_data_end+0xf8004fc8>
100050dc:	0011883a 	mov	r8,zero
100050e0:	003fdb06 	br	10005050 <__alt_data_end+0xf8005050>
100050e4:	94c0012e 	bgeu	r18,r19,100050ec <__sfvwrite_r+0x31c>
100050e8:	9027883a 	mov	r19,r18
100050ec:	980d883a 	mov	r6,r19
100050f0:	e00b883a 	mov	r5,fp
100050f4:	00060e40 	call	100060e4 <memmove>
100050f8:	80800217 	ldw	r2,8(r16)
100050fc:	80c00017 	ldw	r3,0(r16)
10005100:	14c5c83a 	sub	r2,r2,r19
10005104:	1cc7883a 	add	r3,r3,r19
10005108:	80800215 	stw	r2,8(r16)
1000510c:	80c00015 	stw	r3,0(r16)
10005110:	10004326 	beq	r2,zero,10005220 <__sfvwrite_r+0x450>
10005114:	9805883a 	mov	r2,r19
10005118:	003f8606 	br	10004f34 <__alt_data_end+0xf8004f34>
1000511c:	b00d883a 	mov	r6,r22
10005120:	e00b883a 	mov	r5,fp
10005124:	da000115 	stw	r8,4(sp)
10005128:	00060e40 	call	100060e4 <memmove>
1000512c:	80800217 	ldw	r2,8(r16)
10005130:	80c00017 	ldw	r3,0(r16)
10005134:	da000117 	ldw	r8,4(sp)
10005138:	1585c83a 	sub	r2,r2,r22
1000513c:	1dad883a 	add	r22,r3,r22
10005140:	80800215 	stw	r2,8(r16)
10005144:	85800015 	stw	r22,0(r16)
10005148:	003fbf06 	br	10005048 <__alt_data_end+0xf8005048>
1000514c:	81000017 	ldw	r4,0(r16)
10005150:	9027883a 	mov	r19,r18
10005154:	902f883a 	mov	r23,r18
10005158:	003f6c06 	br	10004f0c <__alt_data_end+0xf8004f0c>
1000515c:	900d883a 	mov	r6,r18
10005160:	01400284 	movi	r5,10
10005164:	e009883a 	mov	r4,fp
10005168:	0005eb80 	call	10005eb8 <memchr>
1000516c:	10003e26 	beq	r2,zero,10005268 <__sfvwrite_r+0x498>
10005170:	10800044 	addi	r2,r2,1
10005174:	1727c83a 	sub	r19,r2,fp
10005178:	02000044 	movi	r8,1
1000517c:	003f9d06 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10005180:	80800517 	ldw	r2,20(r16)
10005184:	81400417 	ldw	r5,16(r16)
10005188:	81c00017 	ldw	r7,0(r16)
1000518c:	10a7883a 	add	r19,r2,r2
10005190:	9885883a 	add	r2,r19,r2
10005194:	1026d7fa 	srli	r19,r2,31
10005198:	396dc83a 	sub	r22,r7,r5
1000519c:	b1000044 	addi	r4,r22,1
100051a0:	9885883a 	add	r2,r19,r2
100051a4:	1027d07a 	srai	r19,r2,1
100051a8:	2485883a 	add	r2,r4,r18
100051ac:	980d883a 	mov	r6,r19
100051b0:	9880022e 	bgeu	r19,r2,100051bc <__sfvwrite_r+0x3ec>
100051b4:	1027883a 	mov	r19,r2
100051b8:	100d883a 	mov	r6,r2
100051bc:	18c1000c 	andi	r3,r3,1024
100051c0:	18001c26 	beq	r3,zero,10005234 <__sfvwrite_r+0x464>
100051c4:	300b883a 	mov	r5,r6
100051c8:	a809883a 	mov	r4,r21
100051cc:	00056ac0 	call	100056ac <_malloc_r>
100051d0:	102f883a 	mov	r23,r2
100051d4:	10002926 	beq	r2,zero,1000527c <__sfvwrite_r+0x4ac>
100051d8:	81400417 	ldw	r5,16(r16)
100051dc:	b00d883a 	mov	r6,r22
100051e0:	1009883a 	mov	r4,r2
100051e4:	0005f9c0 	call	10005f9c <memcpy>
100051e8:	8080030b 	ldhu	r2,12(r16)
100051ec:	00fedfc4 	movi	r3,-1153
100051f0:	10c4703a 	and	r2,r2,r3
100051f4:	10802014 	ori	r2,r2,128
100051f8:	8080030d 	sth	r2,12(r16)
100051fc:	bd89883a 	add	r4,r23,r22
10005200:	9d8fc83a 	sub	r7,r19,r22
10005204:	85c00415 	stw	r23,16(r16)
10005208:	84c00515 	stw	r19,20(r16)
1000520c:	81000015 	stw	r4,0(r16)
10005210:	9027883a 	mov	r19,r18
10005214:	81c00215 	stw	r7,8(r16)
10005218:	902f883a 	mov	r23,r18
1000521c:	003f3b06 	br	10004f0c <__alt_data_end+0xf8004f0c>
10005220:	800b883a 	mov	r5,r16
10005224:	a809883a 	mov	r4,r21
10005228:	00045700 	call	10004570 <_fflush_r>
1000522c:	103fb926 	beq	r2,zero,10005114 <__alt_data_end+0xf8005114>
10005230:	003f6506 	br	10004fc8 <__alt_data_end+0xf8004fc8>
10005234:	a809883a 	mov	r4,r21
10005238:	00073640 	call	10007364 <_realloc_r>
1000523c:	102f883a 	mov	r23,r2
10005240:	103fee1e 	bne	r2,zero,100051fc <__alt_data_end+0xf80051fc>
10005244:	81400417 	ldw	r5,16(r16)
10005248:	a809883a 	mov	r4,r21
1000524c:	0004ac00 	call	10004ac0 <_free_r>
10005250:	8080030b 	ldhu	r2,12(r16)
10005254:	00ffdfc4 	movi	r3,-129
10005258:	1884703a 	and	r2,r3,r2
1000525c:	00c00304 	movi	r3,12
10005260:	a8c00015 	stw	r3,0(r21)
10005264:	003f5906 	br	10004fcc <__alt_data_end+0xf8004fcc>
10005268:	94c00044 	addi	r19,r18,1
1000526c:	02000044 	movi	r8,1
10005270:	003f6006 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10005274:	00bfffc4 	movi	r2,-1
10005278:	003f0306 	br	10004e88 <__alt_data_end+0xf8004e88>
1000527c:	00800304 	movi	r2,12
10005280:	a8800015 	stw	r2,0(r21)
10005284:	8080030b 	ldhu	r2,12(r16)
10005288:	003f5006 	br	10004fcc <__alt_data_end+0xf8004fcc>

1000528c <_fwalk>:
1000528c:	defff704 	addi	sp,sp,-36
10005290:	dd000415 	stw	r20,16(sp)
10005294:	dfc00815 	stw	ra,32(sp)
10005298:	ddc00715 	stw	r23,28(sp)
1000529c:	dd800615 	stw	r22,24(sp)
100052a0:	dd400515 	stw	r21,20(sp)
100052a4:	dcc00315 	stw	r19,12(sp)
100052a8:	dc800215 	stw	r18,8(sp)
100052ac:	dc400115 	stw	r17,4(sp)
100052b0:	dc000015 	stw	r16,0(sp)
100052b4:	2500b804 	addi	r20,r4,736
100052b8:	a0002326 	beq	r20,zero,10005348 <_fwalk+0xbc>
100052bc:	282b883a 	mov	r21,r5
100052c0:	002f883a 	mov	r23,zero
100052c4:	05800044 	movi	r22,1
100052c8:	04ffffc4 	movi	r19,-1
100052cc:	a4400117 	ldw	r17,4(r20)
100052d0:	a4800217 	ldw	r18,8(r20)
100052d4:	8c7fffc4 	addi	r17,r17,-1
100052d8:	88000d16 	blt	r17,zero,10005310 <_fwalk+0x84>
100052dc:	94000304 	addi	r16,r18,12
100052e0:	94800384 	addi	r18,r18,14
100052e4:	8080000b 	ldhu	r2,0(r16)
100052e8:	8c7fffc4 	addi	r17,r17,-1
100052ec:	813ffd04 	addi	r4,r16,-12
100052f0:	b080042e 	bgeu	r22,r2,10005304 <_fwalk+0x78>
100052f4:	9080000f 	ldh	r2,0(r18)
100052f8:	14c00226 	beq	r2,r19,10005304 <_fwalk+0x78>
100052fc:	a83ee83a 	callr	r21
10005300:	b8aeb03a 	or	r23,r23,r2
10005304:	84001a04 	addi	r16,r16,104
10005308:	94801a04 	addi	r18,r18,104
1000530c:	8cfff51e 	bne	r17,r19,100052e4 <__alt_data_end+0xf80052e4>
10005310:	a5000017 	ldw	r20,0(r20)
10005314:	a03fed1e 	bne	r20,zero,100052cc <__alt_data_end+0xf80052cc>
10005318:	b805883a 	mov	r2,r23
1000531c:	dfc00817 	ldw	ra,32(sp)
10005320:	ddc00717 	ldw	r23,28(sp)
10005324:	dd800617 	ldw	r22,24(sp)
10005328:	dd400517 	ldw	r21,20(sp)
1000532c:	dd000417 	ldw	r20,16(sp)
10005330:	dcc00317 	ldw	r19,12(sp)
10005334:	dc800217 	ldw	r18,8(sp)
10005338:	dc400117 	ldw	r17,4(sp)
1000533c:	dc000017 	ldw	r16,0(sp)
10005340:	dec00904 	addi	sp,sp,36
10005344:	f800283a 	ret
10005348:	002f883a 	mov	r23,zero
1000534c:	003ff206 	br	10005318 <__alt_data_end+0xf8005318>

10005350 <_fwalk_reent>:
10005350:	defff704 	addi	sp,sp,-36
10005354:	dd000415 	stw	r20,16(sp)
10005358:	dfc00815 	stw	ra,32(sp)
1000535c:	ddc00715 	stw	r23,28(sp)
10005360:	dd800615 	stw	r22,24(sp)
10005364:	dd400515 	stw	r21,20(sp)
10005368:	dcc00315 	stw	r19,12(sp)
1000536c:	dc800215 	stw	r18,8(sp)
10005370:	dc400115 	stw	r17,4(sp)
10005374:	dc000015 	stw	r16,0(sp)
10005378:	2500b804 	addi	r20,r4,736
1000537c:	a0002326 	beq	r20,zero,1000540c <_fwalk_reent+0xbc>
10005380:	282b883a 	mov	r21,r5
10005384:	2027883a 	mov	r19,r4
10005388:	002f883a 	mov	r23,zero
1000538c:	05800044 	movi	r22,1
10005390:	04bfffc4 	movi	r18,-1
10005394:	a4400117 	ldw	r17,4(r20)
10005398:	a4000217 	ldw	r16,8(r20)
1000539c:	8c7fffc4 	addi	r17,r17,-1
100053a0:	88000c16 	blt	r17,zero,100053d4 <_fwalk_reent+0x84>
100053a4:	84000304 	addi	r16,r16,12
100053a8:	8080000b 	ldhu	r2,0(r16)
100053ac:	8c7fffc4 	addi	r17,r17,-1
100053b0:	817ffd04 	addi	r5,r16,-12
100053b4:	b080052e 	bgeu	r22,r2,100053cc <_fwalk_reent+0x7c>
100053b8:	8080008f 	ldh	r2,2(r16)
100053bc:	9809883a 	mov	r4,r19
100053c0:	14800226 	beq	r2,r18,100053cc <_fwalk_reent+0x7c>
100053c4:	a83ee83a 	callr	r21
100053c8:	b8aeb03a 	or	r23,r23,r2
100053cc:	84001a04 	addi	r16,r16,104
100053d0:	8cbff51e 	bne	r17,r18,100053a8 <__alt_data_end+0xf80053a8>
100053d4:	a5000017 	ldw	r20,0(r20)
100053d8:	a03fee1e 	bne	r20,zero,10005394 <__alt_data_end+0xf8005394>
100053dc:	b805883a 	mov	r2,r23
100053e0:	dfc00817 	ldw	ra,32(sp)
100053e4:	ddc00717 	ldw	r23,28(sp)
100053e8:	dd800617 	ldw	r22,24(sp)
100053ec:	dd400517 	ldw	r21,20(sp)
100053f0:	dd000417 	ldw	r20,16(sp)
100053f4:	dcc00317 	ldw	r19,12(sp)
100053f8:	dc800217 	ldw	r18,8(sp)
100053fc:	dc400117 	ldw	r17,4(sp)
10005400:	dc000017 	ldw	r16,0(sp)
10005404:	dec00904 	addi	sp,sp,36
10005408:	f800283a 	ret
1000540c:	002f883a 	mov	r23,zero
10005410:	003ff206 	br	100053dc <__alt_data_end+0xf80053dc>

10005414 <_setlocale_r>:
10005414:	30001b26 	beq	r6,zero,10005484 <_setlocale_r+0x70>
10005418:	01440074 	movhi	r5,4097
1000541c:	defffe04 	addi	sp,sp,-8
10005420:	29525f04 	addi	r5,r5,18812
10005424:	3009883a 	mov	r4,r6
10005428:	dc000015 	stw	r16,0(sp)
1000542c:	dfc00115 	stw	ra,4(sp)
10005430:	3021883a 	mov	r16,r6
10005434:	0007acc0 	call	10007acc <strcmp>
10005438:	1000061e 	bne	r2,zero,10005454 <_setlocale_r+0x40>
1000543c:	00840074 	movhi	r2,4097
10005440:	10925e04 	addi	r2,r2,18808
10005444:	dfc00117 	ldw	ra,4(sp)
10005448:	dc000017 	ldw	r16,0(sp)
1000544c:	dec00204 	addi	sp,sp,8
10005450:	f800283a 	ret
10005454:	01440074 	movhi	r5,4097
10005458:	29525e04 	addi	r5,r5,18808
1000545c:	8009883a 	mov	r4,r16
10005460:	0007acc0 	call	10007acc <strcmp>
10005464:	103ff526 	beq	r2,zero,1000543c <__alt_data_end+0xf800543c>
10005468:	01440074 	movhi	r5,4097
1000546c:	29524904 	addi	r5,r5,18724
10005470:	8009883a 	mov	r4,r16
10005474:	0007acc0 	call	10007acc <strcmp>
10005478:	103ff026 	beq	r2,zero,1000543c <__alt_data_end+0xf800543c>
1000547c:	0005883a 	mov	r2,zero
10005480:	003ff006 	br	10005444 <__alt_data_end+0xf8005444>
10005484:	00840074 	movhi	r2,4097
10005488:	10925e04 	addi	r2,r2,18808
1000548c:	f800283a 	ret

10005490 <__locale_charset>:
10005490:	00840074 	movhi	r2,4097
10005494:	10941f04 	addi	r2,r2,20604
10005498:	f800283a 	ret

1000549c <__locale_mb_cur_max>:
1000549c:	00840074 	movhi	r2,4097
100054a0:	1099db04 	addi	r2,r2,26476
100054a4:	10800017 	ldw	r2,0(r2)
100054a8:	f800283a 	ret

100054ac <__locale_msgcharset>:
100054ac:	00840074 	movhi	r2,4097
100054b0:	10941704 	addi	r2,r2,20572
100054b4:	f800283a 	ret

100054b8 <__locale_cjk_lang>:
100054b8:	0005883a 	mov	r2,zero
100054bc:	f800283a 	ret

100054c0 <_localeconv_r>:
100054c0:	00840074 	movhi	r2,4097
100054c4:	10942704 	addi	r2,r2,20636
100054c8:	f800283a 	ret

100054cc <setlocale>:
100054cc:	00840074 	movhi	r2,4097
100054d0:	1099da04 	addi	r2,r2,26472
100054d4:	280d883a 	mov	r6,r5
100054d8:	200b883a 	mov	r5,r4
100054dc:	11000017 	ldw	r4,0(r2)
100054e0:	00054141 	jmpi	10005414 <_setlocale_r>

100054e4 <localeconv>:
100054e4:	00840074 	movhi	r2,4097
100054e8:	10942704 	addi	r2,r2,20636
100054ec:	f800283a 	ret

100054f0 <__smakebuf_r>:
100054f0:	2880030b 	ldhu	r2,12(r5)
100054f4:	10c0008c 	andi	r3,r2,2
100054f8:	1800411e 	bne	r3,zero,10005600 <__smakebuf_r+0x110>
100054fc:	deffec04 	addi	sp,sp,-80
10005500:	dc000f15 	stw	r16,60(sp)
10005504:	2821883a 	mov	r16,r5
10005508:	2940038f 	ldh	r5,14(r5)
1000550c:	dc401015 	stw	r17,64(sp)
10005510:	dfc01315 	stw	ra,76(sp)
10005514:	dcc01215 	stw	r19,72(sp)
10005518:	dc801115 	stw	r18,68(sp)
1000551c:	2023883a 	mov	r17,r4
10005520:	28001c16 	blt	r5,zero,10005594 <__smakebuf_r+0xa4>
10005524:	d80d883a 	mov	r6,sp
10005528:	00096740 	call	10009674 <_fstat_r>
1000552c:	10001816 	blt	r2,zero,10005590 <__smakebuf_r+0xa0>
10005530:	d8800117 	ldw	r2,4(sp)
10005534:	00e00014 	movui	r3,32768
10005538:	10bc000c 	andi	r2,r2,61440
1000553c:	14c80020 	cmpeqi	r19,r2,8192
10005540:	10c03726 	beq	r2,r3,10005620 <__smakebuf_r+0x130>
10005544:	80c0030b 	ldhu	r3,12(r16)
10005548:	18c20014 	ori	r3,r3,2048
1000554c:	80c0030d 	sth	r3,12(r16)
10005550:	00c80004 	movi	r3,8192
10005554:	10c0521e 	bne	r2,r3,100056a0 <__smakebuf_r+0x1b0>
10005558:	8140038f 	ldh	r5,14(r16)
1000555c:	8809883a 	mov	r4,r17
10005560:	00096d00 	call	100096d0 <_isatty_r>
10005564:	10004c26 	beq	r2,zero,10005698 <__smakebuf_r+0x1a8>
10005568:	8080030b 	ldhu	r2,12(r16)
1000556c:	80c010c4 	addi	r3,r16,67
10005570:	80c00015 	stw	r3,0(r16)
10005574:	10800054 	ori	r2,r2,1
10005578:	8080030d 	sth	r2,12(r16)
1000557c:	00800044 	movi	r2,1
10005580:	80c00415 	stw	r3,16(r16)
10005584:	80800515 	stw	r2,20(r16)
10005588:	04810004 	movi	r18,1024
1000558c:	00000706 	br	100055ac <__smakebuf_r+0xbc>
10005590:	8080030b 	ldhu	r2,12(r16)
10005594:	10c0200c 	andi	r3,r2,128
10005598:	18001f1e 	bne	r3,zero,10005618 <__smakebuf_r+0x128>
1000559c:	04810004 	movi	r18,1024
100055a0:	10820014 	ori	r2,r2,2048
100055a4:	8080030d 	sth	r2,12(r16)
100055a8:	0027883a 	mov	r19,zero
100055ac:	900b883a 	mov	r5,r18
100055b0:	8809883a 	mov	r4,r17
100055b4:	00056ac0 	call	100056ac <_malloc_r>
100055b8:	10002c26 	beq	r2,zero,1000566c <__smakebuf_r+0x17c>
100055bc:	80c0030b 	ldhu	r3,12(r16)
100055c0:	01040034 	movhi	r4,4096
100055c4:	21118104 	addi	r4,r4,17924
100055c8:	89000f15 	stw	r4,60(r17)
100055cc:	18c02014 	ori	r3,r3,128
100055d0:	80c0030d 	sth	r3,12(r16)
100055d4:	80800015 	stw	r2,0(r16)
100055d8:	80800415 	stw	r2,16(r16)
100055dc:	84800515 	stw	r18,20(r16)
100055e0:	98001a1e 	bne	r19,zero,1000564c <__smakebuf_r+0x15c>
100055e4:	dfc01317 	ldw	ra,76(sp)
100055e8:	dcc01217 	ldw	r19,72(sp)
100055ec:	dc801117 	ldw	r18,68(sp)
100055f0:	dc401017 	ldw	r17,64(sp)
100055f4:	dc000f17 	ldw	r16,60(sp)
100055f8:	dec01404 	addi	sp,sp,80
100055fc:	f800283a 	ret
10005600:	288010c4 	addi	r2,r5,67
10005604:	28800015 	stw	r2,0(r5)
10005608:	28800415 	stw	r2,16(r5)
1000560c:	00800044 	movi	r2,1
10005610:	28800515 	stw	r2,20(r5)
10005614:	f800283a 	ret
10005618:	04801004 	movi	r18,64
1000561c:	003fe006 	br	100055a0 <__alt_data_end+0xf80055a0>
10005620:	81000a17 	ldw	r4,40(r16)
10005624:	00c40034 	movhi	r3,4096
10005628:	18de9a04 	addi	r3,r3,31336
1000562c:	20ffc51e 	bne	r4,r3,10005544 <__alt_data_end+0xf8005544>
10005630:	8080030b 	ldhu	r2,12(r16)
10005634:	04810004 	movi	r18,1024
10005638:	84801315 	stw	r18,76(r16)
1000563c:	1484b03a 	or	r2,r2,r18
10005640:	8080030d 	sth	r2,12(r16)
10005644:	0027883a 	mov	r19,zero
10005648:	003fd806 	br	100055ac <__alt_data_end+0xf80055ac>
1000564c:	8140038f 	ldh	r5,14(r16)
10005650:	8809883a 	mov	r4,r17
10005654:	00096d00 	call	100096d0 <_isatty_r>
10005658:	103fe226 	beq	r2,zero,100055e4 <__alt_data_end+0xf80055e4>
1000565c:	8080030b 	ldhu	r2,12(r16)
10005660:	10800054 	ori	r2,r2,1
10005664:	8080030d 	sth	r2,12(r16)
10005668:	003fde06 	br	100055e4 <__alt_data_end+0xf80055e4>
1000566c:	8080030b 	ldhu	r2,12(r16)
10005670:	10c0800c 	andi	r3,r2,512
10005674:	183fdb1e 	bne	r3,zero,100055e4 <__alt_data_end+0xf80055e4>
10005678:	10800094 	ori	r2,r2,2
1000567c:	80c010c4 	addi	r3,r16,67
10005680:	8080030d 	sth	r2,12(r16)
10005684:	00800044 	movi	r2,1
10005688:	80c00015 	stw	r3,0(r16)
1000568c:	80c00415 	stw	r3,16(r16)
10005690:	80800515 	stw	r2,20(r16)
10005694:	003fd306 	br	100055e4 <__alt_data_end+0xf80055e4>
10005698:	04810004 	movi	r18,1024
1000569c:	003fc306 	br	100055ac <__alt_data_end+0xf80055ac>
100056a0:	0027883a 	mov	r19,zero
100056a4:	04810004 	movi	r18,1024
100056a8:	003fc006 	br	100055ac <__alt_data_end+0xf80055ac>

100056ac <_malloc_r>:
100056ac:	defff504 	addi	sp,sp,-44
100056b0:	dc800315 	stw	r18,12(sp)
100056b4:	dfc00a15 	stw	ra,40(sp)
100056b8:	df000915 	stw	fp,36(sp)
100056bc:	ddc00815 	stw	r23,32(sp)
100056c0:	dd800715 	stw	r22,28(sp)
100056c4:	dd400615 	stw	r21,24(sp)
100056c8:	dd000515 	stw	r20,20(sp)
100056cc:	dcc00415 	stw	r19,16(sp)
100056d0:	dc400215 	stw	r17,8(sp)
100056d4:	dc000115 	stw	r16,4(sp)
100056d8:	288002c4 	addi	r2,r5,11
100056dc:	00c00584 	movi	r3,22
100056e0:	2025883a 	mov	r18,r4
100056e4:	18807f2e 	bgeu	r3,r2,100058e4 <_malloc_r+0x238>
100056e8:	047ffe04 	movi	r17,-8
100056ec:	1462703a 	and	r17,r2,r17
100056f0:	8800a316 	blt	r17,zero,10005980 <_malloc_r+0x2d4>
100056f4:	8940a236 	bltu	r17,r5,10005980 <_malloc_r+0x2d4>
100056f8:	000d36c0 	call	1000d36c <__malloc_lock>
100056fc:	00807dc4 	movi	r2,503
10005700:	1441e92e 	bgeu	r2,r17,10005ea8 <_malloc_r+0x7fc>
10005704:	8804d27a 	srli	r2,r17,9
10005708:	1000a126 	beq	r2,zero,10005990 <_malloc_r+0x2e4>
1000570c:	00c00104 	movi	r3,4
10005710:	18811e36 	bltu	r3,r2,10005b8c <_malloc_r+0x4e0>
10005714:	8804d1ba 	srli	r2,r17,6
10005718:	12000e44 	addi	r8,r2,57
1000571c:	11c00e04 	addi	r7,r2,56
10005720:	4209883a 	add	r4,r8,r8
10005724:	04c40074 	movhi	r19,4097
10005728:	2109883a 	add	r4,r4,r4
1000572c:	9cd43504 	addi	r19,r19,20692
10005730:	2109883a 	add	r4,r4,r4
10005734:	9909883a 	add	r4,r19,r4
10005738:	24000117 	ldw	r16,4(r4)
1000573c:	213ffe04 	addi	r4,r4,-8
10005740:	24009726 	beq	r4,r16,100059a0 <_malloc_r+0x2f4>
10005744:	80800117 	ldw	r2,4(r16)
10005748:	01bfff04 	movi	r6,-4
1000574c:	014003c4 	movi	r5,15
10005750:	1184703a 	and	r2,r2,r6
10005754:	1447c83a 	sub	r3,r2,r17
10005758:	28c00716 	blt	r5,r3,10005778 <_malloc_r+0xcc>
1000575c:	1800920e 	bge	r3,zero,100059a8 <_malloc_r+0x2fc>
10005760:	84000317 	ldw	r16,12(r16)
10005764:	24008e26 	beq	r4,r16,100059a0 <_malloc_r+0x2f4>
10005768:	80800117 	ldw	r2,4(r16)
1000576c:	1184703a 	and	r2,r2,r6
10005770:	1447c83a 	sub	r3,r2,r17
10005774:	28fff90e 	bge	r5,r3,1000575c <__alt_data_end+0xf800575c>
10005778:	3809883a 	mov	r4,r7
1000577c:	01840074 	movhi	r6,4097
10005780:	9c000417 	ldw	r16,16(r19)
10005784:	31943504 	addi	r6,r6,20692
10005788:	32000204 	addi	r8,r6,8
1000578c:	82013426 	beq	r16,r8,10005c60 <_malloc_r+0x5b4>
10005790:	80c00117 	ldw	r3,4(r16)
10005794:	00bfff04 	movi	r2,-4
10005798:	188e703a 	and	r7,r3,r2
1000579c:	3c45c83a 	sub	r2,r7,r17
100057a0:	00c003c4 	movi	r3,15
100057a4:	18811f16 	blt	r3,r2,10005c24 <_malloc_r+0x578>
100057a8:	32000515 	stw	r8,20(r6)
100057ac:	32000415 	stw	r8,16(r6)
100057b0:	10007f0e 	bge	r2,zero,100059b0 <_malloc_r+0x304>
100057b4:	00807fc4 	movi	r2,511
100057b8:	11c0fd36 	bltu	r2,r7,10005bb0 <_malloc_r+0x504>
100057bc:	3806d0fa 	srli	r3,r7,3
100057c0:	01c00044 	movi	r7,1
100057c4:	30800117 	ldw	r2,4(r6)
100057c8:	19400044 	addi	r5,r3,1
100057cc:	294b883a 	add	r5,r5,r5
100057d0:	1807d0ba 	srai	r3,r3,2
100057d4:	294b883a 	add	r5,r5,r5
100057d8:	294b883a 	add	r5,r5,r5
100057dc:	298b883a 	add	r5,r5,r6
100057e0:	38c6983a 	sll	r3,r7,r3
100057e4:	29c00017 	ldw	r7,0(r5)
100057e8:	2a7ffe04 	addi	r9,r5,-8
100057ec:	1886b03a 	or	r3,r3,r2
100057f0:	82400315 	stw	r9,12(r16)
100057f4:	81c00215 	stw	r7,8(r16)
100057f8:	30c00115 	stw	r3,4(r6)
100057fc:	2c000015 	stw	r16,0(r5)
10005800:	3c000315 	stw	r16,12(r7)
10005804:	2005d0ba 	srai	r2,r4,2
10005808:	01400044 	movi	r5,1
1000580c:	288a983a 	sll	r5,r5,r2
10005810:	19406f36 	bltu	r3,r5,100059d0 <_malloc_r+0x324>
10005814:	28c4703a 	and	r2,r5,r3
10005818:	10000a1e 	bne	r2,zero,10005844 <_malloc_r+0x198>
1000581c:	00bfff04 	movi	r2,-4
10005820:	294b883a 	add	r5,r5,r5
10005824:	2088703a 	and	r4,r4,r2
10005828:	28c4703a 	and	r2,r5,r3
1000582c:	21000104 	addi	r4,r4,4
10005830:	1000041e 	bne	r2,zero,10005844 <_malloc_r+0x198>
10005834:	294b883a 	add	r5,r5,r5
10005838:	28c4703a 	and	r2,r5,r3
1000583c:	21000104 	addi	r4,r4,4
10005840:	103ffc26 	beq	r2,zero,10005834 <__alt_data_end+0xf8005834>
10005844:	02bfff04 	movi	r10,-4
10005848:	024003c4 	movi	r9,15
1000584c:	21800044 	addi	r6,r4,1
10005850:	318d883a 	add	r6,r6,r6
10005854:	318d883a 	add	r6,r6,r6
10005858:	318d883a 	add	r6,r6,r6
1000585c:	998d883a 	add	r6,r19,r6
10005860:	333ffe04 	addi	r12,r6,-8
10005864:	2017883a 	mov	r11,r4
10005868:	31800104 	addi	r6,r6,4
1000586c:	34000017 	ldw	r16,0(r6)
10005870:	31fffd04 	addi	r7,r6,-12
10005874:	81c0041e 	bne	r16,r7,10005888 <_malloc_r+0x1dc>
10005878:	0000fb06 	br	10005c68 <_malloc_r+0x5bc>
1000587c:	1801030e 	bge	r3,zero,10005c8c <_malloc_r+0x5e0>
10005880:	84000317 	ldw	r16,12(r16)
10005884:	81c0f826 	beq	r16,r7,10005c68 <_malloc_r+0x5bc>
10005888:	80800117 	ldw	r2,4(r16)
1000588c:	1284703a 	and	r2,r2,r10
10005890:	1447c83a 	sub	r3,r2,r17
10005894:	48fff90e 	bge	r9,r3,1000587c <__alt_data_end+0xf800587c>
10005898:	80800317 	ldw	r2,12(r16)
1000589c:	81000217 	ldw	r4,8(r16)
100058a0:	89400054 	ori	r5,r17,1
100058a4:	81400115 	stw	r5,4(r16)
100058a8:	20800315 	stw	r2,12(r4)
100058ac:	11000215 	stw	r4,8(r2)
100058b0:	8463883a 	add	r17,r16,r17
100058b4:	9c400515 	stw	r17,20(r19)
100058b8:	9c400415 	stw	r17,16(r19)
100058bc:	18800054 	ori	r2,r3,1
100058c0:	88800115 	stw	r2,4(r17)
100058c4:	8a000315 	stw	r8,12(r17)
100058c8:	8a000215 	stw	r8,8(r17)
100058cc:	88e3883a 	add	r17,r17,r3
100058d0:	88c00015 	stw	r3,0(r17)
100058d4:	9009883a 	mov	r4,r18
100058d8:	000d3900 	call	1000d390 <__malloc_unlock>
100058dc:	80800204 	addi	r2,r16,8
100058e0:	00001b06 	br	10005950 <_malloc_r+0x2a4>
100058e4:	04400404 	movi	r17,16
100058e8:	89402536 	bltu	r17,r5,10005980 <_malloc_r+0x2d4>
100058ec:	000d36c0 	call	1000d36c <__malloc_lock>
100058f0:	00800184 	movi	r2,6
100058f4:	01000084 	movi	r4,2
100058f8:	04c40074 	movhi	r19,4097
100058fc:	1085883a 	add	r2,r2,r2
10005900:	9cd43504 	addi	r19,r19,20692
10005904:	1085883a 	add	r2,r2,r2
10005908:	9885883a 	add	r2,r19,r2
1000590c:	14000117 	ldw	r16,4(r2)
10005910:	10fffe04 	addi	r3,r2,-8
10005914:	80c0d926 	beq	r16,r3,10005c7c <_malloc_r+0x5d0>
10005918:	80c00117 	ldw	r3,4(r16)
1000591c:	81000317 	ldw	r4,12(r16)
10005920:	00bfff04 	movi	r2,-4
10005924:	1884703a 	and	r2,r3,r2
10005928:	81400217 	ldw	r5,8(r16)
1000592c:	8085883a 	add	r2,r16,r2
10005930:	10c00117 	ldw	r3,4(r2)
10005934:	29000315 	stw	r4,12(r5)
10005938:	21400215 	stw	r5,8(r4)
1000593c:	18c00054 	ori	r3,r3,1
10005940:	10c00115 	stw	r3,4(r2)
10005944:	9009883a 	mov	r4,r18
10005948:	000d3900 	call	1000d390 <__malloc_unlock>
1000594c:	80800204 	addi	r2,r16,8
10005950:	dfc00a17 	ldw	ra,40(sp)
10005954:	df000917 	ldw	fp,36(sp)
10005958:	ddc00817 	ldw	r23,32(sp)
1000595c:	dd800717 	ldw	r22,28(sp)
10005960:	dd400617 	ldw	r21,24(sp)
10005964:	dd000517 	ldw	r20,20(sp)
10005968:	dcc00417 	ldw	r19,16(sp)
1000596c:	dc800317 	ldw	r18,12(sp)
10005970:	dc400217 	ldw	r17,8(sp)
10005974:	dc000117 	ldw	r16,4(sp)
10005978:	dec00b04 	addi	sp,sp,44
1000597c:	f800283a 	ret
10005980:	00800304 	movi	r2,12
10005984:	90800015 	stw	r2,0(r18)
10005988:	0005883a 	mov	r2,zero
1000598c:	003ff006 	br	10005950 <__alt_data_end+0xf8005950>
10005990:	01002004 	movi	r4,128
10005994:	02001004 	movi	r8,64
10005998:	01c00fc4 	movi	r7,63
1000599c:	003f6106 	br	10005724 <__alt_data_end+0xf8005724>
100059a0:	4009883a 	mov	r4,r8
100059a4:	003f7506 	br	1000577c <__alt_data_end+0xf800577c>
100059a8:	81000317 	ldw	r4,12(r16)
100059ac:	003fde06 	br	10005928 <__alt_data_end+0xf8005928>
100059b0:	81c5883a 	add	r2,r16,r7
100059b4:	11400117 	ldw	r5,4(r2)
100059b8:	9009883a 	mov	r4,r18
100059bc:	29400054 	ori	r5,r5,1
100059c0:	11400115 	stw	r5,4(r2)
100059c4:	000d3900 	call	1000d390 <__malloc_unlock>
100059c8:	80800204 	addi	r2,r16,8
100059cc:	003fe006 	br	10005950 <__alt_data_end+0xf8005950>
100059d0:	9c000217 	ldw	r16,8(r19)
100059d4:	00bfff04 	movi	r2,-4
100059d8:	85800117 	ldw	r22,4(r16)
100059dc:	b0ac703a 	and	r22,r22,r2
100059e0:	b4400336 	bltu	r22,r17,100059f0 <_malloc_r+0x344>
100059e4:	b445c83a 	sub	r2,r22,r17
100059e8:	00c003c4 	movi	r3,15
100059ec:	18805d16 	blt	r3,r2,10005b64 <_malloc_r+0x4b8>
100059f0:	05c40074 	movhi	r23,4097
100059f4:	008400b4 	movhi	r2,4098
100059f8:	10a0cc04 	addi	r2,r2,-31952
100059fc:	bdd9dc04 	addi	r23,r23,26480
10005a00:	15400017 	ldw	r21,0(r2)
10005a04:	b8c00017 	ldw	r3,0(r23)
10005a08:	00bfffc4 	movi	r2,-1
10005a0c:	858d883a 	add	r6,r16,r22
10005a10:	8d6b883a 	add	r21,r17,r21
10005a14:	1880ea26 	beq	r3,r2,10005dc0 <_malloc_r+0x714>
10005a18:	ad4403c4 	addi	r21,r21,4111
10005a1c:	00bc0004 	movi	r2,-4096
10005a20:	a8aa703a 	and	r21,r21,r2
10005a24:	a80b883a 	mov	r5,r21
10005a28:	9009883a 	mov	r4,r18
10005a2c:	d9800015 	stw	r6,0(sp)
10005a30:	000793c0 	call	1000793c <_sbrk_r>
10005a34:	1029883a 	mov	r20,r2
10005a38:	00bfffc4 	movi	r2,-1
10005a3c:	d9800017 	ldw	r6,0(sp)
10005a40:	a080e826 	beq	r20,r2,10005de4 <_malloc_r+0x738>
10005a44:	a180a636 	bltu	r20,r6,10005ce0 <_malloc_r+0x634>
10005a48:	070400b4 	movhi	fp,4098
10005a4c:	e720e204 	addi	fp,fp,-31864
10005a50:	e0800017 	ldw	r2,0(fp)
10005a54:	a887883a 	add	r3,r21,r2
10005a58:	e0c00015 	stw	r3,0(fp)
10005a5c:	3500e626 	beq	r6,r20,10005df8 <_malloc_r+0x74c>
10005a60:	b9000017 	ldw	r4,0(r23)
10005a64:	00bfffc4 	movi	r2,-1
10005a68:	2080ee26 	beq	r4,r2,10005e24 <_malloc_r+0x778>
10005a6c:	a185c83a 	sub	r2,r20,r6
10005a70:	10c5883a 	add	r2,r2,r3
10005a74:	e0800015 	stw	r2,0(fp)
10005a78:	a0c001cc 	andi	r3,r20,7
10005a7c:	1800bc26 	beq	r3,zero,10005d70 <_malloc_r+0x6c4>
10005a80:	a0e9c83a 	sub	r20,r20,r3
10005a84:	00840204 	movi	r2,4104
10005a88:	a5000204 	addi	r20,r20,8
10005a8c:	10c7c83a 	sub	r3,r2,r3
10005a90:	a545883a 	add	r2,r20,r21
10005a94:	1083ffcc 	andi	r2,r2,4095
10005a98:	18abc83a 	sub	r21,r3,r2
10005a9c:	a80b883a 	mov	r5,r21
10005aa0:	9009883a 	mov	r4,r18
10005aa4:	000793c0 	call	1000793c <_sbrk_r>
10005aa8:	00ffffc4 	movi	r3,-1
10005aac:	10c0e126 	beq	r2,r3,10005e34 <_malloc_r+0x788>
10005ab0:	1505c83a 	sub	r2,r2,r20
10005ab4:	1545883a 	add	r2,r2,r21
10005ab8:	10800054 	ori	r2,r2,1
10005abc:	e0c00017 	ldw	r3,0(fp)
10005ac0:	9d000215 	stw	r20,8(r19)
10005ac4:	a0800115 	stw	r2,4(r20)
10005ac8:	a8c7883a 	add	r3,r21,r3
10005acc:	e0c00015 	stw	r3,0(fp)
10005ad0:	84c00e26 	beq	r16,r19,10005b0c <_malloc_r+0x460>
10005ad4:	018003c4 	movi	r6,15
10005ad8:	3580a72e 	bgeu	r6,r22,10005d78 <_malloc_r+0x6cc>
10005adc:	81400117 	ldw	r5,4(r16)
10005ae0:	013ffe04 	movi	r4,-8
10005ae4:	b0bffd04 	addi	r2,r22,-12
10005ae8:	1104703a 	and	r2,r2,r4
10005aec:	2900004c 	andi	r4,r5,1
10005af0:	2088b03a 	or	r4,r4,r2
10005af4:	81000115 	stw	r4,4(r16)
10005af8:	01400144 	movi	r5,5
10005afc:	8089883a 	add	r4,r16,r2
10005b00:	21400115 	stw	r5,4(r4)
10005b04:	21400215 	stw	r5,8(r4)
10005b08:	3080cd36 	bltu	r6,r2,10005e40 <_malloc_r+0x794>
10005b0c:	008400b4 	movhi	r2,4098
10005b10:	10a0cb04 	addi	r2,r2,-31956
10005b14:	11000017 	ldw	r4,0(r2)
10005b18:	20c0012e 	bgeu	r4,r3,10005b20 <_malloc_r+0x474>
10005b1c:	10c00015 	stw	r3,0(r2)
10005b20:	008400b4 	movhi	r2,4098
10005b24:	10a0ca04 	addi	r2,r2,-31960
10005b28:	11000017 	ldw	r4,0(r2)
10005b2c:	9c000217 	ldw	r16,8(r19)
10005b30:	20c0012e 	bgeu	r4,r3,10005b38 <_malloc_r+0x48c>
10005b34:	10c00015 	stw	r3,0(r2)
10005b38:	80c00117 	ldw	r3,4(r16)
10005b3c:	00bfff04 	movi	r2,-4
10005b40:	1886703a 	and	r3,r3,r2
10005b44:	1c45c83a 	sub	r2,r3,r17
10005b48:	1c400236 	bltu	r3,r17,10005b54 <_malloc_r+0x4a8>
10005b4c:	00c003c4 	movi	r3,15
10005b50:	18800416 	blt	r3,r2,10005b64 <_malloc_r+0x4b8>
10005b54:	9009883a 	mov	r4,r18
10005b58:	000d3900 	call	1000d390 <__malloc_unlock>
10005b5c:	0005883a 	mov	r2,zero
10005b60:	003f7b06 	br	10005950 <__alt_data_end+0xf8005950>
10005b64:	88c00054 	ori	r3,r17,1
10005b68:	80c00115 	stw	r3,4(r16)
10005b6c:	8463883a 	add	r17,r16,r17
10005b70:	10800054 	ori	r2,r2,1
10005b74:	9c400215 	stw	r17,8(r19)
10005b78:	88800115 	stw	r2,4(r17)
10005b7c:	9009883a 	mov	r4,r18
10005b80:	000d3900 	call	1000d390 <__malloc_unlock>
10005b84:	80800204 	addi	r2,r16,8
10005b88:	003f7106 	br	10005950 <__alt_data_end+0xf8005950>
10005b8c:	00c00504 	movi	r3,20
10005b90:	18804a2e 	bgeu	r3,r2,10005cbc <_malloc_r+0x610>
10005b94:	00c01504 	movi	r3,84
10005b98:	18806e36 	bltu	r3,r2,10005d54 <_malloc_r+0x6a8>
10005b9c:	8804d33a 	srli	r2,r17,12
10005ba0:	12001bc4 	addi	r8,r2,111
10005ba4:	11c01b84 	addi	r7,r2,110
10005ba8:	4209883a 	add	r4,r8,r8
10005bac:	003edd06 	br	10005724 <__alt_data_end+0xf8005724>
10005bb0:	3804d27a 	srli	r2,r7,9
10005bb4:	00c00104 	movi	r3,4
10005bb8:	1880442e 	bgeu	r3,r2,10005ccc <_malloc_r+0x620>
10005bbc:	00c00504 	movi	r3,20
10005bc0:	18808136 	bltu	r3,r2,10005dc8 <_malloc_r+0x71c>
10005bc4:	11401704 	addi	r5,r2,92
10005bc8:	10c016c4 	addi	r3,r2,91
10005bcc:	294b883a 	add	r5,r5,r5
10005bd0:	294b883a 	add	r5,r5,r5
10005bd4:	294b883a 	add	r5,r5,r5
10005bd8:	994b883a 	add	r5,r19,r5
10005bdc:	28800017 	ldw	r2,0(r5)
10005be0:	01840074 	movhi	r6,4097
10005be4:	297ffe04 	addi	r5,r5,-8
10005be8:	31943504 	addi	r6,r6,20692
10005bec:	28806526 	beq	r5,r2,10005d84 <_malloc_r+0x6d8>
10005bf0:	01bfff04 	movi	r6,-4
10005bf4:	10c00117 	ldw	r3,4(r2)
10005bf8:	1986703a 	and	r3,r3,r6
10005bfc:	38c0022e 	bgeu	r7,r3,10005c08 <_malloc_r+0x55c>
10005c00:	10800217 	ldw	r2,8(r2)
10005c04:	28bffb1e 	bne	r5,r2,10005bf4 <__alt_data_end+0xf8005bf4>
10005c08:	11400317 	ldw	r5,12(r2)
10005c0c:	98c00117 	ldw	r3,4(r19)
10005c10:	81400315 	stw	r5,12(r16)
10005c14:	80800215 	stw	r2,8(r16)
10005c18:	2c000215 	stw	r16,8(r5)
10005c1c:	14000315 	stw	r16,12(r2)
10005c20:	003ef806 	br	10005804 <__alt_data_end+0xf8005804>
10005c24:	88c00054 	ori	r3,r17,1
10005c28:	80c00115 	stw	r3,4(r16)
10005c2c:	8463883a 	add	r17,r16,r17
10005c30:	34400515 	stw	r17,20(r6)
10005c34:	34400415 	stw	r17,16(r6)
10005c38:	10c00054 	ori	r3,r2,1
10005c3c:	8a000315 	stw	r8,12(r17)
10005c40:	8a000215 	stw	r8,8(r17)
10005c44:	88c00115 	stw	r3,4(r17)
10005c48:	88a3883a 	add	r17,r17,r2
10005c4c:	88800015 	stw	r2,0(r17)
10005c50:	9009883a 	mov	r4,r18
10005c54:	000d3900 	call	1000d390 <__malloc_unlock>
10005c58:	80800204 	addi	r2,r16,8
10005c5c:	003f3c06 	br	10005950 <__alt_data_end+0xf8005950>
10005c60:	30c00117 	ldw	r3,4(r6)
10005c64:	003ee706 	br	10005804 <__alt_data_end+0xf8005804>
10005c68:	5ac00044 	addi	r11,r11,1
10005c6c:	588000cc 	andi	r2,r11,3
10005c70:	31800204 	addi	r6,r6,8
10005c74:	103efd1e 	bne	r2,zero,1000586c <__alt_data_end+0xf800586c>
10005c78:	00002406 	br	10005d0c <_malloc_r+0x660>
10005c7c:	14000317 	ldw	r16,12(r2)
10005c80:	143f251e 	bne	r2,r16,10005918 <__alt_data_end+0xf8005918>
10005c84:	21000084 	addi	r4,r4,2
10005c88:	003ebc06 	br	1000577c <__alt_data_end+0xf800577c>
10005c8c:	8085883a 	add	r2,r16,r2
10005c90:	10c00117 	ldw	r3,4(r2)
10005c94:	81000317 	ldw	r4,12(r16)
10005c98:	81400217 	ldw	r5,8(r16)
10005c9c:	18c00054 	ori	r3,r3,1
10005ca0:	10c00115 	stw	r3,4(r2)
10005ca4:	29000315 	stw	r4,12(r5)
10005ca8:	21400215 	stw	r5,8(r4)
10005cac:	9009883a 	mov	r4,r18
10005cb0:	000d3900 	call	1000d390 <__malloc_unlock>
10005cb4:	80800204 	addi	r2,r16,8
10005cb8:	003f2506 	br	10005950 <__alt_data_end+0xf8005950>
10005cbc:	12001704 	addi	r8,r2,92
10005cc0:	11c016c4 	addi	r7,r2,91
10005cc4:	4209883a 	add	r4,r8,r8
10005cc8:	003e9606 	br	10005724 <__alt_data_end+0xf8005724>
10005ccc:	3804d1ba 	srli	r2,r7,6
10005cd0:	11400e44 	addi	r5,r2,57
10005cd4:	10c00e04 	addi	r3,r2,56
10005cd8:	294b883a 	add	r5,r5,r5
10005cdc:	003fbc06 	br	10005bd0 <__alt_data_end+0xf8005bd0>
10005ce0:	84ff5926 	beq	r16,r19,10005a48 <__alt_data_end+0xf8005a48>
10005ce4:	00840074 	movhi	r2,4097
10005ce8:	10943504 	addi	r2,r2,20692
10005cec:	14000217 	ldw	r16,8(r2)
10005cf0:	00bfff04 	movi	r2,-4
10005cf4:	80c00117 	ldw	r3,4(r16)
10005cf8:	1886703a 	and	r3,r3,r2
10005cfc:	003f9106 	br	10005b44 <__alt_data_end+0xf8005b44>
10005d00:	60800217 	ldw	r2,8(r12)
10005d04:	213fffc4 	addi	r4,r4,-1
10005d08:	1300651e 	bne	r2,r12,10005ea0 <_malloc_r+0x7f4>
10005d0c:	208000cc 	andi	r2,r4,3
10005d10:	633ffe04 	addi	r12,r12,-8
10005d14:	103ffa1e 	bne	r2,zero,10005d00 <__alt_data_end+0xf8005d00>
10005d18:	98800117 	ldw	r2,4(r19)
10005d1c:	0146303a 	nor	r3,zero,r5
10005d20:	1884703a 	and	r2,r3,r2
10005d24:	98800115 	stw	r2,4(r19)
10005d28:	294b883a 	add	r5,r5,r5
10005d2c:	117f2836 	bltu	r2,r5,100059d0 <__alt_data_end+0xf80059d0>
10005d30:	283f2726 	beq	r5,zero,100059d0 <__alt_data_end+0xf80059d0>
10005d34:	2886703a 	and	r3,r5,r2
10005d38:	5809883a 	mov	r4,r11
10005d3c:	183ec31e 	bne	r3,zero,1000584c <__alt_data_end+0xf800584c>
10005d40:	294b883a 	add	r5,r5,r5
10005d44:	2886703a 	and	r3,r5,r2
10005d48:	21000104 	addi	r4,r4,4
10005d4c:	183ffc26 	beq	r3,zero,10005d40 <__alt_data_end+0xf8005d40>
10005d50:	003ebe06 	br	1000584c <__alt_data_end+0xf800584c>
10005d54:	00c05504 	movi	r3,340
10005d58:	18801236 	bltu	r3,r2,10005da4 <_malloc_r+0x6f8>
10005d5c:	8804d3fa 	srli	r2,r17,15
10005d60:	12001e04 	addi	r8,r2,120
10005d64:	11c01dc4 	addi	r7,r2,119
10005d68:	4209883a 	add	r4,r8,r8
10005d6c:	003e6d06 	br	10005724 <__alt_data_end+0xf8005724>
10005d70:	00c40004 	movi	r3,4096
10005d74:	003f4606 	br	10005a90 <__alt_data_end+0xf8005a90>
10005d78:	00800044 	movi	r2,1
10005d7c:	a0800115 	stw	r2,4(r20)
10005d80:	003f7406 	br	10005b54 <__alt_data_end+0xf8005b54>
10005d84:	1805d0ba 	srai	r2,r3,2
10005d88:	01c00044 	movi	r7,1
10005d8c:	30c00117 	ldw	r3,4(r6)
10005d90:	388e983a 	sll	r7,r7,r2
10005d94:	2805883a 	mov	r2,r5
10005d98:	38c6b03a 	or	r3,r7,r3
10005d9c:	30c00115 	stw	r3,4(r6)
10005da0:	003f9b06 	br	10005c10 <__alt_data_end+0xf8005c10>
10005da4:	00c15504 	movi	r3,1364
10005da8:	18801a36 	bltu	r3,r2,10005e14 <_malloc_r+0x768>
10005dac:	8804d4ba 	srli	r2,r17,18
10005db0:	12001f44 	addi	r8,r2,125
10005db4:	11c01f04 	addi	r7,r2,124
10005db8:	4209883a 	add	r4,r8,r8
10005dbc:	003e5906 	br	10005724 <__alt_data_end+0xf8005724>
10005dc0:	ad400404 	addi	r21,r21,16
10005dc4:	003f1706 	br	10005a24 <__alt_data_end+0xf8005a24>
10005dc8:	00c01504 	movi	r3,84
10005dcc:	18802336 	bltu	r3,r2,10005e5c <_malloc_r+0x7b0>
10005dd0:	3804d33a 	srli	r2,r7,12
10005dd4:	11401bc4 	addi	r5,r2,111
10005dd8:	10c01b84 	addi	r3,r2,110
10005ddc:	294b883a 	add	r5,r5,r5
10005de0:	003f7b06 	br	10005bd0 <__alt_data_end+0xf8005bd0>
10005de4:	9c000217 	ldw	r16,8(r19)
10005de8:	00bfff04 	movi	r2,-4
10005dec:	80c00117 	ldw	r3,4(r16)
10005df0:	1886703a 	and	r3,r3,r2
10005df4:	003f5306 	br	10005b44 <__alt_data_end+0xf8005b44>
10005df8:	3083ffcc 	andi	r2,r6,4095
10005dfc:	103f181e 	bne	r2,zero,10005a60 <__alt_data_end+0xf8005a60>
10005e00:	99000217 	ldw	r4,8(r19)
10005e04:	b545883a 	add	r2,r22,r21
10005e08:	10800054 	ori	r2,r2,1
10005e0c:	20800115 	stw	r2,4(r4)
10005e10:	003f3e06 	br	10005b0c <__alt_data_end+0xf8005b0c>
10005e14:	01003f84 	movi	r4,254
10005e18:	02001fc4 	movi	r8,127
10005e1c:	01c01f84 	movi	r7,126
10005e20:	003e4006 	br	10005724 <__alt_data_end+0xf8005724>
10005e24:	00840074 	movhi	r2,4097
10005e28:	1099dc04 	addi	r2,r2,26480
10005e2c:	15000015 	stw	r20,0(r2)
10005e30:	003f1106 	br	10005a78 <__alt_data_end+0xf8005a78>
10005e34:	00800044 	movi	r2,1
10005e38:	002b883a 	mov	r21,zero
10005e3c:	003f1f06 	br	10005abc <__alt_data_end+0xf8005abc>
10005e40:	81400204 	addi	r5,r16,8
10005e44:	9009883a 	mov	r4,r18
10005e48:	0004ac00 	call	10004ac0 <_free_r>
10005e4c:	008400b4 	movhi	r2,4098
10005e50:	10a0e204 	addi	r2,r2,-31864
10005e54:	10c00017 	ldw	r3,0(r2)
10005e58:	003f2c06 	br	10005b0c <__alt_data_end+0xf8005b0c>
10005e5c:	00c05504 	movi	r3,340
10005e60:	18800536 	bltu	r3,r2,10005e78 <_malloc_r+0x7cc>
10005e64:	3804d3fa 	srli	r2,r7,15
10005e68:	11401e04 	addi	r5,r2,120
10005e6c:	10c01dc4 	addi	r3,r2,119
10005e70:	294b883a 	add	r5,r5,r5
10005e74:	003f5606 	br	10005bd0 <__alt_data_end+0xf8005bd0>
10005e78:	00c15504 	movi	r3,1364
10005e7c:	18800536 	bltu	r3,r2,10005e94 <_malloc_r+0x7e8>
10005e80:	3804d4ba 	srli	r2,r7,18
10005e84:	11401f44 	addi	r5,r2,125
10005e88:	10c01f04 	addi	r3,r2,124
10005e8c:	294b883a 	add	r5,r5,r5
10005e90:	003f4f06 	br	10005bd0 <__alt_data_end+0xf8005bd0>
10005e94:	01403f84 	movi	r5,254
10005e98:	00c01f84 	movi	r3,126
10005e9c:	003f4c06 	br	10005bd0 <__alt_data_end+0xf8005bd0>
10005ea0:	98800117 	ldw	r2,4(r19)
10005ea4:	003fa006 	br	10005d28 <__alt_data_end+0xf8005d28>
10005ea8:	8808d0fa 	srli	r4,r17,3
10005eac:	20800044 	addi	r2,r4,1
10005eb0:	1085883a 	add	r2,r2,r2
10005eb4:	003e9006 	br	100058f8 <__alt_data_end+0xf80058f8>

10005eb8 <memchr>:
10005eb8:	208000cc 	andi	r2,r4,3
10005ebc:	280f883a 	mov	r7,r5
10005ec0:	10003426 	beq	r2,zero,10005f94 <memchr+0xdc>
10005ec4:	30bfffc4 	addi	r2,r6,-1
10005ec8:	30001a26 	beq	r6,zero,10005f34 <memchr+0x7c>
10005ecc:	20c00003 	ldbu	r3,0(r4)
10005ed0:	29803fcc 	andi	r6,r5,255
10005ed4:	30c0051e 	bne	r6,r3,10005eec <memchr+0x34>
10005ed8:	00001806 	br	10005f3c <memchr+0x84>
10005edc:	10001526 	beq	r2,zero,10005f34 <memchr+0x7c>
10005ee0:	20c00003 	ldbu	r3,0(r4)
10005ee4:	10bfffc4 	addi	r2,r2,-1
10005ee8:	30c01426 	beq	r6,r3,10005f3c <memchr+0x84>
10005eec:	21000044 	addi	r4,r4,1
10005ef0:	20c000cc 	andi	r3,r4,3
10005ef4:	183ff91e 	bne	r3,zero,10005edc <__alt_data_end+0xf8005edc>
10005ef8:	020000c4 	movi	r8,3
10005efc:	40801136 	bltu	r8,r2,10005f44 <memchr+0x8c>
10005f00:	10000c26 	beq	r2,zero,10005f34 <memchr+0x7c>
10005f04:	20c00003 	ldbu	r3,0(r4)
10005f08:	29403fcc 	andi	r5,r5,255
10005f0c:	28c00b26 	beq	r5,r3,10005f3c <memchr+0x84>
10005f10:	20c00044 	addi	r3,r4,1
10005f14:	39803fcc 	andi	r6,r7,255
10005f18:	2089883a 	add	r4,r4,r2
10005f1c:	00000306 	br	10005f2c <memchr+0x74>
10005f20:	18c00044 	addi	r3,r3,1
10005f24:	197fffc3 	ldbu	r5,-1(r3)
10005f28:	31400526 	beq	r6,r5,10005f40 <memchr+0x88>
10005f2c:	1805883a 	mov	r2,r3
10005f30:	20fffb1e 	bne	r4,r3,10005f20 <__alt_data_end+0xf8005f20>
10005f34:	0005883a 	mov	r2,zero
10005f38:	f800283a 	ret
10005f3c:	2005883a 	mov	r2,r4
10005f40:	f800283a 	ret
10005f44:	28c03fcc 	andi	r3,r5,255
10005f48:	1812923a 	slli	r9,r3,8
10005f4c:	02ffbff4 	movhi	r11,65279
10005f50:	02a02074 	movhi	r10,32897
10005f54:	48d2b03a 	or	r9,r9,r3
10005f58:	4806943a 	slli	r3,r9,16
10005f5c:	5affbfc4 	addi	r11,r11,-257
10005f60:	52a02004 	addi	r10,r10,-32640
10005f64:	48d2b03a 	or	r9,r9,r3
10005f68:	20c00017 	ldw	r3,0(r4)
10005f6c:	48c6f03a 	xor	r3,r9,r3
10005f70:	1acd883a 	add	r6,r3,r11
10005f74:	00c6303a 	nor	r3,zero,r3
10005f78:	30c6703a 	and	r3,r6,r3
10005f7c:	1a86703a 	and	r3,r3,r10
10005f80:	183fe01e 	bne	r3,zero,10005f04 <__alt_data_end+0xf8005f04>
10005f84:	10bfff04 	addi	r2,r2,-4
10005f88:	21000104 	addi	r4,r4,4
10005f8c:	40bff636 	bltu	r8,r2,10005f68 <__alt_data_end+0xf8005f68>
10005f90:	003fdb06 	br	10005f00 <__alt_data_end+0xf8005f00>
10005f94:	3005883a 	mov	r2,r6
10005f98:	003fd706 	br	10005ef8 <__alt_data_end+0xf8005ef8>

10005f9c <memcpy>:
10005f9c:	defffd04 	addi	sp,sp,-12
10005fa0:	dfc00215 	stw	ra,8(sp)
10005fa4:	dc400115 	stw	r17,4(sp)
10005fa8:	dc000015 	stw	r16,0(sp)
10005fac:	00c003c4 	movi	r3,15
10005fb0:	2005883a 	mov	r2,r4
10005fb4:	1980452e 	bgeu	r3,r6,100060cc <memcpy+0x130>
10005fb8:	2906b03a 	or	r3,r5,r4
10005fbc:	18c000cc 	andi	r3,r3,3
10005fc0:	1800441e 	bne	r3,zero,100060d4 <memcpy+0x138>
10005fc4:	347ffc04 	addi	r17,r6,-16
10005fc8:	8822d13a 	srli	r17,r17,4
10005fcc:	28c00104 	addi	r3,r5,4
10005fd0:	23400104 	addi	r13,r4,4
10005fd4:	8820913a 	slli	r16,r17,4
10005fd8:	2b000204 	addi	r12,r5,8
10005fdc:	22c00204 	addi	r11,r4,8
10005fe0:	84000504 	addi	r16,r16,20
10005fe4:	2a800304 	addi	r10,r5,12
10005fe8:	22400304 	addi	r9,r4,12
10005fec:	2c21883a 	add	r16,r5,r16
10005ff0:	2811883a 	mov	r8,r5
10005ff4:	200f883a 	mov	r7,r4
10005ff8:	41000017 	ldw	r4,0(r8)
10005ffc:	1fc00017 	ldw	ra,0(r3)
10006000:	63c00017 	ldw	r15,0(r12)
10006004:	39000015 	stw	r4,0(r7)
10006008:	53800017 	ldw	r14,0(r10)
1000600c:	6fc00015 	stw	ra,0(r13)
10006010:	5bc00015 	stw	r15,0(r11)
10006014:	4b800015 	stw	r14,0(r9)
10006018:	18c00404 	addi	r3,r3,16
1000601c:	39c00404 	addi	r7,r7,16
10006020:	42000404 	addi	r8,r8,16
10006024:	6b400404 	addi	r13,r13,16
10006028:	63000404 	addi	r12,r12,16
1000602c:	5ac00404 	addi	r11,r11,16
10006030:	52800404 	addi	r10,r10,16
10006034:	4a400404 	addi	r9,r9,16
10006038:	1c3fef1e 	bne	r3,r16,10005ff8 <__alt_data_end+0xf8005ff8>
1000603c:	89c00044 	addi	r7,r17,1
10006040:	380e913a 	slli	r7,r7,4
10006044:	310003cc 	andi	r4,r6,15
10006048:	02c000c4 	movi	r11,3
1000604c:	11c7883a 	add	r3,r2,r7
10006050:	29cb883a 	add	r5,r5,r7
10006054:	5900212e 	bgeu	r11,r4,100060dc <memcpy+0x140>
10006058:	1813883a 	mov	r9,r3
1000605c:	2811883a 	mov	r8,r5
10006060:	200f883a 	mov	r7,r4
10006064:	42800017 	ldw	r10,0(r8)
10006068:	4a400104 	addi	r9,r9,4
1000606c:	39ffff04 	addi	r7,r7,-4
10006070:	4abfff15 	stw	r10,-4(r9)
10006074:	42000104 	addi	r8,r8,4
10006078:	59fffa36 	bltu	r11,r7,10006064 <__alt_data_end+0xf8006064>
1000607c:	213fff04 	addi	r4,r4,-4
10006080:	2008d0ba 	srli	r4,r4,2
10006084:	318000cc 	andi	r6,r6,3
10006088:	21000044 	addi	r4,r4,1
1000608c:	2109883a 	add	r4,r4,r4
10006090:	2109883a 	add	r4,r4,r4
10006094:	1907883a 	add	r3,r3,r4
10006098:	290b883a 	add	r5,r5,r4
1000609c:	30000626 	beq	r6,zero,100060b8 <memcpy+0x11c>
100060a0:	198d883a 	add	r6,r3,r6
100060a4:	29c00003 	ldbu	r7,0(r5)
100060a8:	18c00044 	addi	r3,r3,1
100060ac:	29400044 	addi	r5,r5,1
100060b0:	19ffffc5 	stb	r7,-1(r3)
100060b4:	19bffb1e 	bne	r3,r6,100060a4 <__alt_data_end+0xf80060a4>
100060b8:	dfc00217 	ldw	ra,8(sp)
100060bc:	dc400117 	ldw	r17,4(sp)
100060c0:	dc000017 	ldw	r16,0(sp)
100060c4:	dec00304 	addi	sp,sp,12
100060c8:	f800283a 	ret
100060cc:	2007883a 	mov	r3,r4
100060d0:	003ff206 	br	1000609c <__alt_data_end+0xf800609c>
100060d4:	2007883a 	mov	r3,r4
100060d8:	003ff106 	br	100060a0 <__alt_data_end+0xf80060a0>
100060dc:	200d883a 	mov	r6,r4
100060e0:	003fee06 	br	1000609c <__alt_data_end+0xf800609c>

100060e4 <memmove>:
100060e4:	2005883a 	mov	r2,r4
100060e8:	29000b2e 	bgeu	r5,r4,10006118 <memmove+0x34>
100060ec:	298f883a 	add	r7,r5,r6
100060f0:	21c0092e 	bgeu	r4,r7,10006118 <memmove+0x34>
100060f4:	2187883a 	add	r3,r4,r6
100060f8:	198bc83a 	sub	r5,r3,r6
100060fc:	30004826 	beq	r6,zero,10006220 <memmove+0x13c>
10006100:	39ffffc4 	addi	r7,r7,-1
10006104:	39000003 	ldbu	r4,0(r7)
10006108:	18ffffc4 	addi	r3,r3,-1
1000610c:	19000005 	stb	r4,0(r3)
10006110:	28fffb1e 	bne	r5,r3,10006100 <__alt_data_end+0xf8006100>
10006114:	f800283a 	ret
10006118:	00c003c4 	movi	r3,15
1000611c:	1980412e 	bgeu	r3,r6,10006224 <memmove+0x140>
10006120:	2886b03a 	or	r3,r5,r2
10006124:	18c000cc 	andi	r3,r3,3
10006128:	1800401e 	bne	r3,zero,1000622c <memmove+0x148>
1000612c:	33fffc04 	addi	r15,r6,-16
10006130:	781ed13a 	srli	r15,r15,4
10006134:	28c00104 	addi	r3,r5,4
10006138:	13400104 	addi	r13,r2,4
1000613c:	781c913a 	slli	r14,r15,4
10006140:	2b000204 	addi	r12,r5,8
10006144:	12c00204 	addi	r11,r2,8
10006148:	73800504 	addi	r14,r14,20
1000614c:	2a800304 	addi	r10,r5,12
10006150:	12400304 	addi	r9,r2,12
10006154:	2b9d883a 	add	r14,r5,r14
10006158:	2811883a 	mov	r8,r5
1000615c:	100f883a 	mov	r7,r2
10006160:	41000017 	ldw	r4,0(r8)
10006164:	39c00404 	addi	r7,r7,16
10006168:	18c00404 	addi	r3,r3,16
1000616c:	393ffc15 	stw	r4,-16(r7)
10006170:	193ffc17 	ldw	r4,-16(r3)
10006174:	6b400404 	addi	r13,r13,16
10006178:	5ac00404 	addi	r11,r11,16
1000617c:	693ffc15 	stw	r4,-16(r13)
10006180:	61000017 	ldw	r4,0(r12)
10006184:	4a400404 	addi	r9,r9,16
10006188:	42000404 	addi	r8,r8,16
1000618c:	593ffc15 	stw	r4,-16(r11)
10006190:	51000017 	ldw	r4,0(r10)
10006194:	63000404 	addi	r12,r12,16
10006198:	52800404 	addi	r10,r10,16
1000619c:	493ffc15 	stw	r4,-16(r9)
100061a0:	1bbfef1e 	bne	r3,r14,10006160 <__alt_data_end+0xf8006160>
100061a4:	79000044 	addi	r4,r15,1
100061a8:	2008913a 	slli	r4,r4,4
100061ac:	328003cc 	andi	r10,r6,15
100061b0:	02c000c4 	movi	r11,3
100061b4:	1107883a 	add	r3,r2,r4
100061b8:	290b883a 	add	r5,r5,r4
100061bc:	5a801e2e 	bgeu	r11,r10,10006238 <memmove+0x154>
100061c0:	1813883a 	mov	r9,r3
100061c4:	2811883a 	mov	r8,r5
100061c8:	500f883a 	mov	r7,r10
100061cc:	41000017 	ldw	r4,0(r8)
100061d0:	4a400104 	addi	r9,r9,4
100061d4:	39ffff04 	addi	r7,r7,-4
100061d8:	493fff15 	stw	r4,-4(r9)
100061dc:	42000104 	addi	r8,r8,4
100061e0:	59fffa36 	bltu	r11,r7,100061cc <__alt_data_end+0xf80061cc>
100061e4:	513fff04 	addi	r4,r10,-4
100061e8:	2008d0ba 	srli	r4,r4,2
100061ec:	318000cc 	andi	r6,r6,3
100061f0:	21000044 	addi	r4,r4,1
100061f4:	2109883a 	add	r4,r4,r4
100061f8:	2109883a 	add	r4,r4,r4
100061fc:	1907883a 	add	r3,r3,r4
10006200:	290b883a 	add	r5,r5,r4
10006204:	30000b26 	beq	r6,zero,10006234 <memmove+0x150>
10006208:	198d883a 	add	r6,r3,r6
1000620c:	29c00003 	ldbu	r7,0(r5)
10006210:	18c00044 	addi	r3,r3,1
10006214:	29400044 	addi	r5,r5,1
10006218:	19ffffc5 	stb	r7,-1(r3)
1000621c:	19bffb1e 	bne	r3,r6,1000620c <__alt_data_end+0xf800620c>
10006220:	f800283a 	ret
10006224:	1007883a 	mov	r3,r2
10006228:	003ff606 	br	10006204 <__alt_data_end+0xf8006204>
1000622c:	1007883a 	mov	r3,r2
10006230:	003ff506 	br	10006208 <__alt_data_end+0xf8006208>
10006234:	f800283a 	ret
10006238:	500d883a 	mov	r6,r10
1000623c:	003ff106 	br	10006204 <__alt_data_end+0xf8006204>

10006240 <memset>:
10006240:	20c000cc 	andi	r3,r4,3
10006244:	2005883a 	mov	r2,r4
10006248:	18004426 	beq	r3,zero,1000635c <memset+0x11c>
1000624c:	31ffffc4 	addi	r7,r6,-1
10006250:	30004026 	beq	r6,zero,10006354 <memset+0x114>
10006254:	2813883a 	mov	r9,r5
10006258:	200d883a 	mov	r6,r4
1000625c:	2007883a 	mov	r3,r4
10006260:	00000406 	br	10006274 <memset+0x34>
10006264:	3a3fffc4 	addi	r8,r7,-1
10006268:	31800044 	addi	r6,r6,1
1000626c:	38003926 	beq	r7,zero,10006354 <memset+0x114>
10006270:	400f883a 	mov	r7,r8
10006274:	18c00044 	addi	r3,r3,1
10006278:	32400005 	stb	r9,0(r6)
1000627c:	1a0000cc 	andi	r8,r3,3
10006280:	403ff81e 	bne	r8,zero,10006264 <__alt_data_end+0xf8006264>
10006284:	010000c4 	movi	r4,3
10006288:	21c02d2e 	bgeu	r4,r7,10006340 <memset+0x100>
1000628c:	29003fcc 	andi	r4,r5,255
10006290:	200c923a 	slli	r6,r4,8
10006294:	3108b03a 	or	r4,r6,r4
10006298:	200c943a 	slli	r6,r4,16
1000629c:	218cb03a 	or	r6,r4,r6
100062a0:	010003c4 	movi	r4,15
100062a4:	21c0182e 	bgeu	r4,r7,10006308 <memset+0xc8>
100062a8:	3b3ffc04 	addi	r12,r7,-16
100062ac:	6018d13a 	srli	r12,r12,4
100062b0:	1a000104 	addi	r8,r3,4
100062b4:	1ac00204 	addi	r11,r3,8
100062b8:	6008913a 	slli	r4,r12,4
100062bc:	1a800304 	addi	r10,r3,12
100062c0:	1813883a 	mov	r9,r3
100062c4:	21000504 	addi	r4,r4,20
100062c8:	1909883a 	add	r4,r3,r4
100062cc:	49800015 	stw	r6,0(r9)
100062d0:	41800015 	stw	r6,0(r8)
100062d4:	59800015 	stw	r6,0(r11)
100062d8:	51800015 	stw	r6,0(r10)
100062dc:	42000404 	addi	r8,r8,16
100062e0:	4a400404 	addi	r9,r9,16
100062e4:	5ac00404 	addi	r11,r11,16
100062e8:	52800404 	addi	r10,r10,16
100062ec:	413ff71e 	bne	r8,r4,100062cc <__alt_data_end+0xf80062cc>
100062f0:	63000044 	addi	r12,r12,1
100062f4:	6018913a 	slli	r12,r12,4
100062f8:	39c003cc 	andi	r7,r7,15
100062fc:	010000c4 	movi	r4,3
10006300:	1b07883a 	add	r3,r3,r12
10006304:	21c00e2e 	bgeu	r4,r7,10006340 <memset+0x100>
10006308:	1813883a 	mov	r9,r3
1000630c:	3811883a 	mov	r8,r7
10006310:	010000c4 	movi	r4,3
10006314:	49800015 	stw	r6,0(r9)
10006318:	423fff04 	addi	r8,r8,-4
1000631c:	4a400104 	addi	r9,r9,4
10006320:	223ffc36 	bltu	r4,r8,10006314 <__alt_data_end+0xf8006314>
10006324:	393fff04 	addi	r4,r7,-4
10006328:	2008d0ba 	srli	r4,r4,2
1000632c:	39c000cc 	andi	r7,r7,3
10006330:	21000044 	addi	r4,r4,1
10006334:	2109883a 	add	r4,r4,r4
10006338:	2109883a 	add	r4,r4,r4
1000633c:	1907883a 	add	r3,r3,r4
10006340:	38000526 	beq	r7,zero,10006358 <memset+0x118>
10006344:	19cf883a 	add	r7,r3,r7
10006348:	19400005 	stb	r5,0(r3)
1000634c:	18c00044 	addi	r3,r3,1
10006350:	38fffd1e 	bne	r7,r3,10006348 <__alt_data_end+0xf8006348>
10006354:	f800283a 	ret
10006358:	f800283a 	ret
1000635c:	2007883a 	mov	r3,r4
10006360:	300f883a 	mov	r7,r6
10006364:	003fc706 	br	10006284 <__alt_data_end+0xf8006284>

10006368 <_Balloc>:
10006368:	20801317 	ldw	r2,76(r4)
1000636c:	defffc04 	addi	sp,sp,-16
10006370:	dc400115 	stw	r17,4(sp)
10006374:	dc000015 	stw	r16,0(sp)
10006378:	dfc00315 	stw	ra,12(sp)
1000637c:	dc800215 	stw	r18,8(sp)
10006380:	2023883a 	mov	r17,r4
10006384:	2821883a 	mov	r16,r5
10006388:	10000f26 	beq	r2,zero,100063c8 <_Balloc+0x60>
1000638c:	8407883a 	add	r3,r16,r16
10006390:	18c7883a 	add	r3,r3,r3
10006394:	10c7883a 	add	r3,r2,r3
10006398:	18800017 	ldw	r2,0(r3)
1000639c:	10001126 	beq	r2,zero,100063e4 <_Balloc+0x7c>
100063a0:	11000017 	ldw	r4,0(r2)
100063a4:	19000015 	stw	r4,0(r3)
100063a8:	10000415 	stw	zero,16(r2)
100063ac:	10000315 	stw	zero,12(r2)
100063b0:	dfc00317 	ldw	ra,12(sp)
100063b4:	dc800217 	ldw	r18,8(sp)
100063b8:	dc400117 	ldw	r17,4(sp)
100063bc:	dc000017 	ldw	r16,0(sp)
100063c0:	dec00404 	addi	sp,sp,16
100063c4:	f800283a 	ret
100063c8:	01800844 	movi	r6,33
100063cc:	01400104 	movi	r5,4
100063d0:	00092a40 	call	100092a4 <_calloc_r>
100063d4:	88801315 	stw	r2,76(r17)
100063d8:	103fec1e 	bne	r2,zero,1000638c <__alt_data_end+0xf800638c>
100063dc:	0005883a 	mov	r2,zero
100063e0:	003ff306 	br	100063b0 <__alt_data_end+0xf80063b0>
100063e4:	01400044 	movi	r5,1
100063e8:	2c24983a 	sll	r18,r5,r16
100063ec:	8809883a 	mov	r4,r17
100063f0:	91800144 	addi	r6,r18,5
100063f4:	318d883a 	add	r6,r6,r6
100063f8:	318d883a 	add	r6,r6,r6
100063fc:	00092a40 	call	100092a4 <_calloc_r>
10006400:	103ff626 	beq	r2,zero,100063dc <__alt_data_end+0xf80063dc>
10006404:	14000115 	stw	r16,4(r2)
10006408:	14800215 	stw	r18,8(r2)
1000640c:	003fe606 	br	100063a8 <__alt_data_end+0xf80063a8>

10006410 <_Bfree>:
10006410:	28000826 	beq	r5,zero,10006434 <_Bfree+0x24>
10006414:	28c00117 	ldw	r3,4(r5)
10006418:	20801317 	ldw	r2,76(r4)
1000641c:	18c7883a 	add	r3,r3,r3
10006420:	18c7883a 	add	r3,r3,r3
10006424:	10c5883a 	add	r2,r2,r3
10006428:	10c00017 	ldw	r3,0(r2)
1000642c:	28c00015 	stw	r3,0(r5)
10006430:	11400015 	stw	r5,0(r2)
10006434:	f800283a 	ret

10006438 <__multadd>:
10006438:	defffa04 	addi	sp,sp,-24
1000643c:	dc800315 	stw	r18,12(sp)
10006440:	dc400215 	stw	r17,8(sp)
10006444:	dc000115 	stw	r16,4(sp)
10006448:	2823883a 	mov	r17,r5
1000644c:	2c000417 	ldw	r16,16(r5)
10006450:	dfc00515 	stw	ra,20(sp)
10006454:	dcc00415 	stw	r19,16(sp)
10006458:	2025883a 	mov	r18,r4
1000645c:	29400504 	addi	r5,r5,20
10006460:	0011883a 	mov	r8,zero
10006464:	28c00017 	ldw	r3,0(r5)
10006468:	29400104 	addi	r5,r5,4
1000646c:	42000044 	addi	r8,r8,1
10006470:	18bfffcc 	andi	r2,r3,65535
10006474:	1185383a 	mul	r2,r2,r6
10006478:	1806d43a 	srli	r3,r3,16
1000647c:	11cf883a 	add	r7,r2,r7
10006480:	3808d43a 	srli	r4,r7,16
10006484:	1987383a 	mul	r3,r3,r6
10006488:	38bfffcc 	andi	r2,r7,65535
1000648c:	1907883a 	add	r3,r3,r4
10006490:	1808943a 	slli	r4,r3,16
10006494:	180ed43a 	srli	r7,r3,16
10006498:	2085883a 	add	r2,r4,r2
1000649c:	28bfff15 	stw	r2,-4(r5)
100064a0:	443ff016 	blt	r8,r16,10006464 <__alt_data_end+0xf8006464>
100064a4:	38000926 	beq	r7,zero,100064cc <__multadd+0x94>
100064a8:	88800217 	ldw	r2,8(r17)
100064ac:	80800f0e 	bge	r16,r2,100064ec <__multadd+0xb4>
100064b0:	80800144 	addi	r2,r16,5
100064b4:	1085883a 	add	r2,r2,r2
100064b8:	1085883a 	add	r2,r2,r2
100064bc:	8885883a 	add	r2,r17,r2
100064c0:	11c00015 	stw	r7,0(r2)
100064c4:	84000044 	addi	r16,r16,1
100064c8:	8c000415 	stw	r16,16(r17)
100064cc:	8805883a 	mov	r2,r17
100064d0:	dfc00517 	ldw	ra,20(sp)
100064d4:	dcc00417 	ldw	r19,16(sp)
100064d8:	dc800317 	ldw	r18,12(sp)
100064dc:	dc400217 	ldw	r17,8(sp)
100064e0:	dc000117 	ldw	r16,4(sp)
100064e4:	dec00604 	addi	sp,sp,24
100064e8:	f800283a 	ret
100064ec:	89400117 	ldw	r5,4(r17)
100064f0:	9009883a 	mov	r4,r18
100064f4:	d9c00015 	stw	r7,0(sp)
100064f8:	29400044 	addi	r5,r5,1
100064fc:	00063680 	call	10006368 <_Balloc>
10006500:	89800417 	ldw	r6,16(r17)
10006504:	89400304 	addi	r5,r17,12
10006508:	11000304 	addi	r4,r2,12
1000650c:	31800084 	addi	r6,r6,2
10006510:	318d883a 	add	r6,r6,r6
10006514:	318d883a 	add	r6,r6,r6
10006518:	1027883a 	mov	r19,r2
1000651c:	0005f9c0 	call	10005f9c <memcpy>
10006520:	d9c00017 	ldw	r7,0(sp)
10006524:	88000a26 	beq	r17,zero,10006550 <__multadd+0x118>
10006528:	88c00117 	ldw	r3,4(r17)
1000652c:	90801317 	ldw	r2,76(r18)
10006530:	18c7883a 	add	r3,r3,r3
10006534:	18c7883a 	add	r3,r3,r3
10006538:	10c5883a 	add	r2,r2,r3
1000653c:	10c00017 	ldw	r3,0(r2)
10006540:	88c00015 	stw	r3,0(r17)
10006544:	14400015 	stw	r17,0(r2)
10006548:	9823883a 	mov	r17,r19
1000654c:	003fd806 	br	100064b0 <__alt_data_end+0xf80064b0>
10006550:	9823883a 	mov	r17,r19
10006554:	003fd606 	br	100064b0 <__alt_data_end+0xf80064b0>

10006558 <__s2b>:
10006558:	defff904 	addi	sp,sp,-28
1000655c:	dc400115 	stw	r17,4(sp)
10006560:	dc000015 	stw	r16,0(sp)
10006564:	2023883a 	mov	r17,r4
10006568:	2821883a 	mov	r16,r5
1000656c:	39000204 	addi	r4,r7,8
10006570:	01400244 	movi	r5,9
10006574:	dcc00315 	stw	r19,12(sp)
10006578:	dc800215 	stw	r18,8(sp)
1000657c:	dfc00615 	stw	ra,24(sp)
10006580:	dd400515 	stw	r21,20(sp)
10006584:	dd000415 	stw	r20,16(sp)
10006588:	3825883a 	mov	r18,r7
1000658c:	3027883a 	mov	r19,r6
10006590:	000a5d40 	call	1000a5d4 <__divsi3>
10006594:	00c00044 	movi	r3,1
10006598:	000b883a 	mov	r5,zero
1000659c:	1880030e 	bge	r3,r2,100065ac <__s2b+0x54>
100065a0:	18c7883a 	add	r3,r3,r3
100065a4:	29400044 	addi	r5,r5,1
100065a8:	18bffd16 	blt	r3,r2,100065a0 <__alt_data_end+0xf80065a0>
100065ac:	8809883a 	mov	r4,r17
100065b0:	00063680 	call	10006368 <_Balloc>
100065b4:	d8c00717 	ldw	r3,28(sp)
100065b8:	10c00515 	stw	r3,20(r2)
100065bc:	00c00044 	movi	r3,1
100065c0:	10c00415 	stw	r3,16(r2)
100065c4:	00c00244 	movi	r3,9
100065c8:	1cc0210e 	bge	r3,r19,10006650 <__s2b+0xf8>
100065cc:	80eb883a 	add	r21,r16,r3
100065d0:	a829883a 	mov	r20,r21
100065d4:	84e1883a 	add	r16,r16,r19
100065d8:	a1c00007 	ldb	r7,0(r20)
100065dc:	01800284 	movi	r6,10
100065e0:	a5000044 	addi	r20,r20,1
100065e4:	100b883a 	mov	r5,r2
100065e8:	39fff404 	addi	r7,r7,-48
100065ec:	8809883a 	mov	r4,r17
100065f0:	00064380 	call	10006438 <__multadd>
100065f4:	a43ff81e 	bne	r20,r16,100065d8 <__alt_data_end+0xf80065d8>
100065f8:	ace1883a 	add	r16,r21,r19
100065fc:	843ffe04 	addi	r16,r16,-8
10006600:	9c800a0e 	bge	r19,r18,1000662c <__s2b+0xd4>
10006604:	94e5c83a 	sub	r18,r18,r19
10006608:	84a5883a 	add	r18,r16,r18
1000660c:	81c00007 	ldb	r7,0(r16)
10006610:	01800284 	movi	r6,10
10006614:	84000044 	addi	r16,r16,1
10006618:	100b883a 	mov	r5,r2
1000661c:	39fff404 	addi	r7,r7,-48
10006620:	8809883a 	mov	r4,r17
10006624:	00064380 	call	10006438 <__multadd>
10006628:	84bff81e 	bne	r16,r18,1000660c <__alt_data_end+0xf800660c>
1000662c:	dfc00617 	ldw	ra,24(sp)
10006630:	dd400517 	ldw	r21,20(sp)
10006634:	dd000417 	ldw	r20,16(sp)
10006638:	dcc00317 	ldw	r19,12(sp)
1000663c:	dc800217 	ldw	r18,8(sp)
10006640:	dc400117 	ldw	r17,4(sp)
10006644:	dc000017 	ldw	r16,0(sp)
10006648:	dec00704 	addi	sp,sp,28
1000664c:	f800283a 	ret
10006650:	84000284 	addi	r16,r16,10
10006654:	1827883a 	mov	r19,r3
10006658:	003fe906 	br	10006600 <__alt_data_end+0xf8006600>

1000665c <__hi0bits>:
1000665c:	20bfffec 	andhi	r2,r4,65535
10006660:	1000141e 	bne	r2,zero,100066b4 <__hi0bits+0x58>
10006664:	2008943a 	slli	r4,r4,16
10006668:	00800404 	movi	r2,16
1000666c:	20ffc02c 	andhi	r3,r4,65280
10006670:	1800021e 	bne	r3,zero,1000667c <__hi0bits+0x20>
10006674:	2008923a 	slli	r4,r4,8
10006678:	10800204 	addi	r2,r2,8
1000667c:	20fc002c 	andhi	r3,r4,61440
10006680:	1800021e 	bne	r3,zero,1000668c <__hi0bits+0x30>
10006684:	2008913a 	slli	r4,r4,4
10006688:	10800104 	addi	r2,r2,4
1000668c:	20f0002c 	andhi	r3,r4,49152
10006690:	1800031e 	bne	r3,zero,100066a0 <__hi0bits+0x44>
10006694:	2109883a 	add	r4,r4,r4
10006698:	10800084 	addi	r2,r2,2
1000669c:	2109883a 	add	r4,r4,r4
100066a0:	20000316 	blt	r4,zero,100066b0 <__hi0bits+0x54>
100066a4:	2110002c 	andhi	r4,r4,16384
100066a8:	2000041e 	bne	r4,zero,100066bc <__hi0bits+0x60>
100066ac:	00800804 	movi	r2,32
100066b0:	f800283a 	ret
100066b4:	0005883a 	mov	r2,zero
100066b8:	003fec06 	br	1000666c <__alt_data_end+0xf800666c>
100066bc:	10800044 	addi	r2,r2,1
100066c0:	f800283a 	ret

100066c4 <__lo0bits>:
100066c4:	20c00017 	ldw	r3,0(r4)
100066c8:	188001cc 	andi	r2,r3,7
100066cc:	10000826 	beq	r2,zero,100066f0 <__lo0bits+0x2c>
100066d0:	1880004c 	andi	r2,r3,1
100066d4:	1000211e 	bne	r2,zero,1000675c <__lo0bits+0x98>
100066d8:	1880008c 	andi	r2,r3,2
100066dc:	1000211e 	bne	r2,zero,10006764 <__lo0bits+0xa0>
100066e0:	1806d0ba 	srli	r3,r3,2
100066e4:	00800084 	movi	r2,2
100066e8:	20c00015 	stw	r3,0(r4)
100066ec:	f800283a 	ret
100066f0:	18bfffcc 	andi	r2,r3,65535
100066f4:	10001326 	beq	r2,zero,10006744 <__lo0bits+0x80>
100066f8:	0005883a 	mov	r2,zero
100066fc:	19403fcc 	andi	r5,r3,255
10006700:	2800021e 	bne	r5,zero,1000670c <__lo0bits+0x48>
10006704:	1806d23a 	srli	r3,r3,8
10006708:	10800204 	addi	r2,r2,8
1000670c:	194003cc 	andi	r5,r3,15
10006710:	2800021e 	bne	r5,zero,1000671c <__lo0bits+0x58>
10006714:	1806d13a 	srli	r3,r3,4
10006718:	10800104 	addi	r2,r2,4
1000671c:	194000cc 	andi	r5,r3,3
10006720:	2800021e 	bne	r5,zero,1000672c <__lo0bits+0x68>
10006724:	1806d0ba 	srli	r3,r3,2
10006728:	10800084 	addi	r2,r2,2
1000672c:	1940004c 	andi	r5,r3,1
10006730:	2800081e 	bne	r5,zero,10006754 <__lo0bits+0x90>
10006734:	1806d07a 	srli	r3,r3,1
10006738:	1800051e 	bne	r3,zero,10006750 <__lo0bits+0x8c>
1000673c:	00800804 	movi	r2,32
10006740:	f800283a 	ret
10006744:	1806d43a 	srli	r3,r3,16
10006748:	00800404 	movi	r2,16
1000674c:	003feb06 	br	100066fc <__alt_data_end+0xf80066fc>
10006750:	10800044 	addi	r2,r2,1
10006754:	20c00015 	stw	r3,0(r4)
10006758:	f800283a 	ret
1000675c:	0005883a 	mov	r2,zero
10006760:	f800283a 	ret
10006764:	1806d07a 	srli	r3,r3,1
10006768:	00800044 	movi	r2,1
1000676c:	20c00015 	stw	r3,0(r4)
10006770:	f800283a 	ret

10006774 <__i2b>:
10006774:	defffd04 	addi	sp,sp,-12
10006778:	dc000015 	stw	r16,0(sp)
1000677c:	04000044 	movi	r16,1
10006780:	dc400115 	stw	r17,4(sp)
10006784:	2823883a 	mov	r17,r5
10006788:	800b883a 	mov	r5,r16
1000678c:	dfc00215 	stw	ra,8(sp)
10006790:	00063680 	call	10006368 <_Balloc>
10006794:	14400515 	stw	r17,20(r2)
10006798:	14000415 	stw	r16,16(r2)
1000679c:	dfc00217 	ldw	ra,8(sp)
100067a0:	dc400117 	ldw	r17,4(sp)
100067a4:	dc000017 	ldw	r16,0(sp)
100067a8:	dec00304 	addi	sp,sp,12
100067ac:	f800283a 	ret

100067b0 <__multiply>:
100067b0:	defffa04 	addi	sp,sp,-24
100067b4:	dcc00315 	stw	r19,12(sp)
100067b8:	dc800215 	stw	r18,8(sp)
100067bc:	34c00417 	ldw	r19,16(r6)
100067c0:	2c800417 	ldw	r18,16(r5)
100067c4:	dd000415 	stw	r20,16(sp)
100067c8:	dc400115 	stw	r17,4(sp)
100067cc:	dfc00515 	stw	ra,20(sp)
100067d0:	dc000015 	stw	r16,0(sp)
100067d4:	2829883a 	mov	r20,r5
100067d8:	3023883a 	mov	r17,r6
100067dc:	94c0050e 	bge	r18,r19,100067f4 <__multiply+0x44>
100067e0:	9007883a 	mov	r3,r18
100067e4:	3029883a 	mov	r20,r6
100067e8:	9825883a 	mov	r18,r19
100067ec:	2823883a 	mov	r17,r5
100067f0:	1827883a 	mov	r19,r3
100067f4:	a0800217 	ldw	r2,8(r20)
100067f8:	94e1883a 	add	r16,r18,r19
100067fc:	a1400117 	ldw	r5,4(r20)
10006800:	1400010e 	bge	r2,r16,10006808 <__multiply+0x58>
10006804:	29400044 	addi	r5,r5,1
10006808:	00063680 	call	10006368 <_Balloc>
1000680c:	8415883a 	add	r10,r16,r16
10006810:	12c00504 	addi	r11,r2,20
10006814:	5295883a 	add	r10,r10,r10
10006818:	5a95883a 	add	r10,r11,r10
1000681c:	5807883a 	mov	r3,r11
10006820:	5a80032e 	bgeu	r11,r10,10006830 <__multiply+0x80>
10006824:	18000015 	stw	zero,0(r3)
10006828:	18c00104 	addi	r3,r3,4
1000682c:	1abffd36 	bltu	r3,r10,10006824 <__alt_data_end+0xf8006824>
10006830:	9ce7883a 	add	r19,r19,r19
10006834:	94a5883a 	add	r18,r18,r18
10006838:	89800504 	addi	r6,r17,20
1000683c:	9ce7883a 	add	r19,r19,r19
10006840:	a3400504 	addi	r13,r20,20
10006844:	94a5883a 	add	r18,r18,r18
10006848:	34d9883a 	add	r12,r6,r19
1000684c:	6c93883a 	add	r9,r13,r18
10006850:	3300422e 	bgeu	r6,r12,1000695c <__multiply+0x1ac>
10006854:	37c00017 	ldw	ra,0(r6)
10006858:	fbffffcc 	andi	r15,ra,65535
1000685c:	78001b26 	beq	r15,zero,100068cc <__multiply+0x11c>
10006860:	5811883a 	mov	r8,r11
10006864:	681d883a 	mov	r14,r13
10006868:	000f883a 	mov	r7,zero
1000686c:	71000017 	ldw	r4,0(r14)
10006870:	40c00017 	ldw	r3,0(r8)
10006874:	73800104 	addi	r14,r14,4
10006878:	217fffcc 	andi	r5,r4,65535
1000687c:	2bcb383a 	mul	r5,r5,r15
10006880:	2008d43a 	srli	r4,r4,16
10006884:	1c7fffcc 	andi	r17,r3,65535
10006888:	2c4b883a 	add	r5,r5,r17
1000688c:	29cb883a 	add	r5,r5,r7
10006890:	23c9383a 	mul	r4,r4,r15
10006894:	1806d43a 	srli	r3,r3,16
10006898:	280ed43a 	srli	r7,r5,16
1000689c:	297fffcc 	andi	r5,r5,65535
100068a0:	20c7883a 	add	r3,r4,r3
100068a4:	19c7883a 	add	r3,r3,r7
100068a8:	1808943a 	slli	r4,r3,16
100068ac:	4023883a 	mov	r17,r8
100068b0:	180ed43a 	srli	r7,r3,16
100068b4:	214ab03a 	or	r5,r4,r5
100068b8:	41400015 	stw	r5,0(r8)
100068bc:	42000104 	addi	r8,r8,4
100068c0:	727fea36 	bltu	r14,r9,1000686c <__alt_data_end+0xf800686c>
100068c4:	89c00115 	stw	r7,4(r17)
100068c8:	37c00017 	ldw	ra,0(r6)
100068cc:	f83ed43a 	srli	ra,ra,16
100068d0:	f8001f26 	beq	ra,zero,10006950 <__multiply+0x1a0>
100068d4:	58c00017 	ldw	r3,0(r11)
100068d8:	681d883a 	mov	r14,r13
100068dc:	581f883a 	mov	r15,r11
100068e0:	1811883a 	mov	r8,r3
100068e4:	5825883a 	mov	r18,r11
100068e8:	000f883a 	mov	r7,zero
100068ec:	00000106 	br	100068f4 <__multiply+0x144>
100068f0:	8825883a 	mov	r18,r17
100068f4:	7140000b 	ldhu	r5,0(r14)
100068f8:	4010d43a 	srli	r8,r8,16
100068fc:	193fffcc 	andi	r4,r3,65535
10006900:	2fcb383a 	mul	r5,r5,ra
10006904:	7bc00104 	addi	r15,r15,4
10006908:	73800104 	addi	r14,r14,4
1000690c:	2a0b883a 	add	r5,r5,r8
10006910:	29cb883a 	add	r5,r5,r7
10006914:	2806943a 	slli	r3,r5,16
10006918:	94400104 	addi	r17,r18,4
1000691c:	280ad43a 	srli	r5,r5,16
10006920:	1908b03a 	or	r4,r3,r4
10006924:	793fff15 	stw	r4,-4(r15)
10006928:	70ffff17 	ldw	r3,-4(r14)
1000692c:	8a000017 	ldw	r8,0(r17)
10006930:	1806d43a 	srli	r3,r3,16
10006934:	413fffcc 	andi	r4,r8,65535
10006938:	1fc7383a 	mul	r3,r3,ra
1000693c:	1907883a 	add	r3,r3,r4
10006940:	1947883a 	add	r3,r3,r5
10006944:	180ed43a 	srli	r7,r3,16
10006948:	727fe936 	bltu	r14,r9,100068f0 <__alt_data_end+0xf80068f0>
1000694c:	90c00115 	stw	r3,4(r18)
10006950:	31800104 	addi	r6,r6,4
10006954:	5ac00104 	addi	r11,r11,4
10006958:	333fbe36 	bltu	r6,r12,10006854 <__alt_data_end+0xf8006854>
1000695c:	0400090e 	bge	zero,r16,10006984 <__multiply+0x1d4>
10006960:	50ffff17 	ldw	r3,-4(r10)
10006964:	52bfff04 	addi	r10,r10,-4
10006968:	18000326 	beq	r3,zero,10006978 <__multiply+0x1c8>
1000696c:	00000506 	br	10006984 <__multiply+0x1d4>
10006970:	50c00017 	ldw	r3,0(r10)
10006974:	1800031e 	bne	r3,zero,10006984 <__multiply+0x1d4>
10006978:	843fffc4 	addi	r16,r16,-1
1000697c:	52bfff04 	addi	r10,r10,-4
10006980:	803ffb1e 	bne	r16,zero,10006970 <__alt_data_end+0xf8006970>
10006984:	14000415 	stw	r16,16(r2)
10006988:	dfc00517 	ldw	ra,20(sp)
1000698c:	dd000417 	ldw	r20,16(sp)
10006990:	dcc00317 	ldw	r19,12(sp)
10006994:	dc800217 	ldw	r18,8(sp)
10006998:	dc400117 	ldw	r17,4(sp)
1000699c:	dc000017 	ldw	r16,0(sp)
100069a0:	dec00604 	addi	sp,sp,24
100069a4:	f800283a 	ret

100069a8 <__pow5mult>:
100069a8:	defffa04 	addi	sp,sp,-24
100069ac:	dcc00315 	stw	r19,12(sp)
100069b0:	dc000015 	stw	r16,0(sp)
100069b4:	dfc00515 	stw	ra,20(sp)
100069b8:	dd000415 	stw	r20,16(sp)
100069bc:	dc800215 	stw	r18,8(sp)
100069c0:	dc400115 	stw	r17,4(sp)
100069c4:	308000cc 	andi	r2,r6,3
100069c8:	3021883a 	mov	r16,r6
100069cc:	2027883a 	mov	r19,r4
100069d0:	10002f1e 	bne	r2,zero,10006a90 <__pow5mult+0xe8>
100069d4:	2825883a 	mov	r18,r5
100069d8:	8021d0ba 	srai	r16,r16,2
100069dc:	80001a26 	beq	r16,zero,10006a48 <__pow5mult+0xa0>
100069e0:	9c401217 	ldw	r17,72(r19)
100069e4:	8800061e 	bne	r17,zero,10006a00 <__pow5mult+0x58>
100069e8:	00003406 	br	10006abc <__pow5mult+0x114>
100069ec:	8021d07a 	srai	r16,r16,1
100069f0:	80001526 	beq	r16,zero,10006a48 <__pow5mult+0xa0>
100069f4:	88800017 	ldw	r2,0(r17)
100069f8:	10001c26 	beq	r2,zero,10006a6c <__pow5mult+0xc4>
100069fc:	1023883a 	mov	r17,r2
10006a00:	8080004c 	andi	r2,r16,1
10006a04:	103ff926 	beq	r2,zero,100069ec <__alt_data_end+0xf80069ec>
10006a08:	880d883a 	mov	r6,r17
10006a0c:	900b883a 	mov	r5,r18
10006a10:	9809883a 	mov	r4,r19
10006a14:	00067b00 	call	100067b0 <__multiply>
10006a18:	90001b26 	beq	r18,zero,10006a88 <__pow5mult+0xe0>
10006a1c:	91000117 	ldw	r4,4(r18)
10006a20:	98c01317 	ldw	r3,76(r19)
10006a24:	8021d07a 	srai	r16,r16,1
10006a28:	2109883a 	add	r4,r4,r4
10006a2c:	2109883a 	add	r4,r4,r4
10006a30:	1907883a 	add	r3,r3,r4
10006a34:	19000017 	ldw	r4,0(r3)
10006a38:	91000015 	stw	r4,0(r18)
10006a3c:	1c800015 	stw	r18,0(r3)
10006a40:	1025883a 	mov	r18,r2
10006a44:	803feb1e 	bne	r16,zero,100069f4 <__alt_data_end+0xf80069f4>
10006a48:	9005883a 	mov	r2,r18
10006a4c:	dfc00517 	ldw	ra,20(sp)
10006a50:	dd000417 	ldw	r20,16(sp)
10006a54:	dcc00317 	ldw	r19,12(sp)
10006a58:	dc800217 	ldw	r18,8(sp)
10006a5c:	dc400117 	ldw	r17,4(sp)
10006a60:	dc000017 	ldw	r16,0(sp)
10006a64:	dec00604 	addi	sp,sp,24
10006a68:	f800283a 	ret
10006a6c:	880d883a 	mov	r6,r17
10006a70:	880b883a 	mov	r5,r17
10006a74:	9809883a 	mov	r4,r19
10006a78:	00067b00 	call	100067b0 <__multiply>
10006a7c:	88800015 	stw	r2,0(r17)
10006a80:	10000015 	stw	zero,0(r2)
10006a84:	003fdd06 	br	100069fc <__alt_data_end+0xf80069fc>
10006a88:	1025883a 	mov	r18,r2
10006a8c:	003fd706 	br	100069ec <__alt_data_end+0xf80069ec>
10006a90:	10bfffc4 	addi	r2,r2,-1
10006a94:	1085883a 	add	r2,r2,r2
10006a98:	00c40074 	movhi	r3,4097
10006a9c:	18d26204 	addi	r3,r3,18824
10006aa0:	1085883a 	add	r2,r2,r2
10006aa4:	1885883a 	add	r2,r3,r2
10006aa8:	11800017 	ldw	r6,0(r2)
10006aac:	000f883a 	mov	r7,zero
10006ab0:	00064380 	call	10006438 <__multadd>
10006ab4:	1025883a 	mov	r18,r2
10006ab8:	003fc706 	br	100069d8 <__alt_data_end+0xf80069d8>
10006abc:	05000044 	movi	r20,1
10006ac0:	a00b883a 	mov	r5,r20
10006ac4:	9809883a 	mov	r4,r19
10006ac8:	00063680 	call	10006368 <_Balloc>
10006acc:	1023883a 	mov	r17,r2
10006ad0:	00809c44 	movi	r2,625
10006ad4:	88800515 	stw	r2,20(r17)
10006ad8:	8d000415 	stw	r20,16(r17)
10006adc:	9c401215 	stw	r17,72(r19)
10006ae0:	88000015 	stw	zero,0(r17)
10006ae4:	003fc606 	br	10006a00 <__alt_data_end+0xf8006a00>

10006ae8 <__lshift>:
10006ae8:	defff904 	addi	sp,sp,-28
10006aec:	dd400515 	stw	r21,20(sp)
10006af0:	dcc00315 	stw	r19,12(sp)
10006af4:	302bd17a 	srai	r21,r6,5
10006af8:	2cc00417 	ldw	r19,16(r5)
10006afc:	28800217 	ldw	r2,8(r5)
10006b00:	dd000415 	stw	r20,16(sp)
10006b04:	ace7883a 	add	r19,r21,r19
10006b08:	dc800215 	stw	r18,8(sp)
10006b0c:	dc400115 	stw	r17,4(sp)
10006b10:	dc000015 	stw	r16,0(sp)
10006b14:	dfc00615 	stw	ra,24(sp)
10006b18:	9c000044 	addi	r16,r19,1
10006b1c:	2823883a 	mov	r17,r5
10006b20:	3029883a 	mov	r20,r6
10006b24:	2025883a 	mov	r18,r4
10006b28:	29400117 	ldw	r5,4(r5)
10006b2c:	1400030e 	bge	r2,r16,10006b3c <__lshift+0x54>
10006b30:	1085883a 	add	r2,r2,r2
10006b34:	29400044 	addi	r5,r5,1
10006b38:	143ffd16 	blt	r2,r16,10006b30 <__alt_data_end+0xf8006b30>
10006b3c:	9009883a 	mov	r4,r18
10006b40:	00063680 	call	10006368 <_Balloc>
10006b44:	10c00504 	addi	r3,r2,20
10006b48:	0540070e 	bge	zero,r21,10006b68 <__lshift+0x80>
10006b4c:	ad6b883a 	add	r21,r21,r21
10006b50:	ad6b883a 	add	r21,r21,r21
10006b54:	1809883a 	mov	r4,r3
10006b58:	1d47883a 	add	r3,r3,r21
10006b5c:	20000015 	stw	zero,0(r4)
10006b60:	21000104 	addi	r4,r4,4
10006b64:	193ffd1e 	bne	r3,r4,10006b5c <__alt_data_end+0xf8006b5c>
10006b68:	8a000417 	ldw	r8,16(r17)
10006b6c:	89000504 	addi	r4,r17,20
10006b70:	a18007cc 	andi	r6,r20,31
10006b74:	4211883a 	add	r8,r8,r8
10006b78:	4211883a 	add	r8,r8,r8
10006b7c:	2211883a 	add	r8,r4,r8
10006b80:	30002326 	beq	r6,zero,10006c10 <__lshift+0x128>
10006b84:	02400804 	movi	r9,32
10006b88:	4993c83a 	sub	r9,r9,r6
10006b8c:	000b883a 	mov	r5,zero
10006b90:	21c00017 	ldw	r7,0(r4)
10006b94:	1815883a 	mov	r10,r3
10006b98:	18c00104 	addi	r3,r3,4
10006b9c:	398e983a 	sll	r7,r7,r6
10006ba0:	21000104 	addi	r4,r4,4
10006ba4:	394ab03a 	or	r5,r7,r5
10006ba8:	197fff15 	stw	r5,-4(r3)
10006bac:	217fff17 	ldw	r5,-4(r4)
10006bb0:	2a4ad83a 	srl	r5,r5,r9
10006bb4:	223ff636 	bltu	r4,r8,10006b90 <__alt_data_end+0xf8006b90>
10006bb8:	51400115 	stw	r5,4(r10)
10006bbc:	28001a1e 	bne	r5,zero,10006c28 <__lshift+0x140>
10006bc0:	843fffc4 	addi	r16,r16,-1
10006bc4:	14000415 	stw	r16,16(r2)
10006bc8:	88000826 	beq	r17,zero,10006bec <__lshift+0x104>
10006bcc:	89000117 	ldw	r4,4(r17)
10006bd0:	90c01317 	ldw	r3,76(r18)
10006bd4:	2109883a 	add	r4,r4,r4
10006bd8:	2109883a 	add	r4,r4,r4
10006bdc:	1907883a 	add	r3,r3,r4
10006be0:	19000017 	ldw	r4,0(r3)
10006be4:	89000015 	stw	r4,0(r17)
10006be8:	1c400015 	stw	r17,0(r3)
10006bec:	dfc00617 	ldw	ra,24(sp)
10006bf0:	dd400517 	ldw	r21,20(sp)
10006bf4:	dd000417 	ldw	r20,16(sp)
10006bf8:	dcc00317 	ldw	r19,12(sp)
10006bfc:	dc800217 	ldw	r18,8(sp)
10006c00:	dc400117 	ldw	r17,4(sp)
10006c04:	dc000017 	ldw	r16,0(sp)
10006c08:	dec00704 	addi	sp,sp,28
10006c0c:	f800283a 	ret
10006c10:	21400017 	ldw	r5,0(r4)
10006c14:	18c00104 	addi	r3,r3,4
10006c18:	21000104 	addi	r4,r4,4
10006c1c:	197fff15 	stw	r5,-4(r3)
10006c20:	223ffb36 	bltu	r4,r8,10006c10 <__alt_data_end+0xf8006c10>
10006c24:	003fe606 	br	10006bc0 <__alt_data_end+0xf8006bc0>
10006c28:	9c000084 	addi	r16,r19,2
10006c2c:	003fe406 	br	10006bc0 <__alt_data_end+0xf8006bc0>

10006c30 <__mcmp>:
10006c30:	20800417 	ldw	r2,16(r4)
10006c34:	28c00417 	ldw	r3,16(r5)
10006c38:	10c5c83a 	sub	r2,r2,r3
10006c3c:	1000111e 	bne	r2,zero,10006c84 <__mcmp+0x54>
10006c40:	18c7883a 	add	r3,r3,r3
10006c44:	18c7883a 	add	r3,r3,r3
10006c48:	21000504 	addi	r4,r4,20
10006c4c:	29400504 	addi	r5,r5,20
10006c50:	20c5883a 	add	r2,r4,r3
10006c54:	28cb883a 	add	r5,r5,r3
10006c58:	00000106 	br	10006c60 <__mcmp+0x30>
10006c5c:	20800a2e 	bgeu	r4,r2,10006c88 <__mcmp+0x58>
10006c60:	10bfff04 	addi	r2,r2,-4
10006c64:	297fff04 	addi	r5,r5,-4
10006c68:	11800017 	ldw	r6,0(r2)
10006c6c:	28c00017 	ldw	r3,0(r5)
10006c70:	30fffa26 	beq	r6,r3,10006c5c <__alt_data_end+0xf8006c5c>
10006c74:	30c00236 	bltu	r6,r3,10006c80 <__mcmp+0x50>
10006c78:	00800044 	movi	r2,1
10006c7c:	f800283a 	ret
10006c80:	00bfffc4 	movi	r2,-1
10006c84:	f800283a 	ret
10006c88:	0005883a 	mov	r2,zero
10006c8c:	f800283a 	ret

10006c90 <__mdiff>:
10006c90:	28c00417 	ldw	r3,16(r5)
10006c94:	30800417 	ldw	r2,16(r6)
10006c98:	defffa04 	addi	sp,sp,-24
10006c9c:	dcc00315 	stw	r19,12(sp)
10006ca0:	dc800215 	stw	r18,8(sp)
10006ca4:	dfc00515 	stw	ra,20(sp)
10006ca8:	dd000415 	stw	r20,16(sp)
10006cac:	dc400115 	stw	r17,4(sp)
10006cb0:	dc000015 	stw	r16,0(sp)
10006cb4:	1887c83a 	sub	r3,r3,r2
10006cb8:	2825883a 	mov	r18,r5
10006cbc:	3027883a 	mov	r19,r6
10006cc0:	1800141e 	bne	r3,zero,10006d14 <__mdiff+0x84>
10006cc4:	1085883a 	add	r2,r2,r2
10006cc8:	1085883a 	add	r2,r2,r2
10006ccc:	2a000504 	addi	r8,r5,20
10006cd0:	34000504 	addi	r16,r6,20
10006cd4:	4087883a 	add	r3,r8,r2
10006cd8:	8085883a 	add	r2,r16,r2
10006cdc:	00000106 	br	10006ce4 <__mdiff+0x54>
10006ce0:	40c0592e 	bgeu	r8,r3,10006e48 <__mdiff+0x1b8>
10006ce4:	18ffff04 	addi	r3,r3,-4
10006ce8:	10bfff04 	addi	r2,r2,-4
10006cec:	19c00017 	ldw	r7,0(r3)
10006cf0:	11400017 	ldw	r5,0(r2)
10006cf4:	397ffa26 	beq	r7,r5,10006ce0 <__alt_data_end+0xf8006ce0>
10006cf8:	3940592e 	bgeu	r7,r5,10006e60 <__mdiff+0x1d0>
10006cfc:	9005883a 	mov	r2,r18
10006d00:	4023883a 	mov	r17,r8
10006d04:	9825883a 	mov	r18,r19
10006d08:	05000044 	movi	r20,1
10006d0c:	1027883a 	mov	r19,r2
10006d10:	00000406 	br	10006d24 <__mdiff+0x94>
10006d14:	18005616 	blt	r3,zero,10006e70 <__mdiff+0x1e0>
10006d18:	34400504 	addi	r17,r6,20
10006d1c:	2c000504 	addi	r16,r5,20
10006d20:	0029883a 	mov	r20,zero
10006d24:	91400117 	ldw	r5,4(r18)
10006d28:	00063680 	call	10006368 <_Balloc>
10006d2c:	92400417 	ldw	r9,16(r18)
10006d30:	9b000417 	ldw	r12,16(r19)
10006d34:	12c00504 	addi	r11,r2,20
10006d38:	4a51883a 	add	r8,r9,r9
10006d3c:	6319883a 	add	r12,r12,r12
10006d40:	4211883a 	add	r8,r8,r8
10006d44:	6319883a 	add	r12,r12,r12
10006d48:	15000315 	stw	r20,12(r2)
10006d4c:	8211883a 	add	r8,r16,r8
10006d50:	8b19883a 	add	r12,r17,r12
10006d54:	0007883a 	mov	r3,zero
10006d58:	81400017 	ldw	r5,0(r16)
10006d5c:	89c00017 	ldw	r7,0(r17)
10006d60:	59800104 	addi	r6,r11,4
10006d64:	293fffcc 	andi	r4,r5,65535
10006d68:	20c7883a 	add	r3,r4,r3
10006d6c:	393fffcc 	andi	r4,r7,65535
10006d70:	1909c83a 	sub	r4,r3,r4
10006d74:	280ad43a 	srli	r5,r5,16
10006d78:	380ed43a 	srli	r7,r7,16
10006d7c:	2007d43a 	srai	r3,r4,16
10006d80:	213fffcc 	andi	r4,r4,65535
10006d84:	29cbc83a 	sub	r5,r5,r7
10006d88:	28c7883a 	add	r3,r5,r3
10006d8c:	180a943a 	slli	r5,r3,16
10006d90:	8c400104 	addi	r17,r17,4
10006d94:	84000104 	addi	r16,r16,4
10006d98:	2908b03a 	or	r4,r5,r4
10006d9c:	59000015 	stw	r4,0(r11)
10006da0:	1807d43a 	srai	r3,r3,16
10006da4:	3015883a 	mov	r10,r6
10006da8:	3017883a 	mov	r11,r6
10006dac:	8b3fea36 	bltu	r17,r12,10006d58 <__alt_data_end+0xf8006d58>
10006db0:	8200162e 	bgeu	r16,r8,10006e0c <__mdiff+0x17c>
10006db4:	8017883a 	mov	r11,r16
10006db8:	59400017 	ldw	r5,0(r11)
10006dbc:	31800104 	addi	r6,r6,4
10006dc0:	5ac00104 	addi	r11,r11,4
10006dc4:	293fffcc 	andi	r4,r5,65535
10006dc8:	20c7883a 	add	r3,r4,r3
10006dcc:	280ed43a 	srli	r7,r5,16
10006dd0:	180bd43a 	srai	r5,r3,16
10006dd4:	193fffcc 	andi	r4,r3,65535
10006dd8:	3947883a 	add	r3,r7,r5
10006ddc:	180a943a 	slli	r5,r3,16
10006de0:	1807d43a 	srai	r3,r3,16
10006de4:	2908b03a 	or	r4,r5,r4
10006de8:	313fff15 	stw	r4,-4(r6)
10006dec:	5a3ff236 	bltu	r11,r8,10006db8 <__alt_data_end+0xf8006db8>
10006df0:	0406303a 	nor	r3,zero,r16
10006df4:	1a07883a 	add	r3,r3,r8
10006df8:	1806d0ba 	srli	r3,r3,2
10006dfc:	18c00044 	addi	r3,r3,1
10006e00:	18c7883a 	add	r3,r3,r3
10006e04:	18c7883a 	add	r3,r3,r3
10006e08:	50d5883a 	add	r10,r10,r3
10006e0c:	50ffff04 	addi	r3,r10,-4
10006e10:	2000041e 	bne	r4,zero,10006e24 <__mdiff+0x194>
10006e14:	18ffff04 	addi	r3,r3,-4
10006e18:	19000017 	ldw	r4,0(r3)
10006e1c:	4a7fffc4 	addi	r9,r9,-1
10006e20:	203ffc26 	beq	r4,zero,10006e14 <__alt_data_end+0xf8006e14>
10006e24:	12400415 	stw	r9,16(r2)
10006e28:	dfc00517 	ldw	ra,20(sp)
10006e2c:	dd000417 	ldw	r20,16(sp)
10006e30:	dcc00317 	ldw	r19,12(sp)
10006e34:	dc800217 	ldw	r18,8(sp)
10006e38:	dc400117 	ldw	r17,4(sp)
10006e3c:	dc000017 	ldw	r16,0(sp)
10006e40:	dec00604 	addi	sp,sp,24
10006e44:	f800283a 	ret
10006e48:	000b883a 	mov	r5,zero
10006e4c:	00063680 	call	10006368 <_Balloc>
10006e50:	00c00044 	movi	r3,1
10006e54:	10c00415 	stw	r3,16(r2)
10006e58:	10000515 	stw	zero,20(r2)
10006e5c:	003ff206 	br	10006e28 <__alt_data_end+0xf8006e28>
10006e60:	8023883a 	mov	r17,r16
10006e64:	0029883a 	mov	r20,zero
10006e68:	4021883a 	mov	r16,r8
10006e6c:	003fad06 	br	10006d24 <__alt_data_end+0xf8006d24>
10006e70:	9005883a 	mov	r2,r18
10006e74:	94400504 	addi	r17,r18,20
10006e78:	9c000504 	addi	r16,r19,20
10006e7c:	9825883a 	mov	r18,r19
10006e80:	05000044 	movi	r20,1
10006e84:	1027883a 	mov	r19,r2
10006e88:	003fa606 	br	10006d24 <__alt_data_end+0xf8006d24>

10006e8c <__ulp>:
10006e8c:	295ffc2c 	andhi	r5,r5,32752
10006e90:	00bf3034 	movhi	r2,64704
10006e94:	2887883a 	add	r3,r5,r2
10006e98:	00c0020e 	bge	zero,r3,10006ea4 <__ulp+0x18>
10006e9c:	0005883a 	mov	r2,zero
10006ea0:	f800283a 	ret
10006ea4:	00c7c83a 	sub	r3,zero,r3
10006ea8:	1807d53a 	srai	r3,r3,20
10006eac:	008004c4 	movi	r2,19
10006eb0:	10c00b0e 	bge	r2,r3,10006ee0 <__ulp+0x54>
10006eb4:	18bffb04 	addi	r2,r3,-20
10006eb8:	01000784 	movi	r4,30
10006ebc:	0007883a 	mov	r3,zero
10006ec0:	20800516 	blt	r4,r2,10006ed8 <__ulp+0x4c>
10006ec4:	010007c4 	movi	r4,31
10006ec8:	2089c83a 	sub	r4,r4,r2
10006ecc:	00800044 	movi	r2,1
10006ed0:	1104983a 	sll	r2,r2,r4
10006ed4:	f800283a 	ret
10006ed8:	00800044 	movi	r2,1
10006edc:	f800283a 	ret
10006ee0:	01400234 	movhi	r5,8
10006ee4:	28c7d83a 	sra	r3,r5,r3
10006ee8:	0005883a 	mov	r2,zero
10006eec:	f800283a 	ret

10006ef0 <__b2d>:
10006ef0:	defffa04 	addi	sp,sp,-24
10006ef4:	dc000015 	stw	r16,0(sp)
10006ef8:	24000417 	ldw	r16,16(r4)
10006efc:	dc400115 	stw	r17,4(sp)
10006f00:	24400504 	addi	r17,r4,20
10006f04:	8421883a 	add	r16,r16,r16
10006f08:	8421883a 	add	r16,r16,r16
10006f0c:	8c21883a 	add	r16,r17,r16
10006f10:	dc800215 	stw	r18,8(sp)
10006f14:	84bfff17 	ldw	r18,-4(r16)
10006f18:	dd000415 	stw	r20,16(sp)
10006f1c:	dcc00315 	stw	r19,12(sp)
10006f20:	9009883a 	mov	r4,r18
10006f24:	2829883a 	mov	r20,r5
10006f28:	dfc00515 	stw	ra,20(sp)
10006f2c:	000665c0 	call	1000665c <__hi0bits>
10006f30:	00c00804 	movi	r3,32
10006f34:	1889c83a 	sub	r4,r3,r2
10006f38:	a1000015 	stw	r4,0(r20)
10006f3c:	01000284 	movi	r4,10
10006f40:	84ffff04 	addi	r19,r16,-4
10006f44:	20801216 	blt	r4,r2,10006f90 <__b2d+0xa0>
10006f48:	018002c4 	movi	r6,11
10006f4c:	308dc83a 	sub	r6,r6,r2
10006f50:	9186d83a 	srl	r3,r18,r6
10006f54:	18cffc34 	orhi	r3,r3,16368
10006f58:	8cc0212e 	bgeu	r17,r19,10006fe0 <__b2d+0xf0>
10006f5c:	813ffe17 	ldw	r4,-8(r16)
10006f60:	218cd83a 	srl	r6,r4,r6
10006f64:	10800544 	addi	r2,r2,21
10006f68:	9084983a 	sll	r2,r18,r2
10006f6c:	1184b03a 	or	r2,r2,r6
10006f70:	dfc00517 	ldw	ra,20(sp)
10006f74:	dd000417 	ldw	r20,16(sp)
10006f78:	dcc00317 	ldw	r19,12(sp)
10006f7c:	dc800217 	ldw	r18,8(sp)
10006f80:	dc400117 	ldw	r17,4(sp)
10006f84:	dc000017 	ldw	r16,0(sp)
10006f88:	dec00604 	addi	sp,sp,24
10006f8c:	f800283a 	ret
10006f90:	8cc00f2e 	bgeu	r17,r19,10006fd0 <__b2d+0xe0>
10006f94:	117ffd44 	addi	r5,r2,-11
10006f98:	80bffe17 	ldw	r2,-8(r16)
10006f9c:	28000e26 	beq	r5,zero,10006fd8 <__b2d+0xe8>
10006fa0:	1949c83a 	sub	r4,r3,r5
10006fa4:	9164983a 	sll	r18,r18,r5
10006fa8:	1106d83a 	srl	r3,r2,r4
10006fac:	81bffe04 	addi	r6,r16,-8
10006fb0:	948ffc34 	orhi	r18,r18,16368
10006fb4:	90c6b03a 	or	r3,r18,r3
10006fb8:	89800e2e 	bgeu	r17,r6,10006ff4 <__b2d+0x104>
10006fbc:	81bffd17 	ldw	r6,-12(r16)
10006fc0:	1144983a 	sll	r2,r2,r5
10006fc4:	310ad83a 	srl	r5,r6,r4
10006fc8:	2884b03a 	or	r2,r5,r2
10006fcc:	003fe806 	br	10006f70 <__alt_data_end+0xf8006f70>
10006fd0:	10bffd44 	addi	r2,r2,-11
10006fd4:	1000041e 	bne	r2,zero,10006fe8 <__b2d+0xf8>
10006fd8:	90cffc34 	orhi	r3,r18,16368
10006fdc:	003fe406 	br	10006f70 <__alt_data_end+0xf8006f70>
10006fe0:	000d883a 	mov	r6,zero
10006fe4:	003fdf06 	br	10006f64 <__alt_data_end+0xf8006f64>
10006fe8:	90a4983a 	sll	r18,r18,r2
10006fec:	0005883a 	mov	r2,zero
10006ff0:	003ff906 	br	10006fd8 <__alt_data_end+0xf8006fd8>
10006ff4:	1144983a 	sll	r2,r2,r5
10006ff8:	003fdd06 	br	10006f70 <__alt_data_end+0xf8006f70>

10006ffc <__d2b>:
10006ffc:	defff804 	addi	sp,sp,-32
10007000:	dc000215 	stw	r16,8(sp)
10007004:	3021883a 	mov	r16,r6
10007008:	dc400315 	stw	r17,12(sp)
1000700c:	8022907a 	slli	r17,r16,1
10007010:	dd000615 	stw	r20,24(sp)
10007014:	2829883a 	mov	r20,r5
10007018:	01400044 	movi	r5,1
1000701c:	dcc00515 	stw	r19,20(sp)
10007020:	dc800415 	stw	r18,16(sp)
10007024:	dfc00715 	stw	ra,28(sp)
10007028:	3825883a 	mov	r18,r7
1000702c:	8822d57a 	srli	r17,r17,21
10007030:	00063680 	call	10006368 <_Balloc>
10007034:	1027883a 	mov	r19,r2
10007038:	00800434 	movhi	r2,16
1000703c:	10bfffc4 	addi	r2,r2,-1
10007040:	808c703a 	and	r6,r16,r2
10007044:	88000126 	beq	r17,zero,1000704c <__d2b+0x50>
10007048:	31800434 	orhi	r6,r6,16
1000704c:	d9800015 	stw	r6,0(sp)
10007050:	a0002426 	beq	r20,zero,100070e4 <__d2b+0xe8>
10007054:	d9000104 	addi	r4,sp,4
10007058:	dd000115 	stw	r20,4(sp)
1000705c:	00066c40 	call	100066c4 <__lo0bits>
10007060:	d8c00017 	ldw	r3,0(sp)
10007064:	10002f1e 	bne	r2,zero,10007124 <__d2b+0x128>
10007068:	d9000117 	ldw	r4,4(sp)
1000706c:	99000515 	stw	r4,20(r19)
10007070:	1821003a 	cmpeq	r16,r3,zero
10007074:	01000084 	movi	r4,2
10007078:	2421c83a 	sub	r16,r4,r16
1000707c:	98c00615 	stw	r3,24(r19)
10007080:	9c000415 	stw	r16,16(r19)
10007084:	88001f1e 	bne	r17,zero,10007104 <__d2b+0x108>
10007088:	10bef384 	addi	r2,r2,-1074
1000708c:	90800015 	stw	r2,0(r18)
10007090:	00900034 	movhi	r2,16384
10007094:	10bfffc4 	addi	r2,r2,-1
10007098:	8085883a 	add	r2,r16,r2
1000709c:	1085883a 	add	r2,r2,r2
100070a0:	1085883a 	add	r2,r2,r2
100070a4:	9885883a 	add	r2,r19,r2
100070a8:	11000517 	ldw	r4,20(r2)
100070ac:	8020917a 	slli	r16,r16,5
100070b0:	000665c0 	call	1000665c <__hi0bits>
100070b4:	d8c00817 	ldw	r3,32(sp)
100070b8:	8085c83a 	sub	r2,r16,r2
100070bc:	18800015 	stw	r2,0(r3)
100070c0:	9805883a 	mov	r2,r19
100070c4:	dfc00717 	ldw	ra,28(sp)
100070c8:	dd000617 	ldw	r20,24(sp)
100070cc:	dcc00517 	ldw	r19,20(sp)
100070d0:	dc800417 	ldw	r18,16(sp)
100070d4:	dc400317 	ldw	r17,12(sp)
100070d8:	dc000217 	ldw	r16,8(sp)
100070dc:	dec00804 	addi	sp,sp,32
100070e0:	f800283a 	ret
100070e4:	d809883a 	mov	r4,sp
100070e8:	00066c40 	call	100066c4 <__lo0bits>
100070ec:	d8c00017 	ldw	r3,0(sp)
100070f0:	04000044 	movi	r16,1
100070f4:	9c000415 	stw	r16,16(r19)
100070f8:	98c00515 	stw	r3,20(r19)
100070fc:	10800804 	addi	r2,r2,32
10007100:	883fe126 	beq	r17,zero,10007088 <__alt_data_end+0xf8007088>
10007104:	00c00d44 	movi	r3,53
10007108:	8c7ef344 	addi	r17,r17,-1075
1000710c:	88a3883a 	add	r17,r17,r2
10007110:	1885c83a 	sub	r2,r3,r2
10007114:	d8c00817 	ldw	r3,32(sp)
10007118:	94400015 	stw	r17,0(r18)
1000711c:	18800015 	stw	r2,0(r3)
10007120:	003fe706 	br	100070c0 <__alt_data_end+0xf80070c0>
10007124:	01000804 	movi	r4,32
10007128:	2089c83a 	sub	r4,r4,r2
1000712c:	1908983a 	sll	r4,r3,r4
10007130:	d9400117 	ldw	r5,4(sp)
10007134:	1886d83a 	srl	r3,r3,r2
10007138:	2148b03a 	or	r4,r4,r5
1000713c:	99000515 	stw	r4,20(r19)
10007140:	d8c00015 	stw	r3,0(sp)
10007144:	003fca06 	br	10007070 <__alt_data_end+0xf8007070>

10007148 <__ratio>:
10007148:	defff904 	addi	sp,sp,-28
1000714c:	dc400315 	stw	r17,12(sp)
10007150:	2823883a 	mov	r17,r5
10007154:	d9400104 	addi	r5,sp,4
10007158:	dfc00615 	stw	ra,24(sp)
1000715c:	dcc00515 	stw	r19,20(sp)
10007160:	dc800415 	stw	r18,16(sp)
10007164:	2027883a 	mov	r19,r4
10007168:	dc000215 	stw	r16,8(sp)
1000716c:	0006ef00 	call	10006ef0 <__b2d>
10007170:	d80b883a 	mov	r5,sp
10007174:	8809883a 	mov	r4,r17
10007178:	1025883a 	mov	r18,r2
1000717c:	1821883a 	mov	r16,r3
10007180:	0006ef00 	call	10006ef0 <__b2d>
10007184:	8a000417 	ldw	r8,16(r17)
10007188:	99000417 	ldw	r4,16(r19)
1000718c:	d9400117 	ldw	r5,4(sp)
10007190:	2209c83a 	sub	r4,r4,r8
10007194:	2010917a 	slli	r8,r4,5
10007198:	d9000017 	ldw	r4,0(sp)
1000719c:	2909c83a 	sub	r4,r5,r4
100071a0:	4109883a 	add	r4,r8,r4
100071a4:	01000e0e 	bge	zero,r4,100071e0 <__ratio+0x98>
100071a8:	2008953a 	slli	r4,r4,20
100071ac:	2421883a 	add	r16,r4,r16
100071b0:	100d883a 	mov	r6,r2
100071b4:	180f883a 	mov	r7,r3
100071b8:	9009883a 	mov	r4,r18
100071bc:	800b883a 	mov	r5,r16
100071c0:	000b0340 	call	1000b034 <__divdf3>
100071c4:	dfc00617 	ldw	ra,24(sp)
100071c8:	dcc00517 	ldw	r19,20(sp)
100071cc:	dc800417 	ldw	r18,16(sp)
100071d0:	dc400317 	ldw	r17,12(sp)
100071d4:	dc000217 	ldw	r16,8(sp)
100071d8:	dec00704 	addi	sp,sp,28
100071dc:	f800283a 	ret
100071e0:	2008953a 	slli	r4,r4,20
100071e4:	1907c83a 	sub	r3,r3,r4
100071e8:	003ff106 	br	100071b0 <__alt_data_end+0xf80071b0>

100071ec <_mprec_log10>:
100071ec:	defffe04 	addi	sp,sp,-8
100071f0:	dc000015 	stw	r16,0(sp)
100071f4:	dfc00115 	stw	ra,4(sp)
100071f8:	008005c4 	movi	r2,23
100071fc:	2021883a 	mov	r16,r4
10007200:	11000d0e 	bge	r2,r4,10007238 <_mprec_log10+0x4c>
10007204:	0005883a 	mov	r2,zero
10007208:	00cffc34 	movhi	r3,16368
1000720c:	843fffc4 	addi	r16,r16,-1
10007210:	000d883a 	mov	r6,zero
10007214:	01d00934 	movhi	r7,16420
10007218:	1009883a 	mov	r4,r2
1000721c:	180b883a 	mov	r5,r3
10007220:	000bb740 	call	1000bb74 <__muldf3>
10007224:	803ff91e 	bne	r16,zero,1000720c <__alt_data_end+0xf800720c>
10007228:	dfc00117 	ldw	ra,4(sp)
1000722c:	dc000017 	ldw	r16,0(sp)
10007230:	dec00204 	addi	sp,sp,8
10007234:	f800283a 	ret
10007238:	202090fa 	slli	r16,r4,3
1000723c:	00840074 	movhi	r2,4097
10007240:	10927904 	addi	r2,r2,18916
10007244:	1421883a 	add	r16,r2,r16
10007248:	80800017 	ldw	r2,0(r16)
1000724c:	80c00117 	ldw	r3,4(r16)
10007250:	dfc00117 	ldw	ra,4(sp)
10007254:	dc000017 	ldw	r16,0(sp)
10007258:	dec00204 	addi	sp,sp,8
1000725c:	f800283a 	ret

10007260 <__copybits>:
10007260:	297fffc4 	addi	r5,r5,-1
10007264:	280fd17a 	srai	r7,r5,5
10007268:	30c00417 	ldw	r3,16(r6)
1000726c:	30800504 	addi	r2,r6,20
10007270:	39c00044 	addi	r7,r7,1
10007274:	18c7883a 	add	r3,r3,r3
10007278:	39cf883a 	add	r7,r7,r7
1000727c:	18c7883a 	add	r3,r3,r3
10007280:	39cf883a 	add	r7,r7,r7
10007284:	10c7883a 	add	r3,r2,r3
10007288:	21cf883a 	add	r7,r4,r7
1000728c:	10c00d2e 	bgeu	r2,r3,100072c4 <__copybits+0x64>
10007290:	200b883a 	mov	r5,r4
10007294:	12000017 	ldw	r8,0(r2)
10007298:	29400104 	addi	r5,r5,4
1000729c:	10800104 	addi	r2,r2,4
100072a0:	2a3fff15 	stw	r8,-4(r5)
100072a4:	10fffb36 	bltu	r2,r3,10007294 <__alt_data_end+0xf8007294>
100072a8:	1985c83a 	sub	r2,r3,r6
100072ac:	10bffac4 	addi	r2,r2,-21
100072b0:	1004d0ba 	srli	r2,r2,2
100072b4:	10800044 	addi	r2,r2,1
100072b8:	1085883a 	add	r2,r2,r2
100072bc:	1085883a 	add	r2,r2,r2
100072c0:	2089883a 	add	r4,r4,r2
100072c4:	21c0032e 	bgeu	r4,r7,100072d4 <__copybits+0x74>
100072c8:	20000015 	stw	zero,0(r4)
100072cc:	21000104 	addi	r4,r4,4
100072d0:	21fffd36 	bltu	r4,r7,100072c8 <__alt_data_end+0xf80072c8>
100072d4:	f800283a 	ret

100072d8 <__any_on>:
100072d8:	20c00417 	ldw	r3,16(r4)
100072dc:	2805d17a 	srai	r2,r5,5
100072e0:	21000504 	addi	r4,r4,20
100072e4:	18800d0e 	bge	r3,r2,1000731c <__any_on+0x44>
100072e8:	18c7883a 	add	r3,r3,r3
100072ec:	18c7883a 	add	r3,r3,r3
100072f0:	20c7883a 	add	r3,r4,r3
100072f4:	20c0192e 	bgeu	r4,r3,1000735c <__any_on+0x84>
100072f8:	18bfff17 	ldw	r2,-4(r3)
100072fc:	18ffff04 	addi	r3,r3,-4
10007300:	1000041e 	bne	r2,zero,10007314 <__any_on+0x3c>
10007304:	20c0142e 	bgeu	r4,r3,10007358 <__any_on+0x80>
10007308:	18ffff04 	addi	r3,r3,-4
1000730c:	19400017 	ldw	r5,0(r3)
10007310:	283ffc26 	beq	r5,zero,10007304 <__alt_data_end+0xf8007304>
10007314:	00800044 	movi	r2,1
10007318:	f800283a 	ret
1000731c:	10c00a0e 	bge	r2,r3,10007348 <__any_on+0x70>
10007320:	1085883a 	add	r2,r2,r2
10007324:	1085883a 	add	r2,r2,r2
10007328:	294007cc 	andi	r5,r5,31
1000732c:	2087883a 	add	r3,r4,r2
10007330:	283ff026 	beq	r5,zero,100072f4 <__alt_data_end+0xf80072f4>
10007334:	19800017 	ldw	r6,0(r3)
10007338:	3144d83a 	srl	r2,r6,r5
1000733c:	114a983a 	sll	r5,r2,r5
10007340:	317ff41e 	bne	r6,r5,10007314 <__alt_data_end+0xf8007314>
10007344:	003feb06 	br	100072f4 <__alt_data_end+0xf80072f4>
10007348:	1085883a 	add	r2,r2,r2
1000734c:	1085883a 	add	r2,r2,r2
10007350:	2087883a 	add	r3,r4,r2
10007354:	003fe706 	br	100072f4 <__alt_data_end+0xf80072f4>
10007358:	f800283a 	ret
1000735c:	0005883a 	mov	r2,zero
10007360:	f800283a 	ret

10007364 <_realloc_r>:
10007364:	defff604 	addi	sp,sp,-40
10007368:	dc800215 	stw	r18,8(sp)
1000736c:	dfc00915 	stw	ra,36(sp)
10007370:	df000815 	stw	fp,32(sp)
10007374:	ddc00715 	stw	r23,28(sp)
10007378:	dd800615 	stw	r22,24(sp)
1000737c:	dd400515 	stw	r21,20(sp)
10007380:	dd000415 	stw	r20,16(sp)
10007384:	dcc00315 	stw	r19,12(sp)
10007388:	dc400115 	stw	r17,4(sp)
1000738c:	dc000015 	stw	r16,0(sp)
10007390:	3025883a 	mov	r18,r6
10007394:	2800b726 	beq	r5,zero,10007674 <_realloc_r+0x310>
10007398:	282b883a 	mov	r21,r5
1000739c:	2029883a 	mov	r20,r4
100073a0:	000d36c0 	call	1000d36c <__malloc_lock>
100073a4:	a8bfff17 	ldw	r2,-4(r21)
100073a8:	043fff04 	movi	r16,-4
100073ac:	90c002c4 	addi	r3,r18,11
100073b0:	01000584 	movi	r4,22
100073b4:	acfffe04 	addi	r19,r21,-8
100073b8:	1420703a 	and	r16,r2,r16
100073bc:	20c0332e 	bgeu	r4,r3,1000748c <_realloc_r+0x128>
100073c0:	047ffe04 	movi	r17,-8
100073c4:	1c62703a 	and	r17,r3,r17
100073c8:	8807883a 	mov	r3,r17
100073cc:	88005816 	blt	r17,zero,10007530 <_realloc_r+0x1cc>
100073d0:	8c805736 	bltu	r17,r18,10007530 <_realloc_r+0x1cc>
100073d4:	80c0300e 	bge	r16,r3,10007498 <_realloc_r+0x134>
100073d8:	07040074 	movhi	fp,4097
100073dc:	e7143504 	addi	fp,fp,20692
100073e0:	e1c00217 	ldw	r7,8(fp)
100073e4:	9c09883a 	add	r4,r19,r16
100073e8:	22000117 	ldw	r8,4(r4)
100073ec:	21c06326 	beq	r4,r7,1000757c <_realloc_r+0x218>
100073f0:	017fff84 	movi	r5,-2
100073f4:	414a703a 	and	r5,r8,r5
100073f8:	214b883a 	add	r5,r4,r5
100073fc:	29800117 	ldw	r6,4(r5)
10007400:	3180004c 	andi	r6,r6,1
10007404:	30003f26 	beq	r6,zero,10007504 <_realloc_r+0x1a0>
10007408:	1080004c 	andi	r2,r2,1
1000740c:	10008326 	beq	r2,zero,1000761c <_realloc_r+0x2b8>
10007410:	900b883a 	mov	r5,r18
10007414:	a009883a 	mov	r4,r20
10007418:	00056ac0 	call	100056ac <_malloc_r>
1000741c:	1025883a 	mov	r18,r2
10007420:	10011e26 	beq	r2,zero,1000789c <_realloc_r+0x538>
10007424:	a93fff17 	ldw	r4,-4(r21)
10007428:	10fffe04 	addi	r3,r2,-8
1000742c:	00bfff84 	movi	r2,-2
10007430:	2084703a 	and	r2,r4,r2
10007434:	9885883a 	add	r2,r19,r2
10007438:	1880ee26 	beq	r3,r2,100077f4 <_realloc_r+0x490>
1000743c:	81bfff04 	addi	r6,r16,-4
10007440:	00800904 	movi	r2,36
10007444:	1180b836 	bltu	r2,r6,10007728 <_realloc_r+0x3c4>
10007448:	00c004c4 	movi	r3,19
1000744c:	19809636 	bltu	r3,r6,100076a8 <_realloc_r+0x344>
10007450:	9005883a 	mov	r2,r18
10007454:	a807883a 	mov	r3,r21
10007458:	19000017 	ldw	r4,0(r3)
1000745c:	11000015 	stw	r4,0(r2)
10007460:	19000117 	ldw	r4,4(r3)
10007464:	11000115 	stw	r4,4(r2)
10007468:	18c00217 	ldw	r3,8(r3)
1000746c:	10c00215 	stw	r3,8(r2)
10007470:	a80b883a 	mov	r5,r21
10007474:	a009883a 	mov	r4,r20
10007478:	0004ac00 	call	10004ac0 <_free_r>
1000747c:	a009883a 	mov	r4,r20
10007480:	000d3900 	call	1000d390 <__malloc_unlock>
10007484:	9005883a 	mov	r2,r18
10007488:	00001206 	br	100074d4 <_realloc_r+0x170>
1000748c:	00c00404 	movi	r3,16
10007490:	1823883a 	mov	r17,r3
10007494:	003fce06 	br	100073d0 <__alt_data_end+0xf80073d0>
10007498:	a825883a 	mov	r18,r21
1000749c:	8445c83a 	sub	r2,r16,r17
100074a0:	00c003c4 	movi	r3,15
100074a4:	18802636 	bltu	r3,r2,10007540 <_realloc_r+0x1dc>
100074a8:	99800117 	ldw	r6,4(r19)
100074ac:	9c07883a 	add	r3,r19,r16
100074b0:	3180004c 	andi	r6,r6,1
100074b4:	3420b03a 	or	r16,r6,r16
100074b8:	9c000115 	stw	r16,4(r19)
100074bc:	18800117 	ldw	r2,4(r3)
100074c0:	10800054 	ori	r2,r2,1
100074c4:	18800115 	stw	r2,4(r3)
100074c8:	a009883a 	mov	r4,r20
100074cc:	000d3900 	call	1000d390 <__malloc_unlock>
100074d0:	9005883a 	mov	r2,r18
100074d4:	dfc00917 	ldw	ra,36(sp)
100074d8:	df000817 	ldw	fp,32(sp)
100074dc:	ddc00717 	ldw	r23,28(sp)
100074e0:	dd800617 	ldw	r22,24(sp)
100074e4:	dd400517 	ldw	r21,20(sp)
100074e8:	dd000417 	ldw	r20,16(sp)
100074ec:	dcc00317 	ldw	r19,12(sp)
100074f0:	dc800217 	ldw	r18,8(sp)
100074f4:	dc400117 	ldw	r17,4(sp)
100074f8:	dc000017 	ldw	r16,0(sp)
100074fc:	dec00a04 	addi	sp,sp,40
10007500:	f800283a 	ret
10007504:	017fff04 	movi	r5,-4
10007508:	414a703a 	and	r5,r8,r5
1000750c:	814d883a 	add	r6,r16,r5
10007510:	30c01f16 	blt	r6,r3,10007590 <_realloc_r+0x22c>
10007514:	20800317 	ldw	r2,12(r4)
10007518:	20c00217 	ldw	r3,8(r4)
1000751c:	a825883a 	mov	r18,r21
10007520:	3021883a 	mov	r16,r6
10007524:	18800315 	stw	r2,12(r3)
10007528:	10c00215 	stw	r3,8(r2)
1000752c:	003fdb06 	br	1000749c <__alt_data_end+0xf800749c>
10007530:	00800304 	movi	r2,12
10007534:	a0800015 	stw	r2,0(r20)
10007538:	0005883a 	mov	r2,zero
1000753c:	003fe506 	br	100074d4 <__alt_data_end+0xf80074d4>
10007540:	98c00117 	ldw	r3,4(r19)
10007544:	9c4b883a 	add	r5,r19,r17
10007548:	11000054 	ori	r4,r2,1
1000754c:	18c0004c 	andi	r3,r3,1
10007550:	1c62b03a 	or	r17,r3,r17
10007554:	9c400115 	stw	r17,4(r19)
10007558:	29000115 	stw	r4,4(r5)
1000755c:	2885883a 	add	r2,r5,r2
10007560:	10c00117 	ldw	r3,4(r2)
10007564:	29400204 	addi	r5,r5,8
10007568:	a009883a 	mov	r4,r20
1000756c:	18c00054 	ori	r3,r3,1
10007570:	10c00115 	stw	r3,4(r2)
10007574:	0004ac00 	call	10004ac0 <_free_r>
10007578:	003fd306 	br	100074c8 <__alt_data_end+0xf80074c8>
1000757c:	017fff04 	movi	r5,-4
10007580:	414a703a 	and	r5,r8,r5
10007584:	89800404 	addi	r6,r17,16
10007588:	8151883a 	add	r8,r16,r5
1000758c:	4180590e 	bge	r8,r6,100076f4 <_realloc_r+0x390>
10007590:	1080004c 	andi	r2,r2,1
10007594:	103f9e1e 	bne	r2,zero,10007410 <__alt_data_end+0xf8007410>
10007598:	adbffe17 	ldw	r22,-8(r21)
1000759c:	00bfff04 	movi	r2,-4
100075a0:	9dadc83a 	sub	r22,r19,r22
100075a4:	b1800117 	ldw	r6,4(r22)
100075a8:	3084703a 	and	r2,r6,r2
100075ac:	20002026 	beq	r4,zero,10007630 <_realloc_r+0x2cc>
100075b0:	80af883a 	add	r23,r16,r2
100075b4:	b96f883a 	add	r23,r23,r5
100075b8:	21c05f26 	beq	r4,r7,10007738 <_realloc_r+0x3d4>
100075bc:	b8c01c16 	blt	r23,r3,10007630 <_realloc_r+0x2cc>
100075c0:	20800317 	ldw	r2,12(r4)
100075c4:	20c00217 	ldw	r3,8(r4)
100075c8:	81bfff04 	addi	r6,r16,-4
100075cc:	01000904 	movi	r4,36
100075d0:	18800315 	stw	r2,12(r3)
100075d4:	10c00215 	stw	r3,8(r2)
100075d8:	b0c00217 	ldw	r3,8(r22)
100075dc:	b0800317 	ldw	r2,12(r22)
100075e0:	b4800204 	addi	r18,r22,8
100075e4:	18800315 	stw	r2,12(r3)
100075e8:	10c00215 	stw	r3,8(r2)
100075ec:	21801b36 	bltu	r4,r6,1000765c <_realloc_r+0x2f8>
100075f0:	008004c4 	movi	r2,19
100075f4:	1180352e 	bgeu	r2,r6,100076cc <_realloc_r+0x368>
100075f8:	a8800017 	ldw	r2,0(r21)
100075fc:	b0800215 	stw	r2,8(r22)
10007600:	a8800117 	ldw	r2,4(r21)
10007604:	b0800315 	stw	r2,12(r22)
10007608:	008006c4 	movi	r2,27
1000760c:	11807f36 	bltu	r2,r6,1000780c <_realloc_r+0x4a8>
10007610:	b0800404 	addi	r2,r22,16
10007614:	ad400204 	addi	r21,r21,8
10007618:	00002d06 	br	100076d0 <_realloc_r+0x36c>
1000761c:	adbffe17 	ldw	r22,-8(r21)
10007620:	00bfff04 	movi	r2,-4
10007624:	9dadc83a 	sub	r22,r19,r22
10007628:	b1000117 	ldw	r4,4(r22)
1000762c:	2084703a 	and	r2,r4,r2
10007630:	b03f7726 	beq	r22,zero,10007410 <__alt_data_end+0xf8007410>
10007634:	80af883a 	add	r23,r16,r2
10007638:	b8ff7516 	blt	r23,r3,10007410 <__alt_data_end+0xf8007410>
1000763c:	b0800317 	ldw	r2,12(r22)
10007640:	b0c00217 	ldw	r3,8(r22)
10007644:	81bfff04 	addi	r6,r16,-4
10007648:	01000904 	movi	r4,36
1000764c:	18800315 	stw	r2,12(r3)
10007650:	10c00215 	stw	r3,8(r2)
10007654:	b4800204 	addi	r18,r22,8
10007658:	21bfe52e 	bgeu	r4,r6,100075f0 <__alt_data_end+0xf80075f0>
1000765c:	a80b883a 	mov	r5,r21
10007660:	9009883a 	mov	r4,r18
10007664:	00060e40 	call	100060e4 <memmove>
10007668:	b821883a 	mov	r16,r23
1000766c:	b027883a 	mov	r19,r22
10007670:	003f8a06 	br	1000749c <__alt_data_end+0xf800749c>
10007674:	300b883a 	mov	r5,r6
10007678:	dfc00917 	ldw	ra,36(sp)
1000767c:	df000817 	ldw	fp,32(sp)
10007680:	ddc00717 	ldw	r23,28(sp)
10007684:	dd800617 	ldw	r22,24(sp)
10007688:	dd400517 	ldw	r21,20(sp)
1000768c:	dd000417 	ldw	r20,16(sp)
10007690:	dcc00317 	ldw	r19,12(sp)
10007694:	dc800217 	ldw	r18,8(sp)
10007698:	dc400117 	ldw	r17,4(sp)
1000769c:	dc000017 	ldw	r16,0(sp)
100076a0:	dec00a04 	addi	sp,sp,40
100076a4:	00056ac1 	jmpi	100056ac <_malloc_r>
100076a8:	a8c00017 	ldw	r3,0(r21)
100076ac:	90c00015 	stw	r3,0(r18)
100076b0:	a8c00117 	ldw	r3,4(r21)
100076b4:	90c00115 	stw	r3,4(r18)
100076b8:	00c006c4 	movi	r3,27
100076bc:	19804536 	bltu	r3,r6,100077d4 <_realloc_r+0x470>
100076c0:	90800204 	addi	r2,r18,8
100076c4:	a8c00204 	addi	r3,r21,8
100076c8:	003f6306 	br	10007458 <__alt_data_end+0xf8007458>
100076cc:	9005883a 	mov	r2,r18
100076d0:	a8c00017 	ldw	r3,0(r21)
100076d4:	b821883a 	mov	r16,r23
100076d8:	b027883a 	mov	r19,r22
100076dc:	10c00015 	stw	r3,0(r2)
100076e0:	a8c00117 	ldw	r3,4(r21)
100076e4:	10c00115 	stw	r3,4(r2)
100076e8:	a8c00217 	ldw	r3,8(r21)
100076ec:	10c00215 	stw	r3,8(r2)
100076f0:	003f6a06 	br	1000749c <__alt_data_end+0xf800749c>
100076f4:	9c67883a 	add	r19,r19,r17
100076f8:	4445c83a 	sub	r2,r8,r17
100076fc:	e4c00215 	stw	r19,8(fp)
10007700:	10800054 	ori	r2,r2,1
10007704:	98800115 	stw	r2,4(r19)
10007708:	a8bfff17 	ldw	r2,-4(r21)
1000770c:	a009883a 	mov	r4,r20
10007710:	1080004c 	andi	r2,r2,1
10007714:	1462b03a 	or	r17,r2,r17
10007718:	ac7fff15 	stw	r17,-4(r21)
1000771c:	000d3900 	call	1000d390 <__malloc_unlock>
10007720:	a805883a 	mov	r2,r21
10007724:	003f6b06 	br	100074d4 <__alt_data_end+0xf80074d4>
10007728:	a80b883a 	mov	r5,r21
1000772c:	9009883a 	mov	r4,r18
10007730:	00060e40 	call	100060e4 <memmove>
10007734:	003f4e06 	br	10007470 <__alt_data_end+0xf8007470>
10007738:	89000404 	addi	r4,r17,16
1000773c:	b93fbc16 	blt	r23,r4,10007630 <__alt_data_end+0xf8007630>
10007740:	b0800317 	ldw	r2,12(r22)
10007744:	b0c00217 	ldw	r3,8(r22)
10007748:	81bfff04 	addi	r6,r16,-4
1000774c:	01000904 	movi	r4,36
10007750:	18800315 	stw	r2,12(r3)
10007754:	10c00215 	stw	r3,8(r2)
10007758:	b4800204 	addi	r18,r22,8
1000775c:	21804336 	bltu	r4,r6,1000786c <_realloc_r+0x508>
10007760:	008004c4 	movi	r2,19
10007764:	11803f2e 	bgeu	r2,r6,10007864 <_realloc_r+0x500>
10007768:	a8800017 	ldw	r2,0(r21)
1000776c:	b0800215 	stw	r2,8(r22)
10007770:	a8800117 	ldw	r2,4(r21)
10007774:	b0800315 	stw	r2,12(r22)
10007778:	008006c4 	movi	r2,27
1000777c:	11803f36 	bltu	r2,r6,1000787c <_realloc_r+0x518>
10007780:	b0800404 	addi	r2,r22,16
10007784:	ad400204 	addi	r21,r21,8
10007788:	a8c00017 	ldw	r3,0(r21)
1000778c:	10c00015 	stw	r3,0(r2)
10007790:	a8c00117 	ldw	r3,4(r21)
10007794:	10c00115 	stw	r3,4(r2)
10007798:	a8c00217 	ldw	r3,8(r21)
1000779c:	10c00215 	stw	r3,8(r2)
100077a0:	b447883a 	add	r3,r22,r17
100077a4:	bc45c83a 	sub	r2,r23,r17
100077a8:	e0c00215 	stw	r3,8(fp)
100077ac:	10800054 	ori	r2,r2,1
100077b0:	18800115 	stw	r2,4(r3)
100077b4:	b0800117 	ldw	r2,4(r22)
100077b8:	a009883a 	mov	r4,r20
100077bc:	1080004c 	andi	r2,r2,1
100077c0:	1462b03a 	or	r17,r2,r17
100077c4:	b4400115 	stw	r17,4(r22)
100077c8:	000d3900 	call	1000d390 <__malloc_unlock>
100077cc:	9005883a 	mov	r2,r18
100077d0:	003f4006 	br	100074d4 <__alt_data_end+0xf80074d4>
100077d4:	a8c00217 	ldw	r3,8(r21)
100077d8:	90c00215 	stw	r3,8(r18)
100077dc:	a8c00317 	ldw	r3,12(r21)
100077e0:	90c00315 	stw	r3,12(r18)
100077e4:	30801126 	beq	r6,r2,1000782c <_realloc_r+0x4c8>
100077e8:	90800404 	addi	r2,r18,16
100077ec:	a8c00404 	addi	r3,r21,16
100077f0:	003f1906 	br	10007458 <__alt_data_end+0xf8007458>
100077f4:	90ffff17 	ldw	r3,-4(r18)
100077f8:	00bfff04 	movi	r2,-4
100077fc:	a825883a 	mov	r18,r21
10007800:	1884703a 	and	r2,r3,r2
10007804:	80a1883a 	add	r16,r16,r2
10007808:	003f2406 	br	1000749c <__alt_data_end+0xf800749c>
1000780c:	a8800217 	ldw	r2,8(r21)
10007810:	b0800415 	stw	r2,16(r22)
10007814:	a8800317 	ldw	r2,12(r21)
10007818:	b0800515 	stw	r2,20(r22)
1000781c:	31000a26 	beq	r6,r4,10007848 <_realloc_r+0x4e4>
10007820:	b0800604 	addi	r2,r22,24
10007824:	ad400404 	addi	r21,r21,16
10007828:	003fa906 	br	100076d0 <__alt_data_end+0xf80076d0>
1000782c:	a9000417 	ldw	r4,16(r21)
10007830:	90800604 	addi	r2,r18,24
10007834:	a8c00604 	addi	r3,r21,24
10007838:	91000415 	stw	r4,16(r18)
1000783c:	a9000517 	ldw	r4,20(r21)
10007840:	91000515 	stw	r4,20(r18)
10007844:	003f0406 	br	10007458 <__alt_data_end+0xf8007458>
10007848:	a8c00417 	ldw	r3,16(r21)
1000784c:	ad400604 	addi	r21,r21,24
10007850:	b0800804 	addi	r2,r22,32
10007854:	b0c00615 	stw	r3,24(r22)
10007858:	a8ffff17 	ldw	r3,-4(r21)
1000785c:	b0c00715 	stw	r3,28(r22)
10007860:	003f9b06 	br	100076d0 <__alt_data_end+0xf80076d0>
10007864:	9005883a 	mov	r2,r18
10007868:	003fc706 	br	10007788 <__alt_data_end+0xf8007788>
1000786c:	a80b883a 	mov	r5,r21
10007870:	9009883a 	mov	r4,r18
10007874:	00060e40 	call	100060e4 <memmove>
10007878:	003fc906 	br	100077a0 <__alt_data_end+0xf80077a0>
1000787c:	a8800217 	ldw	r2,8(r21)
10007880:	b0800415 	stw	r2,16(r22)
10007884:	a8800317 	ldw	r2,12(r21)
10007888:	b0800515 	stw	r2,20(r22)
1000788c:	31000726 	beq	r6,r4,100078ac <_realloc_r+0x548>
10007890:	b0800604 	addi	r2,r22,24
10007894:	ad400404 	addi	r21,r21,16
10007898:	003fbb06 	br	10007788 <__alt_data_end+0xf8007788>
1000789c:	a009883a 	mov	r4,r20
100078a0:	000d3900 	call	1000d390 <__malloc_unlock>
100078a4:	0005883a 	mov	r2,zero
100078a8:	003f0a06 	br	100074d4 <__alt_data_end+0xf80074d4>
100078ac:	a8c00417 	ldw	r3,16(r21)
100078b0:	ad400604 	addi	r21,r21,24
100078b4:	b0800804 	addi	r2,r22,32
100078b8:	b0c00615 	stw	r3,24(r22)
100078bc:	a8ffff17 	ldw	r3,-4(r21)
100078c0:	b0c00715 	stw	r3,28(r22)
100078c4:	003fb006 	br	10007788 <__alt_data_end+0xf8007788>

100078c8 <__fpclassifyd>:
100078c8:	00a00034 	movhi	r2,32768
100078cc:	10bfffc4 	addi	r2,r2,-1
100078d0:	2884703a 	and	r2,r5,r2
100078d4:	10000726 	beq	r2,zero,100078f4 <__fpclassifyd+0x2c>
100078d8:	00fffc34 	movhi	r3,65520
100078dc:	019ff834 	movhi	r6,32736
100078e0:	28c7883a 	add	r3,r5,r3
100078e4:	31bfffc4 	addi	r6,r6,-1
100078e8:	30c00536 	bltu	r6,r3,10007900 <__fpclassifyd+0x38>
100078ec:	00800104 	movi	r2,4
100078f0:	f800283a 	ret
100078f4:	2000021e 	bne	r4,zero,10007900 <__fpclassifyd+0x38>
100078f8:	00800084 	movi	r2,2
100078fc:	f800283a 	ret
10007900:	00dffc34 	movhi	r3,32752
10007904:	019ff834 	movhi	r6,32736
10007908:	28cb883a 	add	r5,r5,r3
1000790c:	31bfffc4 	addi	r6,r6,-1
10007910:	317ff62e 	bgeu	r6,r5,100078ec <__alt_data_end+0xf80078ec>
10007914:	01400434 	movhi	r5,16
10007918:	297fffc4 	addi	r5,r5,-1
1000791c:	28800236 	bltu	r5,r2,10007928 <__fpclassifyd+0x60>
10007920:	008000c4 	movi	r2,3
10007924:	f800283a 	ret
10007928:	10c00226 	beq	r2,r3,10007934 <__fpclassifyd+0x6c>
1000792c:	0005883a 	mov	r2,zero
10007930:	f800283a 	ret
10007934:	2005003a 	cmpeq	r2,r4,zero
10007938:	f800283a 	ret

1000793c <_sbrk_r>:
1000793c:	defffd04 	addi	sp,sp,-12
10007940:	dc000015 	stw	r16,0(sp)
10007944:	040400b4 	movhi	r16,4098
10007948:	dc400115 	stw	r17,4(sp)
1000794c:	8420cd04 	addi	r16,r16,-31948
10007950:	2023883a 	mov	r17,r4
10007954:	2809883a 	mov	r4,r5
10007958:	dfc00215 	stw	ra,8(sp)
1000795c:	80000015 	stw	zero,0(r16)
10007960:	000d5500 	call	1000d550 <sbrk>
10007964:	00ffffc4 	movi	r3,-1
10007968:	10c00526 	beq	r2,r3,10007980 <_sbrk_r+0x44>
1000796c:	dfc00217 	ldw	ra,8(sp)
10007970:	dc400117 	ldw	r17,4(sp)
10007974:	dc000017 	ldw	r16,0(sp)
10007978:	dec00304 	addi	sp,sp,12
1000797c:	f800283a 	ret
10007980:	80c00017 	ldw	r3,0(r16)
10007984:	183ff926 	beq	r3,zero,1000796c <__alt_data_end+0xf800796c>
10007988:	88c00015 	stw	r3,0(r17)
1000798c:	003ff706 	br	1000796c <__alt_data_end+0xf800796c>

10007990 <__sread>:
10007990:	defffe04 	addi	sp,sp,-8
10007994:	dc000015 	stw	r16,0(sp)
10007998:	2821883a 	mov	r16,r5
1000799c:	2940038f 	ldh	r5,14(r5)
100079a0:	dfc00115 	stw	ra,4(sp)
100079a4:	00097840 	call	10009784 <_read_r>
100079a8:	10000716 	blt	r2,zero,100079c8 <__sread+0x38>
100079ac:	80c01417 	ldw	r3,80(r16)
100079b0:	1887883a 	add	r3,r3,r2
100079b4:	80c01415 	stw	r3,80(r16)
100079b8:	dfc00117 	ldw	ra,4(sp)
100079bc:	dc000017 	ldw	r16,0(sp)
100079c0:	dec00204 	addi	sp,sp,8
100079c4:	f800283a 	ret
100079c8:	80c0030b 	ldhu	r3,12(r16)
100079cc:	18fbffcc 	andi	r3,r3,61439
100079d0:	80c0030d 	sth	r3,12(r16)
100079d4:	dfc00117 	ldw	ra,4(sp)
100079d8:	dc000017 	ldw	r16,0(sp)
100079dc:	dec00204 	addi	sp,sp,8
100079e0:	f800283a 	ret

100079e4 <__seofread>:
100079e4:	0005883a 	mov	r2,zero
100079e8:	f800283a 	ret

100079ec <__swrite>:
100079ec:	2880030b 	ldhu	r2,12(r5)
100079f0:	defffb04 	addi	sp,sp,-20
100079f4:	dcc00315 	stw	r19,12(sp)
100079f8:	dc800215 	stw	r18,8(sp)
100079fc:	dc400115 	stw	r17,4(sp)
10007a00:	dc000015 	stw	r16,0(sp)
10007a04:	dfc00415 	stw	ra,16(sp)
10007a08:	10c0400c 	andi	r3,r2,256
10007a0c:	2821883a 	mov	r16,r5
10007a10:	2023883a 	mov	r17,r4
10007a14:	3025883a 	mov	r18,r6
10007a18:	3827883a 	mov	r19,r7
10007a1c:	18000526 	beq	r3,zero,10007a34 <__swrite+0x48>
10007a20:	2940038f 	ldh	r5,14(r5)
10007a24:	01c00084 	movi	r7,2
10007a28:	000d883a 	mov	r6,zero
10007a2c:	00097240 	call	10009724 <_lseek_r>
10007a30:	8080030b 	ldhu	r2,12(r16)
10007a34:	8140038f 	ldh	r5,14(r16)
10007a38:	10bbffcc 	andi	r2,r2,61439
10007a3c:	980f883a 	mov	r7,r19
10007a40:	900d883a 	mov	r6,r18
10007a44:	8809883a 	mov	r4,r17
10007a48:	8080030d 	sth	r2,12(r16)
10007a4c:	dfc00417 	ldw	ra,16(sp)
10007a50:	dcc00317 	ldw	r19,12(sp)
10007a54:	dc800217 	ldw	r18,8(sp)
10007a58:	dc400117 	ldw	r17,4(sp)
10007a5c:	dc000017 	ldw	r16,0(sp)
10007a60:	dec00504 	addi	sp,sp,20
10007a64:	00091f01 	jmpi	100091f0 <_write_r>

10007a68 <__sseek>:
10007a68:	defffe04 	addi	sp,sp,-8
10007a6c:	dc000015 	stw	r16,0(sp)
10007a70:	2821883a 	mov	r16,r5
10007a74:	2940038f 	ldh	r5,14(r5)
10007a78:	dfc00115 	stw	ra,4(sp)
10007a7c:	00097240 	call	10009724 <_lseek_r>
10007a80:	00ffffc4 	movi	r3,-1
10007a84:	10c00826 	beq	r2,r3,10007aa8 <__sseek+0x40>
10007a88:	80c0030b 	ldhu	r3,12(r16)
10007a8c:	80801415 	stw	r2,80(r16)
10007a90:	18c40014 	ori	r3,r3,4096
10007a94:	80c0030d 	sth	r3,12(r16)
10007a98:	dfc00117 	ldw	ra,4(sp)
10007a9c:	dc000017 	ldw	r16,0(sp)
10007aa0:	dec00204 	addi	sp,sp,8
10007aa4:	f800283a 	ret
10007aa8:	80c0030b 	ldhu	r3,12(r16)
10007aac:	18fbffcc 	andi	r3,r3,61439
10007ab0:	80c0030d 	sth	r3,12(r16)
10007ab4:	dfc00117 	ldw	ra,4(sp)
10007ab8:	dc000017 	ldw	r16,0(sp)
10007abc:	dec00204 	addi	sp,sp,8
10007ac0:	f800283a 	ret

10007ac4 <__sclose>:
10007ac4:	2940038f 	ldh	r5,14(r5)
10007ac8:	00092501 	jmpi	10009250 <_close_r>

10007acc <strcmp>:
10007acc:	2144b03a 	or	r2,r4,r5
10007ad0:	108000cc 	andi	r2,r2,3
10007ad4:	1000171e 	bne	r2,zero,10007b34 <strcmp+0x68>
10007ad8:	20800017 	ldw	r2,0(r4)
10007adc:	28c00017 	ldw	r3,0(r5)
10007ae0:	10c0141e 	bne	r2,r3,10007b34 <strcmp+0x68>
10007ae4:	027fbff4 	movhi	r9,65279
10007ae8:	4a7fbfc4 	addi	r9,r9,-257
10007aec:	0086303a 	nor	r3,zero,r2
10007af0:	02202074 	movhi	r8,32897
10007af4:	1245883a 	add	r2,r2,r9
10007af8:	42202004 	addi	r8,r8,-32640
10007afc:	10c4703a 	and	r2,r2,r3
10007b00:	1204703a 	and	r2,r2,r8
10007b04:	10000226 	beq	r2,zero,10007b10 <strcmp+0x44>
10007b08:	00002306 	br	10007b98 <strcmp+0xcc>
10007b0c:	1000221e 	bne	r2,zero,10007b98 <strcmp+0xcc>
10007b10:	21000104 	addi	r4,r4,4
10007b14:	20c00017 	ldw	r3,0(r4)
10007b18:	29400104 	addi	r5,r5,4
10007b1c:	29800017 	ldw	r6,0(r5)
10007b20:	1a4f883a 	add	r7,r3,r9
10007b24:	00c4303a 	nor	r2,zero,r3
10007b28:	3884703a 	and	r2,r7,r2
10007b2c:	1204703a 	and	r2,r2,r8
10007b30:	19bff626 	beq	r3,r6,10007b0c <__alt_data_end+0xf8007b0c>
10007b34:	20800003 	ldbu	r2,0(r4)
10007b38:	10c03fcc 	andi	r3,r2,255
10007b3c:	18c0201c 	xori	r3,r3,128
10007b40:	18ffe004 	addi	r3,r3,-128
10007b44:	18000c26 	beq	r3,zero,10007b78 <strcmp+0xac>
10007b48:	29800007 	ldb	r6,0(r5)
10007b4c:	19800326 	beq	r3,r6,10007b5c <strcmp+0x90>
10007b50:	00001306 	br	10007ba0 <strcmp+0xd4>
10007b54:	29800007 	ldb	r6,0(r5)
10007b58:	11800b1e 	bne	r2,r6,10007b88 <strcmp+0xbc>
10007b5c:	21000044 	addi	r4,r4,1
10007b60:	20c00003 	ldbu	r3,0(r4)
10007b64:	29400044 	addi	r5,r5,1
10007b68:	18803fcc 	andi	r2,r3,255
10007b6c:	1080201c 	xori	r2,r2,128
10007b70:	10bfe004 	addi	r2,r2,-128
10007b74:	103ff71e 	bne	r2,zero,10007b54 <__alt_data_end+0xf8007b54>
10007b78:	0007883a 	mov	r3,zero
10007b7c:	28800003 	ldbu	r2,0(r5)
10007b80:	1885c83a 	sub	r2,r3,r2
10007b84:	f800283a 	ret
10007b88:	28800003 	ldbu	r2,0(r5)
10007b8c:	18c03fcc 	andi	r3,r3,255
10007b90:	1885c83a 	sub	r2,r3,r2
10007b94:	f800283a 	ret
10007b98:	0005883a 	mov	r2,zero
10007b9c:	f800283a 	ret
10007ba0:	10c03fcc 	andi	r3,r2,255
10007ba4:	003ff506 	br	10007b7c <__alt_data_end+0xf8007b7c>

10007ba8 <__sprint_r.part.0>:
10007ba8:	28801917 	ldw	r2,100(r5)
10007bac:	defff604 	addi	sp,sp,-40
10007bb0:	dd400515 	stw	r21,20(sp)
10007bb4:	dfc00915 	stw	ra,36(sp)
10007bb8:	df000815 	stw	fp,32(sp)
10007bbc:	ddc00715 	stw	r23,28(sp)
10007bc0:	dd800615 	stw	r22,24(sp)
10007bc4:	dd000415 	stw	r20,16(sp)
10007bc8:	dcc00315 	stw	r19,12(sp)
10007bcc:	dc800215 	stw	r18,8(sp)
10007bd0:	dc400115 	stw	r17,4(sp)
10007bd4:	dc000015 	stw	r16,0(sp)
10007bd8:	1088000c 	andi	r2,r2,8192
10007bdc:	302b883a 	mov	r21,r6
10007be0:	10002e26 	beq	r2,zero,10007c9c <__sprint_r.part.0+0xf4>
10007be4:	30800217 	ldw	r2,8(r6)
10007be8:	35800017 	ldw	r22,0(r6)
10007bec:	10002926 	beq	r2,zero,10007c94 <__sprint_r.part.0+0xec>
10007bf0:	2827883a 	mov	r19,r5
10007bf4:	2029883a 	mov	r20,r4
10007bf8:	b5c00104 	addi	r23,r22,4
10007bfc:	04bfffc4 	movi	r18,-1
10007c00:	bc400017 	ldw	r17,0(r23)
10007c04:	b4000017 	ldw	r16,0(r22)
10007c08:	0039883a 	mov	fp,zero
10007c0c:	8822d0ba 	srli	r17,r17,2
10007c10:	8800031e 	bne	r17,zero,10007c20 <__sprint_r.part.0+0x78>
10007c14:	00001806 	br	10007c78 <__sprint_r.part.0+0xd0>
10007c18:	84000104 	addi	r16,r16,4
10007c1c:	8f001526 	beq	r17,fp,10007c74 <__sprint_r.part.0+0xcc>
10007c20:	81400017 	ldw	r5,0(r16)
10007c24:	980d883a 	mov	r6,r19
10007c28:	a009883a 	mov	r4,r20
10007c2c:	00095d00 	call	100095d0 <_fputwc_r>
10007c30:	e7000044 	addi	fp,fp,1
10007c34:	14bff81e 	bne	r2,r18,10007c18 <__alt_data_end+0xf8007c18>
10007c38:	9005883a 	mov	r2,r18
10007c3c:	a8000215 	stw	zero,8(r21)
10007c40:	a8000115 	stw	zero,4(r21)
10007c44:	dfc00917 	ldw	ra,36(sp)
10007c48:	df000817 	ldw	fp,32(sp)
10007c4c:	ddc00717 	ldw	r23,28(sp)
10007c50:	dd800617 	ldw	r22,24(sp)
10007c54:	dd400517 	ldw	r21,20(sp)
10007c58:	dd000417 	ldw	r20,16(sp)
10007c5c:	dcc00317 	ldw	r19,12(sp)
10007c60:	dc800217 	ldw	r18,8(sp)
10007c64:	dc400117 	ldw	r17,4(sp)
10007c68:	dc000017 	ldw	r16,0(sp)
10007c6c:	dec00a04 	addi	sp,sp,40
10007c70:	f800283a 	ret
10007c74:	a8800217 	ldw	r2,8(r21)
10007c78:	8c63883a 	add	r17,r17,r17
10007c7c:	8c63883a 	add	r17,r17,r17
10007c80:	1445c83a 	sub	r2,r2,r17
10007c84:	a8800215 	stw	r2,8(r21)
10007c88:	b5800204 	addi	r22,r22,8
10007c8c:	bdc00204 	addi	r23,r23,8
10007c90:	103fdb1e 	bne	r2,zero,10007c00 <__alt_data_end+0xf8007c00>
10007c94:	0005883a 	mov	r2,zero
10007c98:	003fe806 	br	10007c3c <__alt_data_end+0xf8007c3c>
10007c9c:	0004dd00 	call	10004dd0 <__sfvwrite_r>
10007ca0:	003fe606 	br	10007c3c <__alt_data_end+0xf8007c3c>

10007ca4 <__sprint_r>:
10007ca4:	30c00217 	ldw	r3,8(r6)
10007ca8:	18000126 	beq	r3,zero,10007cb0 <__sprint_r+0xc>
10007cac:	0007ba81 	jmpi	10007ba8 <__sprint_r.part.0>
10007cb0:	30000115 	stw	zero,4(r6)
10007cb4:	0005883a 	mov	r2,zero
10007cb8:	f800283a 	ret

10007cbc <___vfiprintf_internal_r>:
10007cbc:	deffc904 	addi	sp,sp,-220
10007cc0:	df003515 	stw	fp,212(sp)
10007cc4:	dd003115 	stw	r20,196(sp)
10007cc8:	dfc03615 	stw	ra,216(sp)
10007ccc:	ddc03415 	stw	r23,208(sp)
10007cd0:	dd803315 	stw	r22,204(sp)
10007cd4:	dd403215 	stw	r21,200(sp)
10007cd8:	dcc03015 	stw	r19,192(sp)
10007cdc:	dc802f15 	stw	r18,188(sp)
10007ce0:	dc402e15 	stw	r17,184(sp)
10007ce4:	dc002d15 	stw	r16,180(sp)
10007ce8:	d9002015 	stw	r4,128(sp)
10007cec:	d9c02215 	stw	r7,136(sp)
10007cf0:	2829883a 	mov	r20,r5
10007cf4:	3039883a 	mov	fp,r6
10007cf8:	20000226 	beq	r4,zero,10007d04 <___vfiprintf_internal_r+0x48>
10007cfc:	20800e17 	ldw	r2,56(r4)
10007d00:	1000cf26 	beq	r2,zero,10008040 <___vfiprintf_internal_r+0x384>
10007d04:	a080030b 	ldhu	r2,12(r20)
10007d08:	10c8000c 	andi	r3,r2,8192
10007d0c:	1800061e 	bne	r3,zero,10007d28 <___vfiprintf_internal_r+0x6c>
10007d10:	a1001917 	ldw	r4,100(r20)
10007d14:	00f7ffc4 	movi	r3,-8193
10007d18:	10880014 	ori	r2,r2,8192
10007d1c:	20c6703a 	and	r3,r4,r3
10007d20:	a080030d 	sth	r2,12(r20)
10007d24:	a0c01915 	stw	r3,100(r20)
10007d28:	10c0020c 	andi	r3,r2,8
10007d2c:	1800a926 	beq	r3,zero,10007fd4 <___vfiprintf_internal_r+0x318>
10007d30:	a0c00417 	ldw	r3,16(r20)
10007d34:	1800a726 	beq	r3,zero,10007fd4 <___vfiprintf_internal_r+0x318>
10007d38:	1080068c 	andi	r2,r2,26
10007d3c:	00c00284 	movi	r3,10
10007d40:	10c0ac26 	beq	r2,r3,10007ff4 <___vfiprintf_internal_r+0x338>
10007d44:	da801a04 	addi	r10,sp,104
10007d48:	da801e15 	stw	r10,120(sp)
10007d4c:	d8801e17 	ldw	r2,120(sp)
10007d50:	da8019c4 	addi	r10,sp,103
10007d54:	05840074 	movhi	r22,4097
10007d58:	05c40074 	movhi	r23,4097
10007d5c:	da801f15 	stw	r10,124(sp)
10007d60:	1295c83a 	sub	r10,r2,r10
10007d64:	b592af04 	addi	r22,r22,19132
10007d68:	bdd2ab04 	addi	r23,r23,19116
10007d6c:	dec01a15 	stw	sp,104(sp)
10007d70:	d8001c15 	stw	zero,112(sp)
10007d74:	d8001b15 	stw	zero,108(sp)
10007d78:	d8002615 	stw	zero,152(sp)
10007d7c:	d8002315 	stw	zero,140(sp)
10007d80:	da802715 	stw	r10,156(sp)
10007d84:	d811883a 	mov	r8,sp
10007d88:	dd002115 	stw	r20,132(sp)
10007d8c:	e021883a 	mov	r16,fp
10007d90:	80800007 	ldb	r2,0(r16)
10007d94:	1003ea26 	beq	r2,zero,10008d40 <___vfiprintf_internal_r+0x1084>
10007d98:	00c00944 	movi	r3,37
10007d9c:	8025883a 	mov	r18,r16
10007da0:	10c0021e 	bne	r2,r3,10007dac <___vfiprintf_internal_r+0xf0>
10007da4:	00001606 	br	10007e00 <___vfiprintf_internal_r+0x144>
10007da8:	10c00326 	beq	r2,r3,10007db8 <___vfiprintf_internal_r+0xfc>
10007dac:	94800044 	addi	r18,r18,1
10007db0:	90800007 	ldb	r2,0(r18)
10007db4:	103ffc1e 	bne	r2,zero,10007da8 <__alt_data_end+0xf8007da8>
10007db8:	9423c83a 	sub	r17,r18,r16
10007dbc:	88001026 	beq	r17,zero,10007e00 <___vfiprintf_internal_r+0x144>
10007dc0:	d8c01c17 	ldw	r3,112(sp)
10007dc4:	d8801b17 	ldw	r2,108(sp)
10007dc8:	44000015 	stw	r16,0(r8)
10007dcc:	88c7883a 	add	r3,r17,r3
10007dd0:	10800044 	addi	r2,r2,1
10007dd4:	44400115 	stw	r17,4(r8)
10007dd8:	d8c01c15 	stw	r3,112(sp)
10007ddc:	d8801b15 	stw	r2,108(sp)
10007de0:	010001c4 	movi	r4,7
10007de4:	2080760e 	bge	r4,r2,10007fc0 <___vfiprintf_internal_r+0x304>
10007de8:	1803821e 	bne	r3,zero,10008bf4 <___vfiprintf_internal_r+0xf38>
10007dec:	da802317 	ldw	r10,140(sp)
10007df0:	d8001b15 	stw	zero,108(sp)
10007df4:	d811883a 	mov	r8,sp
10007df8:	5455883a 	add	r10,r10,r17
10007dfc:	da802315 	stw	r10,140(sp)
10007e00:	90800007 	ldb	r2,0(r18)
10007e04:	10044626 	beq	r2,zero,10008f20 <___vfiprintf_internal_r+0x1264>
10007e08:	90c00047 	ldb	r3,1(r18)
10007e0c:	94000044 	addi	r16,r18,1
10007e10:	d8001d85 	stb	zero,118(sp)
10007e14:	0009883a 	mov	r4,zero
10007e18:	000f883a 	mov	r7,zero
10007e1c:	027fffc4 	movi	r9,-1
10007e20:	0023883a 	mov	r17,zero
10007e24:	0029883a 	mov	r20,zero
10007e28:	01401604 	movi	r5,88
10007e2c:	01800244 	movi	r6,9
10007e30:	03400a84 	movi	r13,42
10007e34:	03001b04 	movi	r12,108
10007e38:	84000044 	addi	r16,r16,1
10007e3c:	18bff804 	addi	r2,r3,-32
10007e40:	28827336 	bltu	r5,r2,10008810 <___vfiprintf_internal_r+0xb54>
10007e44:	100490ba 	slli	r2,r2,2
10007e48:	02840034 	movhi	r10,4096
10007e4c:	529f9704 	addi	r10,r10,32348
10007e50:	1285883a 	add	r2,r2,r10
10007e54:	10800017 	ldw	r2,0(r2)
10007e58:	1000683a 	jmp	r2
10007e5c:	10008544 	addi	zero,r2,533
10007e60:	10008810 	cmplti	zero,r2,544
10007e64:	10008810 	cmplti	zero,r2,544
10007e68:	10008564 	muli	zero,r2,533
10007e6c:	10008810 	cmplti	zero,r2,544
10007e70:	10008810 	cmplti	zero,r2,544
10007e74:	10008810 	cmplti	zero,r2,544
10007e78:	10008810 	cmplti	zero,r2,544
10007e7c:	10008810 	cmplti	zero,r2,544
10007e80:	10008810 	cmplti	zero,r2,544
10007e84:	1000874c 	andi	zero,r2,541
10007e88:	10008768 	cmpgeui	zero,r2,541
10007e8c:	10008810 	cmplti	zero,r2,544
10007e90:	10008050 	cmplti	zero,r2,513
10007e94:	10008778 	rdprs	zero,r2,541
10007e98:	10008810 	cmplti	zero,r2,544
10007e9c:	10008570 	cmpltui	zero,r2,533
10007ea0:	1000857c 	xorhi	zero,r2,533
10007ea4:	1000857c 	xorhi	zero,r2,533
10007ea8:	1000857c 	xorhi	zero,r2,533
10007eac:	1000857c 	xorhi	zero,r2,533
10007eb0:	1000857c 	xorhi	zero,r2,533
10007eb4:	1000857c 	xorhi	zero,r2,533
10007eb8:	1000857c 	xorhi	zero,r2,533
10007ebc:	1000857c 	xorhi	zero,r2,533
10007ec0:	1000857c 	xorhi	zero,r2,533
10007ec4:	10008810 	cmplti	zero,r2,544
10007ec8:	10008810 	cmplti	zero,r2,544
10007ecc:	10008810 	cmplti	zero,r2,544
10007ed0:	10008810 	cmplti	zero,r2,544
10007ed4:	10008810 	cmplti	zero,r2,544
10007ed8:	10008810 	cmplti	zero,r2,544
10007edc:	10008810 	cmplti	zero,r2,544
10007ee0:	10008810 	cmplti	zero,r2,544
10007ee4:	10008810 	cmplti	zero,r2,544
10007ee8:	10008810 	cmplti	zero,r2,544
10007eec:	100085a8 	cmpgeui	zero,r2,534
10007ef0:	10008810 	cmplti	zero,r2,544
10007ef4:	10008810 	cmplti	zero,r2,544
10007ef8:	10008810 	cmplti	zero,r2,544
10007efc:	10008810 	cmplti	zero,r2,544
10007f00:	10008810 	cmplti	zero,r2,544
10007f04:	10008810 	cmplti	zero,r2,544
10007f08:	10008810 	cmplti	zero,r2,544
10007f0c:	10008810 	cmplti	zero,r2,544
10007f10:	10008810 	cmplti	zero,r2,544
10007f14:	10008810 	cmplti	zero,r2,544
10007f18:	100085e0 	cmpeqi	zero,r2,535
10007f1c:	10008810 	cmplti	zero,r2,544
10007f20:	10008810 	cmplti	zero,r2,544
10007f24:	10008810 	cmplti	zero,r2,544
10007f28:	10008810 	cmplti	zero,r2,544
10007f2c:	10008810 	cmplti	zero,r2,544
10007f30:	10008638 	rdprs	zero,r2,536
10007f34:	10008810 	cmplti	zero,r2,544
10007f38:	10008810 	cmplti	zero,r2,544
10007f3c:	100086a8 	cmpgeui	zero,r2,538
10007f40:	10008810 	cmplti	zero,r2,544
10007f44:	10008810 	cmplti	zero,r2,544
10007f48:	10008810 	cmplti	zero,r2,544
10007f4c:	10008810 	cmplti	zero,r2,544
10007f50:	10008810 	cmplti	zero,r2,544
10007f54:	10008810 	cmplti	zero,r2,544
10007f58:	10008810 	cmplti	zero,r2,544
10007f5c:	10008810 	cmplti	zero,r2,544
10007f60:	10008810 	cmplti	zero,r2,544
10007f64:	10008810 	cmplti	zero,r2,544
10007f68:	10008454 	ori	zero,r2,529
10007f6c:	10008480 	call	11000848 <_gp+0xfe20e4>
10007f70:	10008810 	cmplti	zero,r2,544
10007f74:	10008810 	cmplti	zero,r2,544
10007f78:	10008810 	cmplti	zero,r2,544
10007f7c:	100087b8 	rdprs	zero,r2,542
10007f80:	10008480 	call	11000848 <_gp+0xfe20e4>
10007f84:	10008810 	cmplti	zero,r2,544
10007f88:	10008810 	cmplti	zero,r2,544
10007f8c:	10008314 	ori	zero,r2,524
10007f90:	10008810 	cmplti	zero,r2,544
10007f94:	10008324 	muli	zero,r2,524
10007f98:	10008360 	cmpeqi	zero,r2,525
10007f9c:	1000805c 	xori	zero,r2,513
10007fa0:	10008308 	cmpgei	zero,r2,524
10007fa4:	10008810 	cmplti	zero,r2,544
10007fa8:	100086e4 	muli	zero,r2,539
10007fac:	10008810 	cmplti	zero,r2,544
10007fb0:	1000873c 	xorhi	zero,r2,540
10007fb4:	10008810 	cmplti	zero,r2,544
10007fb8:	10008810 	cmplti	zero,r2,544
10007fbc:	10008400 	call	11000840 <_gp+0xfe20dc>
10007fc0:	42000204 	addi	r8,r8,8
10007fc4:	da802317 	ldw	r10,140(sp)
10007fc8:	5455883a 	add	r10,r10,r17
10007fcc:	da802315 	stw	r10,140(sp)
10007fd0:	003f8b06 	br	10007e00 <__alt_data_end+0xf8007e00>
10007fd4:	d9002017 	ldw	r4,128(sp)
10007fd8:	a00b883a 	mov	r5,r20
10007fdc:	00029780 	call	10002978 <__swsetup_r>
10007fe0:	1003b11e 	bne	r2,zero,10008ea8 <___vfiprintf_internal_r+0x11ec>
10007fe4:	a080030b 	ldhu	r2,12(r20)
10007fe8:	00c00284 	movi	r3,10
10007fec:	1080068c 	andi	r2,r2,26
10007ff0:	10ff541e 	bne	r2,r3,10007d44 <__alt_data_end+0xf8007d44>
10007ff4:	a080038f 	ldh	r2,14(r20)
10007ff8:	103f5216 	blt	r2,zero,10007d44 <__alt_data_end+0xf8007d44>
10007ffc:	d9c02217 	ldw	r7,136(sp)
10008000:	d9002017 	ldw	r4,128(sp)
10008004:	e00d883a 	mov	r6,fp
10008008:	a00b883a 	mov	r5,r20
1000800c:	00091340 	call	10009134 <__sbprintf>
10008010:	dfc03617 	ldw	ra,216(sp)
10008014:	df003517 	ldw	fp,212(sp)
10008018:	ddc03417 	ldw	r23,208(sp)
1000801c:	dd803317 	ldw	r22,204(sp)
10008020:	dd403217 	ldw	r21,200(sp)
10008024:	dd003117 	ldw	r20,196(sp)
10008028:	dcc03017 	ldw	r19,192(sp)
1000802c:	dc802f17 	ldw	r18,188(sp)
10008030:	dc402e17 	ldw	r17,184(sp)
10008034:	dc002d17 	ldw	r16,180(sp)
10008038:	dec03704 	addi	sp,sp,220
1000803c:	f800283a 	ret
10008040:	000494c0 	call	1000494c <__sinit>
10008044:	003f2f06 	br	10007d04 <__alt_data_end+0xf8007d04>
10008048:	0463c83a 	sub	r17,zero,r17
1000804c:	d8802215 	stw	r2,136(sp)
10008050:	a5000114 	ori	r20,r20,4
10008054:	80c00007 	ldb	r3,0(r16)
10008058:	003f7706 	br	10007e38 <__alt_data_end+0xf8007e38>
1000805c:	00800c04 	movi	r2,48
10008060:	da802217 	ldw	r10,136(sp)
10008064:	d8801d05 	stb	r2,116(sp)
10008068:	00801e04 	movi	r2,120
1000806c:	d8801d45 	stb	r2,117(sp)
10008070:	d8001d85 	stb	zero,118(sp)
10008074:	50c00104 	addi	r3,r10,4
10008078:	54800017 	ldw	r18,0(r10)
1000807c:	0027883a 	mov	r19,zero
10008080:	a0800094 	ori	r2,r20,2
10008084:	48030b16 	blt	r9,zero,10008cb4 <___vfiprintf_internal_r+0xff8>
10008088:	00bfdfc4 	movi	r2,-129
1000808c:	a096703a 	and	r11,r20,r2
10008090:	d8c02215 	stw	r3,136(sp)
10008094:	5d000094 	ori	r20,r11,2
10008098:	90032b1e 	bne	r18,zero,10008d48 <___vfiprintf_internal_r+0x108c>
1000809c:	00840074 	movhi	r2,4097
100080a0:	10924a04 	addi	r2,r2,18728
100080a4:	d8802615 	stw	r2,152(sp)
100080a8:	0039883a 	mov	fp,zero
100080ac:	48017b1e 	bne	r9,zero,1000869c <___vfiprintf_internal_r+0x9e0>
100080b0:	0013883a 	mov	r9,zero
100080b4:	0027883a 	mov	r19,zero
100080b8:	dd401a04 	addi	r21,sp,104
100080bc:	4825883a 	mov	r18,r9
100080c0:	4cc0010e 	bge	r9,r19,100080c8 <___vfiprintf_internal_r+0x40c>
100080c4:	9825883a 	mov	r18,r19
100080c8:	e7003fcc 	andi	fp,fp,255
100080cc:	e700201c 	xori	fp,fp,128
100080d0:	e73fe004 	addi	fp,fp,-128
100080d4:	e0000126 	beq	fp,zero,100080dc <___vfiprintf_internal_r+0x420>
100080d8:	94800044 	addi	r18,r18,1
100080dc:	a380008c 	andi	r14,r20,2
100080e0:	70000126 	beq	r14,zero,100080e8 <___vfiprintf_internal_r+0x42c>
100080e4:	94800084 	addi	r18,r18,2
100080e8:	a700210c 	andi	fp,r20,132
100080ec:	e001df1e 	bne	fp,zero,1000886c <___vfiprintf_internal_r+0xbb0>
100080f0:	8c87c83a 	sub	r3,r17,r18
100080f4:	00c1dd0e 	bge	zero,r3,1000886c <___vfiprintf_internal_r+0xbb0>
100080f8:	01c00404 	movi	r7,16
100080fc:	d8801c17 	ldw	r2,112(sp)
10008100:	38c3ad0e 	bge	r7,r3,10008fb8 <___vfiprintf_internal_r+0x12fc>
10008104:	02840074 	movhi	r10,4097
10008108:	5292af04 	addi	r10,r10,19132
1000810c:	dc002915 	stw	r16,164(sp)
10008110:	d9801b17 	ldw	r6,108(sp)
10008114:	da802415 	stw	r10,144(sp)
10008118:	03c001c4 	movi	r15,7
1000811c:	da402515 	stw	r9,148(sp)
10008120:	db802815 	stw	r14,160(sp)
10008124:	1821883a 	mov	r16,r3
10008128:	00000506 	br	10008140 <___vfiprintf_internal_r+0x484>
1000812c:	31400084 	addi	r5,r6,2
10008130:	42000204 	addi	r8,r8,8
10008134:	200d883a 	mov	r6,r4
10008138:	843ffc04 	addi	r16,r16,-16
1000813c:	3c000d0e 	bge	r7,r16,10008174 <___vfiprintf_internal_r+0x4b8>
10008140:	10800404 	addi	r2,r2,16
10008144:	31000044 	addi	r4,r6,1
10008148:	45800015 	stw	r22,0(r8)
1000814c:	41c00115 	stw	r7,4(r8)
10008150:	d8801c15 	stw	r2,112(sp)
10008154:	d9001b15 	stw	r4,108(sp)
10008158:	793ff40e 	bge	r15,r4,1000812c <__alt_data_end+0xf800812c>
1000815c:	1001b51e 	bne	r2,zero,10008834 <___vfiprintf_internal_r+0xb78>
10008160:	843ffc04 	addi	r16,r16,-16
10008164:	000d883a 	mov	r6,zero
10008168:	01400044 	movi	r5,1
1000816c:	d811883a 	mov	r8,sp
10008170:	3c3ff316 	blt	r7,r16,10008140 <__alt_data_end+0xf8008140>
10008174:	8007883a 	mov	r3,r16
10008178:	da402517 	ldw	r9,148(sp)
1000817c:	db802817 	ldw	r14,160(sp)
10008180:	dc002917 	ldw	r16,164(sp)
10008184:	da802417 	ldw	r10,144(sp)
10008188:	1885883a 	add	r2,r3,r2
1000818c:	40c00115 	stw	r3,4(r8)
10008190:	42800015 	stw	r10,0(r8)
10008194:	d8801c15 	stw	r2,112(sp)
10008198:	d9401b15 	stw	r5,108(sp)
1000819c:	00c001c4 	movi	r3,7
100081a0:	19426016 	blt	r3,r5,10008b24 <___vfiprintf_internal_r+0xe68>
100081a4:	d8c01d87 	ldb	r3,118(sp)
100081a8:	42000204 	addi	r8,r8,8
100081ac:	29000044 	addi	r4,r5,1
100081b0:	1801b31e 	bne	r3,zero,10008880 <___vfiprintf_internal_r+0xbc4>
100081b4:	7001c026 	beq	r14,zero,100088b8 <___vfiprintf_internal_r+0xbfc>
100081b8:	d8c01d04 	addi	r3,sp,116
100081bc:	10800084 	addi	r2,r2,2
100081c0:	40c00015 	stw	r3,0(r8)
100081c4:	00c00084 	movi	r3,2
100081c8:	40c00115 	stw	r3,4(r8)
100081cc:	d8801c15 	stw	r2,112(sp)
100081d0:	d9001b15 	stw	r4,108(sp)
100081d4:	00c001c4 	movi	r3,7
100081d8:	1902650e 	bge	r3,r4,10008b70 <___vfiprintf_internal_r+0xeb4>
100081dc:	10029a1e 	bne	r2,zero,10008c48 <___vfiprintf_internal_r+0xf8c>
100081e0:	00c02004 	movi	r3,128
100081e4:	01000044 	movi	r4,1
100081e8:	000b883a 	mov	r5,zero
100081ec:	d811883a 	mov	r8,sp
100081f0:	e0c1b31e 	bne	fp,r3,100088c0 <___vfiprintf_internal_r+0xc04>
100081f4:	8cb9c83a 	sub	fp,r17,r18
100081f8:	0701b10e 	bge	zero,fp,100088c0 <___vfiprintf_internal_r+0xc04>
100081fc:	01c00404 	movi	r7,16
10008200:	3f03890e 	bge	r7,fp,10009028 <___vfiprintf_internal_r+0x136c>
10008204:	00c40074 	movhi	r3,4097
10008208:	18d2ab04 	addi	r3,r3,19116
1000820c:	d8c02415 	stw	r3,144(sp)
10008210:	8007883a 	mov	r3,r16
10008214:	034001c4 	movi	r13,7
10008218:	e021883a 	mov	r16,fp
1000821c:	da402515 	stw	r9,148(sp)
10008220:	1839883a 	mov	fp,r3
10008224:	00000506 	br	1000823c <___vfiprintf_internal_r+0x580>
10008228:	29800084 	addi	r6,r5,2
1000822c:	42000204 	addi	r8,r8,8
10008230:	180b883a 	mov	r5,r3
10008234:	843ffc04 	addi	r16,r16,-16
10008238:	3c000d0e 	bge	r7,r16,10008270 <___vfiprintf_internal_r+0x5b4>
1000823c:	10800404 	addi	r2,r2,16
10008240:	28c00044 	addi	r3,r5,1
10008244:	45c00015 	stw	r23,0(r8)
10008248:	41c00115 	stw	r7,4(r8)
1000824c:	d8801c15 	stw	r2,112(sp)
10008250:	d8c01b15 	stw	r3,108(sp)
10008254:	68fff40e 	bge	r13,r3,10008228 <__alt_data_end+0xf8008228>
10008258:	1002241e 	bne	r2,zero,10008aec <___vfiprintf_internal_r+0xe30>
1000825c:	843ffc04 	addi	r16,r16,-16
10008260:	01800044 	movi	r6,1
10008264:	000b883a 	mov	r5,zero
10008268:	d811883a 	mov	r8,sp
1000826c:	3c3ff316 	blt	r7,r16,1000823c <__alt_data_end+0xf800823c>
10008270:	da402517 	ldw	r9,148(sp)
10008274:	e007883a 	mov	r3,fp
10008278:	8039883a 	mov	fp,r16
1000827c:	1821883a 	mov	r16,r3
10008280:	d8c02417 	ldw	r3,144(sp)
10008284:	1705883a 	add	r2,r2,fp
10008288:	47000115 	stw	fp,4(r8)
1000828c:	40c00015 	stw	r3,0(r8)
10008290:	d8801c15 	stw	r2,112(sp)
10008294:	d9801b15 	stw	r6,108(sp)
10008298:	00c001c4 	movi	r3,7
1000829c:	19827616 	blt	r3,r6,10008c78 <___vfiprintf_internal_r+0xfbc>
100082a0:	4cf9c83a 	sub	fp,r9,r19
100082a4:	42000204 	addi	r8,r8,8
100082a8:	31000044 	addi	r4,r6,1
100082ac:	300b883a 	mov	r5,r6
100082b0:	07018516 	blt	zero,fp,100088c8 <___vfiprintf_internal_r+0xc0c>
100082b4:	9885883a 	add	r2,r19,r2
100082b8:	45400015 	stw	r21,0(r8)
100082bc:	44c00115 	stw	r19,4(r8)
100082c0:	d8801c15 	stw	r2,112(sp)
100082c4:	d9001b15 	stw	r4,108(sp)
100082c8:	00c001c4 	movi	r3,7
100082cc:	1901dd0e 	bge	r3,r4,10008a44 <___vfiprintf_internal_r+0xd88>
100082d0:	1002401e 	bne	r2,zero,10008bd4 <___vfiprintf_internal_r+0xf18>
100082d4:	d8001b15 	stw	zero,108(sp)
100082d8:	a2c0010c 	andi	r11,r20,4
100082dc:	58000226 	beq	r11,zero,100082e8 <___vfiprintf_internal_r+0x62c>
100082e0:	8ca7c83a 	sub	r19,r17,r18
100082e4:	04c2f216 	blt	zero,r19,10008eb0 <___vfiprintf_internal_r+0x11f4>
100082e8:	8c80010e 	bge	r17,r18,100082f0 <___vfiprintf_internal_r+0x634>
100082ec:	9023883a 	mov	r17,r18
100082f0:	da802317 	ldw	r10,140(sp)
100082f4:	5455883a 	add	r10,r10,r17
100082f8:	da802315 	stw	r10,140(sp)
100082fc:	d8001b15 	stw	zero,108(sp)
10008300:	d811883a 	mov	r8,sp
10008304:	003ea206 	br	10007d90 <__alt_data_end+0xf8007d90>
10008308:	a5000814 	ori	r20,r20,32
1000830c:	80c00007 	ldb	r3,0(r16)
10008310:	003ec906 	br	10007e38 <__alt_data_end+0xf8007e38>
10008314:	80c00007 	ldb	r3,0(r16)
10008318:	1b030926 	beq	r3,r12,10008f40 <___vfiprintf_internal_r+0x1284>
1000831c:	a5000414 	ori	r20,r20,16
10008320:	003ec506 	br	10007e38 <__alt_data_end+0xf8007e38>
10008324:	21003fcc 	andi	r4,r4,255
10008328:	20035e1e 	bne	r4,zero,100090a4 <___vfiprintf_internal_r+0x13e8>
1000832c:	a080080c 	andi	r2,r20,32
10008330:	1002a526 	beq	r2,zero,10008dc8 <___vfiprintf_internal_r+0x110c>
10008334:	da802217 	ldw	r10,136(sp)
10008338:	50800017 	ldw	r2,0(r10)
1000833c:	da802317 	ldw	r10,140(sp)
10008340:	5007d7fa 	srai	r3,r10,31
10008344:	da802217 	ldw	r10,136(sp)
10008348:	10c00115 	stw	r3,4(r2)
1000834c:	52800104 	addi	r10,r10,4
10008350:	da802215 	stw	r10,136(sp)
10008354:	da802317 	ldw	r10,140(sp)
10008358:	12800015 	stw	r10,0(r2)
1000835c:	003e8c06 	br	10007d90 <__alt_data_end+0xf8007d90>
10008360:	21003fcc 	andi	r4,r4,255
10008364:	2003511e 	bne	r4,zero,100090ac <___vfiprintf_internal_r+0x13f0>
10008368:	a080080c 	andi	r2,r20,32
1000836c:	1000a126 	beq	r2,zero,100085f4 <___vfiprintf_internal_r+0x938>
10008370:	da802217 	ldw	r10,136(sp)
10008374:	d8001d85 	stb	zero,118(sp)
10008378:	50800204 	addi	r2,r10,8
1000837c:	54800017 	ldw	r18,0(r10)
10008380:	54c00117 	ldw	r19,4(r10)
10008384:	4802b416 	blt	r9,zero,10008e58 <___vfiprintf_internal_r+0x119c>
10008388:	013fdfc4 	movi	r4,-129
1000838c:	94c6b03a 	or	r3,r18,r19
10008390:	d8802215 	stw	r2,136(sp)
10008394:	a128703a 	and	r20,r20,r4
10008398:	1800a226 	beq	r3,zero,10008624 <___vfiprintf_internal_r+0x968>
1000839c:	0039883a 	mov	fp,zero
100083a0:	dd401a04 	addi	r21,sp,104
100083a4:	9006d0fa 	srli	r3,r18,3
100083a8:	9808977a 	slli	r4,r19,29
100083ac:	9826d0fa 	srli	r19,r19,3
100083b0:	948001cc 	andi	r18,r18,7
100083b4:	90800c04 	addi	r2,r18,48
100083b8:	ad7fffc4 	addi	r21,r21,-1
100083bc:	20e4b03a 	or	r18,r4,r3
100083c0:	a8800005 	stb	r2,0(r21)
100083c4:	94c6b03a 	or	r3,r18,r19
100083c8:	183ff61e 	bne	r3,zero,100083a4 <__alt_data_end+0xf80083a4>
100083cc:	a0c0004c 	andi	r3,r20,1
100083d0:	18005926 	beq	r3,zero,10008538 <___vfiprintf_internal_r+0x87c>
100083d4:	10803fcc 	andi	r2,r2,255
100083d8:	1080201c 	xori	r2,r2,128
100083dc:	10bfe004 	addi	r2,r2,-128
100083e0:	00c00c04 	movi	r3,48
100083e4:	10c05426 	beq	r2,r3,10008538 <___vfiprintf_internal_r+0x87c>
100083e8:	da801e17 	ldw	r10,120(sp)
100083ec:	a8bfffc4 	addi	r2,r21,-1
100083f0:	a8ffffc5 	stb	r3,-1(r21)
100083f4:	50a7c83a 	sub	r19,r10,r2
100083f8:	102b883a 	mov	r21,r2
100083fc:	003f2f06 	br	100080bc <__alt_data_end+0xf80080bc>
10008400:	21003fcc 	andi	r4,r4,255
10008404:	2003421e 	bne	r4,zero,10009110 <___vfiprintf_internal_r+0x1454>
10008408:	00840074 	movhi	r2,4097
1000840c:	10924a04 	addi	r2,r2,18728
10008410:	d8802615 	stw	r2,152(sp)
10008414:	a080080c 	andi	r2,r20,32
10008418:	1000aa26 	beq	r2,zero,100086c4 <___vfiprintf_internal_r+0xa08>
1000841c:	da802217 	ldw	r10,136(sp)
10008420:	54800017 	ldw	r18,0(r10)
10008424:	54c00117 	ldw	r19,4(r10)
10008428:	52800204 	addi	r10,r10,8
1000842c:	da802215 	stw	r10,136(sp)
10008430:	a080004c 	andi	r2,r20,1
10008434:	1001d226 	beq	r2,zero,10008b80 <___vfiprintf_internal_r+0xec4>
10008438:	94c4b03a 	or	r2,r18,r19
1000843c:	1002351e 	bne	r2,zero,10008d14 <___vfiprintf_internal_r+0x1058>
10008440:	d8001d85 	stb	zero,118(sp)
10008444:	48022216 	blt	r9,zero,10008cd0 <___vfiprintf_internal_r+0x1014>
10008448:	00bfdfc4 	movi	r2,-129
1000844c:	a0a8703a 	and	r20,r20,r2
10008450:	003f1506 	br	100080a8 <__alt_data_end+0xf80080a8>
10008454:	da802217 	ldw	r10,136(sp)
10008458:	04800044 	movi	r18,1
1000845c:	d8001d85 	stb	zero,118(sp)
10008460:	50800017 	ldw	r2,0(r10)
10008464:	52800104 	addi	r10,r10,4
10008468:	da802215 	stw	r10,136(sp)
1000846c:	d8801005 	stb	r2,64(sp)
10008470:	9027883a 	mov	r19,r18
10008474:	dd401004 	addi	r21,sp,64
10008478:	0013883a 	mov	r9,zero
1000847c:	003f1706 	br	100080dc <__alt_data_end+0xf80080dc>
10008480:	21003fcc 	andi	r4,r4,255
10008484:	2003201e 	bne	r4,zero,10009108 <___vfiprintf_internal_r+0x144c>
10008488:	a080080c 	andi	r2,r20,32
1000848c:	10004b26 	beq	r2,zero,100085bc <___vfiprintf_internal_r+0x900>
10008490:	da802217 	ldw	r10,136(sp)
10008494:	50800117 	ldw	r2,4(r10)
10008498:	54800017 	ldw	r18,0(r10)
1000849c:	52800204 	addi	r10,r10,8
100084a0:	da802215 	stw	r10,136(sp)
100084a4:	1027883a 	mov	r19,r2
100084a8:	10022c16 	blt	r2,zero,10008d5c <___vfiprintf_internal_r+0x10a0>
100084ac:	df001d83 	ldbu	fp,118(sp)
100084b0:	48007216 	blt	r9,zero,1000867c <___vfiprintf_internal_r+0x9c0>
100084b4:	00ffdfc4 	movi	r3,-129
100084b8:	94c4b03a 	or	r2,r18,r19
100084bc:	a0e8703a 	and	r20,r20,r3
100084c0:	1000cc26 	beq	r2,zero,100087f4 <___vfiprintf_internal_r+0xb38>
100084c4:	98021026 	beq	r19,zero,10008d08 <___vfiprintf_internal_r+0x104c>
100084c8:	dc402415 	stw	r17,144(sp)
100084cc:	dc002515 	stw	r16,148(sp)
100084d0:	9823883a 	mov	r17,r19
100084d4:	9021883a 	mov	r16,r18
100084d8:	dd401a04 	addi	r21,sp,104
100084dc:	4825883a 	mov	r18,r9
100084e0:	4027883a 	mov	r19,r8
100084e4:	8009883a 	mov	r4,r16
100084e8:	880b883a 	mov	r5,r17
100084ec:	01800284 	movi	r6,10
100084f0:	000f883a 	mov	r7,zero
100084f4:	000a09c0 	call	1000a09c <__umoddi3>
100084f8:	10800c04 	addi	r2,r2,48
100084fc:	ad7fffc4 	addi	r21,r21,-1
10008500:	8009883a 	mov	r4,r16
10008504:	880b883a 	mov	r5,r17
10008508:	a8800005 	stb	r2,0(r21)
1000850c:	01800284 	movi	r6,10
10008510:	000f883a 	mov	r7,zero
10008514:	0009b240 	call	10009b24 <__udivdi3>
10008518:	1021883a 	mov	r16,r2
1000851c:	10c4b03a 	or	r2,r2,r3
10008520:	1823883a 	mov	r17,r3
10008524:	103fef1e 	bne	r2,zero,100084e4 <__alt_data_end+0xf80084e4>
10008528:	dc402417 	ldw	r17,144(sp)
1000852c:	dc002517 	ldw	r16,148(sp)
10008530:	9013883a 	mov	r9,r18
10008534:	9811883a 	mov	r8,r19
10008538:	da801e17 	ldw	r10,120(sp)
1000853c:	5567c83a 	sub	r19,r10,r21
10008540:	003ede06 	br	100080bc <__alt_data_end+0xf80080bc>
10008544:	38803fcc 	andi	r2,r7,255
10008548:	1080201c 	xori	r2,r2,128
1000854c:	10bfe004 	addi	r2,r2,-128
10008550:	1002371e 	bne	r2,zero,10008e30 <___vfiprintf_internal_r+0x1174>
10008554:	01000044 	movi	r4,1
10008558:	01c00804 	movi	r7,32
1000855c:	80c00007 	ldb	r3,0(r16)
10008560:	003e3506 	br	10007e38 <__alt_data_end+0xf8007e38>
10008564:	a5000054 	ori	r20,r20,1
10008568:	80c00007 	ldb	r3,0(r16)
1000856c:	003e3206 	br	10007e38 <__alt_data_end+0xf8007e38>
10008570:	a5002014 	ori	r20,r20,128
10008574:	80c00007 	ldb	r3,0(r16)
10008578:	003e2f06 	br	10007e38 <__alt_data_end+0xf8007e38>
1000857c:	8015883a 	mov	r10,r16
10008580:	0023883a 	mov	r17,zero
10008584:	18bff404 	addi	r2,r3,-48
10008588:	50c00007 	ldb	r3,0(r10)
1000858c:	8c4002a4 	muli	r17,r17,10
10008590:	84000044 	addi	r16,r16,1
10008594:	8015883a 	mov	r10,r16
10008598:	1463883a 	add	r17,r2,r17
1000859c:	18bff404 	addi	r2,r3,-48
100085a0:	30bff92e 	bgeu	r6,r2,10008588 <__alt_data_end+0xf8008588>
100085a4:	003e2506 	br	10007e3c <__alt_data_end+0xf8007e3c>
100085a8:	21003fcc 	andi	r4,r4,255
100085ac:	2002d41e 	bne	r4,zero,10009100 <___vfiprintf_internal_r+0x1444>
100085b0:	a5000414 	ori	r20,r20,16
100085b4:	a080080c 	andi	r2,r20,32
100085b8:	103fb51e 	bne	r2,zero,10008490 <__alt_data_end+0xf8008490>
100085bc:	a080040c 	andi	r2,r20,16
100085c0:	1001f826 	beq	r2,zero,10008da4 <___vfiprintf_internal_r+0x10e8>
100085c4:	da802217 	ldw	r10,136(sp)
100085c8:	54800017 	ldw	r18,0(r10)
100085cc:	52800104 	addi	r10,r10,4
100085d0:	da802215 	stw	r10,136(sp)
100085d4:	9027d7fa 	srai	r19,r18,31
100085d8:	9805883a 	mov	r2,r19
100085dc:	003fb206 	br	100084a8 <__alt_data_end+0xf80084a8>
100085e0:	21003fcc 	andi	r4,r4,255
100085e4:	2002c41e 	bne	r4,zero,100090f8 <___vfiprintf_internal_r+0x143c>
100085e8:	a5000414 	ori	r20,r20,16
100085ec:	a080080c 	andi	r2,r20,32
100085f0:	103f5f1e 	bne	r2,zero,10008370 <__alt_data_end+0xf8008370>
100085f4:	a080040c 	andi	r2,r20,16
100085f8:	10020f26 	beq	r2,zero,10008e38 <___vfiprintf_internal_r+0x117c>
100085fc:	da802217 	ldw	r10,136(sp)
10008600:	d8001d85 	stb	zero,118(sp)
10008604:	0027883a 	mov	r19,zero
10008608:	50800104 	addi	r2,r10,4
1000860c:	54800017 	ldw	r18,0(r10)
10008610:	48021116 	blt	r9,zero,10008e58 <___vfiprintf_internal_r+0x119c>
10008614:	00ffdfc4 	movi	r3,-129
10008618:	d8802215 	stw	r2,136(sp)
1000861c:	a0e8703a 	and	r20,r20,r3
10008620:	903f5e1e 	bne	r18,zero,1000839c <__alt_data_end+0xf800839c>
10008624:	0039883a 	mov	fp,zero
10008628:	4802a626 	beq	r9,zero,100090c4 <___vfiprintf_internal_r+0x1408>
1000862c:	0025883a 	mov	r18,zero
10008630:	0027883a 	mov	r19,zero
10008634:	003f5a06 	br	100083a0 <__alt_data_end+0xf80083a0>
10008638:	21003fcc 	andi	r4,r4,255
1000863c:	20029f1e 	bne	r4,zero,100090bc <___vfiprintf_internal_r+0x1400>
10008640:	a5000414 	ori	r20,r20,16
10008644:	a080080c 	andi	r2,r20,32
10008648:	10005e1e 	bne	r2,zero,100087c4 <___vfiprintf_internal_r+0xb08>
1000864c:	a080040c 	andi	r2,r20,16
10008650:	1001a21e 	bne	r2,zero,10008cdc <___vfiprintf_internal_r+0x1020>
10008654:	a080100c 	andi	r2,r20,64
10008658:	d8001d85 	stb	zero,118(sp)
1000865c:	da802217 	ldw	r10,136(sp)
10008660:	1002231e 	bne	r2,zero,10008ef0 <___vfiprintf_internal_r+0x1234>
10008664:	50800104 	addi	r2,r10,4
10008668:	54800017 	ldw	r18,0(r10)
1000866c:	0027883a 	mov	r19,zero
10008670:	4801a00e 	bge	r9,zero,10008cf4 <___vfiprintf_internal_r+0x1038>
10008674:	d8802215 	stw	r2,136(sp)
10008678:	0039883a 	mov	fp,zero
1000867c:	94c4b03a 	or	r2,r18,r19
10008680:	103f901e 	bne	r2,zero,100084c4 <__alt_data_end+0xf80084c4>
10008684:	00800044 	movi	r2,1
10008688:	10803fcc 	andi	r2,r2,255
1000868c:	00c00044 	movi	r3,1
10008690:	10c05926 	beq	r2,r3,100087f8 <___vfiprintf_internal_r+0xb3c>
10008694:	00c00084 	movi	r3,2
10008698:	10ffe41e 	bne	r2,r3,1000862c <__alt_data_end+0xf800862c>
1000869c:	0025883a 	mov	r18,zero
100086a0:	0027883a 	mov	r19,zero
100086a4:	00013d06 	br	10008b9c <___vfiprintf_internal_r+0xee0>
100086a8:	21003fcc 	andi	r4,r4,255
100086ac:	2002811e 	bne	r4,zero,100090b4 <___vfiprintf_internal_r+0x13f8>
100086b0:	00840074 	movhi	r2,4097
100086b4:	10924504 	addi	r2,r2,18708
100086b8:	d8802615 	stw	r2,152(sp)
100086bc:	a080080c 	andi	r2,r20,32
100086c0:	103f561e 	bne	r2,zero,1000841c <__alt_data_end+0xf800841c>
100086c4:	a080040c 	andi	r2,r20,16
100086c8:	1001d126 	beq	r2,zero,10008e10 <___vfiprintf_internal_r+0x1154>
100086cc:	da802217 	ldw	r10,136(sp)
100086d0:	0027883a 	mov	r19,zero
100086d4:	54800017 	ldw	r18,0(r10)
100086d8:	52800104 	addi	r10,r10,4
100086dc:	da802215 	stw	r10,136(sp)
100086e0:	003f5306 	br	10008430 <__alt_data_end+0xf8008430>
100086e4:	da802217 	ldw	r10,136(sp)
100086e8:	d8001d85 	stb	zero,118(sp)
100086ec:	55400017 	ldw	r21,0(r10)
100086f0:	50c00104 	addi	r3,r10,4
100086f4:	a8024226 	beq	r21,zero,10009000 <___vfiprintf_internal_r+0x1344>
100086f8:	48021816 	blt	r9,zero,10008f5c <___vfiprintf_internal_r+0x12a0>
100086fc:	480d883a 	mov	r6,r9
10008700:	000b883a 	mov	r5,zero
10008704:	a809883a 	mov	r4,r21
10008708:	d8c02a15 	stw	r3,168(sp)
1000870c:	da002b15 	stw	r8,172(sp)
10008710:	da402c15 	stw	r9,176(sp)
10008714:	0005eb80 	call	10005eb8 <memchr>
10008718:	d8c02a17 	ldw	r3,168(sp)
1000871c:	da002b17 	ldw	r8,172(sp)
10008720:	da402c17 	ldw	r9,176(sp)
10008724:	10024826 	beq	r2,zero,10009048 <___vfiprintf_internal_r+0x138c>
10008728:	1567c83a 	sub	r19,r2,r21
1000872c:	df001d83 	ldbu	fp,118(sp)
10008730:	d8c02215 	stw	r3,136(sp)
10008734:	0013883a 	mov	r9,zero
10008738:	003e6006 	br	100080bc <__alt_data_end+0xf80080bc>
1000873c:	21003fcc 	andi	r4,r4,255
10008740:	203fc026 	beq	r4,zero,10008644 <__alt_data_end+0xf8008644>
10008744:	d9c01d85 	stb	r7,118(sp)
10008748:	003fbe06 	br	10008644 <__alt_data_end+0xf8008644>
1000874c:	da802217 	ldw	r10,136(sp)
10008750:	54400017 	ldw	r17,0(r10)
10008754:	50800104 	addi	r2,r10,4
10008758:	883e3b16 	blt	r17,zero,10008048 <__alt_data_end+0xf8008048>
1000875c:	d8802215 	stw	r2,136(sp)
10008760:	80c00007 	ldb	r3,0(r16)
10008764:	003db406 	br	10007e38 <__alt_data_end+0xf8007e38>
10008768:	01000044 	movi	r4,1
1000876c:	01c00ac4 	movi	r7,43
10008770:	80c00007 	ldb	r3,0(r16)
10008774:	003db006 	br	10007e38 <__alt_data_end+0xf8007e38>
10008778:	80c00007 	ldb	r3,0(r16)
1000877c:	82800044 	addi	r10,r16,1
10008780:	1b423c26 	beq	r3,r13,10009074 <___vfiprintf_internal_r+0x13b8>
10008784:	18bff404 	addi	r2,r3,-48
10008788:	0013883a 	mov	r9,zero
1000878c:	30822b36 	bltu	r6,r2,1000903c <___vfiprintf_internal_r+0x1380>
10008790:	50c00007 	ldb	r3,0(r10)
10008794:	4a4002a4 	muli	r9,r9,10
10008798:	54000044 	addi	r16,r10,1
1000879c:	8015883a 	mov	r10,r16
100087a0:	4893883a 	add	r9,r9,r2
100087a4:	18bff404 	addi	r2,r3,-48
100087a8:	30bff92e 	bgeu	r6,r2,10008790 <__alt_data_end+0xf8008790>
100087ac:	483da30e 	bge	r9,zero,10007e3c <__alt_data_end+0xf8007e3c>
100087b0:	027fffc4 	movi	r9,-1
100087b4:	003da106 	br	10007e3c <__alt_data_end+0xf8007e3c>
100087b8:	a5001014 	ori	r20,r20,64
100087bc:	80c00007 	ldb	r3,0(r16)
100087c0:	003d9d06 	br	10007e38 <__alt_data_end+0xf8007e38>
100087c4:	da802217 	ldw	r10,136(sp)
100087c8:	d8001d85 	stb	zero,118(sp)
100087cc:	50c00204 	addi	r3,r10,8
100087d0:	54800017 	ldw	r18,0(r10)
100087d4:	54c00117 	ldw	r19,4(r10)
100087d8:	4801ca16 	blt	r9,zero,10008f04 <___vfiprintf_internal_r+0x1248>
100087dc:	013fdfc4 	movi	r4,-129
100087e0:	94c4b03a 	or	r2,r18,r19
100087e4:	d8c02215 	stw	r3,136(sp)
100087e8:	a128703a 	and	r20,r20,r4
100087ec:	0039883a 	mov	fp,zero
100087f0:	103f341e 	bne	r2,zero,100084c4 <__alt_data_end+0xf80084c4>
100087f4:	483e2e26 	beq	r9,zero,100080b0 <__alt_data_end+0xf80080b0>
100087f8:	0025883a 	mov	r18,zero
100087fc:	94800c04 	addi	r18,r18,48
10008800:	dc8019c5 	stb	r18,103(sp)
10008804:	dcc02717 	ldw	r19,156(sp)
10008808:	dd4019c4 	addi	r21,sp,103
1000880c:	003e2b06 	br	100080bc <__alt_data_end+0xf80080bc>
10008810:	21003fcc 	andi	r4,r4,255
10008814:	2002361e 	bne	r4,zero,100090f0 <___vfiprintf_internal_r+0x1434>
10008818:	1801c126 	beq	r3,zero,10008f20 <___vfiprintf_internal_r+0x1264>
1000881c:	04800044 	movi	r18,1
10008820:	d8c01005 	stb	r3,64(sp)
10008824:	d8001d85 	stb	zero,118(sp)
10008828:	9027883a 	mov	r19,r18
1000882c:	dd401004 	addi	r21,sp,64
10008830:	003f1106 	br	10008478 <__alt_data_end+0xf8008478>
10008834:	d9402117 	ldw	r5,132(sp)
10008838:	d9002017 	ldw	r4,128(sp)
1000883c:	d9801a04 	addi	r6,sp,104
10008840:	d9c02b15 	stw	r7,172(sp)
10008844:	dbc02a15 	stw	r15,168(sp)
10008848:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
1000884c:	d9c02b17 	ldw	r7,172(sp)
10008850:	dbc02a17 	ldw	r15,168(sp)
10008854:	10006d1e 	bne	r2,zero,10008a0c <___vfiprintf_internal_r+0xd50>
10008858:	d9801b17 	ldw	r6,108(sp)
1000885c:	d8801c17 	ldw	r2,112(sp)
10008860:	d811883a 	mov	r8,sp
10008864:	31400044 	addi	r5,r6,1
10008868:	003e3306 	br	10008138 <__alt_data_end+0xf8008138>
1000886c:	d9401b17 	ldw	r5,108(sp)
10008870:	d8801c17 	ldw	r2,112(sp)
10008874:	29000044 	addi	r4,r5,1
10008878:	d8c01d87 	ldb	r3,118(sp)
1000887c:	183e4d26 	beq	r3,zero,100081b4 <__alt_data_end+0xf80081b4>
10008880:	00c00044 	movi	r3,1
10008884:	d9401d84 	addi	r5,sp,118
10008888:	10c5883a 	add	r2,r2,r3
1000888c:	41400015 	stw	r5,0(r8)
10008890:	40c00115 	stw	r3,4(r8)
10008894:	d8801c15 	stw	r2,112(sp)
10008898:	d9001b15 	stw	r4,108(sp)
1000889c:	014001c4 	movi	r5,7
100088a0:	2900a90e 	bge	r5,r4,10008b48 <___vfiprintf_internal_r+0xe8c>
100088a4:	1000da1e 	bne	r2,zero,10008c10 <___vfiprintf_internal_r+0xf54>
100088a8:	7000ab1e 	bne	r14,zero,10008b58 <___vfiprintf_internal_r+0xe9c>
100088ac:	000b883a 	mov	r5,zero
100088b0:	1809883a 	mov	r4,r3
100088b4:	d811883a 	mov	r8,sp
100088b8:	00c02004 	movi	r3,128
100088bc:	e0fe4d26 	beq	fp,r3,100081f4 <__alt_data_end+0xf80081f4>
100088c0:	4cf9c83a 	sub	fp,r9,r19
100088c4:	073e7b0e 	bge	zero,fp,100082b4 <__alt_data_end+0xf80082b4>
100088c8:	01c00404 	movi	r7,16
100088cc:	3f01900e 	bge	r7,fp,10008f10 <___vfiprintf_internal_r+0x1254>
100088d0:	00c40074 	movhi	r3,4097
100088d4:	18d2ab04 	addi	r3,r3,19116
100088d8:	d8c02415 	stw	r3,144(sp)
100088dc:	034001c4 	movi	r13,7
100088e0:	00000506 	br	100088f8 <___vfiprintf_internal_r+0xc3c>
100088e4:	29000084 	addi	r4,r5,2
100088e8:	42000204 	addi	r8,r8,8
100088ec:	180b883a 	mov	r5,r3
100088f0:	e73ffc04 	addi	fp,fp,-16
100088f4:	3f000d0e 	bge	r7,fp,1000892c <___vfiprintf_internal_r+0xc70>
100088f8:	10800404 	addi	r2,r2,16
100088fc:	28c00044 	addi	r3,r5,1
10008900:	45c00015 	stw	r23,0(r8)
10008904:	41c00115 	stw	r7,4(r8)
10008908:	d8801c15 	stw	r2,112(sp)
1000890c:	d8c01b15 	stw	r3,108(sp)
10008910:	68fff40e 	bge	r13,r3,100088e4 <__alt_data_end+0xf80088e4>
10008914:	1000101e 	bne	r2,zero,10008958 <___vfiprintf_internal_r+0xc9c>
10008918:	e73ffc04 	addi	fp,fp,-16
1000891c:	01000044 	movi	r4,1
10008920:	000b883a 	mov	r5,zero
10008924:	d811883a 	mov	r8,sp
10008928:	3f3ff316 	blt	r7,fp,100088f8 <__alt_data_end+0xf80088f8>
1000892c:	da802417 	ldw	r10,144(sp)
10008930:	1705883a 	add	r2,r2,fp
10008934:	47000115 	stw	fp,4(r8)
10008938:	42800015 	stw	r10,0(r8)
1000893c:	d8801c15 	stw	r2,112(sp)
10008940:	d9001b15 	stw	r4,108(sp)
10008944:	00c001c4 	movi	r3,7
10008948:	19003616 	blt	r3,r4,10008a24 <___vfiprintf_internal_r+0xd68>
1000894c:	42000204 	addi	r8,r8,8
10008950:	21000044 	addi	r4,r4,1
10008954:	003e5706 	br	100082b4 <__alt_data_end+0xf80082b4>
10008958:	d9402117 	ldw	r5,132(sp)
1000895c:	d9002017 	ldw	r4,128(sp)
10008960:	d9801a04 	addi	r6,sp,104
10008964:	d9c02b15 	stw	r7,172(sp)
10008968:	db402a15 	stw	r13,168(sp)
1000896c:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008970:	d9c02b17 	ldw	r7,172(sp)
10008974:	db402a17 	ldw	r13,168(sp)
10008978:	1000241e 	bne	r2,zero,10008a0c <___vfiprintf_internal_r+0xd50>
1000897c:	d9401b17 	ldw	r5,108(sp)
10008980:	d8801c17 	ldw	r2,112(sp)
10008984:	d811883a 	mov	r8,sp
10008988:	29000044 	addi	r4,r5,1
1000898c:	003fd806 	br	100088f0 <__alt_data_end+0xf80088f0>
10008990:	d9401b17 	ldw	r5,108(sp)
10008994:	00c40074 	movhi	r3,4097
10008998:	18d2af04 	addi	r3,r3,19132
1000899c:	d8c02415 	stw	r3,144(sp)
100089a0:	29400044 	addi	r5,r5,1
100089a4:	d8c02417 	ldw	r3,144(sp)
100089a8:	14c5883a 	add	r2,r2,r19
100089ac:	44c00115 	stw	r19,4(r8)
100089b0:	40c00015 	stw	r3,0(r8)
100089b4:	d8801c15 	stw	r2,112(sp)
100089b8:	d9401b15 	stw	r5,108(sp)
100089bc:	00c001c4 	movi	r3,7
100089c0:	1940070e 	bge	r3,r5,100089e0 <___vfiprintf_internal_r+0xd24>
100089c4:	103e4826 	beq	r2,zero,100082e8 <__alt_data_end+0xf80082e8>
100089c8:	d9402117 	ldw	r5,132(sp)
100089cc:	d9002017 	ldw	r4,128(sp)
100089d0:	d9801a04 	addi	r6,sp,104
100089d4:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
100089d8:	10000c1e 	bne	r2,zero,10008a0c <___vfiprintf_internal_r+0xd50>
100089dc:	d8801c17 	ldw	r2,112(sp)
100089e0:	8c80010e 	bge	r17,r18,100089e8 <___vfiprintf_internal_r+0xd2c>
100089e4:	9023883a 	mov	r17,r18
100089e8:	da802317 	ldw	r10,140(sp)
100089ec:	5455883a 	add	r10,r10,r17
100089f0:	da802315 	stw	r10,140(sp)
100089f4:	103e4126 	beq	r2,zero,100082fc <__alt_data_end+0xf80082fc>
100089f8:	d9402117 	ldw	r5,132(sp)
100089fc:	d9002017 	ldw	r4,128(sp)
10008a00:	d9801a04 	addi	r6,sp,104
10008a04:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008a08:	103e3c26 	beq	r2,zero,100082fc <__alt_data_end+0xf80082fc>
10008a0c:	dd002117 	ldw	r20,132(sp)
10008a10:	a080030b 	ldhu	r2,12(r20)
10008a14:	1080100c 	andi	r2,r2,64
10008a18:	1001231e 	bne	r2,zero,10008ea8 <___vfiprintf_internal_r+0x11ec>
10008a1c:	d8802317 	ldw	r2,140(sp)
10008a20:	003d7b06 	br	10008010 <__alt_data_end+0xf8008010>
10008a24:	1000991e 	bne	r2,zero,10008c8c <___vfiprintf_internal_r+0xfd0>
10008a28:	00c00044 	movi	r3,1
10008a2c:	9805883a 	mov	r2,r19
10008a30:	dd400015 	stw	r21,0(sp)
10008a34:	dcc00115 	stw	r19,4(sp)
10008a38:	dcc01c15 	stw	r19,112(sp)
10008a3c:	d8c01b15 	stw	r3,108(sp)
10008a40:	d811883a 	mov	r8,sp
10008a44:	42000204 	addi	r8,r8,8
10008a48:	a2c0010c 	andi	r11,r20,4
10008a4c:	583fe426 	beq	r11,zero,100089e0 <__alt_data_end+0xf80089e0>
10008a50:	8ca7c83a 	sub	r19,r17,r18
10008a54:	04ffe20e 	bge	zero,r19,100089e0 <__alt_data_end+0xf80089e0>
10008a58:	01c00404 	movi	r7,16
10008a5c:	3cffcc0e 	bge	r7,r19,10008990 <__alt_data_end+0xf8008990>
10008a60:	02840074 	movhi	r10,4097
10008a64:	5292af04 	addi	r10,r10,19132
10008a68:	d9001b17 	ldw	r4,108(sp)
10008a6c:	da802415 	stw	r10,144(sp)
10008a70:	382b883a 	mov	r21,r7
10008a74:	050001c4 	movi	r20,7
10008a78:	df002017 	ldw	fp,128(sp)
10008a7c:	00000506 	br	10008a94 <___vfiprintf_internal_r+0xdd8>
10008a80:	21400084 	addi	r5,r4,2
10008a84:	42000204 	addi	r8,r8,8
10008a88:	1809883a 	mov	r4,r3
10008a8c:	9cfffc04 	addi	r19,r19,-16
10008a90:	acffc40e 	bge	r21,r19,100089a4 <__alt_data_end+0xf80089a4>
10008a94:	10800404 	addi	r2,r2,16
10008a98:	20c00044 	addi	r3,r4,1
10008a9c:	45800015 	stw	r22,0(r8)
10008aa0:	45400115 	stw	r21,4(r8)
10008aa4:	d8801c15 	stw	r2,112(sp)
10008aa8:	d8c01b15 	stw	r3,108(sp)
10008aac:	a0fff40e 	bge	r20,r3,10008a80 <__alt_data_end+0xf8008a80>
10008ab0:	1000041e 	bne	r2,zero,10008ac4 <___vfiprintf_internal_r+0xe08>
10008ab4:	01400044 	movi	r5,1
10008ab8:	0009883a 	mov	r4,zero
10008abc:	d811883a 	mov	r8,sp
10008ac0:	003ff206 	br	10008a8c <__alt_data_end+0xf8008a8c>
10008ac4:	d9402117 	ldw	r5,132(sp)
10008ac8:	d9801a04 	addi	r6,sp,104
10008acc:	e009883a 	mov	r4,fp
10008ad0:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008ad4:	103fcd1e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008ad8:	d9001b17 	ldw	r4,108(sp)
10008adc:	d8801c17 	ldw	r2,112(sp)
10008ae0:	d811883a 	mov	r8,sp
10008ae4:	21400044 	addi	r5,r4,1
10008ae8:	003fe806 	br	10008a8c <__alt_data_end+0xf8008a8c>
10008aec:	d9402117 	ldw	r5,132(sp)
10008af0:	d9002017 	ldw	r4,128(sp)
10008af4:	d9801a04 	addi	r6,sp,104
10008af8:	d9c02b15 	stw	r7,172(sp)
10008afc:	db402a15 	stw	r13,168(sp)
10008b00:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008b04:	d9c02b17 	ldw	r7,172(sp)
10008b08:	db402a17 	ldw	r13,168(sp)
10008b0c:	103fbf1e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008b10:	d9401b17 	ldw	r5,108(sp)
10008b14:	d8801c17 	ldw	r2,112(sp)
10008b18:	d811883a 	mov	r8,sp
10008b1c:	29800044 	addi	r6,r5,1
10008b20:	003dc406 	br	10008234 <__alt_data_end+0xf8008234>
10008b24:	1000d21e 	bne	r2,zero,10008e70 <___vfiprintf_internal_r+0x11b4>
10008b28:	d8c01d87 	ldb	r3,118(sp)
10008b2c:	18009526 	beq	r3,zero,10008d84 <___vfiprintf_internal_r+0x10c8>
10008b30:	00800044 	movi	r2,1
10008b34:	d8c01d84 	addi	r3,sp,118
10008b38:	1009883a 	mov	r4,r2
10008b3c:	d8c00015 	stw	r3,0(sp)
10008b40:	d8800115 	stw	r2,4(sp)
10008b44:	d811883a 	mov	r8,sp
10008b48:	200b883a 	mov	r5,r4
10008b4c:	42000204 	addi	r8,r8,8
10008b50:	21000044 	addi	r4,r4,1
10008b54:	003d9706 	br	100081b4 <__alt_data_end+0xf80081b4>
10008b58:	d9001d04 	addi	r4,sp,116
10008b5c:	00800084 	movi	r2,2
10008b60:	d9000015 	stw	r4,0(sp)
10008b64:	d8800115 	stw	r2,4(sp)
10008b68:	1809883a 	mov	r4,r3
10008b6c:	d811883a 	mov	r8,sp
10008b70:	200b883a 	mov	r5,r4
10008b74:	42000204 	addi	r8,r8,8
10008b78:	21000044 	addi	r4,r4,1
10008b7c:	003f4e06 	br	100088b8 <__alt_data_end+0xf80088b8>
10008b80:	d8001d85 	stb	zero,118(sp)
10008b84:	48005016 	blt	r9,zero,10008cc8 <___vfiprintf_internal_r+0x100c>
10008b88:	00ffdfc4 	movi	r3,-129
10008b8c:	94c4b03a 	or	r2,r18,r19
10008b90:	a0e8703a 	and	r20,r20,r3
10008b94:	103d4426 	beq	r2,zero,100080a8 <__alt_data_end+0xf80080a8>
10008b98:	0039883a 	mov	fp,zero
10008b9c:	d9002617 	ldw	r4,152(sp)
10008ba0:	dd401a04 	addi	r21,sp,104
10008ba4:	908003cc 	andi	r2,r18,15
10008ba8:	9806973a 	slli	r3,r19,28
10008bac:	2085883a 	add	r2,r4,r2
10008bb0:	9024d13a 	srli	r18,r18,4
10008bb4:	10800003 	ldbu	r2,0(r2)
10008bb8:	9826d13a 	srli	r19,r19,4
10008bbc:	ad7fffc4 	addi	r21,r21,-1
10008bc0:	1ca4b03a 	or	r18,r3,r18
10008bc4:	a8800005 	stb	r2,0(r21)
10008bc8:	94c4b03a 	or	r2,r18,r19
10008bcc:	103ff51e 	bne	r2,zero,10008ba4 <__alt_data_end+0xf8008ba4>
10008bd0:	003e5906 	br	10008538 <__alt_data_end+0xf8008538>
10008bd4:	d9402117 	ldw	r5,132(sp)
10008bd8:	d9002017 	ldw	r4,128(sp)
10008bdc:	d9801a04 	addi	r6,sp,104
10008be0:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008be4:	103f891e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008be8:	d8801c17 	ldw	r2,112(sp)
10008bec:	d811883a 	mov	r8,sp
10008bf0:	003f9506 	br	10008a48 <__alt_data_end+0xf8008a48>
10008bf4:	d9402117 	ldw	r5,132(sp)
10008bf8:	d9002017 	ldw	r4,128(sp)
10008bfc:	d9801a04 	addi	r6,sp,104
10008c00:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008c04:	103f811e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008c08:	d811883a 	mov	r8,sp
10008c0c:	003ced06 	br	10007fc4 <__alt_data_end+0xf8007fc4>
10008c10:	d9402117 	ldw	r5,132(sp)
10008c14:	d9002017 	ldw	r4,128(sp)
10008c18:	d9801a04 	addi	r6,sp,104
10008c1c:	da402c15 	stw	r9,176(sp)
10008c20:	db802a15 	stw	r14,168(sp)
10008c24:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008c28:	da402c17 	ldw	r9,176(sp)
10008c2c:	db802a17 	ldw	r14,168(sp)
10008c30:	103f761e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008c34:	d9401b17 	ldw	r5,108(sp)
10008c38:	d8801c17 	ldw	r2,112(sp)
10008c3c:	d811883a 	mov	r8,sp
10008c40:	29000044 	addi	r4,r5,1
10008c44:	003d5b06 	br	100081b4 <__alt_data_end+0xf80081b4>
10008c48:	d9402117 	ldw	r5,132(sp)
10008c4c:	d9002017 	ldw	r4,128(sp)
10008c50:	d9801a04 	addi	r6,sp,104
10008c54:	da402c15 	stw	r9,176(sp)
10008c58:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008c5c:	da402c17 	ldw	r9,176(sp)
10008c60:	103f6a1e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008c64:	d9401b17 	ldw	r5,108(sp)
10008c68:	d8801c17 	ldw	r2,112(sp)
10008c6c:	d811883a 	mov	r8,sp
10008c70:	29000044 	addi	r4,r5,1
10008c74:	003f1006 	br	100088b8 <__alt_data_end+0xf80088b8>
10008c78:	1000c31e 	bne	r2,zero,10008f88 <___vfiprintf_internal_r+0x12cc>
10008c7c:	01000044 	movi	r4,1
10008c80:	000b883a 	mov	r5,zero
10008c84:	d811883a 	mov	r8,sp
10008c88:	003f0d06 	br	100088c0 <__alt_data_end+0xf80088c0>
10008c8c:	d9402117 	ldw	r5,132(sp)
10008c90:	d9002017 	ldw	r4,128(sp)
10008c94:	d9801a04 	addi	r6,sp,104
10008c98:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008c9c:	103f5b1e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008ca0:	d9001b17 	ldw	r4,108(sp)
10008ca4:	d8801c17 	ldw	r2,112(sp)
10008ca8:	d811883a 	mov	r8,sp
10008cac:	21000044 	addi	r4,r4,1
10008cb0:	003d8006 	br	100082b4 <__alt_data_end+0xf80082b4>
10008cb4:	01040074 	movhi	r4,4097
10008cb8:	21124a04 	addi	r4,r4,18728
10008cbc:	d9002615 	stw	r4,152(sp)
10008cc0:	d8c02215 	stw	r3,136(sp)
10008cc4:	1029883a 	mov	r20,r2
10008cc8:	94c4b03a 	or	r2,r18,r19
10008ccc:	103fb21e 	bne	r2,zero,10008b98 <__alt_data_end+0xf8008b98>
10008cd0:	0039883a 	mov	fp,zero
10008cd4:	00800084 	movi	r2,2
10008cd8:	003e6b06 	br	10008688 <__alt_data_end+0xf8008688>
10008cdc:	da802217 	ldw	r10,136(sp)
10008ce0:	d8001d85 	stb	zero,118(sp)
10008ce4:	0027883a 	mov	r19,zero
10008ce8:	50800104 	addi	r2,r10,4
10008cec:	54800017 	ldw	r18,0(r10)
10008cf0:	483e6016 	blt	r9,zero,10008674 <__alt_data_end+0xf8008674>
10008cf4:	00ffdfc4 	movi	r3,-129
10008cf8:	d8802215 	stw	r2,136(sp)
10008cfc:	a0e8703a 	and	r20,r20,r3
10008d00:	0039883a 	mov	fp,zero
10008d04:	903ebb26 	beq	r18,zero,100087f4 <__alt_data_end+0xf80087f4>
10008d08:	00800244 	movi	r2,9
10008d0c:	14bdee36 	bltu	r2,r18,100084c8 <__alt_data_end+0xf80084c8>
10008d10:	003eba06 	br	100087fc <__alt_data_end+0xf80087fc>
10008d14:	00800c04 	movi	r2,48
10008d18:	d8c01d45 	stb	r3,117(sp)
10008d1c:	d8801d05 	stb	r2,116(sp)
10008d20:	d8001d85 	stb	zero,118(sp)
10008d24:	a0c00094 	ori	r3,r20,2
10008d28:	4800a916 	blt	r9,zero,10008fd0 <___vfiprintf_internal_r+0x1314>
10008d2c:	00bfdfc4 	movi	r2,-129
10008d30:	a096703a 	and	r11,r20,r2
10008d34:	5d000094 	ori	r20,r11,2
10008d38:	0039883a 	mov	fp,zero
10008d3c:	003f9706 	br	10008b9c <__alt_data_end+0xf8008b9c>
10008d40:	8025883a 	mov	r18,r16
10008d44:	003c2e06 	br	10007e00 <__alt_data_end+0xf8007e00>
10008d48:	00840074 	movhi	r2,4097
10008d4c:	10924a04 	addi	r2,r2,18728
10008d50:	0039883a 	mov	fp,zero
10008d54:	d8802615 	stw	r2,152(sp)
10008d58:	003f9006 	br	10008b9c <__alt_data_end+0xf8008b9c>
10008d5c:	04a5c83a 	sub	r18,zero,r18
10008d60:	07000b44 	movi	fp,45
10008d64:	9004c03a 	cmpne	r2,r18,zero
10008d68:	04e7c83a 	sub	r19,zero,r19
10008d6c:	df001d85 	stb	fp,118(sp)
10008d70:	98a7c83a 	sub	r19,r19,r2
10008d74:	48009f16 	blt	r9,zero,10008ff4 <___vfiprintf_internal_r+0x1338>
10008d78:	00bfdfc4 	movi	r2,-129
10008d7c:	a0a8703a 	and	r20,r20,r2
10008d80:	003dd006 	br	100084c4 <__alt_data_end+0xf80084c4>
10008d84:	70004c26 	beq	r14,zero,10008eb8 <___vfiprintf_internal_r+0x11fc>
10008d88:	00800084 	movi	r2,2
10008d8c:	d8c01d04 	addi	r3,sp,116
10008d90:	d8c00015 	stw	r3,0(sp)
10008d94:	d8800115 	stw	r2,4(sp)
10008d98:	01000044 	movi	r4,1
10008d9c:	d811883a 	mov	r8,sp
10008da0:	003f7306 	br	10008b70 <__alt_data_end+0xf8008b70>
10008da4:	a080100c 	andi	r2,r20,64
10008da8:	da802217 	ldw	r10,136(sp)
10008dac:	103e0626 	beq	r2,zero,100085c8 <__alt_data_end+0xf80085c8>
10008db0:	5480000f 	ldh	r18,0(r10)
10008db4:	52800104 	addi	r10,r10,4
10008db8:	da802215 	stw	r10,136(sp)
10008dbc:	9027d7fa 	srai	r19,r18,31
10008dc0:	9805883a 	mov	r2,r19
10008dc4:	003db806 	br	100084a8 <__alt_data_end+0xf80084a8>
10008dc8:	a080040c 	andi	r2,r20,16
10008dcc:	1000091e 	bne	r2,zero,10008df4 <___vfiprintf_internal_r+0x1138>
10008dd0:	a2c0100c 	andi	r11,r20,64
10008dd4:	58000726 	beq	r11,zero,10008df4 <___vfiprintf_internal_r+0x1138>
10008dd8:	da802217 	ldw	r10,136(sp)
10008ddc:	50800017 	ldw	r2,0(r10)
10008de0:	52800104 	addi	r10,r10,4
10008de4:	da802215 	stw	r10,136(sp)
10008de8:	da802317 	ldw	r10,140(sp)
10008dec:	1280000d 	sth	r10,0(r2)
10008df0:	003be706 	br	10007d90 <__alt_data_end+0xf8007d90>
10008df4:	da802217 	ldw	r10,136(sp)
10008df8:	50800017 	ldw	r2,0(r10)
10008dfc:	52800104 	addi	r10,r10,4
10008e00:	da802215 	stw	r10,136(sp)
10008e04:	da802317 	ldw	r10,140(sp)
10008e08:	12800015 	stw	r10,0(r2)
10008e0c:	003be006 	br	10007d90 <__alt_data_end+0xf8007d90>
10008e10:	a080100c 	andi	r2,r20,64
10008e14:	da802217 	ldw	r10,136(sp)
10008e18:	10003026 	beq	r2,zero,10008edc <___vfiprintf_internal_r+0x1220>
10008e1c:	5480000b 	ldhu	r18,0(r10)
10008e20:	52800104 	addi	r10,r10,4
10008e24:	0027883a 	mov	r19,zero
10008e28:	da802215 	stw	r10,136(sp)
10008e2c:	003d8006 	br	10008430 <__alt_data_end+0xf8008430>
10008e30:	80c00007 	ldb	r3,0(r16)
10008e34:	003c0006 	br	10007e38 <__alt_data_end+0xf8007e38>
10008e38:	a080100c 	andi	r2,r20,64
10008e3c:	d8001d85 	stb	zero,118(sp)
10008e40:	da802217 	ldw	r10,136(sp)
10008e44:	1000201e 	bne	r2,zero,10008ec8 <___vfiprintf_internal_r+0x120c>
10008e48:	50800104 	addi	r2,r10,4
10008e4c:	54800017 	ldw	r18,0(r10)
10008e50:	0027883a 	mov	r19,zero
10008e54:	483def0e 	bge	r9,zero,10008614 <__alt_data_end+0xf8008614>
10008e58:	94c6b03a 	or	r3,r18,r19
10008e5c:	d8802215 	stw	r2,136(sp)
10008e60:	183d4e1e 	bne	r3,zero,1000839c <__alt_data_end+0xf800839c>
10008e64:	0039883a 	mov	fp,zero
10008e68:	0005883a 	mov	r2,zero
10008e6c:	003e0606 	br	10008688 <__alt_data_end+0xf8008688>
10008e70:	d9402117 	ldw	r5,132(sp)
10008e74:	d9002017 	ldw	r4,128(sp)
10008e78:	d9801a04 	addi	r6,sp,104
10008e7c:	da402c15 	stw	r9,176(sp)
10008e80:	db802a15 	stw	r14,168(sp)
10008e84:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008e88:	da402c17 	ldw	r9,176(sp)
10008e8c:	db802a17 	ldw	r14,168(sp)
10008e90:	103ede1e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008e94:	d9401b17 	ldw	r5,108(sp)
10008e98:	d8801c17 	ldw	r2,112(sp)
10008e9c:	d811883a 	mov	r8,sp
10008ea0:	29000044 	addi	r4,r5,1
10008ea4:	003e7406 	br	10008878 <__alt_data_end+0xf8008878>
10008ea8:	00bfffc4 	movi	r2,-1
10008eac:	003c5806 	br	10008010 <__alt_data_end+0xf8008010>
10008eb0:	d811883a 	mov	r8,sp
10008eb4:	003ee806 	br	10008a58 <__alt_data_end+0xf8008a58>
10008eb8:	000b883a 	mov	r5,zero
10008ebc:	01000044 	movi	r4,1
10008ec0:	d811883a 	mov	r8,sp
10008ec4:	003e7c06 	br	100088b8 <__alt_data_end+0xf80088b8>
10008ec8:	50800104 	addi	r2,r10,4
10008ecc:	5480000b 	ldhu	r18,0(r10)
10008ed0:	0027883a 	mov	r19,zero
10008ed4:	483dcf0e 	bge	r9,zero,10008614 <__alt_data_end+0xf8008614>
10008ed8:	003fdf06 	br	10008e58 <__alt_data_end+0xf8008e58>
10008edc:	54800017 	ldw	r18,0(r10)
10008ee0:	52800104 	addi	r10,r10,4
10008ee4:	0027883a 	mov	r19,zero
10008ee8:	da802215 	stw	r10,136(sp)
10008eec:	003d5006 	br	10008430 <__alt_data_end+0xf8008430>
10008ef0:	50800104 	addi	r2,r10,4
10008ef4:	5480000b 	ldhu	r18,0(r10)
10008ef8:	0027883a 	mov	r19,zero
10008efc:	483f7d0e 	bge	r9,zero,10008cf4 <__alt_data_end+0xf8008cf4>
10008f00:	003ddc06 	br	10008674 <__alt_data_end+0xf8008674>
10008f04:	d8c02215 	stw	r3,136(sp)
10008f08:	0039883a 	mov	fp,zero
10008f0c:	003ddb06 	br	1000867c <__alt_data_end+0xf800867c>
10008f10:	02840074 	movhi	r10,4097
10008f14:	5292ab04 	addi	r10,r10,19116
10008f18:	da802415 	stw	r10,144(sp)
10008f1c:	003e8306 	br	1000892c <__alt_data_end+0xf800892c>
10008f20:	d8801c17 	ldw	r2,112(sp)
10008f24:	dd002117 	ldw	r20,132(sp)
10008f28:	103eb926 	beq	r2,zero,10008a10 <__alt_data_end+0xf8008a10>
10008f2c:	d9002017 	ldw	r4,128(sp)
10008f30:	d9801a04 	addi	r6,sp,104
10008f34:	a00b883a 	mov	r5,r20
10008f38:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008f3c:	003eb406 	br	10008a10 <__alt_data_end+0xf8008a10>
10008f40:	80c00043 	ldbu	r3,1(r16)
10008f44:	a5000814 	ori	r20,r20,32
10008f48:	84000044 	addi	r16,r16,1
10008f4c:	18c03fcc 	andi	r3,r3,255
10008f50:	18c0201c 	xori	r3,r3,128
10008f54:	18ffe004 	addi	r3,r3,-128
10008f58:	003bb706 	br	10007e38 <__alt_data_end+0xf8007e38>
10008f5c:	a809883a 	mov	r4,r21
10008f60:	d8c02a15 	stw	r3,168(sp)
10008f64:	da002b15 	stw	r8,172(sp)
10008f68:	00006100 	call	10000610 <strlen>
10008f6c:	d8c02a17 	ldw	r3,168(sp)
10008f70:	1027883a 	mov	r19,r2
10008f74:	df001d83 	ldbu	fp,118(sp)
10008f78:	d8c02215 	stw	r3,136(sp)
10008f7c:	0013883a 	mov	r9,zero
10008f80:	da002b17 	ldw	r8,172(sp)
10008f84:	003c4d06 	br	100080bc <__alt_data_end+0xf80080bc>
10008f88:	d9402117 	ldw	r5,132(sp)
10008f8c:	d9002017 	ldw	r4,128(sp)
10008f90:	d9801a04 	addi	r6,sp,104
10008f94:	da402c15 	stw	r9,176(sp)
10008f98:	0007ba80 	call	10007ba8 <__sprint_r.part.0>
10008f9c:	da402c17 	ldw	r9,176(sp)
10008fa0:	103e9a1e 	bne	r2,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008fa4:	d9401b17 	ldw	r5,108(sp)
10008fa8:	d8801c17 	ldw	r2,112(sp)
10008fac:	d811883a 	mov	r8,sp
10008fb0:	29000044 	addi	r4,r5,1
10008fb4:	003e4206 	br	100088c0 <__alt_data_end+0xf80088c0>
10008fb8:	d9401b17 	ldw	r5,108(sp)
10008fbc:	01040074 	movhi	r4,4097
10008fc0:	2112af04 	addi	r4,r4,19132
10008fc4:	d9002415 	stw	r4,144(sp)
10008fc8:	29400044 	addi	r5,r5,1
10008fcc:	003c6d06 	br	10008184 <__alt_data_end+0xf8008184>
10008fd0:	0039883a 	mov	fp,zero
10008fd4:	00800084 	movi	r2,2
10008fd8:	10803fcc 	andi	r2,r2,255
10008fdc:	01000044 	movi	r4,1
10008fe0:	11001e26 	beq	r2,r4,1000905c <___vfiprintf_internal_r+0x13a0>
10008fe4:	01000084 	movi	r4,2
10008fe8:	11001e1e 	bne	r2,r4,10009064 <___vfiprintf_internal_r+0x13a8>
10008fec:	1829883a 	mov	r20,r3
10008ff0:	003eea06 	br	10008b9c <__alt_data_end+0xf8008b9c>
10008ff4:	a007883a 	mov	r3,r20
10008ff8:	00800044 	movi	r2,1
10008ffc:	003ff606 	br	10008fd8 <__alt_data_end+0xf8008fd8>
10009000:	00800184 	movi	r2,6
10009004:	1240012e 	bgeu	r2,r9,1000900c <___vfiprintf_internal_r+0x1350>
10009008:	1013883a 	mov	r9,r2
1000900c:	4827883a 	mov	r19,r9
10009010:	4825883a 	mov	r18,r9
10009014:	48001516 	blt	r9,zero,1000906c <___vfiprintf_internal_r+0x13b0>
10009018:	05440074 	movhi	r21,4097
1000901c:	d8c02215 	stw	r3,136(sp)
10009020:	ad524f04 	addi	r21,r21,18748
10009024:	003d1406 	br	10008478 <__alt_data_end+0xf8008478>
10009028:	02840074 	movhi	r10,4097
1000902c:	5292ab04 	addi	r10,r10,19116
10009030:	da802415 	stw	r10,144(sp)
10009034:	200d883a 	mov	r6,r4
10009038:	003c9106 	br	10008280 <__alt_data_end+0xf8008280>
1000903c:	5021883a 	mov	r16,r10
10009040:	0013883a 	mov	r9,zero
10009044:	003b7d06 	br	10007e3c <__alt_data_end+0xf8007e3c>
10009048:	4827883a 	mov	r19,r9
1000904c:	df001d83 	ldbu	fp,118(sp)
10009050:	d8c02215 	stw	r3,136(sp)
10009054:	0013883a 	mov	r9,zero
10009058:	003c1806 	br	100080bc <__alt_data_end+0xf80080bc>
1000905c:	1829883a 	mov	r20,r3
10009060:	003d1806 	br	100084c4 <__alt_data_end+0xf80084c4>
10009064:	1829883a 	mov	r20,r3
10009068:	003ccd06 	br	100083a0 <__alt_data_end+0xf80083a0>
1000906c:	0025883a 	mov	r18,zero
10009070:	003fe906 	br	10009018 <__alt_data_end+0xf8009018>
10009074:	d8802217 	ldw	r2,136(sp)
10009078:	80c00043 	ldbu	r3,1(r16)
1000907c:	5021883a 	mov	r16,r10
10009080:	12400017 	ldw	r9,0(r2)
10009084:	10800104 	addi	r2,r2,4
10009088:	d8802215 	stw	r2,136(sp)
1000908c:	483faf0e 	bge	r9,zero,10008f4c <__alt_data_end+0xf8008f4c>
10009090:	18c03fcc 	andi	r3,r3,255
10009094:	18c0201c 	xori	r3,r3,128
10009098:	027fffc4 	movi	r9,-1
1000909c:	18ffe004 	addi	r3,r3,-128
100090a0:	003b6506 	br	10007e38 <__alt_data_end+0xf8007e38>
100090a4:	d9c01d85 	stb	r7,118(sp)
100090a8:	003ca006 	br	1000832c <__alt_data_end+0xf800832c>
100090ac:	d9c01d85 	stb	r7,118(sp)
100090b0:	003cad06 	br	10008368 <__alt_data_end+0xf8008368>
100090b4:	d9c01d85 	stb	r7,118(sp)
100090b8:	003d7d06 	br	100086b0 <__alt_data_end+0xf80086b0>
100090bc:	d9c01d85 	stb	r7,118(sp)
100090c0:	003d5f06 	br	10008640 <__alt_data_end+0xf8008640>
100090c4:	a080004c 	andi	r2,r20,1
100090c8:	0039883a 	mov	fp,zero
100090cc:	10000526 	beq	r2,zero,100090e4 <___vfiprintf_internal_r+0x1428>
100090d0:	00800c04 	movi	r2,48
100090d4:	d88019c5 	stb	r2,103(sp)
100090d8:	dcc02717 	ldw	r19,156(sp)
100090dc:	dd4019c4 	addi	r21,sp,103
100090e0:	003bf606 	br	100080bc <__alt_data_end+0xf80080bc>
100090e4:	0027883a 	mov	r19,zero
100090e8:	dd401a04 	addi	r21,sp,104
100090ec:	003bf306 	br	100080bc <__alt_data_end+0xf80080bc>
100090f0:	d9c01d85 	stb	r7,118(sp)
100090f4:	003dc806 	br	10008818 <__alt_data_end+0xf8008818>
100090f8:	d9c01d85 	stb	r7,118(sp)
100090fc:	003d3a06 	br	100085e8 <__alt_data_end+0xf80085e8>
10009100:	d9c01d85 	stb	r7,118(sp)
10009104:	003d2a06 	br	100085b0 <__alt_data_end+0xf80085b0>
10009108:	d9c01d85 	stb	r7,118(sp)
1000910c:	003cde06 	br	10008488 <__alt_data_end+0xf8008488>
10009110:	d9c01d85 	stb	r7,118(sp)
10009114:	003cbc06 	br	10008408 <__alt_data_end+0xf8008408>

10009118 <__vfiprintf_internal>:
10009118:	00840074 	movhi	r2,4097
1000911c:	1099da04 	addi	r2,r2,26472
10009120:	300f883a 	mov	r7,r6
10009124:	280d883a 	mov	r6,r5
10009128:	200b883a 	mov	r5,r4
1000912c:	11000017 	ldw	r4,0(r2)
10009130:	0007cbc1 	jmpi	10007cbc <___vfiprintf_internal_r>

10009134 <__sbprintf>:
10009134:	2880030b 	ldhu	r2,12(r5)
10009138:	2ac01917 	ldw	r11,100(r5)
1000913c:	2a80038b 	ldhu	r10,14(r5)
10009140:	2a400717 	ldw	r9,28(r5)
10009144:	2a000917 	ldw	r8,36(r5)
10009148:	defee204 	addi	sp,sp,-1144
1000914c:	00c10004 	movi	r3,1024
10009150:	dc011a15 	stw	r16,1128(sp)
10009154:	10bfff4c 	andi	r2,r2,65533
10009158:	2821883a 	mov	r16,r5
1000915c:	d8cb883a 	add	r5,sp,r3
10009160:	dc811c15 	stw	r18,1136(sp)
10009164:	dc411b15 	stw	r17,1132(sp)
10009168:	dfc11d15 	stw	ra,1140(sp)
1000916c:	2025883a 	mov	r18,r4
10009170:	d881030d 	sth	r2,1036(sp)
10009174:	dac11915 	stw	r11,1124(sp)
10009178:	da81038d 	sth	r10,1038(sp)
1000917c:	da410715 	stw	r9,1052(sp)
10009180:	da010915 	stw	r8,1060(sp)
10009184:	dec10015 	stw	sp,1024(sp)
10009188:	dec10415 	stw	sp,1040(sp)
1000918c:	d8c10215 	stw	r3,1032(sp)
10009190:	d8c10515 	stw	r3,1044(sp)
10009194:	d8010615 	stw	zero,1048(sp)
10009198:	0007cbc0 	call	10007cbc <___vfiprintf_internal_r>
1000919c:	1023883a 	mov	r17,r2
100091a0:	10000416 	blt	r2,zero,100091b4 <__sbprintf+0x80>
100091a4:	d9410004 	addi	r5,sp,1024
100091a8:	9009883a 	mov	r4,r18
100091ac:	00045700 	call	10004570 <_fflush_r>
100091b0:	10000d1e 	bne	r2,zero,100091e8 <__sbprintf+0xb4>
100091b4:	d881030b 	ldhu	r2,1036(sp)
100091b8:	1080100c 	andi	r2,r2,64
100091bc:	10000326 	beq	r2,zero,100091cc <__sbprintf+0x98>
100091c0:	8080030b 	ldhu	r2,12(r16)
100091c4:	10801014 	ori	r2,r2,64
100091c8:	8080030d 	sth	r2,12(r16)
100091cc:	8805883a 	mov	r2,r17
100091d0:	dfc11d17 	ldw	ra,1140(sp)
100091d4:	dc811c17 	ldw	r18,1136(sp)
100091d8:	dc411b17 	ldw	r17,1132(sp)
100091dc:	dc011a17 	ldw	r16,1128(sp)
100091e0:	dec11e04 	addi	sp,sp,1144
100091e4:	f800283a 	ret
100091e8:	047fffc4 	movi	r17,-1
100091ec:	003ff106 	br	100091b4 <__alt_data_end+0xf80091b4>

100091f0 <_write_r>:
100091f0:	defffd04 	addi	sp,sp,-12
100091f4:	2805883a 	mov	r2,r5
100091f8:	dc000015 	stw	r16,0(sp)
100091fc:	040400b4 	movhi	r16,4098
10009200:	dc400115 	stw	r17,4(sp)
10009204:	300b883a 	mov	r5,r6
10009208:	8420cd04 	addi	r16,r16,-31948
1000920c:	2023883a 	mov	r17,r4
10009210:	380d883a 	mov	r6,r7
10009214:	1009883a 	mov	r4,r2
10009218:	dfc00215 	stw	ra,8(sp)
1000921c:	80000015 	stw	zero,0(r16)
10009220:	000d63c0 	call	1000d63c <write>
10009224:	00ffffc4 	movi	r3,-1
10009228:	10c00526 	beq	r2,r3,10009240 <_write_r+0x50>
1000922c:	dfc00217 	ldw	ra,8(sp)
10009230:	dc400117 	ldw	r17,4(sp)
10009234:	dc000017 	ldw	r16,0(sp)
10009238:	dec00304 	addi	sp,sp,12
1000923c:	f800283a 	ret
10009240:	80c00017 	ldw	r3,0(r16)
10009244:	183ff926 	beq	r3,zero,1000922c <__alt_data_end+0xf800922c>
10009248:	88c00015 	stw	r3,0(r17)
1000924c:	003ff706 	br	1000922c <__alt_data_end+0xf800922c>

10009250 <_close_r>:
10009250:	defffd04 	addi	sp,sp,-12
10009254:	dc000015 	stw	r16,0(sp)
10009258:	040400b4 	movhi	r16,4098
1000925c:	dc400115 	stw	r17,4(sp)
10009260:	8420cd04 	addi	r16,r16,-31948
10009264:	2023883a 	mov	r17,r4
10009268:	2809883a 	mov	r4,r5
1000926c:	dfc00215 	stw	ra,8(sp)
10009270:	80000015 	stw	zero,0(r16)
10009274:	000ce2c0 	call	1000ce2c <close>
10009278:	00ffffc4 	movi	r3,-1
1000927c:	10c00526 	beq	r2,r3,10009294 <_close_r+0x44>
10009280:	dfc00217 	ldw	ra,8(sp)
10009284:	dc400117 	ldw	r17,4(sp)
10009288:	dc000017 	ldw	r16,0(sp)
1000928c:	dec00304 	addi	sp,sp,12
10009290:	f800283a 	ret
10009294:	80c00017 	ldw	r3,0(r16)
10009298:	183ff926 	beq	r3,zero,10009280 <__alt_data_end+0xf8009280>
1000929c:	88c00015 	stw	r3,0(r17)
100092a0:	003ff706 	br	10009280 <__alt_data_end+0xf8009280>

100092a4 <_calloc_r>:
100092a4:	298b383a 	mul	r5,r5,r6
100092a8:	defffe04 	addi	sp,sp,-8
100092ac:	dfc00115 	stw	ra,4(sp)
100092b0:	dc000015 	stw	r16,0(sp)
100092b4:	00056ac0 	call	100056ac <_malloc_r>
100092b8:	10002926 	beq	r2,zero,10009360 <_calloc_r+0xbc>
100092bc:	11bfff17 	ldw	r6,-4(r2)
100092c0:	1021883a 	mov	r16,r2
100092c4:	00bfff04 	movi	r2,-4
100092c8:	308c703a 	and	r6,r6,r2
100092cc:	00c00904 	movi	r3,36
100092d0:	308d883a 	add	r6,r6,r2
100092d4:	19801636 	bltu	r3,r6,10009330 <_calloc_r+0x8c>
100092d8:	008004c4 	movi	r2,19
100092dc:	11800b2e 	bgeu	r2,r6,1000930c <_calloc_r+0x68>
100092e0:	80000015 	stw	zero,0(r16)
100092e4:	80000115 	stw	zero,4(r16)
100092e8:	008006c4 	movi	r2,27
100092ec:	11801a2e 	bgeu	r2,r6,10009358 <_calloc_r+0xb4>
100092f0:	80000215 	stw	zero,8(r16)
100092f4:	80000315 	stw	zero,12(r16)
100092f8:	30c0151e 	bne	r6,r3,10009350 <_calloc_r+0xac>
100092fc:	80000415 	stw	zero,16(r16)
10009300:	80800604 	addi	r2,r16,24
10009304:	80000515 	stw	zero,20(r16)
10009308:	00000106 	br	10009310 <_calloc_r+0x6c>
1000930c:	8005883a 	mov	r2,r16
10009310:	10000015 	stw	zero,0(r2)
10009314:	10000115 	stw	zero,4(r2)
10009318:	10000215 	stw	zero,8(r2)
1000931c:	8005883a 	mov	r2,r16
10009320:	dfc00117 	ldw	ra,4(sp)
10009324:	dc000017 	ldw	r16,0(sp)
10009328:	dec00204 	addi	sp,sp,8
1000932c:	f800283a 	ret
10009330:	000b883a 	mov	r5,zero
10009334:	8009883a 	mov	r4,r16
10009338:	00062400 	call	10006240 <memset>
1000933c:	8005883a 	mov	r2,r16
10009340:	dfc00117 	ldw	ra,4(sp)
10009344:	dc000017 	ldw	r16,0(sp)
10009348:	dec00204 	addi	sp,sp,8
1000934c:	f800283a 	ret
10009350:	80800404 	addi	r2,r16,16
10009354:	003fee06 	br	10009310 <__alt_data_end+0xf8009310>
10009358:	80800204 	addi	r2,r16,8
1000935c:	003fec06 	br	10009310 <__alt_data_end+0xf8009310>
10009360:	0005883a 	mov	r2,zero
10009364:	003fee06 	br	10009320 <__alt_data_end+0xf8009320>

10009368 <_fclose_r>:
10009368:	28003926 	beq	r5,zero,10009450 <_fclose_r+0xe8>
1000936c:	defffc04 	addi	sp,sp,-16
10009370:	dc400115 	stw	r17,4(sp)
10009374:	dc000015 	stw	r16,0(sp)
10009378:	dfc00315 	stw	ra,12(sp)
1000937c:	dc800215 	stw	r18,8(sp)
10009380:	2023883a 	mov	r17,r4
10009384:	2821883a 	mov	r16,r5
10009388:	20000226 	beq	r4,zero,10009394 <_fclose_r+0x2c>
1000938c:	20800e17 	ldw	r2,56(r4)
10009390:	10002726 	beq	r2,zero,10009430 <_fclose_r+0xc8>
10009394:	8080030f 	ldh	r2,12(r16)
10009398:	1000071e 	bne	r2,zero,100093b8 <_fclose_r+0x50>
1000939c:	0005883a 	mov	r2,zero
100093a0:	dfc00317 	ldw	ra,12(sp)
100093a4:	dc800217 	ldw	r18,8(sp)
100093a8:	dc400117 	ldw	r17,4(sp)
100093ac:	dc000017 	ldw	r16,0(sp)
100093b0:	dec00404 	addi	sp,sp,16
100093b4:	f800283a 	ret
100093b8:	800b883a 	mov	r5,r16
100093bc:	8809883a 	mov	r4,r17
100093c0:	00043540 	call	10004354 <__sflush_r>
100093c4:	1025883a 	mov	r18,r2
100093c8:	80800b17 	ldw	r2,44(r16)
100093cc:	10000426 	beq	r2,zero,100093e0 <_fclose_r+0x78>
100093d0:	81400717 	ldw	r5,28(r16)
100093d4:	8809883a 	mov	r4,r17
100093d8:	103ee83a 	callr	r2
100093dc:	10001616 	blt	r2,zero,10009438 <_fclose_r+0xd0>
100093e0:	8080030b 	ldhu	r2,12(r16)
100093e4:	1080200c 	andi	r2,r2,128
100093e8:	1000151e 	bne	r2,zero,10009440 <_fclose_r+0xd8>
100093ec:	81400c17 	ldw	r5,48(r16)
100093f0:	28000526 	beq	r5,zero,10009408 <_fclose_r+0xa0>
100093f4:	80801004 	addi	r2,r16,64
100093f8:	28800226 	beq	r5,r2,10009404 <_fclose_r+0x9c>
100093fc:	8809883a 	mov	r4,r17
10009400:	0004ac00 	call	10004ac0 <_free_r>
10009404:	80000c15 	stw	zero,48(r16)
10009408:	81401117 	ldw	r5,68(r16)
1000940c:	28000326 	beq	r5,zero,1000941c <_fclose_r+0xb4>
10009410:	8809883a 	mov	r4,r17
10009414:	0004ac00 	call	10004ac0 <_free_r>
10009418:	80001115 	stw	zero,68(r16)
1000941c:	000495c0 	call	1000495c <__sfp_lock_acquire>
10009420:	8000030d 	sth	zero,12(r16)
10009424:	00049600 	call	10004960 <__sfp_lock_release>
10009428:	9005883a 	mov	r2,r18
1000942c:	003fdc06 	br	100093a0 <__alt_data_end+0xf80093a0>
10009430:	000494c0 	call	1000494c <__sinit>
10009434:	003fd706 	br	10009394 <__alt_data_end+0xf8009394>
10009438:	04bfffc4 	movi	r18,-1
1000943c:	003fe806 	br	100093e0 <__alt_data_end+0xf80093e0>
10009440:	81400417 	ldw	r5,16(r16)
10009444:	8809883a 	mov	r4,r17
10009448:	0004ac00 	call	10004ac0 <_free_r>
1000944c:	003fe706 	br	100093ec <__alt_data_end+0xf80093ec>
10009450:	0005883a 	mov	r2,zero
10009454:	f800283a 	ret

10009458 <fclose>:
10009458:	00840074 	movhi	r2,4097
1000945c:	1099da04 	addi	r2,r2,26472
10009460:	200b883a 	mov	r5,r4
10009464:	11000017 	ldw	r4,0(r2)
10009468:	00093681 	jmpi	10009368 <_fclose_r>

1000946c <__fputwc>:
1000946c:	defff804 	addi	sp,sp,-32
10009470:	dcc00415 	stw	r19,16(sp)
10009474:	dc800315 	stw	r18,12(sp)
10009478:	dc000115 	stw	r16,4(sp)
1000947c:	dfc00715 	stw	ra,28(sp)
10009480:	dd400615 	stw	r21,24(sp)
10009484:	dd000515 	stw	r20,20(sp)
10009488:	dc400215 	stw	r17,8(sp)
1000948c:	2027883a 	mov	r19,r4
10009490:	2825883a 	mov	r18,r5
10009494:	3021883a 	mov	r16,r6
10009498:	000549c0 	call	1000549c <__locale_mb_cur_max>
1000949c:	00c00044 	movi	r3,1
100094a0:	10c03e26 	beq	r2,r3,1000959c <__fputwc+0x130>
100094a4:	81c01704 	addi	r7,r16,92
100094a8:	900d883a 	mov	r6,r18
100094ac:	d80b883a 	mov	r5,sp
100094b0:	9809883a 	mov	r4,r19
100094b4:	000993c0 	call	1000993c <_wcrtomb_r>
100094b8:	1029883a 	mov	r20,r2
100094bc:	00bfffc4 	movi	r2,-1
100094c0:	a0802026 	beq	r20,r2,10009544 <__fputwc+0xd8>
100094c4:	d9400003 	ldbu	r5,0(sp)
100094c8:	a0001c26 	beq	r20,zero,1000953c <__fputwc+0xd0>
100094cc:	0023883a 	mov	r17,zero
100094d0:	05400284 	movi	r21,10
100094d4:	00000906 	br	100094fc <__fputwc+0x90>
100094d8:	80800017 	ldw	r2,0(r16)
100094dc:	11400005 	stb	r5,0(r2)
100094e0:	80c00017 	ldw	r3,0(r16)
100094e4:	18c00044 	addi	r3,r3,1
100094e8:	80c00015 	stw	r3,0(r16)
100094ec:	8c400044 	addi	r17,r17,1
100094f0:	dc45883a 	add	r2,sp,r17
100094f4:	8d00112e 	bgeu	r17,r20,1000953c <__fputwc+0xd0>
100094f8:	11400003 	ldbu	r5,0(r2)
100094fc:	80c00217 	ldw	r3,8(r16)
10009500:	18ffffc4 	addi	r3,r3,-1
10009504:	80c00215 	stw	r3,8(r16)
10009508:	183ff30e 	bge	r3,zero,100094d8 <__alt_data_end+0xf80094d8>
1000950c:	80800617 	ldw	r2,24(r16)
10009510:	18801916 	blt	r3,r2,10009578 <__fputwc+0x10c>
10009514:	80800017 	ldw	r2,0(r16)
10009518:	11400005 	stb	r5,0(r2)
1000951c:	80800017 	ldw	r2,0(r16)
10009520:	10c00003 	ldbu	r3,0(r2)
10009524:	10800044 	addi	r2,r2,1
10009528:	1d402326 	beq	r3,r21,100095b8 <__fputwc+0x14c>
1000952c:	80800015 	stw	r2,0(r16)
10009530:	8c400044 	addi	r17,r17,1
10009534:	dc45883a 	add	r2,sp,r17
10009538:	8d3fef36 	bltu	r17,r20,100094f8 <__alt_data_end+0xf80094f8>
1000953c:	9005883a 	mov	r2,r18
10009540:	00000406 	br	10009554 <__fputwc+0xe8>
10009544:	80c0030b 	ldhu	r3,12(r16)
10009548:	a005883a 	mov	r2,r20
1000954c:	18c01014 	ori	r3,r3,64
10009550:	80c0030d 	sth	r3,12(r16)
10009554:	dfc00717 	ldw	ra,28(sp)
10009558:	dd400617 	ldw	r21,24(sp)
1000955c:	dd000517 	ldw	r20,20(sp)
10009560:	dcc00417 	ldw	r19,16(sp)
10009564:	dc800317 	ldw	r18,12(sp)
10009568:	dc400217 	ldw	r17,8(sp)
1000956c:	dc000117 	ldw	r16,4(sp)
10009570:	dec00804 	addi	sp,sp,32
10009574:	f800283a 	ret
10009578:	800d883a 	mov	r6,r16
1000957c:	29403fcc 	andi	r5,r5,255
10009580:	9809883a 	mov	r4,r19
10009584:	00097e40 	call	100097e4 <__swbuf_r>
10009588:	10bfffe0 	cmpeqi	r2,r2,-1
1000958c:	10803fcc 	andi	r2,r2,255
10009590:	103fd626 	beq	r2,zero,100094ec <__alt_data_end+0xf80094ec>
10009594:	00bfffc4 	movi	r2,-1
10009598:	003fee06 	br	10009554 <__alt_data_end+0xf8009554>
1000959c:	90ffffc4 	addi	r3,r18,-1
100095a0:	01003f84 	movi	r4,254
100095a4:	20ffbf36 	bltu	r4,r3,100094a4 <__alt_data_end+0xf80094a4>
100095a8:	900b883a 	mov	r5,r18
100095ac:	dc800005 	stb	r18,0(sp)
100095b0:	1029883a 	mov	r20,r2
100095b4:	003fc506 	br	100094cc <__alt_data_end+0xf80094cc>
100095b8:	800d883a 	mov	r6,r16
100095bc:	a80b883a 	mov	r5,r21
100095c0:	9809883a 	mov	r4,r19
100095c4:	00097e40 	call	100097e4 <__swbuf_r>
100095c8:	10bfffe0 	cmpeqi	r2,r2,-1
100095cc:	003fef06 	br	1000958c <__alt_data_end+0xf800958c>

100095d0 <_fputwc_r>:
100095d0:	3080030b 	ldhu	r2,12(r6)
100095d4:	10c8000c 	andi	r3,r2,8192
100095d8:	1800051e 	bne	r3,zero,100095f0 <_fputwc_r+0x20>
100095dc:	30c01917 	ldw	r3,100(r6)
100095e0:	10880014 	ori	r2,r2,8192
100095e4:	3080030d 	sth	r2,12(r6)
100095e8:	18880014 	ori	r2,r3,8192
100095ec:	30801915 	stw	r2,100(r6)
100095f0:	000946c1 	jmpi	1000946c <__fputwc>

100095f4 <fputwc>:
100095f4:	00840074 	movhi	r2,4097
100095f8:	defffc04 	addi	sp,sp,-16
100095fc:	1099da04 	addi	r2,r2,26472
10009600:	dc000115 	stw	r16,4(sp)
10009604:	14000017 	ldw	r16,0(r2)
10009608:	dc400215 	stw	r17,8(sp)
1000960c:	dfc00315 	stw	ra,12(sp)
10009610:	2023883a 	mov	r17,r4
10009614:	80000226 	beq	r16,zero,10009620 <fputwc+0x2c>
10009618:	80800e17 	ldw	r2,56(r16)
1000961c:	10001026 	beq	r2,zero,10009660 <fputwc+0x6c>
10009620:	2880030b 	ldhu	r2,12(r5)
10009624:	10c8000c 	andi	r3,r2,8192
10009628:	1800051e 	bne	r3,zero,10009640 <fputwc+0x4c>
1000962c:	28c01917 	ldw	r3,100(r5)
10009630:	10880014 	ori	r2,r2,8192
10009634:	2880030d 	sth	r2,12(r5)
10009638:	18880014 	ori	r2,r3,8192
1000963c:	28801915 	stw	r2,100(r5)
10009640:	280d883a 	mov	r6,r5
10009644:	8009883a 	mov	r4,r16
10009648:	880b883a 	mov	r5,r17
1000964c:	dfc00317 	ldw	ra,12(sp)
10009650:	dc400217 	ldw	r17,8(sp)
10009654:	dc000117 	ldw	r16,4(sp)
10009658:	dec00404 	addi	sp,sp,16
1000965c:	000946c1 	jmpi	1000946c <__fputwc>
10009660:	8009883a 	mov	r4,r16
10009664:	d9400015 	stw	r5,0(sp)
10009668:	000494c0 	call	1000494c <__sinit>
1000966c:	d9400017 	ldw	r5,0(sp)
10009670:	003feb06 	br	10009620 <__alt_data_end+0xf8009620>

10009674 <_fstat_r>:
10009674:	defffd04 	addi	sp,sp,-12
10009678:	2805883a 	mov	r2,r5
1000967c:	dc000015 	stw	r16,0(sp)
10009680:	040400b4 	movhi	r16,4098
10009684:	dc400115 	stw	r17,4(sp)
10009688:	8420cd04 	addi	r16,r16,-31948
1000968c:	2023883a 	mov	r17,r4
10009690:	300b883a 	mov	r5,r6
10009694:	1009883a 	mov	r4,r2
10009698:	dfc00215 	stw	ra,8(sp)
1000969c:	80000015 	stw	zero,0(r16)
100096a0:	000cf640 	call	1000cf64 <fstat>
100096a4:	00ffffc4 	movi	r3,-1
100096a8:	10c00526 	beq	r2,r3,100096c0 <_fstat_r+0x4c>
100096ac:	dfc00217 	ldw	ra,8(sp)
100096b0:	dc400117 	ldw	r17,4(sp)
100096b4:	dc000017 	ldw	r16,0(sp)
100096b8:	dec00304 	addi	sp,sp,12
100096bc:	f800283a 	ret
100096c0:	80c00017 	ldw	r3,0(r16)
100096c4:	183ff926 	beq	r3,zero,100096ac <__alt_data_end+0xf80096ac>
100096c8:	88c00015 	stw	r3,0(r17)
100096cc:	003ff706 	br	100096ac <__alt_data_end+0xf80096ac>

100096d0 <_isatty_r>:
100096d0:	defffd04 	addi	sp,sp,-12
100096d4:	dc000015 	stw	r16,0(sp)
100096d8:	040400b4 	movhi	r16,4098
100096dc:	dc400115 	stw	r17,4(sp)
100096e0:	8420cd04 	addi	r16,r16,-31948
100096e4:	2023883a 	mov	r17,r4
100096e8:	2809883a 	mov	r4,r5
100096ec:	dfc00215 	stw	ra,8(sp)
100096f0:	80000015 	stw	zero,0(r16)
100096f4:	000d0500 	call	1000d050 <isatty>
100096f8:	00ffffc4 	movi	r3,-1
100096fc:	10c00526 	beq	r2,r3,10009714 <_isatty_r+0x44>
10009700:	dfc00217 	ldw	ra,8(sp)
10009704:	dc400117 	ldw	r17,4(sp)
10009708:	dc000017 	ldw	r16,0(sp)
1000970c:	dec00304 	addi	sp,sp,12
10009710:	f800283a 	ret
10009714:	80c00017 	ldw	r3,0(r16)
10009718:	183ff926 	beq	r3,zero,10009700 <__alt_data_end+0xf8009700>
1000971c:	88c00015 	stw	r3,0(r17)
10009720:	003ff706 	br	10009700 <__alt_data_end+0xf8009700>

10009724 <_lseek_r>:
10009724:	defffd04 	addi	sp,sp,-12
10009728:	2805883a 	mov	r2,r5
1000972c:	dc000015 	stw	r16,0(sp)
10009730:	040400b4 	movhi	r16,4098
10009734:	dc400115 	stw	r17,4(sp)
10009738:	300b883a 	mov	r5,r6
1000973c:	8420cd04 	addi	r16,r16,-31948
10009740:	2023883a 	mov	r17,r4
10009744:	380d883a 	mov	r6,r7
10009748:	1009883a 	mov	r4,r2
1000974c:	dfc00215 	stw	ra,8(sp)
10009750:	80000015 	stw	zero,0(r16)
10009754:	000d21c0 	call	1000d21c <lseek>
10009758:	00ffffc4 	movi	r3,-1
1000975c:	10c00526 	beq	r2,r3,10009774 <_lseek_r+0x50>
10009760:	dfc00217 	ldw	ra,8(sp)
10009764:	dc400117 	ldw	r17,4(sp)
10009768:	dc000017 	ldw	r16,0(sp)
1000976c:	dec00304 	addi	sp,sp,12
10009770:	f800283a 	ret
10009774:	80c00017 	ldw	r3,0(r16)
10009778:	183ff926 	beq	r3,zero,10009760 <__alt_data_end+0xf8009760>
1000977c:	88c00015 	stw	r3,0(r17)
10009780:	003ff706 	br	10009760 <__alt_data_end+0xf8009760>

10009784 <_read_r>:
10009784:	defffd04 	addi	sp,sp,-12
10009788:	2805883a 	mov	r2,r5
1000978c:	dc000015 	stw	r16,0(sp)
10009790:	040400b4 	movhi	r16,4098
10009794:	dc400115 	stw	r17,4(sp)
10009798:	300b883a 	mov	r5,r6
1000979c:	8420cd04 	addi	r16,r16,-31948
100097a0:	2023883a 	mov	r17,r4
100097a4:	380d883a 	mov	r6,r7
100097a8:	1009883a 	mov	r4,r2
100097ac:	dfc00215 	stw	ra,8(sp)
100097b0:	80000015 	stw	zero,0(r16)
100097b4:	000d3f00 	call	1000d3f0 <read>
100097b8:	00ffffc4 	movi	r3,-1
100097bc:	10c00526 	beq	r2,r3,100097d4 <_read_r+0x50>
100097c0:	dfc00217 	ldw	ra,8(sp)
100097c4:	dc400117 	ldw	r17,4(sp)
100097c8:	dc000017 	ldw	r16,0(sp)
100097cc:	dec00304 	addi	sp,sp,12
100097d0:	f800283a 	ret
100097d4:	80c00017 	ldw	r3,0(r16)
100097d8:	183ff926 	beq	r3,zero,100097c0 <__alt_data_end+0xf80097c0>
100097dc:	88c00015 	stw	r3,0(r17)
100097e0:	003ff706 	br	100097c0 <__alt_data_end+0xf80097c0>

100097e4 <__swbuf_r>:
100097e4:	defffb04 	addi	sp,sp,-20
100097e8:	dcc00315 	stw	r19,12(sp)
100097ec:	dc800215 	stw	r18,8(sp)
100097f0:	dc000015 	stw	r16,0(sp)
100097f4:	dfc00415 	stw	ra,16(sp)
100097f8:	dc400115 	stw	r17,4(sp)
100097fc:	2025883a 	mov	r18,r4
10009800:	2827883a 	mov	r19,r5
10009804:	3021883a 	mov	r16,r6
10009808:	20000226 	beq	r4,zero,10009814 <__swbuf_r+0x30>
1000980c:	20800e17 	ldw	r2,56(r4)
10009810:	10004226 	beq	r2,zero,1000991c <__swbuf_r+0x138>
10009814:	80800617 	ldw	r2,24(r16)
10009818:	8100030b 	ldhu	r4,12(r16)
1000981c:	80800215 	stw	r2,8(r16)
10009820:	2080020c 	andi	r2,r4,8
10009824:	10003626 	beq	r2,zero,10009900 <__swbuf_r+0x11c>
10009828:	80c00417 	ldw	r3,16(r16)
1000982c:	18003426 	beq	r3,zero,10009900 <__swbuf_r+0x11c>
10009830:	2088000c 	andi	r2,r4,8192
10009834:	9c403fcc 	andi	r17,r19,255
10009838:	10001a26 	beq	r2,zero,100098a4 <__swbuf_r+0xc0>
1000983c:	80800017 	ldw	r2,0(r16)
10009840:	81000517 	ldw	r4,20(r16)
10009844:	10c7c83a 	sub	r3,r2,r3
10009848:	1900200e 	bge	r3,r4,100098cc <__swbuf_r+0xe8>
1000984c:	18c00044 	addi	r3,r3,1
10009850:	81000217 	ldw	r4,8(r16)
10009854:	11400044 	addi	r5,r2,1
10009858:	81400015 	stw	r5,0(r16)
1000985c:	213fffc4 	addi	r4,r4,-1
10009860:	81000215 	stw	r4,8(r16)
10009864:	14c00005 	stb	r19,0(r2)
10009868:	80800517 	ldw	r2,20(r16)
1000986c:	10c01e26 	beq	r2,r3,100098e8 <__swbuf_r+0x104>
10009870:	8080030b 	ldhu	r2,12(r16)
10009874:	1080004c 	andi	r2,r2,1
10009878:	10000226 	beq	r2,zero,10009884 <__swbuf_r+0xa0>
1000987c:	00800284 	movi	r2,10
10009880:	88801926 	beq	r17,r2,100098e8 <__swbuf_r+0x104>
10009884:	8805883a 	mov	r2,r17
10009888:	dfc00417 	ldw	ra,16(sp)
1000988c:	dcc00317 	ldw	r19,12(sp)
10009890:	dc800217 	ldw	r18,8(sp)
10009894:	dc400117 	ldw	r17,4(sp)
10009898:	dc000017 	ldw	r16,0(sp)
1000989c:	dec00504 	addi	sp,sp,20
100098a0:	f800283a 	ret
100098a4:	81401917 	ldw	r5,100(r16)
100098a8:	00b7ffc4 	movi	r2,-8193
100098ac:	21080014 	ori	r4,r4,8192
100098b0:	2884703a 	and	r2,r5,r2
100098b4:	80801915 	stw	r2,100(r16)
100098b8:	80800017 	ldw	r2,0(r16)
100098bc:	8100030d 	sth	r4,12(r16)
100098c0:	81000517 	ldw	r4,20(r16)
100098c4:	10c7c83a 	sub	r3,r2,r3
100098c8:	193fe016 	blt	r3,r4,1000984c <__alt_data_end+0xf800984c>
100098cc:	800b883a 	mov	r5,r16
100098d0:	9009883a 	mov	r4,r18
100098d4:	00045700 	call	10004570 <_fflush_r>
100098d8:	1000071e 	bne	r2,zero,100098f8 <__swbuf_r+0x114>
100098dc:	80800017 	ldw	r2,0(r16)
100098e0:	00c00044 	movi	r3,1
100098e4:	003fda06 	br	10009850 <__alt_data_end+0xf8009850>
100098e8:	800b883a 	mov	r5,r16
100098ec:	9009883a 	mov	r4,r18
100098f0:	00045700 	call	10004570 <_fflush_r>
100098f4:	103fe326 	beq	r2,zero,10009884 <__alt_data_end+0xf8009884>
100098f8:	00bfffc4 	movi	r2,-1
100098fc:	003fe206 	br	10009888 <__alt_data_end+0xf8009888>
10009900:	800b883a 	mov	r5,r16
10009904:	9009883a 	mov	r4,r18
10009908:	00029780 	call	10002978 <__swsetup_r>
1000990c:	103ffa1e 	bne	r2,zero,100098f8 <__alt_data_end+0xf80098f8>
10009910:	8100030b 	ldhu	r4,12(r16)
10009914:	80c00417 	ldw	r3,16(r16)
10009918:	003fc506 	br	10009830 <__alt_data_end+0xf8009830>
1000991c:	000494c0 	call	1000494c <__sinit>
10009920:	003fbc06 	br	10009814 <__alt_data_end+0xf8009814>

10009924 <__swbuf>:
10009924:	00840074 	movhi	r2,4097
10009928:	1099da04 	addi	r2,r2,26472
1000992c:	280d883a 	mov	r6,r5
10009930:	200b883a 	mov	r5,r4
10009934:	11000017 	ldw	r4,0(r2)
10009938:	00097e41 	jmpi	100097e4 <__swbuf_r>

1000993c <_wcrtomb_r>:
1000993c:	defff604 	addi	sp,sp,-40
10009940:	00840074 	movhi	r2,4097
10009944:	dc800815 	stw	r18,32(sp)
10009948:	dc400715 	stw	r17,28(sp)
1000994c:	dc000615 	stw	r16,24(sp)
10009950:	1099de04 	addi	r2,r2,26488
10009954:	dfc00915 	stw	ra,36(sp)
10009958:	2021883a 	mov	r16,r4
1000995c:	3823883a 	mov	r17,r7
10009960:	14800017 	ldw	r18,0(r2)
10009964:	28001426 	beq	r5,zero,100099b8 <_wcrtomb_r+0x7c>
10009968:	d9400415 	stw	r5,16(sp)
1000996c:	d9800515 	stw	r6,20(sp)
10009970:	00054900 	call	10005490 <__locale_charset>
10009974:	d9800517 	ldw	r6,20(sp)
10009978:	d9400417 	ldw	r5,16(sp)
1000997c:	100f883a 	mov	r7,r2
10009980:	dc400015 	stw	r17,0(sp)
10009984:	8009883a 	mov	r4,r16
10009988:	903ee83a 	callr	r18
1000998c:	00ffffc4 	movi	r3,-1
10009990:	10c0031e 	bne	r2,r3,100099a0 <_wcrtomb_r+0x64>
10009994:	88000015 	stw	zero,0(r17)
10009998:	00c02284 	movi	r3,138
1000999c:	80c00015 	stw	r3,0(r16)
100099a0:	dfc00917 	ldw	ra,36(sp)
100099a4:	dc800817 	ldw	r18,32(sp)
100099a8:	dc400717 	ldw	r17,28(sp)
100099ac:	dc000617 	ldw	r16,24(sp)
100099b0:	dec00a04 	addi	sp,sp,40
100099b4:	f800283a 	ret
100099b8:	00054900 	call	10005490 <__locale_charset>
100099bc:	100f883a 	mov	r7,r2
100099c0:	dc400015 	stw	r17,0(sp)
100099c4:	000d883a 	mov	r6,zero
100099c8:	d9400104 	addi	r5,sp,4
100099cc:	8009883a 	mov	r4,r16
100099d0:	903ee83a 	callr	r18
100099d4:	003fed06 	br	1000998c <__alt_data_end+0xf800998c>

100099d8 <wcrtomb>:
100099d8:	defff604 	addi	sp,sp,-40
100099dc:	00840074 	movhi	r2,4097
100099e0:	dc800615 	stw	r18,24(sp)
100099e4:	dc400515 	stw	r17,20(sp)
100099e8:	1099da04 	addi	r2,r2,26472
100099ec:	dfc00915 	stw	ra,36(sp)
100099f0:	dd000815 	stw	r20,32(sp)
100099f4:	dcc00715 	stw	r19,28(sp)
100099f8:	dc000415 	stw	r16,16(sp)
100099fc:	3025883a 	mov	r18,r6
10009a00:	14400017 	ldw	r17,0(r2)
10009a04:	20001926 	beq	r4,zero,10009a6c <wcrtomb+0x94>
10009a08:	00840074 	movhi	r2,4097
10009a0c:	1099de04 	addi	r2,r2,26488
10009a10:	15000017 	ldw	r20,0(r2)
10009a14:	2021883a 	mov	r16,r4
10009a18:	2827883a 	mov	r19,r5
10009a1c:	00054900 	call	10005490 <__locale_charset>
10009a20:	100f883a 	mov	r7,r2
10009a24:	dc800015 	stw	r18,0(sp)
10009a28:	980d883a 	mov	r6,r19
10009a2c:	800b883a 	mov	r5,r16
10009a30:	8809883a 	mov	r4,r17
10009a34:	a03ee83a 	callr	r20
10009a38:	00ffffc4 	movi	r3,-1
10009a3c:	10c0031e 	bne	r2,r3,10009a4c <wcrtomb+0x74>
10009a40:	90000015 	stw	zero,0(r18)
10009a44:	00c02284 	movi	r3,138
10009a48:	88c00015 	stw	r3,0(r17)
10009a4c:	dfc00917 	ldw	ra,36(sp)
10009a50:	dd000817 	ldw	r20,32(sp)
10009a54:	dcc00717 	ldw	r19,28(sp)
10009a58:	dc800617 	ldw	r18,24(sp)
10009a5c:	dc400517 	ldw	r17,20(sp)
10009a60:	dc000417 	ldw	r16,16(sp)
10009a64:	dec00a04 	addi	sp,sp,40
10009a68:	f800283a 	ret
10009a6c:	00840074 	movhi	r2,4097
10009a70:	1099de04 	addi	r2,r2,26488
10009a74:	14000017 	ldw	r16,0(r2)
10009a78:	00054900 	call	10005490 <__locale_charset>
10009a7c:	100f883a 	mov	r7,r2
10009a80:	dc800015 	stw	r18,0(sp)
10009a84:	000d883a 	mov	r6,zero
10009a88:	d9400104 	addi	r5,sp,4
10009a8c:	8809883a 	mov	r4,r17
10009a90:	803ee83a 	callr	r16
10009a94:	003fe806 	br	10009a38 <__alt_data_end+0xf8009a38>

10009a98 <__ascii_wctomb>:
10009a98:	28000526 	beq	r5,zero,10009ab0 <__ascii_wctomb+0x18>
10009a9c:	00803fc4 	movi	r2,255
10009aa0:	11800536 	bltu	r2,r6,10009ab8 <__ascii_wctomb+0x20>
10009aa4:	29800005 	stb	r6,0(r5)
10009aa8:	00800044 	movi	r2,1
10009aac:	f800283a 	ret
10009ab0:	0005883a 	mov	r2,zero
10009ab4:	f800283a 	ret
10009ab8:	00802284 	movi	r2,138
10009abc:	20800015 	stw	r2,0(r4)
10009ac0:	00bfffc4 	movi	r2,-1
10009ac4:	f800283a 	ret

10009ac8 <_wctomb_r>:
10009ac8:	00840074 	movhi	r2,4097
10009acc:	defff904 	addi	sp,sp,-28
10009ad0:	1099de04 	addi	r2,r2,26488
10009ad4:	dfc00615 	stw	ra,24(sp)
10009ad8:	dc400515 	stw	r17,20(sp)
10009adc:	dc000415 	stw	r16,16(sp)
10009ae0:	3823883a 	mov	r17,r7
10009ae4:	14000017 	ldw	r16,0(r2)
10009ae8:	d9000115 	stw	r4,4(sp)
10009aec:	d9400215 	stw	r5,8(sp)
10009af0:	d9800315 	stw	r6,12(sp)
10009af4:	00054900 	call	10005490 <__locale_charset>
10009af8:	d9800317 	ldw	r6,12(sp)
10009afc:	d9400217 	ldw	r5,8(sp)
10009b00:	d9000117 	ldw	r4,4(sp)
10009b04:	100f883a 	mov	r7,r2
10009b08:	dc400015 	stw	r17,0(sp)
10009b0c:	803ee83a 	callr	r16
10009b10:	dfc00617 	ldw	ra,24(sp)
10009b14:	dc400517 	ldw	r17,20(sp)
10009b18:	dc000417 	ldw	r16,16(sp)
10009b1c:	dec00704 	addi	sp,sp,28
10009b20:	f800283a 	ret

10009b24 <__udivdi3>:
10009b24:	defff504 	addi	sp,sp,-44
10009b28:	dcc00415 	stw	r19,16(sp)
10009b2c:	dc000115 	stw	r16,4(sp)
10009b30:	dfc00a15 	stw	ra,40(sp)
10009b34:	df000915 	stw	fp,36(sp)
10009b38:	ddc00815 	stw	r23,32(sp)
10009b3c:	dd800715 	stw	r22,28(sp)
10009b40:	dd400615 	stw	r21,24(sp)
10009b44:	dd000515 	stw	r20,20(sp)
10009b48:	dc800315 	stw	r18,12(sp)
10009b4c:	dc400215 	stw	r17,8(sp)
10009b50:	2027883a 	mov	r19,r4
10009b54:	2821883a 	mov	r16,r5
10009b58:	3800411e 	bne	r7,zero,10009c60 <__udivdi3+0x13c>
10009b5c:	3023883a 	mov	r17,r6
10009b60:	2025883a 	mov	r18,r4
10009b64:	2980522e 	bgeu	r5,r6,10009cb0 <__udivdi3+0x18c>
10009b68:	00bfffd4 	movui	r2,65535
10009b6c:	282d883a 	mov	r22,r5
10009b70:	1180a836 	bltu	r2,r6,10009e14 <__udivdi3+0x2f0>
10009b74:	00803fc4 	movi	r2,255
10009b78:	1185803a 	cmpltu	r2,r2,r6
10009b7c:	100490fa 	slli	r2,r2,3
10009b80:	3086d83a 	srl	r3,r6,r2
10009b84:	01040074 	movhi	r4,4097
10009b88:	2112b304 	addi	r4,r4,19148
10009b8c:	20c7883a 	add	r3,r4,r3
10009b90:	18c00003 	ldbu	r3,0(r3)
10009b94:	1885883a 	add	r2,r3,r2
10009b98:	00c00804 	movi	r3,32
10009b9c:	1887c83a 	sub	r3,r3,r2
10009ba0:	18000526 	beq	r3,zero,10009bb8 <__udivdi3+0x94>
10009ba4:	80e0983a 	sll	r16,r16,r3
10009ba8:	9884d83a 	srl	r2,r19,r2
10009bac:	30e2983a 	sll	r17,r6,r3
10009bb0:	98e4983a 	sll	r18,r19,r3
10009bb4:	142cb03a 	or	r22,r2,r16
10009bb8:	882ad43a 	srli	r21,r17,16
10009bbc:	b009883a 	mov	r4,r22
10009bc0:	8d3fffcc 	andi	r20,r17,65535
10009bc4:	a80b883a 	mov	r5,r21
10009bc8:	000a7300 	call	1000a730 <__umodsi3>
10009bcc:	b009883a 	mov	r4,r22
10009bd0:	a80b883a 	mov	r5,r21
10009bd4:	1027883a 	mov	r19,r2
10009bd8:	000a6cc0 	call	1000a6cc <__udivsi3>
10009bdc:	102d883a 	mov	r22,r2
10009be0:	9826943a 	slli	r19,r19,16
10009be4:	9004d43a 	srli	r2,r18,16
10009be8:	a5a1383a 	mul	r16,r20,r22
10009bec:	14c4b03a 	or	r2,r2,r19
10009bf0:	1400052e 	bgeu	r2,r16,10009c08 <__udivdi3+0xe4>
10009bf4:	1445883a 	add	r2,r2,r17
10009bf8:	b0ffffc4 	addi	r3,r22,-1
10009bfc:	14400136 	bltu	r2,r17,10009c04 <__udivdi3+0xe0>
10009c00:	14012336 	bltu	r2,r16,1000a090 <__udivdi3+0x56c>
10009c04:	182d883a 	mov	r22,r3
10009c08:	1421c83a 	sub	r16,r2,r16
10009c0c:	a80b883a 	mov	r5,r21
10009c10:	8009883a 	mov	r4,r16
10009c14:	000a7300 	call	1000a730 <__umodsi3>
10009c18:	1027883a 	mov	r19,r2
10009c1c:	a80b883a 	mov	r5,r21
10009c20:	8009883a 	mov	r4,r16
10009c24:	000a6cc0 	call	1000a6cc <__udivsi3>
10009c28:	9826943a 	slli	r19,r19,16
10009c2c:	a0a9383a 	mul	r20,r20,r2
10009c30:	94bfffcc 	andi	r18,r18,65535
10009c34:	94e4b03a 	or	r18,r18,r19
10009c38:	9500052e 	bgeu	r18,r20,10009c50 <__udivdi3+0x12c>
10009c3c:	8ca5883a 	add	r18,r17,r18
10009c40:	10ffffc4 	addi	r3,r2,-1
10009c44:	9440f136 	bltu	r18,r17,1000a00c <__udivdi3+0x4e8>
10009c48:	9500f02e 	bgeu	r18,r20,1000a00c <__udivdi3+0x4e8>
10009c4c:	10bfff84 	addi	r2,r2,-2
10009c50:	b00c943a 	slli	r6,r22,16
10009c54:	0007883a 	mov	r3,zero
10009c58:	3084b03a 	or	r2,r6,r2
10009c5c:	00005906 	br	10009dc4 <__udivdi3+0x2a0>
10009c60:	29c05636 	bltu	r5,r7,10009dbc <__udivdi3+0x298>
10009c64:	00bfffd4 	movui	r2,65535
10009c68:	11c0622e 	bgeu	r2,r7,10009df4 <__udivdi3+0x2d0>
10009c6c:	00804034 	movhi	r2,256
10009c70:	10bfffc4 	addi	r2,r2,-1
10009c74:	11c0ee36 	bltu	r2,r7,1000a030 <__udivdi3+0x50c>
10009c78:	00800404 	movi	r2,16
10009c7c:	3886d83a 	srl	r3,r7,r2
10009c80:	01040074 	movhi	r4,4097
10009c84:	2112b304 	addi	r4,r4,19148
10009c88:	20c7883a 	add	r3,r4,r3
10009c8c:	18c00003 	ldbu	r3,0(r3)
10009c90:	05400804 	movi	r21,32
10009c94:	1885883a 	add	r2,r3,r2
10009c98:	a8abc83a 	sub	r21,r21,r2
10009c9c:	a800621e 	bne	r21,zero,10009e28 <__udivdi3+0x304>
10009ca0:	3c00e936 	bltu	r7,r16,1000a048 <__udivdi3+0x524>
10009ca4:	9985403a 	cmpgeu	r2,r19,r6
10009ca8:	0007883a 	mov	r3,zero
10009cac:	00004506 	br	10009dc4 <__udivdi3+0x2a0>
10009cb0:	3000041e 	bne	r6,zero,10009cc4 <__udivdi3+0x1a0>
10009cb4:	000b883a 	mov	r5,zero
10009cb8:	01000044 	movi	r4,1
10009cbc:	000a6cc0 	call	1000a6cc <__udivsi3>
10009cc0:	1023883a 	mov	r17,r2
10009cc4:	00bfffd4 	movui	r2,65535
10009cc8:	14404e2e 	bgeu	r2,r17,10009e04 <__udivdi3+0x2e0>
10009ccc:	00804034 	movhi	r2,256
10009cd0:	10bfffc4 	addi	r2,r2,-1
10009cd4:	1440d836 	bltu	r2,r17,1000a038 <__udivdi3+0x514>
10009cd8:	00800404 	movi	r2,16
10009cdc:	8886d83a 	srl	r3,r17,r2
10009ce0:	01040074 	movhi	r4,4097
10009ce4:	2112b304 	addi	r4,r4,19148
10009ce8:	20c7883a 	add	r3,r4,r3
10009cec:	18c00003 	ldbu	r3,0(r3)
10009cf0:	1885883a 	add	r2,r3,r2
10009cf4:	00c00804 	movi	r3,32
10009cf8:	1887c83a 	sub	r3,r3,r2
10009cfc:	18008f1e 	bne	r3,zero,10009f3c <__udivdi3+0x418>
10009d00:	882ad43a 	srli	r21,r17,16
10009d04:	8461c83a 	sub	r16,r16,r17
10009d08:	8d3fffcc 	andi	r20,r17,65535
10009d0c:	00c00044 	movi	r3,1
10009d10:	8009883a 	mov	r4,r16
10009d14:	a80b883a 	mov	r5,r21
10009d18:	d8c00015 	stw	r3,0(sp)
10009d1c:	000a7300 	call	1000a730 <__umodsi3>
10009d20:	8009883a 	mov	r4,r16
10009d24:	a80b883a 	mov	r5,r21
10009d28:	1027883a 	mov	r19,r2
10009d2c:	000a6cc0 	call	1000a6cc <__udivsi3>
10009d30:	9826943a 	slli	r19,r19,16
10009d34:	9008d43a 	srli	r4,r18,16
10009d38:	1521383a 	mul	r16,r2,r20
10009d3c:	102d883a 	mov	r22,r2
10009d40:	24c8b03a 	or	r4,r4,r19
10009d44:	d8c00017 	ldw	r3,0(sp)
10009d48:	2400052e 	bgeu	r4,r16,10009d60 <__udivdi3+0x23c>
10009d4c:	2449883a 	add	r4,r4,r17
10009d50:	b0bfffc4 	addi	r2,r22,-1
10009d54:	24400136 	bltu	r4,r17,10009d5c <__udivdi3+0x238>
10009d58:	2400ca36 	bltu	r4,r16,1000a084 <__udivdi3+0x560>
10009d5c:	102d883a 	mov	r22,r2
10009d60:	2421c83a 	sub	r16,r4,r16
10009d64:	a80b883a 	mov	r5,r21
10009d68:	8009883a 	mov	r4,r16
10009d6c:	d8c00015 	stw	r3,0(sp)
10009d70:	000a7300 	call	1000a730 <__umodsi3>
10009d74:	1027883a 	mov	r19,r2
10009d78:	a80b883a 	mov	r5,r21
10009d7c:	8009883a 	mov	r4,r16
10009d80:	000a6cc0 	call	1000a6cc <__udivsi3>
10009d84:	9826943a 	slli	r19,r19,16
10009d88:	1529383a 	mul	r20,r2,r20
10009d8c:	94bfffcc 	andi	r18,r18,65535
10009d90:	94e4b03a 	or	r18,r18,r19
10009d94:	d8c00017 	ldw	r3,0(sp)
10009d98:	9500052e 	bgeu	r18,r20,10009db0 <__udivdi3+0x28c>
10009d9c:	8ca5883a 	add	r18,r17,r18
10009da0:	113fffc4 	addi	r4,r2,-1
10009da4:	94409736 	bltu	r18,r17,1000a004 <__udivdi3+0x4e0>
10009da8:	9500962e 	bgeu	r18,r20,1000a004 <__udivdi3+0x4e0>
10009dac:	10bfff84 	addi	r2,r2,-2
10009db0:	b00c943a 	slli	r6,r22,16
10009db4:	3084b03a 	or	r2,r6,r2
10009db8:	00000206 	br	10009dc4 <__udivdi3+0x2a0>
10009dbc:	0007883a 	mov	r3,zero
10009dc0:	0005883a 	mov	r2,zero
10009dc4:	dfc00a17 	ldw	ra,40(sp)
10009dc8:	df000917 	ldw	fp,36(sp)
10009dcc:	ddc00817 	ldw	r23,32(sp)
10009dd0:	dd800717 	ldw	r22,28(sp)
10009dd4:	dd400617 	ldw	r21,24(sp)
10009dd8:	dd000517 	ldw	r20,20(sp)
10009ddc:	dcc00417 	ldw	r19,16(sp)
10009de0:	dc800317 	ldw	r18,12(sp)
10009de4:	dc400217 	ldw	r17,8(sp)
10009de8:	dc000117 	ldw	r16,4(sp)
10009dec:	dec00b04 	addi	sp,sp,44
10009df0:	f800283a 	ret
10009df4:	00803fc4 	movi	r2,255
10009df8:	11c5803a 	cmpltu	r2,r2,r7
10009dfc:	100490fa 	slli	r2,r2,3
10009e00:	003f9e06 	br	10009c7c <__alt_data_end+0xf8009c7c>
10009e04:	00803fc4 	movi	r2,255
10009e08:	1445803a 	cmpltu	r2,r2,r17
10009e0c:	100490fa 	slli	r2,r2,3
10009e10:	003fb206 	br	10009cdc <__alt_data_end+0xf8009cdc>
10009e14:	00804034 	movhi	r2,256
10009e18:	10bfffc4 	addi	r2,r2,-1
10009e1c:	11808836 	bltu	r2,r6,1000a040 <__udivdi3+0x51c>
10009e20:	00800404 	movi	r2,16
10009e24:	003f5606 	br	10009b80 <__alt_data_end+0xf8009b80>
10009e28:	30aed83a 	srl	r23,r6,r2
10009e2c:	3d4e983a 	sll	r7,r7,r21
10009e30:	80acd83a 	srl	r22,r16,r2
10009e34:	9884d83a 	srl	r2,r19,r2
10009e38:	3deeb03a 	or	r23,r7,r23
10009e3c:	b824d43a 	srli	r18,r23,16
10009e40:	8560983a 	sll	r16,r16,r21
10009e44:	b009883a 	mov	r4,r22
10009e48:	900b883a 	mov	r5,r18
10009e4c:	3568983a 	sll	r20,r6,r21
10009e50:	1420b03a 	or	r16,r2,r16
10009e54:	000a7300 	call	1000a730 <__umodsi3>
10009e58:	b009883a 	mov	r4,r22
10009e5c:	900b883a 	mov	r5,r18
10009e60:	1023883a 	mov	r17,r2
10009e64:	000a6cc0 	call	1000a6cc <__udivsi3>
10009e68:	8808943a 	slli	r4,r17,16
10009e6c:	bf3fffcc 	andi	fp,r23,65535
10009e70:	8006d43a 	srli	r3,r16,16
10009e74:	e0a3383a 	mul	r17,fp,r2
10009e78:	100d883a 	mov	r6,r2
10009e7c:	1906b03a 	or	r3,r3,r4
10009e80:	1c40042e 	bgeu	r3,r17,10009e94 <__udivdi3+0x370>
10009e84:	1dc7883a 	add	r3,r3,r23
10009e88:	10bfffc4 	addi	r2,r2,-1
10009e8c:	1dc0752e 	bgeu	r3,r23,1000a064 <__udivdi3+0x540>
10009e90:	100d883a 	mov	r6,r2
10009e94:	1c63c83a 	sub	r17,r3,r17
10009e98:	900b883a 	mov	r5,r18
10009e9c:	8809883a 	mov	r4,r17
10009ea0:	d9800015 	stw	r6,0(sp)
10009ea4:	000a7300 	call	1000a730 <__umodsi3>
10009ea8:	102d883a 	mov	r22,r2
10009eac:	8809883a 	mov	r4,r17
10009eb0:	900b883a 	mov	r5,r18
10009eb4:	000a6cc0 	call	1000a6cc <__udivsi3>
10009eb8:	b02c943a 	slli	r22,r22,16
10009ebc:	e089383a 	mul	r4,fp,r2
10009ec0:	843fffcc 	andi	r16,r16,65535
10009ec4:	85a0b03a 	or	r16,r16,r22
10009ec8:	d9800017 	ldw	r6,0(sp)
10009ecc:	8100042e 	bgeu	r16,r4,10009ee0 <__udivdi3+0x3bc>
10009ed0:	85e1883a 	add	r16,r16,r23
10009ed4:	10ffffc4 	addi	r3,r2,-1
10009ed8:	85c05e2e 	bgeu	r16,r23,1000a054 <__udivdi3+0x530>
10009edc:	1805883a 	mov	r2,r3
10009ee0:	300c943a 	slli	r6,r6,16
10009ee4:	a17fffcc 	andi	r5,r20,65535
10009ee8:	a028d43a 	srli	r20,r20,16
10009eec:	3084b03a 	or	r2,r6,r2
10009ef0:	10ffffcc 	andi	r3,r2,65535
10009ef4:	100cd43a 	srli	r6,r2,16
10009ef8:	194f383a 	mul	r7,r3,r5
10009efc:	1d07383a 	mul	r3,r3,r20
10009f00:	314b383a 	mul	r5,r6,r5
10009f04:	3810d43a 	srli	r8,r7,16
10009f08:	8121c83a 	sub	r16,r16,r4
10009f0c:	1947883a 	add	r3,r3,r5
10009f10:	40c7883a 	add	r3,r8,r3
10009f14:	350d383a 	mul	r6,r6,r20
10009f18:	1940022e 	bgeu	r3,r5,10009f24 <__udivdi3+0x400>
10009f1c:	01000074 	movhi	r4,1
10009f20:	310d883a 	add	r6,r6,r4
10009f24:	1828d43a 	srli	r20,r3,16
10009f28:	a18d883a 	add	r6,r20,r6
10009f2c:	81803e36 	bltu	r16,r6,1000a028 <__udivdi3+0x504>
10009f30:	81803826 	beq	r16,r6,1000a014 <__udivdi3+0x4f0>
10009f34:	0007883a 	mov	r3,zero
10009f38:	003fa206 	br	10009dc4 <__alt_data_end+0xf8009dc4>
10009f3c:	88e2983a 	sll	r17,r17,r3
10009f40:	80a8d83a 	srl	r20,r16,r2
10009f44:	80e0983a 	sll	r16,r16,r3
10009f48:	882ad43a 	srli	r21,r17,16
10009f4c:	9884d83a 	srl	r2,r19,r2
10009f50:	a009883a 	mov	r4,r20
10009f54:	a80b883a 	mov	r5,r21
10009f58:	142eb03a 	or	r23,r2,r16
10009f5c:	98e4983a 	sll	r18,r19,r3
10009f60:	000a7300 	call	1000a730 <__umodsi3>
10009f64:	a009883a 	mov	r4,r20
10009f68:	a80b883a 	mov	r5,r21
10009f6c:	1021883a 	mov	r16,r2
10009f70:	000a6cc0 	call	1000a6cc <__udivsi3>
10009f74:	1039883a 	mov	fp,r2
10009f78:	8d3fffcc 	andi	r20,r17,65535
10009f7c:	8020943a 	slli	r16,r16,16
10009f80:	b804d43a 	srli	r2,r23,16
10009f84:	a72d383a 	mul	r22,r20,fp
10009f88:	1404b03a 	or	r2,r2,r16
10009f8c:	1580062e 	bgeu	r2,r22,10009fa8 <__udivdi3+0x484>
10009f90:	1445883a 	add	r2,r2,r17
10009f94:	e0ffffc4 	addi	r3,fp,-1
10009f98:	14403836 	bltu	r2,r17,1000a07c <__udivdi3+0x558>
10009f9c:	1580372e 	bgeu	r2,r22,1000a07c <__udivdi3+0x558>
10009fa0:	e73fff84 	addi	fp,fp,-2
10009fa4:	1445883a 	add	r2,r2,r17
10009fa8:	15adc83a 	sub	r22,r2,r22
10009fac:	a80b883a 	mov	r5,r21
10009fb0:	b009883a 	mov	r4,r22
10009fb4:	000a7300 	call	1000a730 <__umodsi3>
10009fb8:	1027883a 	mov	r19,r2
10009fbc:	b009883a 	mov	r4,r22
10009fc0:	a80b883a 	mov	r5,r21
10009fc4:	000a6cc0 	call	1000a6cc <__udivsi3>
10009fc8:	9826943a 	slli	r19,r19,16
10009fcc:	a0a1383a 	mul	r16,r20,r2
10009fd0:	b93fffcc 	andi	r4,r23,65535
10009fd4:	24c8b03a 	or	r4,r4,r19
10009fd8:	2400062e 	bgeu	r4,r16,10009ff4 <__udivdi3+0x4d0>
10009fdc:	2449883a 	add	r4,r4,r17
10009fe0:	10ffffc4 	addi	r3,r2,-1
10009fe4:	24402336 	bltu	r4,r17,1000a074 <__udivdi3+0x550>
10009fe8:	2400222e 	bgeu	r4,r16,1000a074 <__udivdi3+0x550>
10009fec:	10bfff84 	addi	r2,r2,-2
10009ff0:	2449883a 	add	r4,r4,r17
10009ff4:	e038943a 	slli	fp,fp,16
10009ff8:	2421c83a 	sub	r16,r4,r16
10009ffc:	e086b03a 	or	r3,fp,r2
1000a000:	003f4306 	br	10009d10 <__alt_data_end+0xf8009d10>
1000a004:	2005883a 	mov	r2,r4
1000a008:	003f6906 	br	10009db0 <__alt_data_end+0xf8009db0>
1000a00c:	1805883a 	mov	r2,r3
1000a010:	003f0f06 	br	10009c50 <__alt_data_end+0xf8009c50>
1000a014:	1806943a 	slli	r3,r3,16
1000a018:	9d66983a 	sll	r19,r19,r21
1000a01c:	39ffffcc 	andi	r7,r7,65535
1000a020:	19c7883a 	add	r3,r3,r7
1000a024:	98ffc32e 	bgeu	r19,r3,10009f34 <__alt_data_end+0xf8009f34>
1000a028:	10bfffc4 	addi	r2,r2,-1
1000a02c:	003fc106 	br	10009f34 <__alt_data_end+0xf8009f34>
1000a030:	00800604 	movi	r2,24
1000a034:	003f1106 	br	10009c7c <__alt_data_end+0xf8009c7c>
1000a038:	00800604 	movi	r2,24
1000a03c:	003f2706 	br	10009cdc <__alt_data_end+0xf8009cdc>
1000a040:	00800604 	movi	r2,24
1000a044:	003ece06 	br	10009b80 <__alt_data_end+0xf8009b80>
1000a048:	0007883a 	mov	r3,zero
1000a04c:	00800044 	movi	r2,1
1000a050:	003f5c06 	br	10009dc4 <__alt_data_end+0xf8009dc4>
1000a054:	813fa12e 	bgeu	r16,r4,10009edc <__alt_data_end+0xf8009edc>
1000a058:	10bfff84 	addi	r2,r2,-2
1000a05c:	85e1883a 	add	r16,r16,r23
1000a060:	003f9f06 	br	10009ee0 <__alt_data_end+0xf8009ee0>
1000a064:	1c7f8a2e 	bgeu	r3,r17,10009e90 <__alt_data_end+0xf8009e90>
1000a068:	31bfff84 	addi	r6,r6,-2
1000a06c:	1dc7883a 	add	r3,r3,r23
1000a070:	003f8806 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a074:	1805883a 	mov	r2,r3
1000a078:	003fde06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a07c:	1839883a 	mov	fp,r3
1000a080:	003fc906 	br	10009fa8 <__alt_data_end+0xf8009fa8>
1000a084:	b5bfff84 	addi	r22,r22,-2
1000a088:	2449883a 	add	r4,r4,r17
1000a08c:	003f3406 	br	10009d60 <__alt_data_end+0xf8009d60>
1000a090:	b5bfff84 	addi	r22,r22,-2
1000a094:	1445883a 	add	r2,r2,r17
1000a098:	003edb06 	br	10009c08 <__alt_data_end+0xf8009c08>

1000a09c <__umoddi3>:
1000a09c:	defff404 	addi	sp,sp,-48
1000a0a0:	df000a15 	stw	fp,40(sp)
1000a0a4:	dc400315 	stw	r17,12(sp)
1000a0a8:	dc000215 	stw	r16,8(sp)
1000a0ac:	dfc00b15 	stw	ra,44(sp)
1000a0b0:	ddc00915 	stw	r23,36(sp)
1000a0b4:	dd800815 	stw	r22,32(sp)
1000a0b8:	dd400715 	stw	r21,28(sp)
1000a0bc:	dd000615 	stw	r20,24(sp)
1000a0c0:	dcc00515 	stw	r19,20(sp)
1000a0c4:	dc800415 	stw	r18,16(sp)
1000a0c8:	2021883a 	mov	r16,r4
1000a0cc:	2823883a 	mov	r17,r5
1000a0d0:	2839883a 	mov	fp,r5
1000a0d4:	38003c1e 	bne	r7,zero,1000a1c8 <__umoddi3+0x12c>
1000a0d8:	3027883a 	mov	r19,r6
1000a0dc:	2029883a 	mov	r20,r4
1000a0e0:	2980512e 	bgeu	r5,r6,1000a228 <__umoddi3+0x18c>
1000a0e4:	00bfffd4 	movui	r2,65535
1000a0e8:	11809a36 	bltu	r2,r6,1000a354 <__umoddi3+0x2b8>
1000a0ec:	01003fc4 	movi	r4,255
1000a0f0:	2189803a 	cmpltu	r4,r4,r6
1000a0f4:	200890fa 	slli	r4,r4,3
1000a0f8:	3104d83a 	srl	r2,r6,r4
1000a0fc:	00c40074 	movhi	r3,4097
1000a100:	18d2b304 	addi	r3,r3,19148
1000a104:	1885883a 	add	r2,r3,r2
1000a108:	10c00003 	ldbu	r3,0(r2)
1000a10c:	00800804 	movi	r2,32
1000a110:	1909883a 	add	r4,r3,r4
1000a114:	1125c83a 	sub	r18,r2,r4
1000a118:	90000526 	beq	r18,zero,1000a130 <__umoddi3+0x94>
1000a11c:	8ca2983a 	sll	r17,r17,r18
1000a120:	8108d83a 	srl	r4,r16,r4
1000a124:	34a6983a 	sll	r19,r6,r18
1000a128:	84a8983a 	sll	r20,r16,r18
1000a12c:	2478b03a 	or	fp,r4,r17
1000a130:	982ed43a 	srli	r23,r19,16
1000a134:	e009883a 	mov	r4,fp
1000a138:	9dbfffcc 	andi	r22,r19,65535
1000a13c:	b80b883a 	mov	r5,r23
1000a140:	000a7300 	call	1000a730 <__umodsi3>
1000a144:	e009883a 	mov	r4,fp
1000a148:	b80b883a 	mov	r5,r23
1000a14c:	102b883a 	mov	r21,r2
1000a150:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a154:	a806943a 	slli	r3,r21,16
1000a158:	a008d43a 	srli	r4,r20,16
1000a15c:	b085383a 	mul	r2,r22,r2
1000a160:	20c8b03a 	or	r4,r4,r3
1000a164:	2080032e 	bgeu	r4,r2,1000a174 <__umoddi3+0xd8>
1000a168:	24c9883a 	add	r4,r4,r19
1000a16c:	24c00136 	bltu	r4,r19,1000a174 <__umoddi3+0xd8>
1000a170:	20811036 	bltu	r4,r2,1000a5b4 <__umoddi3+0x518>
1000a174:	20abc83a 	sub	r21,r4,r2
1000a178:	b80b883a 	mov	r5,r23
1000a17c:	a809883a 	mov	r4,r21
1000a180:	000a7300 	call	1000a730 <__umodsi3>
1000a184:	1023883a 	mov	r17,r2
1000a188:	b80b883a 	mov	r5,r23
1000a18c:	a809883a 	mov	r4,r21
1000a190:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a194:	8822943a 	slli	r17,r17,16
1000a198:	b085383a 	mul	r2,r22,r2
1000a19c:	a0ffffcc 	andi	r3,r20,65535
1000a1a0:	1c46b03a 	or	r3,r3,r17
1000a1a4:	1880042e 	bgeu	r3,r2,1000a1b8 <__umoddi3+0x11c>
1000a1a8:	1cc7883a 	add	r3,r3,r19
1000a1ac:	1cc00236 	bltu	r3,r19,1000a1b8 <__umoddi3+0x11c>
1000a1b0:	1880012e 	bgeu	r3,r2,1000a1b8 <__umoddi3+0x11c>
1000a1b4:	1cc7883a 	add	r3,r3,r19
1000a1b8:	1885c83a 	sub	r2,r3,r2
1000a1bc:	1484d83a 	srl	r2,r2,r18
1000a1c0:	0007883a 	mov	r3,zero
1000a1c4:	00004f06 	br	1000a304 <__umoddi3+0x268>
1000a1c8:	29c04c36 	bltu	r5,r7,1000a2fc <__umoddi3+0x260>
1000a1cc:	00bfffd4 	movui	r2,65535
1000a1d0:	11c0582e 	bgeu	r2,r7,1000a334 <__umoddi3+0x298>
1000a1d4:	00804034 	movhi	r2,256
1000a1d8:	10bfffc4 	addi	r2,r2,-1
1000a1dc:	11c0e736 	bltu	r2,r7,1000a57c <__umoddi3+0x4e0>
1000a1e0:	01000404 	movi	r4,16
1000a1e4:	3904d83a 	srl	r2,r7,r4
1000a1e8:	00c40074 	movhi	r3,4097
1000a1ec:	18d2b304 	addi	r3,r3,19148
1000a1f0:	1885883a 	add	r2,r3,r2
1000a1f4:	14c00003 	ldbu	r19,0(r2)
1000a1f8:	00c00804 	movi	r3,32
1000a1fc:	9927883a 	add	r19,r19,r4
1000a200:	1ce9c83a 	sub	r20,r3,r19
1000a204:	a000581e 	bne	r20,zero,1000a368 <__umoddi3+0x2cc>
1000a208:	3c400136 	bltu	r7,r17,1000a210 <__umoddi3+0x174>
1000a20c:	8180eb36 	bltu	r16,r6,1000a5bc <__umoddi3+0x520>
1000a210:	8185c83a 	sub	r2,r16,r6
1000a214:	89e3c83a 	sub	r17,r17,r7
1000a218:	8089803a 	cmpltu	r4,r16,r2
1000a21c:	8939c83a 	sub	fp,r17,r4
1000a220:	e007883a 	mov	r3,fp
1000a224:	00003706 	br	1000a304 <__umoddi3+0x268>
1000a228:	3000041e 	bne	r6,zero,1000a23c <__umoddi3+0x1a0>
1000a22c:	000b883a 	mov	r5,zero
1000a230:	01000044 	movi	r4,1
1000a234:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a238:	1027883a 	mov	r19,r2
1000a23c:	00bfffd4 	movui	r2,65535
1000a240:	14c0402e 	bgeu	r2,r19,1000a344 <__umoddi3+0x2a8>
1000a244:	00804034 	movhi	r2,256
1000a248:	10bfffc4 	addi	r2,r2,-1
1000a24c:	14c0cd36 	bltu	r2,r19,1000a584 <__umoddi3+0x4e8>
1000a250:	00800404 	movi	r2,16
1000a254:	9886d83a 	srl	r3,r19,r2
1000a258:	01040074 	movhi	r4,4097
1000a25c:	2112b304 	addi	r4,r4,19148
1000a260:	20c7883a 	add	r3,r4,r3
1000a264:	18c00003 	ldbu	r3,0(r3)
1000a268:	1887883a 	add	r3,r3,r2
1000a26c:	00800804 	movi	r2,32
1000a270:	10e5c83a 	sub	r18,r2,r3
1000a274:	9000901e 	bne	r18,zero,1000a4b8 <__umoddi3+0x41c>
1000a278:	982cd43a 	srli	r22,r19,16
1000a27c:	8ce3c83a 	sub	r17,r17,r19
1000a280:	9d7fffcc 	andi	r21,r19,65535
1000a284:	b00b883a 	mov	r5,r22
1000a288:	8809883a 	mov	r4,r17
1000a28c:	000a7300 	call	1000a730 <__umodsi3>
1000a290:	8809883a 	mov	r4,r17
1000a294:	b00b883a 	mov	r5,r22
1000a298:	1021883a 	mov	r16,r2
1000a29c:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a2a0:	8006943a 	slli	r3,r16,16
1000a2a4:	a008d43a 	srli	r4,r20,16
1000a2a8:	1545383a 	mul	r2,r2,r21
1000a2ac:	20c8b03a 	or	r4,r4,r3
1000a2b0:	2080042e 	bgeu	r4,r2,1000a2c4 <__umoddi3+0x228>
1000a2b4:	24c9883a 	add	r4,r4,r19
1000a2b8:	24c00236 	bltu	r4,r19,1000a2c4 <__umoddi3+0x228>
1000a2bc:	2080012e 	bgeu	r4,r2,1000a2c4 <__umoddi3+0x228>
1000a2c0:	24c9883a 	add	r4,r4,r19
1000a2c4:	20a1c83a 	sub	r16,r4,r2
1000a2c8:	b00b883a 	mov	r5,r22
1000a2cc:	8009883a 	mov	r4,r16
1000a2d0:	000a7300 	call	1000a730 <__umodsi3>
1000a2d4:	1023883a 	mov	r17,r2
1000a2d8:	b00b883a 	mov	r5,r22
1000a2dc:	8009883a 	mov	r4,r16
1000a2e0:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a2e4:	8822943a 	slli	r17,r17,16
1000a2e8:	1545383a 	mul	r2,r2,r21
1000a2ec:	a53fffcc 	andi	r20,r20,65535
1000a2f0:	a446b03a 	or	r3,r20,r17
1000a2f4:	18bfb02e 	bgeu	r3,r2,1000a1b8 <__alt_data_end+0xf800a1b8>
1000a2f8:	003fab06 	br	1000a1a8 <__alt_data_end+0xf800a1a8>
1000a2fc:	2005883a 	mov	r2,r4
1000a300:	2807883a 	mov	r3,r5
1000a304:	dfc00b17 	ldw	ra,44(sp)
1000a308:	df000a17 	ldw	fp,40(sp)
1000a30c:	ddc00917 	ldw	r23,36(sp)
1000a310:	dd800817 	ldw	r22,32(sp)
1000a314:	dd400717 	ldw	r21,28(sp)
1000a318:	dd000617 	ldw	r20,24(sp)
1000a31c:	dcc00517 	ldw	r19,20(sp)
1000a320:	dc800417 	ldw	r18,16(sp)
1000a324:	dc400317 	ldw	r17,12(sp)
1000a328:	dc000217 	ldw	r16,8(sp)
1000a32c:	dec00c04 	addi	sp,sp,48
1000a330:	f800283a 	ret
1000a334:	04c03fc4 	movi	r19,255
1000a338:	99c9803a 	cmpltu	r4,r19,r7
1000a33c:	200890fa 	slli	r4,r4,3
1000a340:	003fa806 	br	1000a1e4 <__alt_data_end+0xf800a1e4>
1000a344:	00803fc4 	movi	r2,255
1000a348:	14c5803a 	cmpltu	r2,r2,r19
1000a34c:	100490fa 	slli	r2,r2,3
1000a350:	003fc006 	br	1000a254 <__alt_data_end+0xf800a254>
1000a354:	00804034 	movhi	r2,256
1000a358:	10bfffc4 	addi	r2,r2,-1
1000a35c:	11808b36 	bltu	r2,r6,1000a58c <__umoddi3+0x4f0>
1000a360:	01000404 	movi	r4,16
1000a364:	003f6406 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a368:	34c4d83a 	srl	r2,r6,r19
1000a36c:	3d0e983a 	sll	r7,r7,r20
1000a370:	8cf8d83a 	srl	fp,r17,r19
1000a374:	8d10983a 	sll	r8,r17,r20
1000a378:	38aab03a 	or	r21,r7,r2
1000a37c:	a82cd43a 	srli	r22,r21,16
1000a380:	84e2d83a 	srl	r17,r16,r19
1000a384:	e009883a 	mov	r4,fp
1000a388:	b00b883a 	mov	r5,r22
1000a38c:	8a22b03a 	or	r17,r17,r8
1000a390:	3524983a 	sll	r18,r6,r20
1000a394:	000a7300 	call	1000a730 <__umodsi3>
1000a398:	e009883a 	mov	r4,fp
1000a39c:	b00b883a 	mov	r5,r22
1000a3a0:	102f883a 	mov	r23,r2
1000a3a4:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a3a8:	100d883a 	mov	r6,r2
1000a3ac:	b808943a 	slli	r4,r23,16
1000a3b0:	aa3fffcc 	andi	r8,r21,65535
1000a3b4:	8804d43a 	srli	r2,r17,16
1000a3b8:	41af383a 	mul	r23,r8,r6
1000a3bc:	8520983a 	sll	r16,r16,r20
1000a3c0:	1104b03a 	or	r2,r2,r4
1000a3c4:	15c0042e 	bgeu	r2,r23,1000a3d8 <__umoddi3+0x33c>
1000a3c8:	1545883a 	add	r2,r2,r21
1000a3cc:	30ffffc4 	addi	r3,r6,-1
1000a3d0:	1540742e 	bgeu	r2,r21,1000a5a4 <__umoddi3+0x508>
1000a3d4:	180d883a 	mov	r6,r3
1000a3d8:	15efc83a 	sub	r23,r2,r23
1000a3dc:	b00b883a 	mov	r5,r22
1000a3e0:	b809883a 	mov	r4,r23
1000a3e4:	d9800115 	stw	r6,4(sp)
1000a3e8:	da000015 	stw	r8,0(sp)
1000a3ec:	000a7300 	call	1000a730 <__umodsi3>
1000a3f0:	b00b883a 	mov	r5,r22
1000a3f4:	b809883a 	mov	r4,r23
1000a3f8:	1039883a 	mov	fp,r2
1000a3fc:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a400:	da000017 	ldw	r8,0(sp)
1000a404:	e038943a 	slli	fp,fp,16
1000a408:	100b883a 	mov	r5,r2
1000a40c:	4089383a 	mul	r4,r8,r2
1000a410:	8a3fffcc 	andi	r8,r17,65535
1000a414:	4710b03a 	or	r8,r8,fp
1000a418:	d9800117 	ldw	r6,4(sp)
1000a41c:	4100042e 	bgeu	r8,r4,1000a430 <__umoddi3+0x394>
1000a420:	4551883a 	add	r8,r8,r21
1000a424:	10bfffc4 	addi	r2,r2,-1
1000a428:	45405a2e 	bgeu	r8,r21,1000a594 <__umoddi3+0x4f8>
1000a42c:	100b883a 	mov	r5,r2
1000a430:	300c943a 	slli	r6,r6,16
1000a434:	91ffffcc 	andi	r7,r18,65535
1000a438:	9004d43a 	srli	r2,r18,16
1000a43c:	314cb03a 	or	r6,r6,r5
1000a440:	317fffcc 	andi	r5,r6,65535
1000a444:	300cd43a 	srli	r6,r6,16
1000a448:	29d3383a 	mul	r9,r5,r7
1000a44c:	288b383a 	mul	r5,r5,r2
1000a450:	31cf383a 	mul	r7,r6,r7
1000a454:	4806d43a 	srli	r3,r9,16
1000a458:	4111c83a 	sub	r8,r8,r4
1000a45c:	29cb883a 	add	r5,r5,r7
1000a460:	194b883a 	add	r5,r3,r5
1000a464:	3085383a 	mul	r2,r6,r2
1000a468:	29c0022e 	bgeu	r5,r7,1000a474 <__umoddi3+0x3d8>
1000a46c:	00c00074 	movhi	r3,1
1000a470:	10c5883a 	add	r2,r2,r3
1000a474:	2808d43a 	srli	r4,r5,16
1000a478:	280a943a 	slli	r5,r5,16
1000a47c:	4a7fffcc 	andi	r9,r9,65535
1000a480:	2085883a 	add	r2,r4,r2
1000a484:	2a4b883a 	add	r5,r5,r9
1000a488:	40803636 	bltu	r8,r2,1000a564 <__umoddi3+0x4c8>
1000a48c:	40804d26 	beq	r8,r2,1000a5c4 <__umoddi3+0x528>
1000a490:	4089c83a 	sub	r4,r8,r2
1000a494:	280f883a 	mov	r7,r5
1000a498:	81cfc83a 	sub	r7,r16,r7
1000a49c:	81c7803a 	cmpltu	r3,r16,r7
1000a4a0:	20c7c83a 	sub	r3,r4,r3
1000a4a4:	1cc4983a 	sll	r2,r3,r19
1000a4a8:	3d0ed83a 	srl	r7,r7,r20
1000a4ac:	1d06d83a 	srl	r3,r3,r20
1000a4b0:	11c4b03a 	or	r2,r2,r7
1000a4b4:	003f9306 	br	1000a304 <__alt_data_end+0xf800a304>
1000a4b8:	9ca6983a 	sll	r19,r19,r18
1000a4bc:	88e8d83a 	srl	r20,r17,r3
1000a4c0:	80c4d83a 	srl	r2,r16,r3
1000a4c4:	982cd43a 	srli	r22,r19,16
1000a4c8:	8ca2983a 	sll	r17,r17,r18
1000a4cc:	a009883a 	mov	r4,r20
1000a4d0:	b00b883a 	mov	r5,r22
1000a4d4:	1478b03a 	or	fp,r2,r17
1000a4d8:	000a7300 	call	1000a730 <__umodsi3>
1000a4dc:	a009883a 	mov	r4,r20
1000a4e0:	b00b883a 	mov	r5,r22
1000a4e4:	1023883a 	mov	r17,r2
1000a4e8:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a4ec:	9d7fffcc 	andi	r21,r19,65535
1000a4f0:	880a943a 	slli	r5,r17,16
1000a4f4:	e008d43a 	srli	r4,fp,16
1000a4f8:	a885383a 	mul	r2,r21,r2
1000a4fc:	84a8983a 	sll	r20,r16,r18
1000a500:	2148b03a 	or	r4,r4,r5
1000a504:	2080042e 	bgeu	r4,r2,1000a518 <__umoddi3+0x47c>
1000a508:	24c9883a 	add	r4,r4,r19
1000a50c:	24c00236 	bltu	r4,r19,1000a518 <__umoddi3+0x47c>
1000a510:	2080012e 	bgeu	r4,r2,1000a518 <__umoddi3+0x47c>
1000a514:	24c9883a 	add	r4,r4,r19
1000a518:	20a3c83a 	sub	r17,r4,r2
1000a51c:	b00b883a 	mov	r5,r22
1000a520:	8809883a 	mov	r4,r17
1000a524:	000a7300 	call	1000a730 <__umodsi3>
1000a528:	102f883a 	mov	r23,r2
1000a52c:	8809883a 	mov	r4,r17
1000a530:	b00b883a 	mov	r5,r22
1000a534:	000a6cc0 	call	1000a6cc <__udivsi3>
1000a538:	b82e943a 	slli	r23,r23,16
1000a53c:	a885383a 	mul	r2,r21,r2
1000a540:	e13fffcc 	andi	r4,fp,65535
1000a544:	25c8b03a 	or	r4,r4,r23
1000a548:	2080042e 	bgeu	r4,r2,1000a55c <__umoddi3+0x4c0>
1000a54c:	24c9883a 	add	r4,r4,r19
1000a550:	24c00236 	bltu	r4,r19,1000a55c <__umoddi3+0x4c0>
1000a554:	2080012e 	bgeu	r4,r2,1000a55c <__umoddi3+0x4c0>
1000a558:	24c9883a 	add	r4,r4,r19
1000a55c:	20a3c83a 	sub	r17,r4,r2
1000a560:	003f4806 	br	1000a284 <__alt_data_end+0xf800a284>
1000a564:	2c8fc83a 	sub	r7,r5,r18
1000a568:	1545c83a 	sub	r2,r2,r21
1000a56c:	29cb803a 	cmpltu	r5,r5,r7
1000a570:	1145c83a 	sub	r2,r2,r5
1000a574:	4089c83a 	sub	r4,r8,r2
1000a578:	003fc706 	br	1000a498 <__alt_data_end+0xf800a498>
1000a57c:	01000604 	movi	r4,24
1000a580:	003f1806 	br	1000a1e4 <__alt_data_end+0xf800a1e4>
1000a584:	00800604 	movi	r2,24
1000a588:	003f3206 	br	1000a254 <__alt_data_end+0xf800a254>
1000a58c:	01000604 	movi	r4,24
1000a590:	003ed906 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a594:	413fa52e 	bgeu	r8,r4,1000a42c <__alt_data_end+0xf800a42c>
1000a598:	297fff84 	addi	r5,r5,-2
1000a59c:	4551883a 	add	r8,r8,r21
1000a5a0:	003fa306 	br	1000a430 <__alt_data_end+0xf800a430>
1000a5a4:	15ff8b2e 	bgeu	r2,r23,1000a3d4 <__alt_data_end+0xf800a3d4>
1000a5a8:	31bfff84 	addi	r6,r6,-2
1000a5ac:	1545883a 	add	r2,r2,r21
1000a5b0:	003f8906 	br	1000a3d8 <__alt_data_end+0xf800a3d8>
1000a5b4:	24c9883a 	add	r4,r4,r19
1000a5b8:	003eee06 	br	1000a174 <__alt_data_end+0xf800a174>
1000a5bc:	8005883a 	mov	r2,r16
1000a5c0:	003f1706 	br	1000a220 <__alt_data_end+0xf800a220>
1000a5c4:	817fe736 	bltu	r16,r5,1000a564 <__alt_data_end+0xf800a564>
1000a5c8:	280f883a 	mov	r7,r5
1000a5cc:	0009883a 	mov	r4,zero
1000a5d0:	003fb106 	br	1000a498 <__alt_data_end+0xf800a498>

1000a5d4 <__divsi3>:
1000a5d4:	20001b16 	blt	r4,zero,1000a644 <__divsi3+0x70>
1000a5d8:	000f883a 	mov	r7,zero
1000a5dc:	28001616 	blt	r5,zero,1000a638 <__divsi3+0x64>
1000a5e0:	200d883a 	mov	r6,r4
1000a5e4:	29001a2e 	bgeu	r5,r4,1000a650 <__divsi3+0x7c>
1000a5e8:	00800804 	movi	r2,32
1000a5ec:	00c00044 	movi	r3,1
1000a5f0:	00000106 	br	1000a5f8 <__divsi3+0x24>
1000a5f4:	10000d26 	beq	r2,zero,1000a62c <__divsi3+0x58>
1000a5f8:	294b883a 	add	r5,r5,r5
1000a5fc:	10bfffc4 	addi	r2,r2,-1
1000a600:	18c7883a 	add	r3,r3,r3
1000a604:	293ffb36 	bltu	r5,r4,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a608:	0005883a 	mov	r2,zero
1000a60c:	18000726 	beq	r3,zero,1000a62c <__divsi3+0x58>
1000a610:	0005883a 	mov	r2,zero
1000a614:	31400236 	bltu	r6,r5,1000a620 <__divsi3+0x4c>
1000a618:	314dc83a 	sub	r6,r6,r5
1000a61c:	10c4b03a 	or	r2,r2,r3
1000a620:	1806d07a 	srli	r3,r3,1
1000a624:	280ad07a 	srli	r5,r5,1
1000a628:	183ffa1e 	bne	r3,zero,1000a614 <__alt_data_end+0xf800a614>
1000a62c:	38000126 	beq	r7,zero,1000a634 <__divsi3+0x60>
1000a630:	0085c83a 	sub	r2,zero,r2
1000a634:	f800283a 	ret
1000a638:	014bc83a 	sub	r5,zero,r5
1000a63c:	39c0005c 	xori	r7,r7,1
1000a640:	003fe706 	br	1000a5e0 <__alt_data_end+0xf800a5e0>
1000a644:	0109c83a 	sub	r4,zero,r4
1000a648:	01c00044 	movi	r7,1
1000a64c:	003fe306 	br	1000a5dc <__alt_data_end+0xf800a5dc>
1000a650:	00c00044 	movi	r3,1
1000a654:	003fee06 	br	1000a610 <__alt_data_end+0xf800a610>

1000a658 <__modsi3>:
1000a658:	20001716 	blt	r4,zero,1000a6b8 <__modsi3+0x60>
1000a65c:	000f883a 	mov	r7,zero
1000a660:	2005883a 	mov	r2,r4
1000a664:	28001216 	blt	r5,zero,1000a6b0 <__modsi3+0x58>
1000a668:	2900162e 	bgeu	r5,r4,1000a6c4 <__modsi3+0x6c>
1000a66c:	01800804 	movi	r6,32
1000a670:	00c00044 	movi	r3,1
1000a674:	00000106 	br	1000a67c <__modsi3+0x24>
1000a678:	30000a26 	beq	r6,zero,1000a6a4 <__modsi3+0x4c>
1000a67c:	294b883a 	add	r5,r5,r5
1000a680:	31bfffc4 	addi	r6,r6,-1
1000a684:	18c7883a 	add	r3,r3,r3
1000a688:	293ffb36 	bltu	r5,r4,1000a678 <__alt_data_end+0xf800a678>
1000a68c:	18000526 	beq	r3,zero,1000a6a4 <__modsi3+0x4c>
1000a690:	1806d07a 	srli	r3,r3,1
1000a694:	11400136 	bltu	r2,r5,1000a69c <__modsi3+0x44>
1000a698:	1145c83a 	sub	r2,r2,r5
1000a69c:	280ad07a 	srli	r5,r5,1
1000a6a0:	183ffb1e 	bne	r3,zero,1000a690 <__alt_data_end+0xf800a690>
1000a6a4:	38000126 	beq	r7,zero,1000a6ac <__modsi3+0x54>
1000a6a8:	0085c83a 	sub	r2,zero,r2
1000a6ac:	f800283a 	ret
1000a6b0:	014bc83a 	sub	r5,zero,r5
1000a6b4:	003fec06 	br	1000a668 <__alt_data_end+0xf800a668>
1000a6b8:	0109c83a 	sub	r4,zero,r4
1000a6bc:	01c00044 	movi	r7,1
1000a6c0:	003fe706 	br	1000a660 <__alt_data_end+0xf800a660>
1000a6c4:	00c00044 	movi	r3,1
1000a6c8:	003ff106 	br	1000a690 <__alt_data_end+0xf800a690>

1000a6cc <__udivsi3>:
1000a6cc:	200d883a 	mov	r6,r4
1000a6d0:	2900152e 	bgeu	r5,r4,1000a728 <__udivsi3+0x5c>
1000a6d4:	28001416 	blt	r5,zero,1000a728 <__udivsi3+0x5c>
1000a6d8:	00800804 	movi	r2,32
1000a6dc:	00c00044 	movi	r3,1
1000a6e0:	00000206 	br	1000a6ec <__udivsi3+0x20>
1000a6e4:	10000e26 	beq	r2,zero,1000a720 <__udivsi3+0x54>
1000a6e8:	28000516 	blt	r5,zero,1000a700 <__udivsi3+0x34>
1000a6ec:	294b883a 	add	r5,r5,r5
1000a6f0:	10bfffc4 	addi	r2,r2,-1
1000a6f4:	18c7883a 	add	r3,r3,r3
1000a6f8:	293ffa36 	bltu	r5,r4,1000a6e4 <__alt_data_end+0xf800a6e4>
1000a6fc:	18000826 	beq	r3,zero,1000a720 <__udivsi3+0x54>
1000a700:	0005883a 	mov	r2,zero
1000a704:	31400236 	bltu	r6,r5,1000a710 <__udivsi3+0x44>
1000a708:	314dc83a 	sub	r6,r6,r5
1000a70c:	10c4b03a 	or	r2,r2,r3
1000a710:	1806d07a 	srli	r3,r3,1
1000a714:	280ad07a 	srli	r5,r5,1
1000a718:	183ffa1e 	bne	r3,zero,1000a704 <__alt_data_end+0xf800a704>
1000a71c:	f800283a 	ret
1000a720:	0005883a 	mov	r2,zero
1000a724:	f800283a 	ret
1000a728:	00c00044 	movi	r3,1
1000a72c:	003ff406 	br	1000a700 <__alt_data_end+0xf800a700>

1000a730 <__umodsi3>:
1000a730:	2005883a 	mov	r2,r4
1000a734:	2900122e 	bgeu	r5,r4,1000a780 <__umodsi3+0x50>
1000a738:	28001116 	blt	r5,zero,1000a780 <__umodsi3+0x50>
1000a73c:	01800804 	movi	r6,32
1000a740:	00c00044 	movi	r3,1
1000a744:	00000206 	br	1000a750 <__umodsi3+0x20>
1000a748:	30000c26 	beq	r6,zero,1000a77c <__umodsi3+0x4c>
1000a74c:	28000516 	blt	r5,zero,1000a764 <__umodsi3+0x34>
1000a750:	294b883a 	add	r5,r5,r5
1000a754:	31bfffc4 	addi	r6,r6,-1
1000a758:	18c7883a 	add	r3,r3,r3
1000a75c:	293ffa36 	bltu	r5,r4,1000a748 <__alt_data_end+0xf800a748>
1000a760:	18000626 	beq	r3,zero,1000a77c <__umodsi3+0x4c>
1000a764:	1806d07a 	srli	r3,r3,1
1000a768:	11400136 	bltu	r2,r5,1000a770 <__umodsi3+0x40>
1000a76c:	1145c83a 	sub	r2,r2,r5
1000a770:	280ad07a 	srli	r5,r5,1
1000a774:	183ffb1e 	bne	r3,zero,1000a764 <__alt_data_end+0xf800a764>
1000a778:	f800283a 	ret
1000a77c:	f800283a 	ret
1000a780:	00c00044 	movi	r3,1
1000a784:	003ff706 	br	1000a764 <__alt_data_end+0xf800a764>

1000a788 <__adddf3>:
1000a788:	02c00434 	movhi	r11,16
1000a78c:	5affffc4 	addi	r11,r11,-1
1000a790:	2806d7fa 	srli	r3,r5,31
1000a794:	2ad4703a 	and	r10,r5,r11
1000a798:	3ad2703a 	and	r9,r7,r11
1000a79c:	3804d53a 	srli	r2,r7,20
1000a7a0:	3018d77a 	srli	r12,r6,29
1000a7a4:	280ad53a 	srli	r5,r5,20
1000a7a8:	501490fa 	slli	r10,r10,3
1000a7ac:	2010d77a 	srli	r8,r4,29
1000a7b0:	481290fa 	slli	r9,r9,3
1000a7b4:	380ed7fa 	srli	r7,r7,31
1000a7b8:	defffb04 	addi	sp,sp,-20
1000a7bc:	dc800215 	stw	r18,8(sp)
1000a7c0:	dc400115 	stw	r17,4(sp)
1000a7c4:	dc000015 	stw	r16,0(sp)
1000a7c8:	dfc00415 	stw	ra,16(sp)
1000a7cc:	dcc00315 	stw	r19,12(sp)
1000a7d0:	1c803fcc 	andi	r18,r3,255
1000a7d4:	2c01ffcc 	andi	r16,r5,2047
1000a7d8:	5210b03a 	or	r8,r10,r8
1000a7dc:	202290fa 	slli	r17,r4,3
1000a7e0:	1081ffcc 	andi	r2,r2,2047
1000a7e4:	4b12b03a 	or	r9,r9,r12
1000a7e8:	300c90fa 	slli	r6,r6,3
1000a7ec:	91c07526 	beq	r18,r7,1000a9c4 <__adddf3+0x23c>
1000a7f0:	8087c83a 	sub	r3,r16,r2
1000a7f4:	00c0ab0e 	bge	zero,r3,1000aaa4 <__adddf3+0x31c>
1000a7f8:	10002a1e 	bne	r2,zero,1000a8a4 <__adddf3+0x11c>
1000a7fc:	4984b03a 	or	r2,r9,r6
1000a800:	1000961e 	bne	r2,zero,1000aa5c <__adddf3+0x2d4>
1000a804:	888001cc 	andi	r2,r17,7
1000a808:	10000726 	beq	r2,zero,1000a828 <__adddf3+0xa0>
1000a80c:	888003cc 	andi	r2,r17,15
1000a810:	00c00104 	movi	r3,4
1000a814:	10c00426 	beq	r2,r3,1000a828 <__adddf3+0xa0>
1000a818:	88c7883a 	add	r3,r17,r3
1000a81c:	1c63803a 	cmpltu	r17,r3,r17
1000a820:	4451883a 	add	r8,r8,r17
1000a824:	1823883a 	mov	r17,r3
1000a828:	4080202c 	andhi	r2,r8,128
1000a82c:	10005926 	beq	r2,zero,1000a994 <__adddf3+0x20c>
1000a830:	84000044 	addi	r16,r16,1
1000a834:	0081ffc4 	movi	r2,2047
1000a838:	8080ba26 	beq	r16,r2,1000ab24 <__adddf3+0x39c>
1000a83c:	00bfe034 	movhi	r2,65408
1000a840:	10bfffc4 	addi	r2,r2,-1
1000a844:	4090703a 	and	r8,r8,r2
1000a848:	4004977a 	slli	r2,r8,29
1000a84c:	4010927a 	slli	r8,r8,9
1000a850:	8822d0fa 	srli	r17,r17,3
1000a854:	8401ffcc 	andi	r16,r16,2047
1000a858:	4010d33a 	srli	r8,r8,12
1000a85c:	9007883a 	mov	r3,r18
1000a860:	1444b03a 	or	r2,r2,r17
1000a864:	8401ffcc 	andi	r16,r16,2047
1000a868:	8020953a 	slli	r16,r16,20
1000a86c:	18c03fcc 	andi	r3,r3,255
1000a870:	01000434 	movhi	r4,16
1000a874:	213fffc4 	addi	r4,r4,-1
1000a878:	180697fa 	slli	r3,r3,31
1000a87c:	4110703a 	and	r8,r8,r4
1000a880:	4410b03a 	or	r8,r8,r16
1000a884:	40c6b03a 	or	r3,r8,r3
1000a888:	dfc00417 	ldw	ra,16(sp)
1000a88c:	dcc00317 	ldw	r19,12(sp)
1000a890:	dc800217 	ldw	r18,8(sp)
1000a894:	dc400117 	ldw	r17,4(sp)
1000a898:	dc000017 	ldw	r16,0(sp)
1000a89c:	dec00504 	addi	sp,sp,20
1000a8a0:	f800283a 	ret
1000a8a4:	0081ffc4 	movi	r2,2047
1000a8a8:	80bfd626 	beq	r16,r2,1000a804 <__alt_data_end+0xf800a804>
1000a8ac:	4a402034 	orhi	r9,r9,128
1000a8b0:	00800e04 	movi	r2,56
1000a8b4:	10c09f16 	blt	r2,r3,1000ab34 <__adddf3+0x3ac>
1000a8b8:	008007c4 	movi	r2,31
1000a8bc:	10c0c216 	blt	r2,r3,1000abc8 <__adddf3+0x440>
1000a8c0:	00800804 	movi	r2,32
1000a8c4:	10c5c83a 	sub	r2,r2,r3
1000a8c8:	488a983a 	sll	r5,r9,r2
1000a8cc:	30c8d83a 	srl	r4,r6,r3
1000a8d0:	3084983a 	sll	r2,r6,r2
1000a8d4:	48c6d83a 	srl	r3,r9,r3
1000a8d8:	290cb03a 	or	r6,r5,r4
1000a8dc:	1004c03a 	cmpne	r2,r2,zero
1000a8e0:	308cb03a 	or	r6,r6,r2
1000a8e4:	898dc83a 	sub	r6,r17,r6
1000a8e8:	89a3803a 	cmpltu	r17,r17,r6
1000a8ec:	40d1c83a 	sub	r8,r8,r3
1000a8f0:	4451c83a 	sub	r8,r8,r17
1000a8f4:	3023883a 	mov	r17,r6
1000a8f8:	4080202c 	andhi	r2,r8,128
1000a8fc:	10002326 	beq	r2,zero,1000a98c <__adddf3+0x204>
1000a900:	04c02034 	movhi	r19,128
1000a904:	9cffffc4 	addi	r19,r19,-1
1000a908:	44e6703a 	and	r19,r8,r19
1000a90c:	98007626 	beq	r19,zero,1000aae8 <__adddf3+0x360>
1000a910:	9809883a 	mov	r4,r19
1000a914:	000cd8c0 	call	1000cd8c <__clzsi2>
1000a918:	10fffe04 	addi	r3,r2,-8
1000a91c:	010007c4 	movi	r4,31
1000a920:	20c07716 	blt	r4,r3,1000ab00 <__adddf3+0x378>
1000a924:	00800804 	movi	r2,32
1000a928:	10c5c83a 	sub	r2,r2,r3
1000a92c:	8884d83a 	srl	r2,r17,r2
1000a930:	98d0983a 	sll	r8,r19,r3
1000a934:	88e2983a 	sll	r17,r17,r3
1000a938:	1204b03a 	or	r2,r2,r8
1000a93c:	1c007416 	blt	r3,r16,1000ab10 <__adddf3+0x388>
1000a940:	1c21c83a 	sub	r16,r3,r16
1000a944:	82000044 	addi	r8,r16,1
1000a948:	00c007c4 	movi	r3,31
1000a94c:	1a009116 	blt	r3,r8,1000ab94 <__adddf3+0x40c>
1000a950:	00c00804 	movi	r3,32
1000a954:	1a07c83a 	sub	r3,r3,r8
1000a958:	8a08d83a 	srl	r4,r17,r8
1000a95c:	88e2983a 	sll	r17,r17,r3
1000a960:	10c6983a 	sll	r3,r2,r3
1000a964:	1210d83a 	srl	r8,r2,r8
1000a968:	8804c03a 	cmpne	r2,r17,zero
1000a96c:	1906b03a 	or	r3,r3,r4
1000a970:	18a2b03a 	or	r17,r3,r2
1000a974:	0021883a 	mov	r16,zero
1000a978:	003fa206 	br	1000a804 <__alt_data_end+0xf800a804>
1000a97c:	1890b03a 	or	r8,r3,r2
1000a980:	40017d26 	beq	r8,zero,1000af78 <__adddf3+0x7f0>
1000a984:	1011883a 	mov	r8,r2
1000a988:	1823883a 	mov	r17,r3
1000a98c:	888001cc 	andi	r2,r17,7
1000a990:	103f9e1e 	bne	r2,zero,1000a80c <__alt_data_end+0xf800a80c>
1000a994:	4004977a 	slli	r2,r8,29
1000a998:	8822d0fa 	srli	r17,r17,3
1000a99c:	4010d0fa 	srli	r8,r8,3
1000a9a0:	9007883a 	mov	r3,r18
1000a9a4:	1444b03a 	or	r2,r2,r17
1000a9a8:	0101ffc4 	movi	r4,2047
1000a9ac:	81002426 	beq	r16,r4,1000aa40 <__adddf3+0x2b8>
1000a9b0:	8120703a 	and	r16,r16,r4
1000a9b4:	01000434 	movhi	r4,16
1000a9b8:	213fffc4 	addi	r4,r4,-1
1000a9bc:	4110703a 	and	r8,r8,r4
1000a9c0:	003fa806 	br	1000a864 <__alt_data_end+0xf800a864>
1000a9c4:	8089c83a 	sub	r4,r16,r2
1000a9c8:	01005e0e 	bge	zero,r4,1000ab44 <__adddf3+0x3bc>
1000a9cc:	10002b26 	beq	r2,zero,1000aa7c <__adddf3+0x2f4>
1000a9d0:	0081ffc4 	movi	r2,2047
1000a9d4:	80bf8b26 	beq	r16,r2,1000a804 <__alt_data_end+0xf800a804>
1000a9d8:	4a402034 	orhi	r9,r9,128
1000a9dc:	00800e04 	movi	r2,56
1000a9e0:	1100a40e 	bge	r2,r4,1000ac74 <__adddf3+0x4ec>
1000a9e4:	498cb03a 	or	r6,r9,r6
1000a9e8:	300ac03a 	cmpne	r5,r6,zero
1000a9ec:	0013883a 	mov	r9,zero
1000a9f0:	2c4b883a 	add	r5,r5,r17
1000a9f4:	2c63803a 	cmpltu	r17,r5,r17
1000a9f8:	4a11883a 	add	r8,r9,r8
1000a9fc:	8a11883a 	add	r8,r17,r8
1000aa00:	2823883a 	mov	r17,r5
1000aa04:	4080202c 	andhi	r2,r8,128
1000aa08:	103fe026 	beq	r2,zero,1000a98c <__alt_data_end+0xf800a98c>
1000aa0c:	84000044 	addi	r16,r16,1
1000aa10:	0081ffc4 	movi	r2,2047
1000aa14:	8080d226 	beq	r16,r2,1000ad60 <__adddf3+0x5d8>
1000aa18:	00bfe034 	movhi	r2,65408
1000aa1c:	10bfffc4 	addi	r2,r2,-1
1000aa20:	4090703a 	and	r8,r8,r2
1000aa24:	880ad07a 	srli	r5,r17,1
1000aa28:	400897fa 	slli	r4,r8,31
1000aa2c:	88c0004c 	andi	r3,r17,1
1000aa30:	28e2b03a 	or	r17,r5,r3
1000aa34:	4010d07a 	srli	r8,r8,1
1000aa38:	2462b03a 	or	r17,r4,r17
1000aa3c:	003f7106 	br	1000a804 <__alt_data_end+0xf800a804>
1000aa40:	4088b03a 	or	r4,r8,r2
1000aa44:	20014526 	beq	r4,zero,1000af5c <__adddf3+0x7d4>
1000aa48:	01000434 	movhi	r4,16
1000aa4c:	42000234 	orhi	r8,r8,8
1000aa50:	213fffc4 	addi	r4,r4,-1
1000aa54:	4110703a 	and	r8,r8,r4
1000aa58:	003f8206 	br	1000a864 <__alt_data_end+0xf800a864>
1000aa5c:	18ffffc4 	addi	r3,r3,-1
1000aa60:	1800491e 	bne	r3,zero,1000ab88 <__adddf3+0x400>
1000aa64:	898bc83a 	sub	r5,r17,r6
1000aa68:	8963803a 	cmpltu	r17,r17,r5
1000aa6c:	4251c83a 	sub	r8,r8,r9
1000aa70:	4451c83a 	sub	r8,r8,r17
1000aa74:	2823883a 	mov	r17,r5
1000aa78:	003f9f06 	br	1000a8f8 <__alt_data_end+0xf800a8f8>
1000aa7c:	4984b03a 	or	r2,r9,r6
1000aa80:	103f6026 	beq	r2,zero,1000a804 <__alt_data_end+0xf800a804>
1000aa84:	213fffc4 	addi	r4,r4,-1
1000aa88:	2000931e 	bne	r4,zero,1000acd8 <__adddf3+0x550>
1000aa8c:	898d883a 	add	r6,r17,r6
1000aa90:	3463803a 	cmpltu	r17,r6,r17
1000aa94:	4251883a 	add	r8,r8,r9
1000aa98:	8a11883a 	add	r8,r17,r8
1000aa9c:	3023883a 	mov	r17,r6
1000aaa0:	003fd806 	br	1000aa04 <__alt_data_end+0xf800aa04>
1000aaa4:	1800541e 	bne	r3,zero,1000abf8 <__adddf3+0x470>
1000aaa8:	80800044 	addi	r2,r16,1
1000aaac:	1081ffcc 	andi	r2,r2,2047
1000aab0:	00c00044 	movi	r3,1
1000aab4:	1880a00e 	bge	r3,r2,1000ad38 <__adddf3+0x5b0>
1000aab8:	8989c83a 	sub	r4,r17,r6
1000aabc:	8905803a 	cmpltu	r2,r17,r4
1000aac0:	4267c83a 	sub	r19,r8,r9
1000aac4:	98a7c83a 	sub	r19,r19,r2
1000aac8:	9880202c 	andhi	r2,r19,128
1000aacc:	10006326 	beq	r2,zero,1000ac5c <__adddf3+0x4d4>
1000aad0:	3463c83a 	sub	r17,r6,r17
1000aad4:	4a07c83a 	sub	r3,r9,r8
1000aad8:	344d803a 	cmpltu	r6,r6,r17
1000aadc:	19a7c83a 	sub	r19,r3,r6
1000aae0:	3825883a 	mov	r18,r7
1000aae4:	983f8a1e 	bne	r19,zero,1000a910 <__alt_data_end+0xf800a910>
1000aae8:	8809883a 	mov	r4,r17
1000aaec:	000cd8c0 	call	1000cd8c <__clzsi2>
1000aaf0:	10800804 	addi	r2,r2,32
1000aaf4:	10fffe04 	addi	r3,r2,-8
1000aaf8:	010007c4 	movi	r4,31
1000aafc:	20ff890e 	bge	r4,r3,1000a924 <__alt_data_end+0xf800a924>
1000ab00:	10bff604 	addi	r2,r2,-40
1000ab04:	8884983a 	sll	r2,r17,r2
1000ab08:	0023883a 	mov	r17,zero
1000ab0c:	1c3f8c0e 	bge	r3,r16,1000a940 <__alt_data_end+0xf800a940>
1000ab10:	023fe034 	movhi	r8,65408
1000ab14:	423fffc4 	addi	r8,r8,-1
1000ab18:	80e1c83a 	sub	r16,r16,r3
1000ab1c:	1210703a 	and	r8,r2,r8
1000ab20:	003f3806 	br	1000a804 <__alt_data_end+0xf800a804>
1000ab24:	9007883a 	mov	r3,r18
1000ab28:	0011883a 	mov	r8,zero
1000ab2c:	0005883a 	mov	r2,zero
1000ab30:	003f4c06 	br	1000a864 <__alt_data_end+0xf800a864>
1000ab34:	498cb03a 	or	r6,r9,r6
1000ab38:	300cc03a 	cmpne	r6,r6,zero
1000ab3c:	0007883a 	mov	r3,zero
1000ab40:	003f6806 	br	1000a8e4 <__alt_data_end+0xf800a8e4>
1000ab44:	20009c1e 	bne	r4,zero,1000adb8 <__adddf3+0x630>
1000ab48:	80800044 	addi	r2,r16,1
1000ab4c:	1141ffcc 	andi	r5,r2,2047
1000ab50:	01000044 	movi	r4,1
1000ab54:	2140670e 	bge	r4,r5,1000acf4 <__adddf3+0x56c>
1000ab58:	0101ffc4 	movi	r4,2047
1000ab5c:	11007f26 	beq	r2,r4,1000ad5c <__adddf3+0x5d4>
1000ab60:	898d883a 	add	r6,r17,r6
1000ab64:	4247883a 	add	r3,r8,r9
1000ab68:	3451803a 	cmpltu	r8,r6,r17
1000ab6c:	40d1883a 	add	r8,r8,r3
1000ab70:	402297fa 	slli	r17,r8,31
1000ab74:	300cd07a 	srli	r6,r6,1
1000ab78:	4010d07a 	srli	r8,r8,1
1000ab7c:	1021883a 	mov	r16,r2
1000ab80:	89a2b03a 	or	r17,r17,r6
1000ab84:	003f1f06 	br	1000a804 <__alt_data_end+0xf800a804>
1000ab88:	0081ffc4 	movi	r2,2047
1000ab8c:	80bf481e 	bne	r16,r2,1000a8b0 <__alt_data_end+0xf800a8b0>
1000ab90:	003f1c06 	br	1000a804 <__alt_data_end+0xf800a804>
1000ab94:	843ff844 	addi	r16,r16,-31
1000ab98:	01000804 	movi	r4,32
1000ab9c:	1406d83a 	srl	r3,r2,r16
1000aba0:	41005026 	beq	r8,r4,1000ace4 <__adddf3+0x55c>
1000aba4:	01001004 	movi	r4,64
1000aba8:	2211c83a 	sub	r8,r4,r8
1000abac:	1204983a 	sll	r2,r2,r8
1000abb0:	88a2b03a 	or	r17,r17,r2
1000abb4:	8822c03a 	cmpne	r17,r17,zero
1000abb8:	1c62b03a 	or	r17,r3,r17
1000abbc:	0011883a 	mov	r8,zero
1000abc0:	0021883a 	mov	r16,zero
1000abc4:	003f7106 	br	1000a98c <__alt_data_end+0xf800a98c>
1000abc8:	193ff804 	addi	r4,r3,-32
1000abcc:	00800804 	movi	r2,32
1000abd0:	4908d83a 	srl	r4,r9,r4
1000abd4:	18804526 	beq	r3,r2,1000acec <__adddf3+0x564>
1000abd8:	00801004 	movi	r2,64
1000abdc:	10c5c83a 	sub	r2,r2,r3
1000abe0:	4886983a 	sll	r3,r9,r2
1000abe4:	198cb03a 	or	r6,r3,r6
1000abe8:	300cc03a 	cmpne	r6,r6,zero
1000abec:	218cb03a 	or	r6,r4,r6
1000abf0:	0007883a 	mov	r3,zero
1000abf4:	003f3b06 	br	1000a8e4 <__alt_data_end+0xf800a8e4>
1000abf8:	80002a26 	beq	r16,zero,1000aca4 <__adddf3+0x51c>
1000abfc:	0101ffc4 	movi	r4,2047
1000ac00:	11006826 	beq	r2,r4,1000ada4 <__adddf3+0x61c>
1000ac04:	00c7c83a 	sub	r3,zero,r3
1000ac08:	42002034 	orhi	r8,r8,128
1000ac0c:	01000e04 	movi	r4,56
1000ac10:	20c07c16 	blt	r4,r3,1000ae04 <__adddf3+0x67c>
1000ac14:	010007c4 	movi	r4,31
1000ac18:	20c0da16 	blt	r4,r3,1000af84 <__adddf3+0x7fc>
1000ac1c:	01000804 	movi	r4,32
1000ac20:	20c9c83a 	sub	r4,r4,r3
1000ac24:	4114983a 	sll	r10,r8,r4
1000ac28:	88cad83a 	srl	r5,r17,r3
1000ac2c:	8908983a 	sll	r4,r17,r4
1000ac30:	40c6d83a 	srl	r3,r8,r3
1000ac34:	5162b03a 	or	r17,r10,r5
1000ac38:	2008c03a 	cmpne	r4,r4,zero
1000ac3c:	8922b03a 	or	r17,r17,r4
1000ac40:	3463c83a 	sub	r17,r6,r17
1000ac44:	48c7c83a 	sub	r3,r9,r3
1000ac48:	344d803a 	cmpltu	r6,r6,r17
1000ac4c:	1991c83a 	sub	r8,r3,r6
1000ac50:	1021883a 	mov	r16,r2
1000ac54:	3825883a 	mov	r18,r7
1000ac58:	003f2706 	br	1000a8f8 <__alt_data_end+0xf800a8f8>
1000ac5c:	24d0b03a 	or	r8,r4,r19
1000ac60:	40001b1e 	bne	r8,zero,1000acd0 <__adddf3+0x548>
1000ac64:	0005883a 	mov	r2,zero
1000ac68:	0007883a 	mov	r3,zero
1000ac6c:	0021883a 	mov	r16,zero
1000ac70:	003f4d06 	br	1000a9a8 <__alt_data_end+0xf800a9a8>
1000ac74:	008007c4 	movi	r2,31
1000ac78:	11003c16 	blt	r2,r4,1000ad6c <__adddf3+0x5e4>
1000ac7c:	00800804 	movi	r2,32
1000ac80:	1105c83a 	sub	r2,r2,r4
1000ac84:	488e983a 	sll	r7,r9,r2
1000ac88:	310ad83a 	srl	r5,r6,r4
1000ac8c:	3084983a 	sll	r2,r6,r2
1000ac90:	4912d83a 	srl	r9,r9,r4
1000ac94:	394ab03a 	or	r5,r7,r5
1000ac98:	1004c03a 	cmpne	r2,r2,zero
1000ac9c:	288ab03a 	or	r5,r5,r2
1000aca0:	003f5306 	br	1000a9f0 <__alt_data_end+0xf800a9f0>
1000aca4:	4448b03a 	or	r4,r8,r17
1000aca8:	20003e26 	beq	r4,zero,1000ada4 <__adddf3+0x61c>
1000acac:	00c6303a 	nor	r3,zero,r3
1000acb0:	18003a1e 	bne	r3,zero,1000ad9c <__adddf3+0x614>
1000acb4:	3463c83a 	sub	r17,r6,r17
1000acb8:	4a07c83a 	sub	r3,r9,r8
1000acbc:	344d803a 	cmpltu	r6,r6,r17
1000acc0:	1991c83a 	sub	r8,r3,r6
1000acc4:	1021883a 	mov	r16,r2
1000acc8:	3825883a 	mov	r18,r7
1000accc:	003f0a06 	br	1000a8f8 <__alt_data_end+0xf800a8f8>
1000acd0:	2023883a 	mov	r17,r4
1000acd4:	003f0d06 	br	1000a90c <__alt_data_end+0xf800a90c>
1000acd8:	0081ffc4 	movi	r2,2047
1000acdc:	80bf3f1e 	bne	r16,r2,1000a9dc <__alt_data_end+0xf800a9dc>
1000ace0:	003ec806 	br	1000a804 <__alt_data_end+0xf800a804>
1000ace4:	0005883a 	mov	r2,zero
1000ace8:	003fb106 	br	1000abb0 <__alt_data_end+0xf800abb0>
1000acec:	0007883a 	mov	r3,zero
1000acf0:	003fbc06 	br	1000abe4 <__alt_data_end+0xf800abe4>
1000acf4:	4444b03a 	or	r2,r8,r17
1000acf8:	8000871e 	bne	r16,zero,1000af18 <__adddf3+0x790>
1000acfc:	1000ba26 	beq	r2,zero,1000afe8 <__adddf3+0x860>
1000ad00:	4984b03a 	or	r2,r9,r6
1000ad04:	103ebf26 	beq	r2,zero,1000a804 <__alt_data_end+0xf800a804>
1000ad08:	8985883a 	add	r2,r17,r6
1000ad0c:	4247883a 	add	r3,r8,r9
1000ad10:	1451803a 	cmpltu	r8,r2,r17
1000ad14:	40d1883a 	add	r8,r8,r3
1000ad18:	40c0202c 	andhi	r3,r8,128
1000ad1c:	1023883a 	mov	r17,r2
1000ad20:	183f1a26 	beq	r3,zero,1000a98c <__alt_data_end+0xf800a98c>
1000ad24:	00bfe034 	movhi	r2,65408
1000ad28:	10bfffc4 	addi	r2,r2,-1
1000ad2c:	2021883a 	mov	r16,r4
1000ad30:	4090703a 	and	r8,r8,r2
1000ad34:	003eb306 	br	1000a804 <__alt_data_end+0xf800a804>
1000ad38:	4444b03a 	or	r2,r8,r17
1000ad3c:	8000291e 	bne	r16,zero,1000ade4 <__adddf3+0x65c>
1000ad40:	10004b1e 	bne	r2,zero,1000ae70 <__adddf3+0x6e8>
1000ad44:	4990b03a 	or	r8,r9,r6
1000ad48:	40008b26 	beq	r8,zero,1000af78 <__adddf3+0x7f0>
1000ad4c:	4811883a 	mov	r8,r9
1000ad50:	3023883a 	mov	r17,r6
1000ad54:	3825883a 	mov	r18,r7
1000ad58:	003eaa06 	br	1000a804 <__alt_data_end+0xf800a804>
1000ad5c:	1021883a 	mov	r16,r2
1000ad60:	0011883a 	mov	r8,zero
1000ad64:	0005883a 	mov	r2,zero
1000ad68:	003f0f06 	br	1000a9a8 <__alt_data_end+0xf800a9a8>
1000ad6c:	217ff804 	addi	r5,r4,-32
1000ad70:	00800804 	movi	r2,32
1000ad74:	494ad83a 	srl	r5,r9,r5
1000ad78:	20807d26 	beq	r4,r2,1000af70 <__adddf3+0x7e8>
1000ad7c:	00801004 	movi	r2,64
1000ad80:	1109c83a 	sub	r4,r2,r4
1000ad84:	4912983a 	sll	r9,r9,r4
1000ad88:	498cb03a 	or	r6,r9,r6
1000ad8c:	300cc03a 	cmpne	r6,r6,zero
1000ad90:	298ab03a 	or	r5,r5,r6
1000ad94:	0013883a 	mov	r9,zero
1000ad98:	003f1506 	br	1000a9f0 <__alt_data_end+0xf800a9f0>
1000ad9c:	0101ffc4 	movi	r4,2047
1000ada0:	113f9a1e 	bne	r2,r4,1000ac0c <__alt_data_end+0xf800ac0c>
1000ada4:	4811883a 	mov	r8,r9
1000ada8:	3023883a 	mov	r17,r6
1000adac:	1021883a 	mov	r16,r2
1000adb0:	3825883a 	mov	r18,r7
1000adb4:	003e9306 	br	1000a804 <__alt_data_end+0xf800a804>
1000adb8:	8000161e 	bne	r16,zero,1000ae14 <__adddf3+0x68c>
1000adbc:	444ab03a 	or	r5,r8,r17
1000adc0:	28005126 	beq	r5,zero,1000af08 <__adddf3+0x780>
1000adc4:	0108303a 	nor	r4,zero,r4
1000adc8:	20004d1e 	bne	r4,zero,1000af00 <__adddf3+0x778>
1000adcc:	89a3883a 	add	r17,r17,r6
1000add0:	4253883a 	add	r9,r8,r9
1000add4:	898d803a 	cmpltu	r6,r17,r6
1000add8:	3251883a 	add	r8,r6,r9
1000addc:	1021883a 	mov	r16,r2
1000ade0:	003f0806 	br	1000aa04 <__alt_data_end+0xf800aa04>
1000ade4:	1000301e 	bne	r2,zero,1000aea8 <__adddf3+0x720>
1000ade8:	4984b03a 	or	r2,r9,r6
1000adec:	10007126 	beq	r2,zero,1000afb4 <__adddf3+0x82c>
1000adf0:	4811883a 	mov	r8,r9
1000adf4:	3023883a 	mov	r17,r6
1000adf8:	3825883a 	mov	r18,r7
1000adfc:	0401ffc4 	movi	r16,2047
1000ae00:	003e8006 	br	1000a804 <__alt_data_end+0xf800a804>
1000ae04:	4462b03a 	or	r17,r8,r17
1000ae08:	8822c03a 	cmpne	r17,r17,zero
1000ae0c:	0007883a 	mov	r3,zero
1000ae10:	003f8b06 	br	1000ac40 <__alt_data_end+0xf800ac40>
1000ae14:	0141ffc4 	movi	r5,2047
1000ae18:	11403b26 	beq	r2,r5,1000af08 <__adddf3+0x780>
1000ae1c:	0109c83a 	sub	r4,zero,r4
1000ae20:	42002034 	orhi	r8,r8,128
1000ae24:	01400e04 	movi	r5,56
1000ae28:	29006716 	blt	r5,r4,1000afc8 <__adddf3+0x840>
1000ae2c:	014007c4 	movi	r5,31
1000ae30:	29007016 	blt	r5,r4,1000aff4 <__adddf3+0x86c>
1000ae34:	01400804 	movi	r5,32
1000ae38:	290bc83a 	sub	r5,r5,r4
1000ae3c:	4154983a 	sll	r10,r8,r5
1000ae40:	890ed83a 	srl	r7,r17,r4
1000ae44:	894a983a 	sll	r5,r17,r5
1000ae48:	4108d83a 	srl	r4,r8,r4
1000ae4c:	51e2b03a 	or	r17,r10,r7
1000ae50:	280ac03a 	cmpne	r5,r5,zero
1000ae54:	8962b03a 	or	r17,r17,r5
1000ae58:	89a3883a 	add	r17,r17,r6
1000ae5c:	2253883a 	add	r9,r4,r9
1000ae60:	898d803a 	cmpltu	r6,r17,r6
1000ae64:	3251883a 	add	r8,r6,r9
1000ae68:	1021883a 	mov	r16,r2
1000ae6c:	003ee506 	br	1000aa04 <__alt_data_end+0xf800aa04>
1000ae70:	4984b03a 	or	r2,r9,r6
1000ae74:	103e6326 	beq	r2,zero,1000a804 <__alt_data_end+0xf800a804>
1000ae78:	8987c83a 	sub	r3,r17,r6
1000ae7c:	88c9803a 	cmpltu	r4,r17,r3
1000ae80:	4245c83a 	sub	r2,r8,r9
1000ae84:	1105c83a 	sub	r2,r2,r4
1000ae88:	1100202c 	andhi	r4,r2,128
1000ae8c:	203ebb26 	beq	r4,zero,1000a97c <__alt_data_end+0xf800a97c>
1000ae90:	3463c83a 	sub	r17,r6,r17
1000ae94:	4a07c83a 	sub	r3,r9,r8
1000ae98:	344d803a 	cmpltu	r6,r6,r17
1000ae9c:	1991c83a 	sub	r8,r3,r6
1000aea0:	3825883a 	mov	r18,r7
1000aea4:	003e5706 	br	1000a804 <__alt_data_end+0xf800a804>
1000aea8:	4984b03a 	or	r2,r9,r6
1000aeac:	10002e26 	beq	r2,zero,1000af68 <__adddf3+0x7e0>
1000aeb0:	4004d0fa 	srli	r2,r8,3
1000aeb4:	8822d0fa 	srli	r17,r17,3
1000aeb8:	4010977a 	slli	r8,r8,29
1000aebc:	10c0022c 	andhi	r3,r2,8
1000aec0:	4462b03a 	or	r17,r8,r17
1000aec4:	18000826 	beq	r3,zero,1000aee8 <__adddf3+0x760>
1000aec8:	4808d0fa 	srli	r4,r9,3
1000aecc:	20c0022c 	andhi	r3,r4,8
1000aed0:	1800051e 	bne	r3,zero,1000aee8 <__adddf3+0x760>
1000aed4:	300cd0fa 	srli	r6,r6,3
1000aed8:	4806977a 	slli	r3,r9,29
1000aedc:	2005883a 	mov	r2,r4
1000aee0:	3825883a 	mov	r18,r7
1000aee4:	19a2b03a 	or	r17,r3,r6
1000aee8:	8810d77a 	srli	r8,r17,29
1000aeec:	100490fa 	slli	r2,r2,3
1000aef0:	882290fa 	slli	r17,r17,3
1000aef4:	0401ffc4 	movi	r16,2047
1000aef8:	4090b03a 	or	r8,r8,r2
1000aefc:	003e4106 	br	1000a804 <__alt_data_end+0xf800a804>
1000af00:	0141ffc4 	movi	r5,2047
1000af04:	117fc71e 	bne	r2,r5,1000ae24 <__alt_data_end+0xf800ae24>
1000af08:	4811883a 	mov	r8,r9
1000af0c:	3023883a 	mov	r17,r6
1000af10:	1021883a 	mov	r16,r2
1000af14:	003e3b06 	br	1000a804 <__alt_data_end+0xf800a804>
1000af18:	10002f26 	beq	r2,zero,1000afd8 <__adddf3+0x850>
1000af1c:	4984b03a 	or	r2,r9,r6
1000af20:	10001126 	beq	r2,zero,1000af68 <__adddf3+0x7e0>
1000af24:	4004d0fa 	srli	r2,r8,3
1000af28:	8822d0fa 	srli	r17,r17,3
1000af2c:	4010977a 	slli	r8,r8,29
1000af30:	10c0022c 	andhi	r3,r2,8
1000af34:	4462b03a 	or	r17,r8,r17
1000af38:	183feb26 	beq	r3,zero,1000aee8 <__alt_data_end+0xf800aee8>
1000af3c:	4808d0fa 	srli	r4,r9,3
1000af40:	20c0022c 	andhi	r3,r4,8
1000af44:	183fe81e 	bne	r3,zero,1000aee8 <__alt_data_end+0xf800aee8>
1000af48:	300cd0fa 	srli	r6,r6,3
1000af4c:	4806977a 	slli	r3,r9,29
1000af50:	2005883a 	mov	r2,r4
1000af54:	19a2b03a 	or	r17,r3,r6
1000af58:	003fe306 	br	1000aee8 <__alt_data_end+0xf800aee8>
1000af5c:	0011883a 	mov	r8,zero
1000af60:	0005883a 	mov	r2,zero
1000af64:	003e3f06 	br	1000a864 <__alt_data_end+0xf800a864>
1000af68:	0401ffc4 	movi	r16,2047
1000af6c:	003e2506 	br	1000a804 <__alt_data_end+0xf800a804>
1000af70:	0013883a 	mov	r9,zero
1000af74:	003f8406 	br	1000ad88 <__alt_data_end+0xf800ad88>
1000af78:	0005883a 	mov	r2,zero
1000af7c:	0007883a 	mov	r3,zero
1000af80:	003e8906 	br	1000a9a8 <__alt_data_end+0xf800a9a8>
1000af84:	197ff804 	addi	r5,r3,-32
1000af88:	01000804 	movi	r4,32
1000af8c:	414ad83a 	srl	r5,r8,r5
1000af90:	19002426 	beq	r3,r4,1000b024 <__adddf3+0x89c>
1000af94:	01001004 	movi	r4,64
1000af98:	20c7c83a 	sub	r3,r4,r3
1000af9c:	40c6983a 	sll	r3,r8,r3
1000afa0:	1c46b03a 	or	r3,r3,r17
1000afa4:	1806c03a 	cmpne	r3,r3,zero
1000afa8:	28e2b03a 	or	r17,r5,r3
1000afac:	0007883a 	mov	r3,zero
1000afb0:	003f2306 	br	1000ac40 <__alt_data_end+0xf800ac40>
1000afb4:	0007883a 	mov	r3,zero
1000afb8:	5811883a 	mov	r8,r11
1000afbc:	00bfffc4 	movi	r2,-1
1000afc0:	0401ffc4 	movi	r16,2047
1000afc4:	003e7806 	br	1000a9a8 <__alt_data_end+0xf800a9a8>
1000afc8:	4462b03a 	or	r17,r8,r17
1000afcc:	8822c03a 	cmpne	r17,r17,zero
1000afd0:	0009883a 	mov	r4,zero
1000afd4:	003fa006 	br	1000ae58 <__alt_data_end+0xf800ae58>
1000afd8:	4811883a 	mov	r8,r9
1000afdc:	3023883a 	mov	r17,r6
1000afe0:	0401ffc4 	movi	r16,2047
1000afe4:	003e0706 	br	1000a804 <__alt_data_end+0xf800a804>
1000afe8:	4811883a 	mov	r8,r9
1000afec:	3023883a 	mov	r17,r6
1000aff0:	003e0406 	br	1000a804 <__alt_data_end+0xf800a804>
1000aff4:	21fff804 	addi	r7,r4,-32
1000aff8:	01400804 	movi	r5,32
1000affc:	41ced83a 	srl	r7,r8,r7
1000b000:	21400a26 	beq	r4,r5,1000b02c <__adddf3+0x8a4>
1000b004:	01401004 	movi	r5,64
1000b008:	2909c83a 	sub	r4,r5,r4
1000b00c:	4108983a 	sll	r4,r8,r4
1000b010:	2448b03a 	or	r4,r4,r17
1000b014:	2008c03a 	cmpne	r4,r4,zero
1000b018:	3922b03a 	or	r17,r7,r4
1000b01c:	0009883a 	mov	r4,zero
1000b020:	003f8d06 	br	1000ae58 <__alt_data_end+0xf800ae58>
1000b024:	0007883a 	mov	r3,zero
1000b028:	003fdd06 	br	1000afa0 <__alt_data_end+0xf800afa0>
1000b02c:	0009883a 	mov	r4,zero
1000b030:	003ff706 	br	1000b010 <__alt_data_end+0xf800b010>

1000b034 <__divdf3>:
1000b034:	defff204 	addi	sp,sp,-56
1000b038:	dd400915 	stw	r21,36(sp)
1000b03c:	282ad53a 	srli	r21,r5,20
1000b040:	dd000815 	stw	r20,32(sp)
1000b044:	2828d7fa 	srli	r20,r5,31
1000b048:	dc000415 	stw	r16,16(sp)
1000b04c:	04000434 	movhi	r16,16
1000b050:	df000c15 	stw	fp,48(sp)
1000b054:	843fffc4 	addi	r16,r16,-1
1000b058:	dfc00d15 	stw	ra,52(sp)
1000b05c:	ddc00b15 	stw	r23,44(sp)
1000b060:	dd800a15 	stw	r22,40(sp)
1000b064:	dcc00715 	stw	r19,28(sp)
1000b068:	dc800615 	stw	r18,24(sp)
1000b06c:	dc400515 	stw	r17,20(sp)
1000b070:	ad41ffcc 	andi	r21,r21,2047
1000b074:	2c20703a 	and	r16,r5,r16
1000b078:	a7003fcc 	andi	fp,r20,255
1000b07c:	a8006126 	beq	r21,zero,1000b204 <__divdf3+0x1d0>
1000b080:	0081ffc4 	movi	r2,2047
1000b084:	2025883a 	mov	r18,r4
1000b088:	a8803726 	beq	r21,r2,1000b168 <__divdf3+0x134>
1000b08c:	80800434 	orhi	r2,r16,16
1000b090:	100490fa 	slli	r2,r2,3
1000b094:	2020d77a 	srli	r16,r4,29
1000b098:	202490fa 	slli	r18,r4,3
1000b09c:	ad7f0044 	addi	r21,r21,-1023
1000b0a0:	80a0b03a 	or	r16,r16,r2
1000b0a4:	0027883a 	mov	r19,zero
1000b0a8:	0013883a 	mov	r9,zero
1000b0ac:	3804d53a 	srli	r2,r7,20
1000b0b0:	382cd7fa 	srli	r22,r7,31
1000b0b4:	04400434 	movhi	r17,16
1000b0b8:	8c7fffc4 	addi	r17,r17,-1
1000b0bc:	1081ffcc 	andi	r2,r2,2047
1000b0c0:	3011883a 	mov	r8,r6
1000b0c4:	3c62703a 	and	r17,r7,r17
1000b0c8:	b5c03fcc 	andi	r23,r22,255
1000b0cc:	10006c26 	beq	r2,zero,1000b280 <__divdf3+0x24c>
1000b0d0:	00c1ffc4 	movi	r3,2047
1000b0d4:	10c06426 	beq	r2,r3,1000b268 <__divdf3+0x234>
1000b0d8:	88c00434 	orhi	r3,r17,16
1000b0dc:	180690fa 	slli	r3,r3,3
1000b0e0:	3022d77a 	srli	r17,r6,29
1000b0e4:	301090fa 	slli	r8,r6,3
1000b0e8:	10bf0044 	addi	r2,r2,-1023
1000b0ec:	88e2b03a 	or	r17,r17,r3
1000b0f0:	000f883a 	mov	r7,zero
1000b0f4:	a58cf03a 	xor	r6,r20,r22
1000b0f8:	3cc8b03a 	or	r4,r7,r19
1000b0fc:	a8abc83a 	sub	r21,r21,r2
1000b100:	008003c4 	movi	r2,15
1000b104:	3007883a 	mov	r3,r6
1000b108:	34c03fcc 	andi	r19,r6,255
1000b10c:	11009036 	bltu	r2,r4,1000b350 <__divdf3+0x31c>
1000b110:	200890ba 	slli	r4,r4,2
1000b114:	00840074 	movhi	r2,4097
1000b118:	10ac4a04 	addi	r2,r2,-20184
1000b11c:	2089883a 	add	r4,r4,r2
1000b120:	20800017 	ldw	r2,0(r4)
1000b124:	1000683a 	jmp	r2
1000b128:	1000b350 	cmplti	zero,r2,717
1000b12c:	1000b1a0 	cmpeqi	zero,r2,710
1000b130:	1000b340 	call	11000b34 <_gp+0xfe23d0>
1000b134:	1000b194 	ori	zero,r2,710
1000b138:	1000b340 	call	11000b34 <_gp+0xfe23d0>
1000b13c:	1000b314 	ori	zero,r2,716
1000b140:	1000b340 	call	11000b34 <_gp+0xfe23d0>
1000b144:	1000b194 	ori	zero,r2,710
1000b148:	1000b1a0 	cmpeqi	zero,r2,710
1000b14c:	1000b1a0 	cmpeqi	zero,r2,710
1000b150:	1000b314 	ori	zero,r2,716
1000b154:	1000b194 	ori	zero,r2,710
1000b158:	1000b184 	addi	zero,r2,710
1000b15c:	1000b184 	addi	zero,r2,710
1000b160:	1000b184 	addi	zero,r2,710
1000b164:	1000b634 	orhi	zero,r2,728
1000b168:	2404b03a 	or	r2,r4,r16
1000b16c:	1000661e 	bne	r2,zero,1000b308 <__divdf3+0x2d4>
1000b170:	04c00204 	movi	r19,8
1000b174:	0021883a 	mov	r16,zero
1000b178:	0025883a 	mov	r18,zero
1000b17c:	02400084 	movi	r9,2
1000b180:	003fca06 	br	1000b0ac <__alt_data_end+0xf800b0ac>
1000b184:	8023883a 	mov	r17,r16
1000b188:	9011883a 	mov	r8,r18
1000b18c:	e02f883a 	mov	r23,fp
1000b190:	480f883a 	mov	r7,r9
1000b194:	00800084 	movi	r2,2
1000b198:	3881311e 	bne	r7,r2,1000b660 <__divdf3+0x62c>
1000b19c:	b827883a 	mov	r19,r23
1000b1a0:	98c0004c 	andi	r3,r19,1
1000b1a4:	0081ffc4 	movi	r2,2047
1000b1a8:	000b883a 	mov	r5,zero
1000b1ac:	0025883a 	mov	r18,zero
1000b1b0:	1004953a 	slli	r2,r2,20
1000b1b4:	18c03fcc 	andi	r3,r3,255
1000b1b8:	04400434 	movhi	r17,16
1000b1bc:	8c7fffc4 	addi	r17,r17,-1
1000b1c0:	180697fa 	slli	r3,r3,31
1000b1c4:	2c4a703a 	and	r5,r5,r17
1000b1c8:	288ab03a 	or	r5,r5,r2
1000b1cc:	28c6b03a 	or	r3,r5,r3
1000b1d0:	9005883a 	mov	r2,r18
1000b1d4:	dfc00d17 	ldw	ra,52(sp)
1000b1d8:	df000c17 	ldw	fp,48(sp)
1000b1dc:	ddc00b17 	ldw	r23,44(sp)
1000b1e0:	dd800a17 	ldw	r22,40(sp)
1000b1e4:	dd400917 	ldw	r21,36(sp)
1000b1e8:	dd000817 	ldw	r20,32(sp)
1000b1ec:	dcc00717 	ldw	r19,28(sp)
1000b1f0:	dc800617 	ldw	r18,24(sp)
1000b1f4:	dc400517 	ldw	r17,20(sp)
1000b1f8:	dc000417 	ldw	r16,16(sp)
1000b1fc:	dec00e04 	addi	sp,sp,56
1000b200:	f800283a 	ret
1000b204:	2404b03a 	or	r2,r4,r16
1000b208:	2027883a 	mov	r19,r4
1000b20c:	10003926 	beq	r2,zero,1000b2f4 <__divdf3+0x2c0>
1000b210:	80012e26 	beq	r16,zero,1000b6cc <__divdf3+0x698>
1000b214:	8009883a 	mov	r4,r16
1000b218:	d9800315 	stw	r6,12(sp)
1000b21c:	d9c00215 	stw	r7,8(sp)
1000b220:	000cd8c0 	call	1000cd8c <__clzsi2>
1000b224:	d9800317 	ldw	r6,12(sp)
1000b228:	d9c00217 	ldw	r7,8(sp)
1000b22c:	113ffd44 	addi	r4,r2,-11
1000b230:	00c00704 	movi	r3,28
1000b234:	19012116 	blt	r3,r4,1000b6bc <__divdf3+0x688>
1000b238:	00c00744 	movi	r3,29
1000b23c:	147ffe04 	addi	r17,r2,-8
1000b240:	1907c83a 	sub	r3,r3,r4
1000b244:	8460983a 	sll	r16,r16,r17
1000b248:	98c6d83a 	srl	r3,r19,r3
1000b24c:	9c64983a 	sll	r18,r19,r17
1000b250:	1c20b03a 	or	r16,r3,r16
1000b254:	1080fcc4 	addi	r2,r2,1011
1000b258:	00abc83a 	sub	r21,zero,r2
1000b25c:	0027883a 	mov	r19,zero
1000b260:	0013883a 	mov	r9,zero
1000b264:	003f9106 	br	1000b0ac <__alt_data_end+0xf800b0ac>
1000b268:	3446b03a 	or	r3,r6,r17
1000b26c:	18001f1e 	bne	r3,zero,1000b2ec <__divdf3+0x2b8>
1000b270:	0023883a 	mov	r17,zero
1000b274:	0011883a 	mov	r8,zero
1000b278:	01c00084 	movi	r7,2
1000b27c:	003f9d06 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b280:	3446b03a 	or	r3,r6,r17
1000b284:	18001526 	beq	r3,zero,1000b2dc <__divdf3+0x2a8>
1000b288:	88011b26 	beq	r17,zero,1000b6f8 <__divdf3+0x6c4>
1000b28c:	8809883a 	mov	r4,r17
1000b290:	d9800315 	stw	r6,12(sp)
1000b294:	da400115 	stw	r9,4(sp)
1000b298:	000cd8c0 	call	1000cd8c <__clzsi2>
1000b29c:	d9800317 	ldw	r6,12(sp)
1000b2a0:	da400117 	ldw	r9,4(sp)
1000b2a4:	113ffd44 	addi	r4,r2,-11
1000b2a8:	00c00704 	movi	r3,28
1000b2ac:	19010e16 	blt	r3,r4,1000b6e8 <__divdf3+0x6b4>
1000b2b0:	00c00744 	movi	r3,29
1000b2b4:	123ffe04 	addi	r8,r2,-8
1000b2b8:	1907c83a 	sub	r3,r3,r4
1000b2bc:	8a22983a 	sll	r17,r17,r8
1000b2c0:	30c6d83a 	srl	r3,r6,r3
1000b2c4:	3210983a 	sll	r8,r6,r8
1000b2c8:	1c62b03a 	or	r17,r3,r17
1000b2cc:	1080fcc4 	addi	r2,r2,1011
1000b2d0:	0085c83a 	sub	r2,zero,r2
1000b2d4:	000f883a 	mov	r7,zero
1000b2d8:	003f8606 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b2dc:	0023883a 	mov	r17,zero
1000b2e0:	0011883a 	mov	r8,zero
1000b2e4:	01c00044 	movi	r7,1
1000b2e8:	003f8206 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b2ec:	01c000c4 	movi	r7,3
1000b2f0:	003f8006 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b2f4:	04c00104 	movi	r19,4
1000b2f8:	0021883a 	mov	r16,zero
1000b2fc:	0025883a 	mov	r18,zero
1000b300:	02400044 	movi	r9,1
1000b304:	003f6906 	br	1000b0ac <__alt_data_end+0xf800b0ac>
1000b308:	04c00304 	movi	r19,12
1000b30c:	024000c4 	movi	r9,3
1000b310:	003f6606 	br	1000b0ac <__alt_data_end+0xf800b0ac>
1000b314:	01400434 	movhi	r5,16
1000b318:	0007883a 	mov	r3,zero
1000b31c:	297fffc4 	addi	r5,r5,-1
1000b320:	04bfffc4 	movi	r18,-1
1000b324:	0081ffc4 	movi	r2,2047
1000b328:	003fa106 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b32c:	00c00044 	movi	r3,1
1000b330:	1887c83a 	sub	r3,r3,r2
1000b334:	01000e04 	movi	r4,56
1000b338:	20c1210e 	bge	r4,r3,1000b7c0 <__divdf3+0x78c>
1000b33c:	98c0004c 	andi	r3,r19,1
1000b340:	0005883a 	mov	r2,zero
1000b344:	000b883a 	mov	r5,zero
1000b348:	0025883a 	mov	r18,zero
1000b34c:	003f9806 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b350:	8c00fd36 	bltu	r17,r16,1000b748 <__divdf3+0x714>
1000b354:	8440fb26 	beq	r16,r17,1000b744 <__divdf3+0x710>
1000b358:	8007883a 	mov	r3,r16
1000b35c:	ad7fffc4 	addi	r21,r21,-1
1000b360:	0021883a 	mov	r16,zero
1000b364:	4004d63a 	srli	r2,r8,24
1000b368:	8822923a 	slli	r17,r17,8
1000b36c:	1809883a 	mov	r4,r3
1000b370:	402c923a 	slli	r22,r8,8
1000b374:	88b8b03a 	or	fp,r17,r2
1000b378:	e028d43a 	srli	r20,fp,16
1000b37c:	d8c00015 	stw	r3,0(sp)
1000b380:	e5ffffcc 	andi	r23,fp,65535
1000b384:	a00b883a 	mov	r5,r20
1000b388:	000a6cc0 	call	1000a6cc <__udivsi3>
1000b38c:	d8c00017 	ldw	r3,0(sp)
1000b390:	a00b883a 	mov	r5,r20
1000b394:	d8800315 	stw	r2,12(sp)
1000b398:	1809883a 	mov	r4,r3
1000b39c:	000a7300 	call	1000a730 <__umodsi3>
1000b3a0:	d9800317 	ldw	r6,12(sp)
1000b3a4:	1006943a 	slli	r3,r2,16
1000b3a8:	9004d43a 	srli	r2,r18,16
1000b3ac:	b9a3383a 	mul	r17,r23,r6
1000b3b0:	10c4b03a 	or	r2,r2,r3
1000b3b4:	1440062e 	bgeu	r2,r17,1000b3d0 <__divdf3+0x39c>
1000b3b8:	1705883a 	add	r2,r2,fp
1000b3bc:	30ffffc4 	addi	r3,r6,-1
1000b3c0:	1700ee36 	bltu	r2,fp,1000b77c <__divdf3+0x748>
1000b3c4:	1440ed2e 	bgeu	r2,r17,1000b77c <__divdf3+0x748>
1000b3c8:	31bfff84 	addi	r6,r6,-2
1000b3cc:	1705883a 	add	r2,r2,fp
1000b3d0:	1463c83a 	sub	r17,r2,r17
1000b3d4:	a00b883a 	mov	r5,r20
1000b3d8:	8809883a 	mov	r4,r17
1000b3dc:	d9800315 	stw	r6,12(sp)
1000b3e0:	000a6cc0 	call	1000a6cc <__udivsi3>
1000b3e4:	a00b883a 	mov	r5,r20
1000b3e8:	8809883a 	mov	r4,r17
1000b3ec:	d8800215 	stw	r2,8(sp)
1000b3f0:	000a7300 	call	1000a730 <__umodsi3>
1000b3f4:	d9c00217 	ldw	r7,8(sp)
1000b3f8:	1004943a 	slli	r2,r2,16
1000b3fc:	94bfffcc 	andi	r18,r18,65535
1000b400:	b9d1383a 	mul	r8,r23,r7
1000b404:	90a4b03a 	or	r18,r18,r2
1000b408:	d9800317 	ldw	r6,12(sp)
1000b40c:	9200062e 	bgeu	r18,r8,1000b428 <__divdf3+0x3f4>
1000b410:	9725883a 	add	r18,r18,fp
1000b414:	38bfffc4 	addi	r2,r7,-1
1000b418:	9700d636 	bltu	r18,fp,1000b774 <__divdf3+0x740>
1000b41c:	9200d52e 	bgeu	r18,r8,1000b774 <__divdf3+0x740>
1000b420:	39ffff84 	addi	r7,r7,-2
1000b424:	9725883a 	add	r18,r18,fp
1000b428:	3004943a 	slli	r2,r6,16
1000b42c:	b012d43a 	srli	r9,r22,16
1000b430:	b1bfffcc 	andi	r6,r22,65535
1000b434:	11e2b03a 	or	r17,r2,r7
1000b438:	8806d43a 	srli	r3,r17,16
1000b43c:	893fffcc 	andi	r4,r17,65535
1000b440:	218b383a 	mul	r5,r4,r6
1000b444:	30c5383a 	mul	r2,r6,r3
1000b448:	2249383a 	mul	r4,r4,r9
1000b44c:	280ed43a 	srli	r7,r5,16
1000b450:	9225c83a 	sub	r18,r18,r8
1000b454:	2089883a 	add	r4,r4,r2
1000b458:	3909883a 	add	r4,r7,r4
1000b45c:	1a47383a 	mul	r3,r3,r9
1000b460:	2080022e 	bgeu	r4,r2,1000b46c <__divdf3+0x438>
1000b464:	00800074 	movhi	r2,1
1000b468:	1887883a 	add	r3,r3,r2
1000b46c:	2004d43a 	srli	r2,r4,16
1000b470:	2008943a 	slli	r4,r4,16
1000b474:	297fffcc 	andi	r5,r5,65535
1000b478:	10c7883a 	add	r3,r2,r3
1000b47c:	2149883a 	add	r4,r4,r5
1000b480:	90c0a536 	bltu	r18,r3,1000b718 <__divdf3+0x6e4>
1000b484:	90c0bf26 	beq	r18,r3,1000b784 <__divdf3+0x750>
1000b488:	90c7c83a 	sub	r3,r18,r3
1000b48c:	810fc83a 	sub	r7,r16,r4
1000b490:	81e5803a 	cmpltu	r18,r16,r7
1000b494:	1ca5c83a 	sub	r18,r3,r18
1000b498:	e480c126 	beq	fp,r18,1000b7a0 <__divdf3+0x76c>
1000b49c:	a00b883a 	mov	r5,r20
1000b4a0:	9009883a 	mov	r4,r18
1000b4a4:	d9800315 	stw	r6,12(sp)
1000b4a8:	d9c00215 	stw	r7,8(sp)
1000b4ac:	da400115 	stw	r9,4(sp)
1000b4b0:	000a6cc0 	call	1000a6cc <__udivsi3>
1000b4b4:	a00b883a 	mov	r5,r20
1000b4b8:	9009883a 	mov	r4,r18
1000b4bc:	d8800015 	stw	r2,0(sp)
1000b4c0:	000a7300 	call	1000a730 <__umodsi3>
1000b4c4:	d9c00217 	ldw	r7,8(sp)
1000b4c8:	da000017 	ldw	r8,0(sp)
1000b4cc:	1006943a 	slli	r3,r2,16
1000b4d0:	3804d43a 	srli	r2,r7,16
1000b4d4:	ba21383a 	mul	r16,r23,r8
1000b4d8:	d9800317 	ldw	r6,12(sp)
1000b4dc:	10c4b03a 	or	r2,r2,r3
1000b4e0:	da400117 	ldw	r9,4(sp)
1000b4e4:	1400062e 	bgeu	r2,r16,1000b500 <__divdf3+0x4cc>
1000b4e8:	1705883a 	add	r2,r2,fp
1000b4ec:	40ffffc4 	addi	r3,r8,-1
1000b4f0:	1700ad36 	bltu	r2,fp,1000b7a8 <__divdf3+0x774>
1000b4f4:	1400ac2e 	bgeu	r2,r16,1000b7a8 <__divdf3+0x774>
1000b4f8:	423fff84 	addi	r8,r8,-2
1000b4fc:	1705883a 	add	r2,r2,fp
1000b500:	1421c83a 	sub	r16,r2,r16
1000b504:	a00b883a 	mov	r5,r20
1000b508:	8009883a 	mov	r4,r16
1000b50c:	d9800315 	stw	r6,12(sp)
1000b510:	d9c00215 	stw	r7,8(sp)
1000b514:	da000015 	stw	r8,0(sp)
1000b518:	da400115 	stw	r9,4(sp)
1000b51c:	000a6cc0 	call	1000a6cc <__udivsi3>
1000b520:	8009883a 	mov	r4,r16
1000b524:	a00b883a 	mov	r5,r20
1000b528:	1025883a 	mov	r18,r2
1000b52c:	000a7300 	call	1000a730 <__umodsi3>
1000b530:	d9c00217 	ldw	r7,8(sp)
1000b534:	1004943a 	slli	r2,r2,16
1000b538:	bcaf383a 	mul	r23,r23,r18
1000b53c:	393fffcc 	andi	r4,r7,65535
1000b540:	2088b03a 	or	r4,r4,r2
1000b544:	d9800317 	ldw	r6,12(sp)
1000b548:	da000017 	ldw	r8,0(sp)
1000b54c:	da400117 	ldw	r9,4(sp)
1000b550:	25c0062e 	bgeu	r4,r23,1000b56c <__divdf3+0x538>
1000b554:	2709883a 	add	r4,r4,fp
1000b558:	90bfffc4 	addi	r2,r18,-1
1000b55c:	27009436 	bltu	r4,fp,1000b7b0 <__divdf3+0x77c>
1000b560:	25c0932e 	bgeu	r4,r23,1000b7b0 <__divdf3+0x77c>
1000b564:	94bfff84 	addi	r18,r18,-2
1000b568:	2709883a 	add	r4,r4,fp
1000b56c:	4004943a 	slli	r2,r8,16
1000b570:	25efc83a 	sub	r23,r4,r23
1000b574:	1490b03a 	or	r8,r2,r18
1000b578:	4008d43a 	srli	r4,r8,16
1000b57c:	40ffffcc 	andi	r3,r8,65535
1000b580:	30c5383a 	mul	r2,r6,r3
1000b584:	1a47383a 	mul	r3,r3,r9
1000b588:	310d383a 	mul	r6,r6,r4
1000b58c:	100ad43a 	srli	r5,r2,16
1000b590:	4913383a 	mul	r9,r9,r4
1000b594:	1987883a 	add	r3,r3,r6
1000b598:	28c7883a 	add	r3,r5,r3
1000b59c:	1980022e 	bgeu	r3,r6,1000b5a8 <__divdf3+0x574>
1000b5a0:	01000074 	movhi	r4,1
1000b5a4:	4913883a 	add	r9,r9,r4
1000b5a8:	1808d43a 	srli	r4,r3,16
1000b5ac:	1806943a 	slli	r3,r3,16
1000b5b0:	10bfffcc 	andi	r2,r2,65535
1000b5b4:	2253883a 	add	r9,r4,r9
1000b5b8:	1887883a 	add	r3,r3,r2
1000b5bc:	ba403836 	bltu	r23,r9,1000b6a0 <__divdf3+0x66c>
1000b5c0:	ba403626 	beq	r23,r9,1000b69c <__divdf3+0x668>
1000b5c4:	42000054 	ori	r8,r8,1
1000b5c8:	a880ffc4 	addi	r2,r21,1023
1000b5cc:	00bf570e 	bge	zero,r2,1000b32c <__alt_data_end+0xf800b32c>
1000b5d0:	40c001cc 	andi	r3,r8,7
1000b5d4:	18000726 	beq	r3,zero,1000b5f4 <__divdf3+0x5c0>
1000b5d8:	40c003cc 	andi	r3,r8,15
1000b5dc:	01000104 	movi	r4,4
1000b5e0:	19000426 	beq	r3,r4,1000b5f4 <__divdf3+0x5c0>
1000b5e4:	4107883a 	add	r3,r8,r4
1000b5e8:	1a11803a 	cmpltu	r8,r3,r8
1000b5ec:	8a23883a 	add	r17,r17,r8
1000b5f0:	1811883a 	mov	r8,r3
1000b5f4:	88c0402c 	andhi	r3,r17,256
1000b5f8:	18000426 	beq	r3,zero,1000b60c <__divdf3+0x5d8>
1000b5fc:	00ffc034 	movhi	r3,65280
1000b600:	18ffffc4 	addi	r3,r3,-1
1000b604:	a8810004 	addi	r2,r21,1024
1000b608:	88e2703a 	and	r17,r17,r3
1000b60c:	00c1ff84 	movi	r3,2046
1000b610:	18bee316 	blt	r3,r2,1000b1a0 <__alt_data_end+0xf800b1a0>
1000b614:	8824977a 	slli	r18,r17,29
1000b618:	4010d0fa 	srli	r8,r8,3
1000b61c:	8822927a 	slli	r17,r17,9
1000b620:	1081ffcc 	andi	r2,r2,2047
1000b624:	9224b03a 	or	r18,r18,r8
1000b628:	880ad33a 	srli	r5,r17,12
1000b62c:	98c0004c 	andi	r3,r19,1
1000b630:	003edf06 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b634:	8080022c 	andhi	r2,r16,8
1000b638:	10001226 	beq	r2,zero,1000b684 <__divdf3+0x650>
1000b63c:	8880022c 	andhi	r2,r17,8
1000b640:	1000101e 	bne	r2,zero,1000b684 <__divdf3+0x650>
1000b644:	00800434 	movhi	r2,16
1000b648:	89400234 	orhi	r5,r17,8
1000b64c:	10bfffc4 	addi	r2,r2,-1
1000b650:	b007883a 	mov	r3,r22
1000b654:	288a703a 	and	r5,r5,r2
1000b658:	4025883a 	mov	r18,r8
1000b65c:	003f3106 	br	1000b324 <__alt_data_end+0xf800b324>
1000b660:	008000c4 	movi	r2,3
1000b664:	3880a626 	beq	r7,r2,1000b900 <__divdf3+0x8cc>
1000b668:	00800044 	movi	r2,1
1000b66c:	3880521e 	bne	r7,r2,1000b7b8 <__divdf3+0x784>
1000b670:	b807883a 	mov	r3,r23
1000b674:	0005883a 	mov	r2,zero
1000b678:	000b883a 	mov	r5,zero
1000b67c:	0025883a 	mov	r18,zero
1000b680:	003ecb06 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b684:	00800434 	movhi	r2,16
1000b688:	81400234 	orhi	r5,r16,8
1000b68c:	10bfffc4 	addi	r2,r2,-1
1000b690:	a007883a 	mov	r3,r20
1000b694:	288a703a 	and	r5,r5,r2
1000b698:	003f2206 	br	1000b324 <__alt_data_end+0xf800b324>
1000b69c:	183fca26 	beq	r3,zero,1000b5c8 <__alt_data_end+0xf800b5c8>
1000b6a0:	e5ef883a 	add	r23,fp,r23
1000b6a4:	40bfffc4 	addi	r2,r8,-1
1000b6a8:	bf00392e 	bgeu	r23,fp,1000b790 <__divdf3+0x75c>
1000b6ac:	1011883a 	mov	r8,r2
1000b6b0:	ba7fc41e 	bne	r23,r9,1000b5c4 <__alt_data_end+0xf800b5c4>
1000b6b4:	b0ffc31e 	bne	r22,r3,1000b5c4 <__alt_data_end+0xf800b5c4>
1000b6b8:	003fc306 	br	1000b5c8 <__alt_data_end+0xf800b5c8>
1000b6bc:	143ff604 	addi	r16,r2,-40
1000b6c0:	9c20983a 	sll	r16,r19,r16
1000b6c4:	0025883a 	mov	r18,zero
1000b6c8:	003ee206 	br	1000b254 <__alt_data_end+0xf800b254>
1000b6cc:	d9800315 	stw	r6,12(sp)
1000b6d0:	d9c00215 	stw	r7,8(sp)
1000b6d4:	000cd8c0 	call	1000cd8c <__clzsi2>
1000b6d8:	10800804 	addi	r2,r2,32
1000b6dc:	d9c00217 	ldw	r7,8(sp)
1000b6e0:	d9800317 	ldw	r6,12(sp)
1000b6e4:	003ed106 	br	1000b22c <__alt_data_end+0xf800b22c>
1000b6e8:	147ff604 	addi	r17,r2,-40
1000b6ec:	3462983a 	sll	r17,r6,r17
1000b6f0:	0011883a 	mov	r8,zero
1000b6f4:	003ef506 	br	1000b2cc <__alt_data_end+0xf800b2cc>
1000b6f8:	3009883a 	mov	r4,r6
1000b6fc:	d9800315 	stw	r6,12(sp)
1000b700:	da400115 	stw	r9,4(sp)
1000b704:	000cd8c0 	call	1000cd8c <__clzsi2>
1000b708:	10800804 	addi	r2,r2,32
1000b70c:	da400117 	ldw	r9,4(sp)
1000b710:	d9800317 	ldw	r6,12(sp)
1000b714:	003ee306 	br	1000b2a4 <__alt_data_end+0xf800b2a4>
1000b718:	85a1883a 	add	r16,r16,r22
1000b71c:	8585803a 	cmpltu	r2,r16,r22
1000b720:	1705883a 	add	r2,r2,fp
1000b724:	14a5883a 	add	r18,r2,r18
1000b728:	88bfffc4 	addi	r2,r17,-1
1000b72c:	e4800c2e 	bgeu	fp,r18,1000b760 <__divdf3+0x72c>
1000b730:	90c03e36 	bltu	r18,r3,1000b82c <__divdf3+0x7f8>
1000b734:	1c806926 	beq	r3,r18,1000b8dc <__divdf3+0x8a8>
1000b738:	90c7c83a 	sub	r3,r18,r3
1000b73c:	1023883a 	mov	r17,r2
1000b740:	003f5206 	br	1000b48c <__alt_data_end+0xf800b48c>
1000b744:	923f0436 	bltu	r18,r8,1000b358 <__alt_data_end+0xf800b358>
1000b748:	800897fa 	slli	r4,r16,31
1000b74c:	9004d07a 	srli	r2,r18,1
1000b750:	8006d07a 	srli	r3,r16,1
1000b754:	902097fa 	slli	r16,r18,31
1000b758:	20a4b03a 	or	r18,r4,r2
1000b75c:	003f0106 	br	1000b364 <__alt_data_end+0xf800b364>
1000b760:	e4bff51e 	bne	fp,r18,1000b738 <__alt_data_end+0xf800b738>
1000b764:	85bff22e 	bgeu	r16,r22,1000b730 <__alt_data_end+0xf800b730>
1000b768:	e0c7c83a 	sub	r3,fp,r3
1000b76c:	1023883a 	mov	r17,r2
1000b770:	003f4606 	br	1000b48c <__alt_data_end+0xf800b48c>
1000b774:	100f883a 	mov	r7,r2
1000b778:	003f2b06 	br	1000b428 <__alt_data_end+0xf800b428>
1000b77c:	180d883a 	mov	r6,r3
1000b780:	003f1306 	br	1000b3d0 <__alt_data_end+0xf800b3d0>
1000b784:	813fe436 	bltu	r16,r4,1000b718 <__alt_data_end+0xf800b718>
1000b788:	0007883a 	mov	r3,zero
1000b78c:	003f3f06 	br	1000b48c <__alt_data_end+0xf800b48c>
1000b790:	ba402c36 	bltu	r23,r9,1000b844 <__divdf3+0x810>
1000b794:	4dc05426 	beq	r9,r23,1000b8e8 <__divdf3+0x8b4>
1000b798:	1011883a 	mov	r8,r2
1000b79c:	003f8906 	br	1000b5c4 <__alt_data_end+0xf800b5c4>
1000b7a0:	023fffc4 	movi	r8,-1
1000b7a4:	003f8806 	br	1000b5c8 <__alt_data_end+0xf800b5c8>
1000b7a8:	1811883a 	mov	r8,r3
1000b7ac:	003f5406 	br	1000b500 <__alt_data_end+0xf800b500>
1000b7b0:	1025883a 	mov	r18,r2
1000b7b4:	003f6d06 	br	1000b56c <__alt_data_end+0xf800b56c>
1000b7b8:	b827883a 	mov	r19,r23
1000b7bc:	003f8206 	br	1000b5c8 <__alt_data_end+0xf800b5c8>
1000b7c0:	010007c4 	movi	r4,31
1000b7c4:	20c02616 	blt	r4,r3,1000b860 <__divdf3+0x82c>
1000b7c8:	00800804 	movi	r2,32
1000b7cc:	10c5c83a 	sub	r2,r2,r3
1000b7d0:	888a983a 	sll	r5,r17,r2
1000b7d4:	40c8d83a 	srl	r4,r8,r3
1000b7d8:	4084983a 	sll	r2,r8,r2
1000b7dc:	88e2d83a 	srl	r17,r17,r3
1000b7e0:	2906b03a 	or	r3,r5,r4
1000b7e4:	1004c03a 	cmpne	r2,r2,zero
1000b7e8:	1886b03a 	or	r3,r3,r2
1000b7ec:	188001cc 	andi	r2,r3,7
1000b7f0:	10000726 	beq	r2,zero,1000b810 <__divdf3+0x7dc>
1000b7f4:	188003cc 	andi	r2,r3,15
1000b7f8:	01000104 	movi	r4,4
1000b7fc:	11000426 	beq	r2,r4,1000b810 <__divdf3+0x7dc>
1000b800:	1805883a 	mov	r2,r3
1000b804:	10c00104 	addi	r3,r2,4
1000b808:	1885803a 	cmpltu	r2,r3,r2
1000b80c:	88a3883a 	add	r17,r17,r2
1000b810:	8880202c 	andhi	r2,r17,128
1000b814:	10002726 	beq	r2,zero,1000b8b4 <__divdf3+0x880>
1000b818:	98c0004c 	andi	r3,r19,1
1000b81c:	00800044 	movi	r2,1
1000b820:	000b883a 	mov	r5,zero
1000b824:	0025883a 	mov	r18,zero
1000b828:	003e6106 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b82c:	85a1883a 	add	r16,r16,r22
1000b830:	8585803a 	cmpltu	r2,r16,r22
1000b834:	1705883a 	add	r2,r2,fp
1000b838:	14a5883a 	add	r18,r2,r18
1000b83c:	8c7fff84 	addi	r17,r17,-2
1000b840:	003f1106 	br	1000b488 <__alt_data_end+0xf800b488>
1000b844:	b589883a 	add	r4,r22,r22
1000b848:	25ad803a 	cmpltu	r22,r4,r22
1000b84c:	b739883a 	add	fp,r22,fp
1000b850:	40bfff84 	addi	r2,r8,-2
1000b854:	bf2f883a 	add	r23,r23,fp
1000b858:	202d883a 	mov	r22,r4
1000b85c:	003f9306 	br	1000b6ac <__alt_data_end+0xf800b6ac>
1000b860:	013ff844 	movi	r4,-31
1000b864:	2085c83a 	sub	r2,r4,r2
1000b868:	8888d83a 	srl	r4,r17,r2
1000b86c:	00800804 	movi	r2,32
1000b870:	18802126 	beq	r3,r2,1000b8f8 <__divdf3+0x8c4>
1000b874:	00801004 	movi	r2,64
1000b878:	10c5c83a 	sub	r2,r2,r3
1000b87c:	8884983a 	sll	r2,r17,r2
1000b880:	1204b03a 	or	r2,r2,r8
1000b884:	1004c03a 	cmpne	r2,r2,zero
1000b888:	2084b03a 	or	r2,r4,r2
1000b88c:	144001cc 	andi	r17,r2,7
1000b890:	88000d1e 	bne	r17,zero,1000b8c8 <__divdf3+0x894>
1000b894:	000b883a 	mov	r5,zero
1000b898:	1024d0fa 	srli	r18,r2,3
1000b89c:	98c0004c 	andi	r3,r19,1
1000b8a0:	0005883a 	mov	r2,zero
1000b8a4:	9464b03a 	or	r18,r18,r17
1000b8a8:	003e4106 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b8ac:	1007883a 	mov	r3,r2
1000b8b0:	0023883a 	mov	r17,zero
1000b8b4:	880a927a 	slli	r5,r17,9
1000b8b8:	1805883a 	mov	r2,r3
1000b8bc:	8822977a 	slli	r17,r17,29
1000b8c0:	280ad33a 	srli	r5,r5,12
1000b8c4:	003ff406 	br	1000b898 <__alt_data_end+0xf800b898>
1000b8c8:	10c003cc 	andi	r3,r2,15
1000b8cc:	01000104 	movi	r4,4
1000b8d0:	193ff626 	beq	r3,r4,1000b8ac <__alt_data_end+0xf800b8ac>
1000b8d4:	0023883a 	mov	r17,zero
1000b8d8:	003fca06 	br	1000b804 <__alt_data_end+0xf800b804>
1000b8dc:	813fd336 	bltu	r16,r4,1000b82c <__alt_data_end+0xf800b82c>
1000b8e0:	1023883a 	mov	r17,r2
1000b8e4:	003fa806 	br	1000b788 <__alt_data_end+0xf800b788>
1000b8e8:	b0ffd636 	bltu	r22,r3,1000b844 <__alt_data_end+0xf800b844>
1000b8ec:	1011883a 	mov	r8,r2
1000b8f0:	b0ff341e 	bne	r22,r3,1000b5c4 <__alt_data_end+0xf800b5c4>
1000b8f4:	003f3406 	br	1000b5c8 <__alt_data_end+0xf800b5c8>
1000b8f8:	0005883a 	mov	r2,zero
1000b8fc:	003fe006 	br	1000b880 <__alt_data_end+0xf800b880>
1000b900:	00800434 	movhi	r2,16
1000b904:	89400234 	orhi	r5,r17,8
1000b908:	10bfffc4 	addi	r2,r2,-1
1000b90c:	b807883a 	mov	r3,r23
1000b910:	288a703a 	and	r5,r5,r2
1000b914:	4025883a 	mov	r18,r8
1000b918:	003e8206 	br	1000b324 <__alt_data_end+0xf800b324>

1000b91c <__eqdf2>:
1000b91c:	2804d53a 	srli	r2,r5,20
1000b920:	3806d53a 	srli	r3,r7,20
1000b924:	02000434 	movhi	r8,16
1000b928:	423fffc4 	addi	r8,r8,-1
1000b92c:	1081ffcc 	andi	r2,r2,2047
1000b930:	0281ffc4 	movi	r10,2047
1000b934:	2a12703a 	and	r9,r5,r8
1000b938:	18c1ffcc 	andi	r3,r3,2047
1000b93c:	3a10703a 	and	r8,r7,r8
1000b940:	280ad7fa 	srli	r5,r5,31
1000b944:	380ed7fa 	srli	r7,r7,31
1000b948:	12801026 	beq	r2,r10,1000b98c <__eqdf2+0x70>
1000b94c:	0281ffc4 	movi	r10,2047
1000b950:	1a800a26 	beq	r3,r10,1000b97c <__eqdf2+0x60>
1000b954:	10c00226 	beq	r2,r3,1000b960 <__eqdf2+0x44>
1000b958:	00800044 	movi	r2,1
1000b95c:	f800283a 	ret
1000b960:	4a3ffd1e 	bne	r9,r8,1000b958 <__alt_data_end+0xf800b958>
1000b964:	21bffc1e 	bne	r4,r6,1000b958 <__alt_data_end+0xf800b958>
1000b968:	29c00c26 	beq	r5,r7,1000b99c <__eqdf2+0x80>
1000b96c:	103ffa1e 	bne	r2,zero,1000b958 <__alt_data_end+0xf800b958>
1000b970:	2244b03a 	or	r2,r4,r9
1000b974:	1004c03a 	cmpne	r2,r2,zero
1000b978:	f800283a 	ret
1000b97c:	3214b03a 	or	r10,r6,r8
1000b980:	503ff426 	beq	r10,zero,1000b954 <__alt_data_end+0xf800b954>
1000b984:	00800044 	movi	r2,1
1000b988:	f800283a 	ret
1000b98c:	2254b03a 	or	r10,r4,r9
1000b990:	503fee26 	beq	r10,zero,1000b94c <__alt_data_end+0xf800b94c>
1000b994:	00800044 	movi	r2,1
1000b998:	f800283a 	ret
1000b99c:	0005883a 	mov	r2,zero
1000b9a0:	f800283a 	ret

1000b9a4 <__gedf2>:
1000b9a4:	2804d53a 	srli	r2,r5,20
1000b9a8:	3806d53a 	srli	r3,r7,20
1000b9ac:	02000434 	movhi	r8,16
1000b9b0:	423fffc4 	addi	r8,r8,-1
1000b9b4:	1081ffcc 	andi	r2,r2,2047
1000b9b8:	0241ffc4 	movi	r9,2047
1000b9bc:	2a14703a 	and	r10,r5,r8
1000b9c0:	18c1ffcc 	andi	r3,r3,2047
1000b9c4:	3a10703a 	and	r8,r7,r8
1000b9c8:	280ad7fa 	srli	r5,r5,31
1000b9cc:	380ed7fa 	srli	r7,r7,31
1000b9d0:	12401d26 	beq	r2,r9,1000ba48 <__gedf2+0xa4>
1000b9d4:	0241ffc4 	movi	r9,2047
1000b9d8:	1a401226 	beq	r3,r9,1000ba24 <__gedf2+0x80>
1000b9dc:	1000081e 	bne	r2,zero,1000ba00 <__gedf2+0x5c>
1000b9e0:	2296b03a 	or	r11,r4,r10
1000b9e4:	5813003a 	cmpeq	r9,r11,zero
1000b9e8:	1800091e 	bne	r3,zero,1000ba10 <__gedf2+0x6c>
1000b9ec:	3218b03a 	or	r12,r6,r8
1000b9f0:	6000071e 	bne	r12,zero,1000ba10 <__gedf2+0x6c>
1000b9f4:	0005883a 	mov	r2,zero
1000b9f8:	5800101e 	bne	r11,zero,1000ba3c <__gedf2+0x98>
1000b9fc:	f800283a 	ret
1000ba00:	18000c1e 	bne	r3,zero,1000ba34 <__gedf2+0x90>
1000ba04:	3212b03a 	or	r9,r6,r8
1000ba08:	48000c26 	beq	r9,zero,1000ba3c <__gedf2+0x98>
1000ba0c:	0013883a 	mov	r9,zero
1000ba10:	39c03fcc 	andi	r7,r7,255
1000ba14:	48000826 	beq	r9,zero,1000ba38 <__gedf2+0x94>
1000ba18:	38000926 	beq	r7,zero,1000ba40 <__gedf2+0x9c>
1000ba1c:	00800044 	movi	r2,1
1000ba20:	f800283a 	ret
1000ba24:	3212b03a 	or	r9,r6,r8
1000ba28:	483fec26 	beq	r9,zero,1000b9dc <__alt_data_end+0xf800b9dc>
1000ba2c:	00bfff84 	movi	r2,-2
1000ba30:	f800283a 	ret
1000ba34:	39c03fcc 	andi	r7,r7,255
1000ba38:	29c00626 	beq	r5,r7,1000ba54 <__gedf2+0xb0>
1000ba3c:	283ff726 	beq	r5,zero,1000ba1c <__alt_data_end+0xf800ba1c>
1000ba40:	00bfffc4 	movi	r2,-1
1000ba44:	f800283a 	ret
1000ba48:	2292b03a 	or	r9,r4,r10
1000ba4c:	483fe126 	beq	r9,zero,1000b9d4 <__alt_data_end+0xf800b9d4>
1000ba50:	003ff606 	br	1000ba2c <__alt_data_end+0xf800ba2c>
1000ba54:	18bff916 	blt	r3,r2,1000ba3c <__alt_data_end+0xf800ba3c>
1000ba58:	10c00316 	blt	r2,r3,1000ba68 <__gedf2+0xc4>
1000ba5c:	42bff736 	bltu	r8,r10,1000ba3c <__alt_data_end+0xf800ba3c>
1000ba60:	52000326 	beq	r10,r8,1000ba70 <__gedf2+0xcc>
1000ba64:	5200042e 	bgeu	r10,r8,1000ba78 <__gedf2+0xd4>
1000ba68:	283fec1e 	bne	r5,zero,1000ba1c <__alt_data_end+0xf800ba1c>
1000ba6c:	003ff406 	br	1000ba40 <__alt_data_end+0xf800ba40>
1000ba70:	313ff236 	bltu	r6,r4,1000ba3c <__alt_data_end+0xf800ba3c>
1000ba74:	21bffc36 	bltu	r4,r6,1000ba68 <__alt_data_end+0xf800ba68>
1000ba78:	0005883a 	mov	r2,zero
1000ba7c:	f800283a 	ret

1000ba80 <__ledf2>:
1000ba80:	2804d53a 	srli	r2,r5,20
1000ba84:	3810d53a 	srli	r8,r7,20
1000ba88:	00c00434 	movhi	r3,16
1000ba8c:	18ffffc4 	addi	r3,r3,-1
1000ba90:	1081ffcc 	andi	r2,r2,2047
1000ba94:	0241ffc4 	movi	r9,2047
1000ba98:	28d4703a 	and	r10,r5,r3
1000ba9c:	4201ffcc 	andi	r8,r8,2047
1000baa0:	38c6703a 	and	r3,r7,r3
1000baa4:	280ad7fa 	srli	r5,r5,31
1000baa8:	380ed7fa 	srli	r7,r7,31
1000baac:	12401f26 	beq	r2,r9,1000bb2c <__ledf2+0xac>
1000bab0:	0241ffc4 	movi	r9,2047
1000bab4:	42401426 	beq	r8,r9,1000bb08 <__ledf2+0x88>
1000bab8:	1000091e 	bne	r2,zero,1000bae0 <__ledf2+0x60>
1000babc:	2296b03a 	or	r11,r4,r10
1000bac0:	5813003a 	cmpeq	r9,r11,zero
1000bac4:	29403fcc 	andi	r5,r5,255
1000bac8:	40000a1e 	bne	r8,zero,1000baf4 <__ledf2+0x74>
1000bacc:	30d8b03a 	or	r12,r6,r3
1000bad0:	6000081e 	bne	r12,zero,1000baf4 <__ledf2+0x74>
1000bad4:	0005883a 	mov	r2,zero
1000bad8:	5800111e 	bne	r11,zero,1000bb20 <__ledf2+0xa0>
1000badc:	f800283a 	ret
1000bae0:	29403fcc 	andi	r5,r5,255
1000bae4:	40000c1e 	bne	r8,zero,1000bb18 <__ledf2+0x98>
1000bae8:	30d2b03a 	or	r9,r6,r3
1000baec:	48000c26 	beq	r9,zero,1000bb20 <__ledf2+0xa0>
1000baf0:	0013883a 	mov	r9,zero
1000baf4:	39c03fcc 	andi	r7,r7,255
1000baf8:	48000826 	beq	r9,zero,1000bb1c <__ledf2+0x9c>
1000bafc:	38001126 	beq	r7,zero,1000bb44 <__ledf2+0xc4>
1000bb00:	00800044 	movi	r2,1
1000bb04:	f800283a 	ret
1000bb08:	30d2b03a 	or	r9,r6,r3
1000bb0c:	483fea26 	beq	r9,zero,1000bab8 <__alt_data_end+0xf800bab8>
1000bb10:	00800084 	movi	r2,2
1000bb14:	f800283a 	ret
1000bb18:	39c03fcc 	andi	r7,r7,255
1000bb1c:	39400726 	beq	r7,r5,1000bb3c <__ledf2+0xbc>
1000bb20:	2800081e 	bne	r5,zero,1000bb44 <__ledf2+0xc4>
1000bb24:	00800044 	movi	r2,1
1000bb28:	f800283a 	ret
1000bb2c:	2292b03a 	or	r9,r4,r10
1000bb30:	483fdf26 	beq	r9,zero,1000bab0 <__alt_data_end+0xf800bab0>
1000bb34:	00800084 	movi	r2,2
1000bb38:	f800283a 	ret
1000bb3c:	4080030e 	bge	r8,r2,1000bb4c <__ledf2+0xcc>
1000bb40:	383fef26 	beq	r7,zero,1000bb00 <__alt_data_end+0xf800bb00>
1000bb44:	00bfffc4 	movi	r2,-1
1000bb48:	f800283a 	ret
1000bb4c:	123feb16 	blt	r2,r8,1000bafc <__alt_data_end+0xf800bafc>
1000bb50:	1abff336 	bltu	r3,r10,1000bb20 <__alt_data_end+0xf800bb20>
1000bb54:	50c00326 	beq	r10,r3,1000bb64 <__ledf2+0xe4>
1000bb58:	50c0042e 	bgeu	r10,r3,1000bb6c <__ledf2+0xec>
1000bb5c:	283fe81e 	bne	r5,zero,1000bb00 <__alt_data_end+0xf800bb00>
1000bb60:	003ff806 	br	1000bb44 <__alt_data_end+0xf800bb44>
1000bb64:	313fee36 	bltu	r6,r4,1000bb20 <__alt_data_end+0xf800bb20>
1000bb68:	21bffc36 	bltu	r4,r6,1000bb5c <__alt_data_end+0xf800bb5c>
1000bb6c:	0005883a 	mov	r2,zero
1000bb70:	f800283a 	ret

1000bb74 <__muldf3>:
1000bb74:	defff304 	addi	sp,sp,-52
1000bb78:	2804d53a 	srli	r2,r5,20
1000bb7c:	dd800915 	stw	r22,36(sp)
1000bb80:	282cd7fa 	srli	r22,r5,31
1000bb84:	dc000315 	stw	r16,12(sp)
1000bb88:	04000434 	movhi	r16,16
1000bb8c:	dd400815 	stw	r21,32(sp)
1000bb90:	dc800515 	stw	r18,20(sp)
1000bb94:	843fffc4 	addi	r16,r16,-1
1000bb98:	dfc00c15 	stw	ra,48(sp)
1000bb9c:	df000b15 	stw	fp,44(sp)
1000bba0:	ddc00a15 	stw	r23,40(sp)
1000bba4:	dd000715 	stw	r20,28(sp)
1000bba8:	dcc00615 	stw	r19,24(sp)
1000bbac:	dc400415 	stw	r17,16(sp)
1000bbb0:	1481ffcc 	andi	r18,r2,2047
1000bbb4:	2c20703a 	and	r16,r5,r16
1000bbb8:	b02b883a 	mov	r21,r22
1000bbbc:	b2403fcc 	andi	r9,r22,255
1000bbc0:	90006026 	beq	r18,zero,1000bd44 <__muldf3+0x1d0>
1000bbc4:	0081ffc4 	movi	r2,2047
1000bbc8:	2029883a 	mov	r20,r4
1000bbcc:	90803626 	beq	r18,r2,1000bca8 <__muldf3+0x134>
1000bbd0:	80800434 	orhi	r2,r16,16
1000bbd4:	100490fa 	slli	r2,r2,3
1000bbd8:	2020d77a 	srli	r16,r4,29
1000bbdc:	202890fa 	slli	r20,r4,3
1000bbe0:	94bf0044 	addi	r18,r18,-1023
1000bbe4:	80a0b03a 	or	r16,r16,r2
1000bbe8:	0027883a 	mov	r19,zero
1000bbec:	0039883a 	mov	fp,zero
1000bbf0:	3804d53a 	srli	r2,r7,20
1000bbf4:	382ed7fa 	srli	r23,r7,31
1000bbf8:	04400434 	movhi	r17,16
1000bbfc:	8c7fffc4 	addi	r17,r17,-1
1000bc00:	1081ffcc 	andi	r2,r2,2047
1000bc04:	3011883a 	mov	r8,r6
1000bc08:	3c62703a 	and	r17,r7,r17
1000bc0c:	ba803fcc 	andi	r10,r23,255
1000bc10:	10006d26 	beq	r2,zero,1000bdc8 <__muldf3+0x254>
1000bc14:	00c1ffc4 	movi	r3,2047
1000bc18:	10c06526 	beq	r2,r3,1000bdb0 <__muldf3+0x23c>
1000bc1c:	88c00434 	orhi	r3,r17,16
1000bc20:	180690fa 	slli	r3,r3,3
1000bc24:	3022d77a 	srli	r17,r6,29
1000bc28:	301090fa 	slli	r8,r6,3
1000bc2c:	10bf0044 	addi	r2,r2,-1023
1000bc30:	88e2b03a 	or	r17,r17,r3
1000bc34:	000b883a 	mov	r5,zero
1000bc38:	9085883a 	add	r2,r18,r2
1000bc3c:	2cc8b03a 	or	r4,r5,r19
1000bc40:	00c003c4 	movi	r3,15
1000bc44:	bdacf03a 	xor	r22,r23,r22
1000bc48:	12c00044 	addi	r11,r2,1
1000bc4c:	19009936 	bltu	r3,r4,1000beb4 <__muldf3+0x340>
1000bc50:	200890ba 	slli	r4,r4,2
1000bc54:	00c40074 	movhi	r3,4097
1000bc58:	18ef1a04 	addi	r3,r3,-17304
1000bc5c:	20c9883a 	add	r4,r4,r3
1000bc60:	20c00017 	ldw	r3,0(r4)
1000bc64:	1800683a 	jmp	r3
1000bc68:	1000beb4 	orhi	zero,r2,762
1000bc6c:	1000bcc8 	cmpgei	zero,r2,755
1000bc70:	1000bcc8 	cmpgei	zero,r2,755
1000bc74:	1000bcc4 	addi	zero,r2,755
1000bc78:	1000be90 	cmplti	zero,r2,762
1000bc7c:	1000be90 	cmplti	zero,r2,762
1000bc80:	1000be78 	rdprs	zero,r2,761
1000bc84:	1000bcc4 	addi	zero,r2,755
1000bc88:	1000be90 	cmplti	zero,r2,762
1000bc8c:	1000be78 	rdprs	zero,r2,761
1000bc90:	1000be90 	cmplti	zero,r2,762
1000bc94:	1000bcc4 	addi	zero,r2,755
1000bc98:	1000bea0 	cmpeqi	zero,r2,762
1000bc9c:	1000bea0 	cmpeqi	zero,r2,762
1000bca0:	1000bea0 	cmpeqi	zero,r2,762
1000bca4:	1000c0bc 	xorhi	zero,r2,770
1000bca8:	2404b03a 	or	r2,r4,r16
1000bcac:	10006f1e 	bne	r2,zero,1000be6c <__muldf3+0x2f8>
1000bcb0:	04c00204 	movi	r19,8
1000bcb4:	0021883a 	mov	r16,zero
1000bcb8:	0029883a 	mov	r20,zero
1000bcbc:	07000084 	movi	fp,2
1000bcc0:	003fcb06 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000bcc4:	502d883a 	mov	r22,r10
1000bcc8:	00800084 	movi	r2,2
1000bccc:	28805726 	beq	r5,r2,1000be2c <__muldf3+0x2b8>
1000bcd0:	008000c4 	movi	r2,3
1000bcd4:	28816626 	beq	r5,r2,1000c270 <__muldf3+0x6fc>
1000bcd8:	00800044 	movi	r2,1
1000bcdc:	2881411e 	bne	r5,r2,1000c1e4 <__muldf3+0x670>
1000bce0:	b02b883a 	mov	r21,r22
1000bce4:	0005883a 	mov	r2,zero
1000bce8:	000b883a 	mov	r5,zero
1000bcec:	0029883a 	mov	r20,zero
1000bcf0:	1004953a 	slli	r2,r2,20
1000bcf4:	a8c03fcc 	andi	r3,r21,255
1000bcf8:	04400434 	movhi	r17,16
1000bcfc:	8c7fffc4 	addi	r17,r17,-1
1000bd00:	180697fa 	slli	r3,r3,31
1000bd04:	2c4a703a 	and	r5,r5,r17
1000bd08:	288ab03a 	or	r5,r5,r2
1000bd0c:	28c6b03a 	or	r3,r5,r3
1000bd10:	a005883a 	mov	r2,r20
1000bd14:	dfc00c17 	ldw	ra,48(sp)
1000bd18:	df000b17 	ldw	fp,44(sp)
1000bd1c:	ddc00a17 	ldw	r23,40(sp)
1000bd20:	dd800917 	ldw	r22,36(sp)
1000bd24:	dd400817 	ldw	r21,32(sp)
1000bd28:	dd000717 	ldw	r20,28(sp)
1000bd2c:	dcc00617 	ldw	r19,24(sp)
1000bd30:	dc800517 	ldw	r18,20(sp)
1000bd34:	dc400417 	ldw	r17,16(sp)
1000bd38:	dc000317 	ldw	r16,12(sp)
1000bd3c:	dec00d04 	addi	sp,sp,52
1000bd40:	f800283a 	ret
1000bd44:	2404b03a 	or	r2,r4,r16
1000bd48:	2027883a 	mov	r19,r4
1000bd4c:	10004226 	beq	r2,zero,1000be58 <__muldf3+0x2e4>
1000bd50:	8000fc26 	beq	r16,zero,1000c144 <__muldf3+0x5d0>
1000bd54:	8009883a 	mov	r4,r16
1000bd58:	d9800215 	stw	r6,8(sp)
1000bd5c:	d9c00015 	stw	r7,0(sp)
1000bd60:	da400115 	stw	r9,4(sp)
1000bd64:	000cd8c0 	call	1000cd8c <__clzsi2>
1000bd68:	d9800217 	ldw	r6,8(sp)
1000bd6c:	d9c00017 	ldw	r7,0(sp)
1000bd70:	da400117 	ldw	r9,4(sp)
1000bd74:	113ffd44 	addi	r4,r2,-11
1000bd78:	00c00704 	movi	r3,28
1000bd7c:	1900ed16 	blt	r3,r4,1000c134 <__muldf3+0x5c0>
1000bd80:	00c00744 	movi	r3,29
1000bd84:	147ffe04 	addi	r17,r2,-8
1000bd88:	1907c83a 	sub	r3,r3,r4
1000bd8c:	8460983a 	sll	r16,r16,r17
1000bd90:	98c6d83a 	srl	r3,r19,r3
1000bd94:	9c68983a 	sll	r20,r19,r17
1000bd98:	1c20b03a 	or	r16,r3,r16
1000bd9c:	1080fcc4 	addi	r2,r2,1011
1000bda0:	00a5c83a 	sub	r18,zero,r2
1000bda4:	0027883a 	mov	r19,zero
1000bda8:	0039883a 	mov	fp,zero
1000bdac:	003f9006 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000bdb0:	3446b03a 	or	r3,r6,r17
1000bdb4:	1800261e 	bne	r3,zero,1000be50 <__muldf3+0x2dc>
1000bdb8:	0023883a 	mov	r17,zero
1000bdbc:	0011883a 	mov	r8,zero
1000bdc0:	01400084 	movi	r5,2
1000bdc4:	003f9c06 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000bdc8:	3446b03a 	or	r3,r6,r17
1000bdcc:	18001c26 	beq	r3,zero,1000be40 <__muldf3+0x2cc>
1000bdd0:	8800ce26 	beq	r17,zero,1000c10c <__muldf3+0x598>
1000bdd4:	8809883a 	mov	r4,r17
1000bdd8:	d9800215 	stw	r6,8(sp)
1000bddc:	da400115 	stw	r9,4(sp)
1000bde0:	da800015 	stw	r10,0(sp)
1000bde4:	000cd8c0 	call	1000cd8c <__clzsi2>
1000bde8:	d9800217 	ldw	r6,8(sp)
1000bdec:	da400117 	ldw	r9,4(sp)
1000bdf0:	da800017 	ldw	r10,0(sp)
1000bdf4:	113ffd44 	addi	r4,r2,-11
1000bdf8:	00c00704 	movi	r3,28
1000bdfc:	1900bf16 	blt	r3,r4,1000c0fc <__muldf3+0x588>
1000be00:	00c00744 	movi	r3,29
1000be04:	123ffe04 	addi	r8,r2,-8
1000be08:	1907c83a 	sub	r3,r3,r4
1000be0c:	8a22983a 	sll	r17,r17,r8
1000be10:	30c6d83a 	srl	r3,r6,r3
1000be14:	3210983a 	sll	r8,r6,r8
1000be18:	1c62b03a 	or	r17,r3,r17
1000be1c:	1080fcc4 	addi	r2,r2,1011
1000be20:	0085c83a 	sub	r2,zero,r2
1000be24:	000b883a 	mov	r5,zero
1000be28:	003f8306 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000be2c:	b02b883a 	mov	r21,r22
1000be30:	0081ffc4 	movi	r2,2047
1000be34:	000b883a 	mov	r5,zero
1000be38:	0029883a 	mov	r20,zero
1000be3c:	003fac06 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000be40:	0023883a 	mov	r17,zero
1000be44:	0011883a 	mov	r8,zero
1000be48:	01400044 	movi	r5,1
1000be4c:	003f7a06 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000be50:	014000c4 	movi	r5,3
1000be54:	003f7806 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000be58:	04c00104 	movi	r19,4
1000be5c:	0021883a 	mov	r16,zero
1000be60:	0029883a 	mov	r20,zero
1000be64:	07000044 	movi	fp,1
1000be68:	003f6106 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000be6c:	04c00304 	movi	r19,12
1000be70:	070000c4 	movi	fp,3
1000be74:	003f5e06 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000be78:	01400434 	movhi	r5,16
1000be7c:	002b883a 	mov	r21,zero
1000be80:	297fffc4 	addi	r5,r5,-1
1000be84:	053fffc4 	movi	r20,-1
1000be88:	0081ffc4 	movi	r2,2047
1000be8c:	003f9806 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000be90:	8023883a 	mov	r17,r16
1000be94:	a011883a 	mov	r8,r20
1000be98:	e00b883a 	mov	r5,fp
1000be9c:	003f8a06 	br	1000bcc8 <__alt_data_end+0xf800bcc8>
1000bea0:	8023883a 	mov	r17,r16
1000bea4:	a011883a 	mov	r8,r20
1000bea8:	482d883a 	mov	r22,r9
1000beac:	e00b883a 	mov	r5,fp
1000beb0:	003f8506 	br	1000bcc8 <__alt_data_end+0xf800bcc8>
1000beb4:	a00ad43a 	srli	r5,r20,16
1000beb8:	401ad43a 	srli	r13,r8,16
1000bebc:	a53fffcc 	andi	r20,r20,65535
1000bec0:	423fffcc 	andi	r8,r8,65535
1000bec4:	4519383a 	mul	r12,r8,r20
1000bec8:	4147383a 	mul	r3,r8,r5
1000becc:	6d09383a 	mul	r4,r13,r20
1000bed0:	600cd43a 	srli	r6,r12,16
1000bed4:	2b5d383a 	mul	r14,r5,r13
1000bed8:	20c9883a 	add	r4,r4,r3
1000bedc:	310d883a 	add	r6,r6,r4
1000bee0:	30c0022e 	bgeu	r6,r3,1000beec <__muldf3+0x378>
1000bee4:	00c00074 	movhi	r3,1
1000bee8:	70dd883a 	add	r14,r14,r3
1000beec:	8826d43a 	srli	r19,r17,16
1000bef0:	8bffffcc 	andi	r15,r17,65535
1000bef4:	7d23383a 	mul	r17,r15,r20
1000bef8:	7949383a 	mul	r4,r15,r5
1000befc:	9d29383a 	mul	r20,r19,r20
1000bf00:	8814d43a 	srli	r10,r17,16
1000bf04:	3012943a 	slli	r9,r6,16
1000bf08:	a129883a 	add	r20,r20,r4
1000bf0c:	633fffcc 	andi	r12,r12,65535
1000bf10:	5515883a 	add	r10,r10,r20
1000bf14:	3006d43a 	srli	r3,r6,16
1000bf18:	4b13883a 	add	r9,r9,r12
1000bf1c:	2ccb383a 	mul	r5,r5,r19
1000bf20:	5100022e 	bgeu	r10,r4,1000bf2c <__muldf3+0x3b8>
1000bf24:	01000074 	movhi	r4,1
1000bf28:	290b883a 	add	r5,r5,r4
1000bf2c:	802ad43a 	srli	r21,r16,16
1000bf30:	843fffcc 	andi	r16,r16,65535
1000bf34:	440d383a 	mul	r6,r8,r16
1000bf38:	4565383a 	mul	r18,r8,r21
1000bf3c:	8349383a 	mul	r4,r16,r13
1000bf40:	500e943a 	slli	r7,r10,16
1000bf44:	3010d43a 	srli	r8,r6,16
1000bf48:	5028d43a 	srli	r20,r10,16
1000bf4c:	2489883a 	add	r4,r4,r18
1000bf50:	8abfffcc 	andi	r10,r17,65535
1000bf54:	3a95883a 	add	r10,r7,r10
1000bf58:	4119883a 	add	r12,r8,r4
1000bf5c:	a169883a 	add	r20,r20,r5
1000bf60:	1a87883a 	add	r3,r3,r10
1000bf64:	6d5b383a 	mul	r13,r13,r21
1000bf68:	6480022e 	bgeu	r12,r18,1000bf74 <__muldf3+0x400>
1000bf6c:	01000074 	movhi	r4,1
1000bf70:	691b883a 	add	r13,r13,r4
1000bf74:	7c25383a 	mul	r18,r15,r16
1000bf78:	7d4b383a 	mul	r5,r15,r21
1000bf7c:	84cf383a 	mul	r7,r16,r19
1000bf80:	901ed43a 	srli	r15,r18,16
1000bf84:	6008d43a 	srli	r4,r12,16
1000bf88:	6010943a 	slli	r8,r12,16
1000bf8c:	394f883a 	add	r7,r7,r5
1000bf90:	333fffcc 	andi	r12,r6,65535
1000bf94:	79df883a 	add	r15,r15,r7
1000bf98:	235b883a 	add	r13,r4,r13
1000bf9c:	9d63383a 	mul	r17,r19,r21
1000bfa0:	4309883a 	add	r4,r8,r12
1000bfa4:	7940022e 	bgeu	r15,r5,1000bfb0 <__muldf3+0x43c>
1000bfa8:	01400074 	movhi	r5,1
1000bfac:	8963883a 	add	r17,r17,r5
1000bfb0:	780a943a 	slli	r5,r15,16
1000bfb4:	91bfffcc 	andi	r6,r18,65535
1000bfb8:	70c7883a 	add	r3,r14,r3
1000bfbc:	298d883a 	add	r6,r5,r6
1000bfc0:	1a8f803a 	cmpltu	r7,r3,r10
1000bfc4:	350b883a 	add	r5,r6,r20
1000bfc8:	20c7883a 	add	r3,r4,r3
1000bfcc:	3955883a 	add	r10,r7,r5
1000bfd0:	1909803a 	cmpltu	r4,r3,r4
1000bfd4:	6a91883a 	add	r8,r13,r10
1000bfd8:	780cd43a 	srli	r6,r15,16
1000bfdc:	2219883a 	add	r12,r4,r8
1000bfe0:	2d0b803a 	cmpltu	r5,r5,r20
1000bfe4:	51cf803a 	cmpltu	r7,r10,r7
1000bfe8:	29ceb03a 	or	r7,r5,r7
1000bfec:	4351803a 	cmpltu	r8,r8,r13
1000bff0:	610b803a 	cmpltu	r5,r12,r4
1000bff4:	4148b03a 	or	r4,r8,r5
1000bff8:	398f883a 	add	r7,r7,r6
1000bffc:	3909883a 	add	r4,r7,r4
1000c000:	1810927a 	slli	r8,r3,9
1000c004:	2449883a 	add	r4,r4,r17
1000c008:	2008927a 	slli	r4,r4,9
1000c00c:	6022d5fa 	srli	r17,r12,23
1000c010:	1806d5fa 	srli	r3,r3,23
1000c014:	4252b03a 	or	r9,r8,r9
1000c018:	600a927a 	slli	r5,r12,9
1000c01c:	4810c03a 	cmpne	r8,r9,zero
1000c020:	2462b03a 	or	r17,r4,r17
1000c024:	40c6b03a 	or	r3,r8,r3
1000c028:	8900402c 	andhi	r4,r17,256
1000c02c:	1950b03a 	or	r8,r3,r5
1000c030:	20000726 	beq	r4,zero,1000c050 <__muldf3+0x4dc>
1000c034:	4006d07a 	srli	r3,r8,1
1000c038:	880497fa 	slli	r2,r17,31
1000c03c:	4200004c 	andi	r8,r8,1
1000c040:	8822d07a 	srli	r17,r17,1
1000c044:	1a10b03a 	or	r8,r3,r8
1000c048:	1210b03a 	or	r8,r2,r8
1000c04c:	5805883a 	mov	r2,r11
1000c050:	1140ffc4 	addi	r5,r2,1023
1000c054:	0140440e 	bge	zero,r5,1000c168 <__muldf3+0x5f4>
1000c058:	40c001cc 	andi	r3,r8,7
1000c05c:	18000726 	beq	r3,zero,1000c07c <__muldf3+0x508>
1000c060:	40c003cc 	andi	r3,r8,15
1000c064:	01000104 	movi	r4,4
1000c068:	19000426 	beq	r3,r4,1000c07c <__muldf3+0x508>
1000c06c:	4107883a 	add	r3,r8,r4
1000c070:	1a11803a 	cmpltu	r8,r3,r8
1000c074:	8a23883a 	add	r17,r17,r8
1000c078:	1811883a 	mov	r8,r3
1000c07c:	88c0402c 	andhi	r3,r17,256
1000c080:	18000426 	beq	r3,zero,1000c094 <__muldf3+0x520>
1000c084:	11410004 	addi	r5,r2,1024
1000c088:	00bfc034 	movhi	r2,65280
1000c08c:	10bfffc4 	addi	r2,r2,-1
1000c090:	88a2703a 	and	r17,r17,r2
1000c094:	0081ff84 	movi	r2,2046
1000c098:	117f6416 	blt	r2,r5,1000be2c <__alt_data_end+0xf800be2c>
1000c09c:	8828977a 	slli	r20,r17,29
1000c0a0:	4010d0fa 	srli	r8,r8,3
1000c0a4:	8822927a 	slli	r17,r17,9
1000c0a8:	2881ffcc 	andi	r2,r5,2047
1000c0ac:	a228b03a 	or	r20,r20,r8
1000c0b0:	880ad33a 	srli	r5,r17,12
1000c0b4:	b02b883a 	mov	r21,r22
1000c0b8:	003f0d06 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000c0bc:	8080022c 	andhi	r2,r16,8
1000c0c0:	10000926 	beq	r2,zero,1000c0e8 <__muldf3+0x574>
1000c0c4:	8880022c 	andhi	r2,r17,8
1000c0c8:	1000071e 	bne	r2,zero,1000c0e8 <__muldf3+0x574>
1000c0cc:	00800434 	movhi	r2,16
1000c0d0:	89400234 	orhi	r5,r17,8
1000c0d4:	10bfffc4 	addi	r2,r2,-1
1000c0d8:	b82b883a 	mov	r21,r23
1000c0dc:	288a703a 	and	r5,r5,r2
1000c0e0:	4029883a 	mov	r20,r8
1000c0e4:	003f6806 	br	1000be88 <__alt_data_end+0xf800be88>
1000c0e8:	00800434 	movhi	r2,16
1000c0ec:	81400234 	orhi	r5,r16,8
1000c0f0:	10bfffc4 	addi	r2,r2,-1
1000c0f4:	288a703a 	and	r5,r5,r2
1000c0f8:	003f6306 	br	1000be88 <__alt_data_end+0xf800be88>
1000c0fc:	147ff604 	addi	r17,r2,-40
1000c100:	3462983a 	sll	r17,r6,r17
1000c104:	0011883a 	mov	r8,zero
1000c108:	003f4406 	br	1000be1c <__alt_data_end+0xf800be1c>
1000c10c:	3009883a 	mov	r4,r6
1000c110:	d9800215 	stw	r6,8(sp)
1000c114:	da400115 	stw	r9,4(sp)
1000c118:	da800015 	stw	r10,0(sp)
1000c11c:	000cd8c0 	call	1000cd8c <__clzsi2>
1000c120:	10800804 	addi	r2,r2,32
1000c124:	da800017 	ldw	r10,0(sp)
1000c128:	da400117 	ldw	r9,4(sp)
1000c12c:	d9800217 	ldw	r6,8(sp)
1000c130:	003f3006 	br	1000bdf4 <__alt_data_end+0xf800bdf4>
1000c134:	143ff604 	addi	r16,r2,-40
1000c138:	9c20983a 	sll	r16,r19,r16
1000c13c:	0029883a 	mov	r20,zero
1000c140:	003f1606 	br	1000bd9c <__alt_data_end+0xf800bd9c>
1000c144:	d9800215 	stw	r6,8(sp)
1000c148:	d9c00015 	stw	r7,0(sp)
1000c14c:	da400115 	stw	r9,4(sp)
1000c150:	000cd8c0 	call	1000cd8c <__clzsi2>
1000c154:	10800804 	addi	r2,r2,32
1000c158:	da400117 	ldw	r9,4(sp)
1000c15c:	d9c00017 	ldw	r7,0(sp)
1000c160:	d9800217 	ldw	r6,8(sp)
1000c164:	003f0306 	br	1000bd74 <__alt_data_end+0xf800bd74>
1000c168:	00c00044 	movi	r3,1
1000c16c:	1947c83a 	sub	r3,r3,r5
1000c170:	00800e04 	movi	r2,56
1000c174:	10feda16 	blt	r2,r3,1000bce0 <__alt_data_end+0xf800bce0>
1000c178:	008007c4 	movi	r2,31
1000c17c:	10c01b16 	blt	r2,r3,1000c1ec <__muldf3+0x678>
1000c180:	00800804 	movi	r2,32
1000c184:	10c5c83a 	sub	r2,r2,r3
1000c188:	888a983a 	sll	r5,r17,r2
1000c18c:	40c8d83a 	srl	r4,r8,r3
1000c190:	4084983a 	sll	r2,r8,r2
1000c194:	88e2d83a 	srl	r17,r17,r3
1000c198:	2906b03a 	or	r3,r5,r4
1000c19c:	1004c03a 	cmpne	r2,r2,zero
1000c1a0:	1886b03a 	or	r3,r3,r2
1000c1a4:	188001cc 	andi	r2,r3,7
1000c1a8:	10000726 	beq	r2,zero,1000c1c8 <__muldf3+0x654>
1000c1ac:	188003cc 	andi	r2,r3,15
1000c1b0:	01000104 	movi	r4,4
1000c1b4:	11000426 	beq	r2,r4,1000c1c8 <__muldf3+0x654>
1000c1b8:	1805883a 	mov	r2,r3
1000c1bc:	10c00104 	addi	r3,r2,4
1000c1c0:	1885803a 	cmpltu	r2,r3,r2
1000c1c4:	88a3883a 	add	r17,r17,r2
1000c1c8:	8880202c 	andhi	r2,r17,128
1000c1cc:	10001c26 	beq	r2,zero,1000c240 <__muldf3+0x6cc>
1000c1d0:	b02b883a 	mov	r21,r22
1000c1d4:	00800044 	movi	r2,1
1000c1d8:	000b883a 	mov	r5,zero
1000c1dc:	0029883a 	mov	r20,zero
1000c1e0:	003ec306 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000c1e4:	5805883a 	mov	r2,r11
1000c1e8:	003f9906 	br	1000c050 <__alt_data_end+0xf800c050>
1000c1ec:	00bff844 	movi	r2,-31
1000c1f0:	1145c83a 	sub	r2,r2,r5
1000c1f4:	8888d83a 	srl	r4,r17,r2
1000c1f8:	00800804 	movi	r2,32
1000c1fc:	18801a26 	beq	r3,r2,1000c268 <__muldf3+0x6f4>
1000c200:	00801004 	movi	r2,64
1000c204:	10c5c83a 	sub	r2,r2,r3
1000c208:	8884983a 	sll	r2,r17,r2
1000c20c:	1204b03a 	or	r2,r2,r8
1000c210:	1004c03a 	cmpne	r2,r2,zero
1000c214:	2084b03a 	or	r2,r4,r2
1000c218:	144001cc 	andi	r17,r2,7
1000c21c:	88000d1e 	bne	r17,zero,1000c254 <__muldf3+0x6e0>
1000c220:	000b883a 	mov	r5,zero
1000c224:	1028d0fa 	srli	r20,r2,3
1000c228:	b02b883a 	mov	r21,r22
1000c22c:	0005883a 	mov	r2,zero
1000c230:	a468b03a 	or	r20,r20,r17
1000c234:	003eae06 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000c238:	1007883a 	mov	r3,r2
1000c23c:	0023883a 	mov	r17,zero
1000c240:	880a927a 	slli	r5,r17,9
1000c244:	1805883a 	mov	r2,r3
1000c248:	8822977a 	slli	r17,r17,29
1000c24c:	280ad33a 	srli	r5,r5,12
1000c250:	003ff406 	br	1000c224 <__alt_data_end+0xf800c224>
1000c254:	10c003cc 	andi	r3,r2,15
1000c258:	01000104 	movi	r4,4
1000c25c:	193ff626 	beq	r3,r4,1000c238 <__alt_data_end+0xf800c238>
1000c260:	0023883a 	mov	r17,zero
1000c264:	003fd506 	br	1000c1bc <__alt_data_end+0xf800c1bc>
1000c268:	0005883a 	mov	r2,zero
1000c26c:	003fe706 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c270:	00800434 	movhi	r2,16
1000c274:	89400234 	orhi	r5,r17,8
1000c278:	10bfffc4 	addi	r2,r2,-1
1000c27c:	b02b883a 	mov	r21,r22
1000c280:	288a703a 	and	r5,r5,r2
1000c284:	4029883a 	mov	r20,r8
1000c288:	003eff06 	br	1000be88 <__alt_data_end+0xf800be88>

1000c28c <__subdf3>:
1000c28c:	02000434 	movhi	r8,16
1000c290:	423fffc4 	addi	r8,r8,-1
1000c294:	defffb04 	addi	sp,sp,-20
1000c298:	2a14703a 	and	r10,r5,r8
1000c29c:	3812d53a 	srli	r9,r7,20
1000c2a0:	3a10703a 	and	r8,r7,r8
1000c2a4:	2006d77a 	srli	r3,r4,29
1000c2a8:	3004d77a 	srli	r2,r6,29
1000c2ac:	dc000015 	stw	r16,0(sp)
1000c2b0:	501490fa 	slli	r10,r10,3
1000c2b4:	2820d53a 	srli	r16,r5,20
1000c2b8:	401090fa 	slli	r8,r8,3
1000c2bc:	dc800215 	stw	r18,8(sp)
1000c2c0:	dc400115 	stw	r17,4(sp)
1000c2c4:	dfc00415 	stw	ra,16(sp)
1000c2c8:	202290fa 	slli	r17,r4,3
1000c2cc:	dcc00315 	stw	r19,12(sp)
1000c2d0:	4a41ffcc 	andi	r9,r9,2047
1000c2d4:	0101ffc4 	movi	r4,2047
1000c2d8:	2824d7fa 	srli	r18,r5,31
1000c2dc:	8401ffcc 	andi	r16,r16,2047
1000c2e0:	50c6b03a 	or	r3,r10,r3
1000c2e4:	380ed7fa 	srli	r7,r7,31
1000c2e8:	408ab03a 	or	r5,r8,r2
1000c2ec:	300c90fa 	slli	r6,r6,3
1000c2f0:	49009626 	beq	r9,r4,1000c54c <__subdf3+0x2c0>
1000c2f4:	39c0005c 	xori	r7,r7,1
1000c2f8:	8245c83a 	sub	r2,r16,r9
1000c2fc:	3c807426 	beq	r7,r18,1000c4d0 <__subdf3+0x244>
1000c300:	0080af0e 	bge	zero,r2,1000c5c0 <__subdf3+0x334>
1000c304:	48002a1e 	bne	r9,zero,1000c3b0 <__subdf3+0x124>
1000c308:	2988b03a 	or	r4,r5,r6
1000c30c:	20009a1e 	bne	r4,zero,1000c578 <__subdf3+0x2ec>
1000c310:	888001cc 	andi	r2,r17,7
1000c314:	10000726 	beq	r2,zero,1000c334 <__subdf3+0xa8>
1000c318:	888003cc 	andi	r2,r17,15
1000c31c:	01000104 	movi	r4,4
1000c320:	11000426 	beq	r2,r4,1000c334 <__subdf3+0xa8>
1000c324:	890b883a 	add	r5,r17,r4
1000c328:	2c63803a 	cmpltu	r17,r5,r17
1000c32c:	1c47883a 	add	r3,r3,r17
1000c330:	2823883a 	mov	r17,r5
1000c334:	1880202c 	andhi	r2,r3,128
1000c338:	10005926 	beq	r2,zero,1000c4a0 <__subdf3+0x214>
1000c33c:	84000044 	addi	r16,r16,1
1000c340:	0081ffc4 	movi	r2,2047
1000c344:	8080be26 	beq	r16,r2,1000c640 <__subdf3+0x3b4>
1000c348:	017fe034 	movhi	r5,65408
1000c34c:	297fffc4 	addi	r5,r5,-1
1000c350:	1946703a 	and	r3,r3,r5
1000c354:	1804977a 	slli	r2,r3,29
1000c358:	1806927a 	slli	r3,r3,9
1000c35c:	8822d0fa 	srli	r17,r17,3
1000c360:	8401ffcc 	andi	r16,r16,2047
1000c364:	180ad33a 	srli	r5,r3,12
1000c368:	9100004c 	andi	r4,r18,1
1000c36c:	1444b03a 	or	r2,r2,r17
1000c370:	80c1ffcc 	andi	r3,r16,2047
1000c374:	1820953a 	slli	r16,r3,20
1000c378:	20c03fcc 	andi	r3,r4,255
1000c37c:	180897fa 	slli	r4,r3,31
1000c380:	00c00434 	movhi	r3,16
1000c384:	18ffffc4 	addi	r3,r3,-1
1000c388:	28c6703a 	and	r3,r5,r3
1000c38c:	1c06b03a 	or	r3,r3,r16
1000c390:	1906b03a 	or	r3,r3,r4
1000c394:	dfc00417 	ldw	ra,16(sp)
1000c398:	dcc00317 	ldw	r19,12(sp)
1000c39c:	dc800217 	ldw	r18,8(sp)
1000c3a0:	dc400117 	ldw	r17,4(sp)
1000c3a4:	dc000017 	ldw	r16,0(sp)
1000c3a8:	dec00504 	addi	sp,sp,20
1000c3ac:	f800283a 	ret
1000c3b0:	0101ffc4 	movi	r4,2047
1000c3b4:	813fd626 	beq	r16,r4,1000c310 <__alt_data_end+0xf800c310>
1000c3b8:	29402034 	orhi	r5,r5,128
1000c3bc:	01000e04 	movi	r4,56
1000c3c0:	2080a316 	blt	r4,r2,1000c650 <__subdf3+0x3c4>
1000c3c4:	010007c4 	movi	r4,31
1000c3c8:	2080c616 	blt	r4,r2,1000c6e4 <__subdf3+0x458>
1000c3cc:	01000804 	movi	r4,32
1000c3d0:	2089c83a 	sub	r4,r4,r2
1000c3d4:	2910983a 	sll	r8,r5,r4
1000c3d8:	308ed83a 	srl	r7,r6,r2
1000c3dc:	3108983a 	sll	r4,r6,r4
1000c3e0:	2884d83a 	srl	r2,r5,r2
1000c3e4:	41ccb03a 	or	r6,r8,r7
1000c3e8:	2008c03a 	cmpne	r4,r4,zero
1000c3ec:	310cb03a 	or	r6,r6,r4
1000c3f0:	898dc83a 	sub	r6,r17,r6
1000c3f4:	89a3803a 	cmpltu	r17,r17,r6
1000c3f8:	1887c83a 	sub	r3,r3,r2
1000c3fc:	1c47c83a 	sub	r3,r3,r17
1000c400:	3023883a 	mov	r17,r6
1000c404:	1880202c 	andhi	r2,r3,128
1000c408:	10002326 	beq	r2,zero,1000c498 <__subdf3+0x20c>
1000c40c:	04c02034 	movhi	r19,128
1000c410:	9cffffc4 	addi	r19,r19,-1
1000c414:	1ce6703a 	and	r19,r3,r19
1000c418:	98007a26 	beq	r19,zero,1000c604 <__subdf3+0x378>
1000c41c:	9809883a 	mov	r4,r19
1000c420:	000cd8c0 	call	1000cd8c <__clzsi2>
1000c424:	113ffe04 	addi	r4,r2,-8
1000c428:	00c007c4 	movi	r3,31
1000c42c:	19007b16 	blt	r3,r4,1000c61c <__subdf3+0x390>
1000c430:	00800804 	movi	r2,32
1000c434:	1105c83a 	sub	r2,r2,r4
1000c438:	8884d83a 	srl	r2,r17,r2
1000c43c:	9906983a 	sll	r3,r19,r4
1000c440:	8922983a 	sll	r17,r17,r4
1000c444:	10c4b03a 	or	r2,r2,r3
1000c448:	24007816 	blt	r4,r16,1000c62c <__subdf3+0x3a0>
1000c44c:	2421c83a 	sub	r16,r4,r16
1000c450:	80c00044 	addi	r3,r16,1
1000c454:	010007c4 	movi	r4,31
1000c458:	20c09516 	blt	r4,r3,1000c6b0 <__subdf3+0x424>
1000c45c:	01400804 	movi	r5,32
1000c460:	28cbc83a 	sub	r5,r5,r3
1000c464:	88c8d83a 	srl	r4,r17,r3
1000c468:	8962983a 	sll	r17,r17,r5
1000c46c:	114a983a 	sll	r5,r2,r5
1000c470:	10c6d83a 	srl	r3,r2,r3
1000c474:	8804c03a 	cmpne	r2,r17,zero
1000c478:	290ab03a 	or	r5,r5,r4
1000c47c:	28a2b03a 	or	r17,r5,r2
1000c480:	0021883a 	mov	r16,zero
1000c484:	003fa206 	br	1000c310 <__alt_data_end+0xf800c310>
1000c488:	2090b03a 	or	r8,r4,r2
1000c48c:	40018e26 	beq	r8,zero,1000cac8 <__subdf3+0x83c>
1000c490:	1007883a 	mov	r3,r2
1000c494:	2023883a 	mov	r17,r4
1000c498:	888001cc 	andi	r2,r17,7
1000c49c:	103f9e1e 	bne	r2,zero,1000c318 <__alt_data_end+0xf800c318>
1000c4a0:	1804977a 	slli	r2,r3,29
1000c4a4:	8822d0fa 	srli	r17,r17,3
1000c4a8:	1810d0fa 	srli	r8,r3,3
1000c4ac:	9100004c 	andi	r4,r18,1
1000c4b0:	1444b03a 	or	r2,r2,r17
1000c4b4:	00c1ffc4 	movi	r3,2047
1000c4b8:	80c02826 	beq	r16,r3,1000c55c <__subdf3+0x2d0>
1000c4bc:	01400434 	movhi	r5,16
1000c4c0:	297fffc4 	addi	r5,r5,-1
1000c4c4:	80e0703a 	and	r16,r16,r3
1000c4c8:	414a703a 	and	r5,r8,r5
1000c4cc:	003fa806 	br	1000c370 <__alt_data_end+0xf800c370>
1000c4d0:	0080630e 	bge	zero,r2,1000c660 <__subdf3+0x3d4>
1000c4d4:	48003026 	beq	r9,zero,1000c598 <__subdf3+0x30c>
1000c4d8:	0101ffc4 	movi	r4,2047
1000c4dc:	813f8c26 	beq	r16,r4,1000c310 <__alt_data_end+0xf800c310>
1000c4e0:	29402034 	orhi	r5,r5,128
1000c4e4:	01000e04 	movi	r4,56
1000c4e8:	2080a90e 	bge	r4,r2,1000c790 <__subdf3+0x504>
1000c4ec:	298cb03a 	or	r6,r5,r6
1000c4f0:	3012c03a 	cmpne	r9,r6,zero
1000c4f4:	0005883a 	mov	r2,zero
1000c4f8:	4c53883a 	add	r9,r9,r17
1000c4fc:	4c63803a 	cmpltu	r17,r9,r17
1000c500:	10c7883a 	add	r3,r2,r3
1000c504:	88c7883a 	add	r3,r17,r3
1000c508:	4823883a 	mov	r17,r9
1000c50c:	1880202c 	andhi	r2,r3,128
1000c510:	1000d026 	beq	r2,zero,1000c854 <__subdf3+0x5c8>
1000c514:	84000044 	addi	r16,r16,1
1000c518:	0081ffc4 	movi	r2,2047
1000c51c:	8080fe26 	beq	r16,r2,1000c918 <__subdf3+0x68c>
1000c520:	00bfe034 	movhi	r2,65408
1000c524:	10bfffc4 	addi	r2,r2,-1
1000c528:	1886703a 	and	r3,r3,r2
1000c52c:	880ad07a 	srli	r5,r17,1
1000c530:	180497fa 	slli	r2,r3,31
1000c534:	8900004c 	andi	r4,r17,1
1000c538:	2922b03a 	or	r17,r5,r4
1000c53c:	1806d07a 	srli	r3,r3,1
1000c540:	1462b03a 	or	r17,r2,r17
1000c544:	3825883a 	mov	r18,r7
1000c548:	003f7106 	br	1000c310 <__alt_data_end+0xf800c310>
1000c54c:	2984b03a 	or	r2,r5,r6
1000c550:	103f6826 	beq	r2,zero,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c554:	39c03fcc 	andi	r7,r7,255
1000c558:	003f6706 	br	1000c2f8 <__alt_data_end+0xf800c2f8>
1000c55c:	4086b03a 	or	r3,r8,r2
1000c560:	18015226 	beq	r3,zero,1000caac <__subdf3+0x820>
1000c564:	00c00434 	movhi	r3,16
1000c568:	41400234 	orhi	r5,r8,8
1000c56c:	18ffffc4 	addi	r3,r3,-1
1000c570:	28ca703a 	and	r5,r5,r3
1000c574:	003f7e06 	br	1000c370 <__alt_data_end+0xf800c370>
1000c578:	10bfffc4 	addi	r2,r2,-1
1000c57c:	1000491e 	bne	r2,zero,1000c6a4 <__subdf3+0x418>
1000c580:	898fc83a 	sub	r7,r17,r6
1000c584:	89e3803a 	cmpltu	r17,r17,r7
1000c588:	1947c83a 	sub	r3,r3,r5
1000c58c:	1c47c83a 	sub	r3,r3,r17
1000c590:	3823883a 	mov	r17,r7
1000c594:	003f9b06 	br	1000c404 <__alt_data_end+0xf800c404>
1000c598:	2988b03a 	or	r4,r5,r6
1000c59c:	203f5c26 	beq	r4,zero,1000c310 <__alt_data_end+0xf800c310>
1000c5a0:	10bfffc4 	addi	r2,r2,-1
1000c5a4:	1000931e 	bne	r2,zero,1000c7f4 <__subdf3+0x568>
1000c5a8:	898d883a 	add	r6,r17,r6
1000c5ac:	3463803a 	cmpltu	r17,r6,r17
1000c5b0:	1947883a 	add	r3,r3,r5
1000c5b4:	88c7883a 	add	r3,r17,r3
1000c5b8:	3023883a 	mov	r17,r6
1000c5bc:	003fd306 	br	1000c50c <__alt_data_end+0xf800c50c>
1000c5c0:	1000541e 	bne	r2,zero,1000c714 <__subdf3+0x488>
1000c5c4:	80800044 	addi	r2,r16,1
1000c5c8:	1081ffcc 	andi	r2,r2,2047
1000c5cc:	01000044 	movi	r4,1
1000c5d0:	2080a20e 	bge	r4,r2,1000c85c <__subdf3+0x5d0>
1000c5d4:	8989c83a 	sub	r4,r17,r6
1000c5d8:	8905803a 	cmpltu	r2,r17,r4
1000c5dc:	1967c83a 	sub	r19,r3,r5
1000c5e0:	98a7c83a 	sub	r19,r19,r2
1000c5e4:	9880202c 	andhi	r2,r19,128
1000c5e8:	10006326 	beq	r2,zero,1000c778 <__subdf3+0x4ec>
1000c5ec:	3463c83a 	sub	r17,r6,r17
1000c5f0:	28c7c83a 	sub	r3,r5,r3
1000c5f4:	344d803a 	cmpltu	r6,r6,r17
1000c5f8:	19a7c83a 	sub	r19,r3,r6
1000c5fc:	3825883a 	mov	r18,r7
1000c600:	983f861e 	bne	r19,zero,1000c41c <__alt_data_end+0xf800c41c>
1000c604:	8809883a 	mov	r4,r17
1000c608:	000cd8c0 	call	1000cd8c <__clzsi2>
1000c60c:	10800804 	addi	r2,r2,32
1000c610:	113ffe04 	addi	r4,r2,-8
1000c614:	00c007c4 	movi	r3,31
1000c618:	193f850e 	bge	r3,r4,1000c430 <__alt_data_end+0xf800c430>
1000c61c:	10bff604 	addi	r2,r2,-40
1000c620:	8884983a 	sll	r2,r17,r2
1000c624:	0023883a 	mov	r17,zero
1000c628:	243f880e 	bge	r4,r16,1000c44c <__alt_data_end+0xf800c44c>
1000c62c:	00ffe034 	movhi	r3,65408
1000c630:	18ffffc4 	addi	r3,r3,-1
1000c634:	8121c83a 	sub	r16,r16,r4
1000c638:	10c6703a 	and	r3,r2,r3
1000c63c:	003f3406 	br	1000c310 <__alt_data_end+0xf800c310>
1000c640:	9100004c 	andi	r4,r18,1
1000c644:	000b883a 	mov	r5,zero
1000c648:	0005883a 	mov	r2,zero
1000c64c:	003f4806 	br	1000c370 <__alt_data_end+0xf800c370>
1000c650:	298cb03a 	or	r6,r5,r6
1000c654:	300cc03a 	cmpne	r6,r6,zero
1000c658:	0005883a 	mov	r2,zero
1000c65c:	003f6406 	br	1000c3f0 <__alt_data_end+0xf800c3f0>
1000c660:	10009a1e 	bne	r2,zero,1000c8cc <__subdf3+0x640>
1000c664:	82400044 	addi	r9,r16,1
1000c668:	4881ffcc 	andi	r2,r9,2047
1000c66c:	02800044 	movi	r10,1
1000c670:	5080670e 	bge	r10,r2,1000c810 <__subdf3+0x584>
1000c674:	0081ffc4 	movi	r2,2047
1000c678:	4880af26 	beq	r9,r2,1000c938 <__subdf3+0x6ac>
1000c67c:	898d883a 	add	r6,r17,r6
1000c680:	1945883a 	add	r2,r3,r5
1000c684:	3447803a 	cmpltu	r3,r6,r17
1000c688:	1887883a 	add	r3,r3,r2
1000c68c:	182297fa 	slli	r17,r3,31
1000c690:	300cd07a 	srli	r6,r6,1
1000c694:	1806d07a 	srli	r3,r3,1
1000c698:	4821883a 	mov	r16,r9
1000c69c:	89a2b03a 	or	r17,r17,r6
1000c6a0:	003f1b06 	br	1000c310 <__alt_data_end+0xf800c310>
1000c6a4:	0101ffc4 	movi	r4,2047
1000c6a8:	813f441e 	bne	r16,r4,1000c3bc <__alt_data_end+0xf800c3bc>
1000c6ac:	003f1806 	br	1000c310 <__alt_data_end+0xf800c310>
1000c6b0:	843ff844 	addi	r16,r16,-31
1000c6b4:	01400804 	movi	r5,32
1000c6b8:	1408d83a 	srl	r4,r2,r16
1000c6bc:	19405026 	beq	r3,r5,1000c800 <__subdf3+0x574>
1000c6c0:	01401004 	movi	r5,64
1000c6c4:	28c7c83a 	sub	r3,r5,r3
1000c6c8:	10c4983a 	sll	r2,r2,r3
1000c6cc:	88a2b03a 	or	r17,r17,r2
1000c6d0:	8822c03a 	cmpne	r17,r17,zero
1000c6d4:	2462b03a 	or	r17,r4,r17
1000c6d8:	0007883a 	mov	r3,zero
1000c6dc:	0021883a 	mov	r16,zero
1000c6e0:	003f6d06 	br	1000c498 <__alt_data_end+0xf800c498>
1000c6e4:	11fff804 	addi	r7,r2,-32
1000c6e8:	01000804 	movi	r4,32
1000c6ec:	29ced83a 	srl	r7,r5,r7
1000c6f0:	11004526 	beq	r2,r4,1000c808 <__subdf3+0x57c>
1000c6f4:	01001004 	movi	r4,64
1000c6f8:	2089c83a 	sub	r4,r4,r2
1000c6fc:	2904983a 	sll	r2,r5,r4
1000c700:	118cb03a 	or	r6,r2,r6
1000c704:	300cc03a 	cmpne	r6,r6,zero
1000c708:	398cb03a 	or	r6,r7,r6
1000c70c:	0005883a 	mov	r2,zero
1000c710:	003f3706 	br	1000c3f0 <__alt_data_end+0xf800c3f0>
1000c714:	80002a26 	beq	r16,zero,1000c7c0 <__subdf3+0x534>
1000c718:	0101ffc4 	movi	r4,2047
1000c71c:	49006626 	beq	r9,r4,1000c8b8 <__subdf3+0x62c>
1000c720:	0085c83a 	sub	r2,zero,r2
1000c724:	18c02034 	orhi	r3,r3,128
1000c728:	01000e04 	movi	r4,56
1000c72c:	20807e16 	blt	r4,r2,1000c928 <__subdf3+0x69c>
1000c730:	010007c4 	movi	r4,31
1000c734:	2080e716 	blt	r4,r2,1000cad4 <__subdf3+0x848>
1000c738:	01000804 	movi	r4,32
1000c73c:	2089c83a 	sub	r4,r4,r2
1000c740:	1914983a 	sll	r10,r3,r4
1000c744:	8890d83a 	srl	r8,r17,r2
1000c748:	8908983a 	sll	r4,r17,r4
1000c74c:	1884d83a 	srl	r2,r3,r2
1000c750:	5222b03a 	or	r17,r10,r8
1000c754:	2006c03a 	cmpne	r3,r4,zero
1000c758:	88e2b03a 	or	r17,r17,r3
1000c75c:	3463c83a 	sub	r17,r6,r17
1000c760:	2885c83a 	sub	r2,r5,r2
1000c764:	344d803a 	cmpltu	r6,r6,r17
1000c768:	1187c83a 	sub	r3,r2,r6
1000c76c:	4821883a 	mov	r16,r9
1000c770:	3825883a 	mov	r18,r7
1000c774:	003f2306 	br	1000c404 <__alt_data_end+0xf800c404>
1000c778:	24d0b03a 	or	r8,r4,r19
1000c77c:	40001b1e 	bne	r8,zero,1000c7ec <__subdf3+0x560>
1000c780:	0005883a 	mov	r2,zero
1000c784:	0009883a 	mov	r4,zero
1000c788:	0021883a 	mov	r16,zero
1000c78c:	003f4906 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000c790:	010007c4 	movi	r4,31
1000c794:	20803a16 	blt	r4,r2,1000c880 <__subdf3+0x5f4>
1000c798:	01000804 	movi	r4,32
1000c79c:	2089c83a 	sub	r4,r4,r2
1000c7a0:	2912983a 	sll	r9,r5,r4
1000c7a4:	3090d83a 	srl	r8,r6,r2
1000c7a8:	3108983a 	sll	r4,r6,r4
1000c7ac:	2884d83a 	srl	r2,r5,r2
1000c7b0:	4a12b03a 	or	r9,r9,r8
1000c7b4:	2008c03a 	cmpne	r4,r4,zero
1000c7b8:	4912b03a 	or	r9,r9,r4
1000c7bc:	003f4e06 	br	1000c4f8 <__alt_data_end+0xf800c4f8>
1000c7c0:	1c48b03a 	or	r4,r3,r17
1000c7c4:	20003c26 	beq	r4,zero,1000c8b8 <__subdf3+0x62c>
1000c7c8:	0084303a 	nor	r2,zero,r2
1000c7cc:	1000381e 	bne	r2,zero,1000c8b0 <__subdf3+0x624>
1000c7d0:	3463c83a 	sub	r17,r6,r17
1000c7d4:	28c5c83a 	sub	r2,r5,r3
1000c7d8:	344d803a 	cmpltu	r6,r6,r17
1000c7dc:	1187c83a 	sub	r3,r2,r6
1000c7e0:	4821883a 	mov	r16,r9
1000c7e4:	3825883a 	mov	r18,r7
1000c7e8:	003f0606 	br	1000c404 <__alt_data_end+0xf800c404>
1000c7ec:	2023883a 	mov	r17,r4
1000c7f0:	003f0906 	br	1000c418 <__alt_data_end+0xf800c418>
1000c7f4:	0101ffc4 	movi	r4,2047
1000c7f8:	813f3a1e 	bne	r16,r4,1000c4e4 <__alt_data_end+0xf800c4e4>
1000c7fc:	003ec406 	br	1000c310 <__alt_data_end+0xf800c310>
1000c800:	0005883a 	mov	r2,zero
1000c804:	003fb106 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000c808:	0005883a 	mov	r2,zero
1000c80c:	003fbc06 	br	1000c700 <__alt_data_end+0xf800c700>
1000c810:	1c44b03a 	or	r2,r3,r17
1000c814:	80008e1e 	bne	r16,zero,1000ca50 <__subdf3+0x7c4>
1000c818:	1000c826 	beq	r2,zero,1000cb3c <__subdf3+0x8b0>
1000c81c:	2984b03a 	or	r2,r5,r6
1000c820:	103ebb26 	beq	r2,zero,1000c310 <__alt_data_end+0xf800c310>
1000c824:	8989883a 	add	r4,r17,r6
1000c828:	1945883a 	add	r2,r3,r5
1000c82c:	2447803a 	cmpltu	r3,r4,r17
1000c830:	1887883a 	add	r3,r3,r2
1000c834:	1880202c 	andhi	r2,r3,128
1000c838:	2023883a 	mov	r17,r4
1000c83c:	103f1626 	beq	r2,zero,1000c498 <__alt_data_end+0xf800c498>
1000c840:	00bfe034 	movhi	r2,65408
1000c844:	10bfffc4 	addi	r2,r2,-1
1000c848:	5021883a 	mov	r16,r10
1000c84c:	1886703a 	and	r3,r3,r2
1000c850:	003eaf06 	br	1000c310 <__alt_data_end+0xf800c310>
1000c854:	3825883a 	mov	r18,r7
1000c858:	003f0f06 	br	1000c498 <__alt_data_end+0xf800c498>
1000c85c:	1c44b03a 	or	r2,r3,r17
1000c860:	8000251e 	bne	r16,zero,1000c8f8 <__subdf3+0x66c>
1000c864:	1000661e 	bne	r2,zero,1000ca00 <__subdf3+0x774>
1000c868:	2990b03a 	or	r8,r5,r6
1000c86c:	40009626 	beq	r8,zero,1000cac8 <__subdf3+0x83c>
1000c870:	2807883a 	mov	r3,r5
1000c874:	3023883a 	mov	r17,r6
1000c878:	3825883a 	mov	r18,r7
1000c87c:	003ea406 	br	1000c310 <__alt_data_end+0xf800c310>
1000c880:	127ff804 	addi	r9,r2,-32
1000c884:	01000804 	movi	r4,32
1000c888:	2a52d83a 	srl	r9,r5,r9
1000c88c:	11008c26 	beq	r2,r4,1000cac0 <__subdf3+0x834>
1000c890:	01001004 	movi	r4,64
1000c894:	2085c83a 	sub	r2,r4,r2
1000c898:	2884983a 	sll	r2,r5,r2
1000c89c:	118cb03a 	or	r6,r2,r6
1000c8a0:	300cc03a 	cmpne	r6,r6,zero
1000c8a4:	4992b03a 	or	r9,r9,r6
1000c8a8:	0005883a 	mov	r2,zero
1000c8ac:	003f1206 	br	1000c4f8 <__alt_data_end+0xf800c4f8>
1000c8b0:	0101ffc4 	movi	r4,2047
1000c8b4:	493f9c1e 	bne	r9,r4,1000c728 <__alt_data_end+0xf800c728>
1000c8b8:	2807883a 	mov	r3,r5
1000c8bc:	3023883a 	mov	r17,r6
1000c8c0:	4821883a 	mov	r16,r9
1000c8c4:	3825883a 	mov	r18,r7
1000c8c8:	003e9106 	br	1000c310 <__alt_data_end+0xf800c310>
1000c8cc:	80001f1e 	bne	r16,zero,1000c94c <__subdf3+0x6c0>
1000c8d0:	1c48b03a 	or	r4,r3,r17
1000c8d4:	20005a26 	beq	r4,zero,1000ca40 <__subdf3+0x7b4>
1000c8d8:	0084303a 	nor	r2,zero,r2
1000c8dc:	1000561e 	bne	r2,zero,1000ca38 <__subdf3+0x7ac>
1000c8e0:	89a3883a 	add	r17,r17,r6
1000c8e4:	1945883a 	add	r2,r3,r5
1000c8e8:	898d803a 	cmpltu	r6,r17,r6
1000c8ec:	3087883a 	add	r3,r6,r2
1000c8f0:	4821883a 	mov	r16,r9
1000c8f4:	003f0506 	br	1000c50c <__alt_data_end+0xf800c50c>
1000c8f8:	10002b1e 	bne	r2,zero,1000c9a8 <__subdf3+0x71c>
1000c8fc:	2984b03a 	or	r2,r5,r6
1000c900:	10008026 	beq	r2,zero,1000cb04 <__subdf3+0x878>
1000c904:	2807883a 	mov	r3,r5
1000c908:	3023883a 	mov	r17,r6
1000c90c:	3825883a 	mov	r18,r7
1000c910:	0401ffc4 	movi	r16,2047
1000c914:	003e7e06 	br	1000c310 <__alt_data_end+0xf800c310>
1000c918:	3809883a 	mov	r4,r7
1000c91c:	0011883a 	mov	r8,zero
1000c920:	0005883a 	mov	r2,zero
1000c924:	003ee306 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000c928:	1c62b03a 	or	r17,r3,r17
1000c92c:	8822c03a 	cmpne	r17,r17,zero
1000c930:	0005883a 	mov	r2,zero
1000c934:	003f8906 	br	1000c75c <__alt_data_end+0xf800c75c>
1000c938:	3809883a 	mov	r4,r7
1000c93c:	4821883a 	mov	r16,r9
1000c940:	0011883a 	mov	r8,zero
1000c944:	0005883a 	mov	r2,zero
1000c948:	003eda06 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000c94c:	0101ffc4 	movi	r4,2047
1000c950:	49003b26 	beq	r9,r4,1000ca40 <__subdf3+0x7b4>
1000c954:	0085c83a 	sub	r2,zero,r2
1000c958:	18c02034 	orhi	r3,r3,128
1000c95c:	01000e04 	movi	r4,56
1000c960:	20806e16 	blt	r4,r2,1000cb1c <__subdf3+0x890>
1000c964:	010007c4 	movi	r4,31
1000c968:	20807716 	blt	r4,r2,1000cb48 <__subdf3+0x8bc>
1000c96c:	01000804 	movi	r4,32
1000c970:	2089c83a 	sub	r4,r4,r2
1000c974:	1914983a 	sll	r10,r3,r4
1000c978:	8890d83a 	srl	r8,r17,r2
1000c97c:	8908983a 	sll	r4,r17,r4
1000c980:	1884d83a 	srl	r2,r3,r2
1000c984:	5222b03a 	or	r17,r10,r8
1000c988:	2006c03a 	cmpne	r3,r4,zero
1000c98c:	88e2b03a 	or	r17,r17,r3
1000c990:	89a3883a 	add	r17,r17,r6
1000c994:	1145883a 	add	r2,r2,r5
1000c998:	898d803a 	cmpltu	r6,r17,r6
1000c99c:	3087883a 	add	r3,r6,r2
1000c9a0:	4821883a 	mov	r16,r9
1000c9a4:	003ed906 	br	1000c50c <__alt_data_end+0xf800c50c>
1000c9a8:	2984b03a 	or	r2,r5,r6
1000c9ac:	10004226 	beq	r2,zero,1000cab8 <__subdf3+0x82c>
1000c9b0:	1808d0fa 	srli	r4,r3,3
1000c9b4:	8822d0fa 	srli	r17,r17,3
1000c9b8:	1806977a 	slli	r3,r3,29
1000c9bc:	2080022c 	andhi	r2,r4,8
1000c9c0:	1c62b03a 	or	r17,r3,r17
1000c9c4:	10000826 	beq	r2,zero,1000c9e8 <__subdf3+0x75c>
1000c9c8:	2812d0fa 	srli	r9,r5,3
1000c9cc:	4880022c 	andhi	r2,r9,8
1000c9d0:	1000051e 	bne	r2,zero,1000c9e8 <__subdf3+0x75c>
1000c9d4:	300cd0fa 	srli	r6,r6,3
1000c9d8:	2804977a 	slli	r2,r5,29
1000c9dc:	4809883a 	mov	r4,r9
1000c9e0:	3825883a 	mov	r18,r7
1000c9e4:	11a2b03a 	or	r17,r2,r6
1000c9e8:	8806d77a 	srli	r3,r17,29
1000c9ec:	200890fa 	slli	r4,r4,3
1000c9f0:	882290fa 	slli	r17,r17,3
1000c9f4:	0401ffc4 	movi	r16,2047
1000c9f8:	1906b03a 	or	r3,r3,r4
1000c9fc:	003e4406 	br	1000c310 <__alt_data_end+0xf800c310>
1000ca00:	2984b03a 	or	r2,r5,r6
1000ca04:	103e4226 	beq	r2,zero,1000c310 <__alt_data_end+0xf800c310>
1000ca08:	8989c83a 	sub	r4,r17,r6
1000ca0c:	8911803a 	cmpltu	r8,r17,r4
1000ca10:	1945c83a 	sub	r2,r3,r5
1000ca14:	1205c83a 	sub	r2,r2,r8
1000ca18:	1200202c 	andhi	r8,r2,128
1000ca1c:	403e9a26 	beq	r8,zero,1000c488 <__alt_data_end+0xf800c488>
1000ca20:	3463c83a 	sub	r17,r6,r17
1000ca24:	28c5c83a 	sub	r2,r5,r3
1000ca28:	344d803a 	cmpltu	r6,r6,r17
1000ca2c:	1187c83a 	sub	r3,r2,r6
1000ca30:	3825883a 	mov	r18,r7
1000ca34:	003e3606 	br	1000c310 <__alt_data_end+0xf800c310>
1000ca38:	0101ffc4 	movi	r4,2047
1000ca3c:	493fc71e 	bne	r9,r4,1000c95c <__alt_data_end+0xf800c95c>
1000ca40:	2807883a 	mov	r3,r5
1000ca44:	3023883a 	mov	r17,r6
1000ca48:	4821883a 	mov	r16,r9
1000ca4c:	003e3006 	br	1000c310 <__alt_data_end+0xf800c310>
1000ca50:	10003626 	beq	r2,zero,1000cb2c <__subdf3+0x8a0>
1000ca54:	2984b03a 	or	r2,r5,r6
1000ca58:	10001726 	beq	r2,zero,1000cab8 <__subdf3+0x82c>
1000ca5c:	1808d0fa 	srli	r4,r3,3
1000ca60:	8822d0fa 	srli	r17,r17,3
1000ca64:	1806977a 	slli	r3,r3,29
1000ca68:	2080022c 	andhi	r2,r4,8
1000ca6c:	1c62b03a 	or	r17,r3,r17
1000ca70:	10000726 	beq	r2,zero,1000ca90 <__subdf3+0x804>
1000ca74:	2812d0fa 	srli	r9,r5,3
1000ca78:	4880022c 	andhi	r2,r9,8
1000ca7c:	1000041e 	bne	r2,zero,1000ca90 <__subdf3+0x804>
1000ca80:	300cd0fa 	srli	r6,r6,3
1000ca84:	2804977a 	slli	r2,r5,29
1000ca88:	4809883a 	mov	r4,r9
1000ca8c:	11a2b03a 	or	r17,r2,r6
1000ca90:	8806d77a 	srli	r3,r17,29
1000ca94:	200890fa 	slli	r4,r4,3
1000ca98:	882290fa 	slli	r17,r17,3
1000ca9c:	3825883a 	mov	r18,r7
1000caa0:	1906b03a 	or	r3,r3,r4
1000caa4:	0401ffc4 	movi	r16,2047
1000caa8:	003e1906 	br	1000c310 <__alt_data_end+0xf800c310>
1000caac:	000b883a 	mov	r5,zero
1000cab0:	0005883a 	mov	r2,zero
1000cab4:	003e2e06 	br	1000c370 <__alt_data_end+0xf800c370>
1000cab8:	0401ffc4 	movi	r16,2047
1000cabc:	003e1406 	br	1000c310 <__alt_data_end+0xf800c310>
1000cac0:	0005883a 	mov	r2,zero
1000cac4:	003f7506 	br	1000c89c <__alt_data_end+0xf800c89c>
1000cac8:	0005883a 	mov	r2,zero
1000cacc:	0009883a 	mov	r4,zero
1000cad0:	003e7806 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000cad4:	123ff804 	addi	r8,r2,-32
1000cad8:	01000804 	movi	r4,32
1000cadc:	1a10d83a 	srl	r8,r3,r8
1000cae0:	11002526 	beq	r2,r4,1000cb78 <__subdf3+0x8ec>
1000cae4:	01001004 	movi	r4,64
1000cae8:	2085c83a 	sub	r2,r4,r2
1000caec:	1884983a 	sll	r2,r3,r2
1000caf0:	1444b03a 	or	r2,r2,r17
1000caf4:	1004c03a 	cmpne	r2,r2,zero
1000caf8:	40a2b03a 	or	r17,r8,r2
1000cafc:	0005883a 	mov	r2,zero
1000cb00:	003f1606 	br	1000c75c <__alt_data_end+0xf800c75c>
1000cb04:	02000434 	movhi	r8,16
1000cb08:	0009883a 	mov	r4,zero
1000cb0c:	423fffc4 	addi	r8,r8,-1
1000cb10:	00bfffc4 	movi	r2,-1
1000cb14:	0401ffc4 	movi	r16,2047
1000cb18:	003e6606 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000cb1c:	1c62b03a 	or	r17,r3,r17
1000cb20:	8822c03a 	cmpne	r17,r17,zero
1000cb24:	0005883a 	mov	r2,zero
1000cb28:	003f9906 	br	1000c990 <__alt_data_end+0xf800c990>
1000cb2c:	2807883a 	mov	r3,r5
1000cb30:	3023883a 	mov	r17,r6
1000cb34:	0401ffc4 	movi	r16,2047
1000cb38:	003df506 	br	1000c310 <__alt_data_end+0xf800c310>
1000cb3c:	2807883a 	mov	r3,r5
1000cb40:	3023883a 	mov	r17,r6
1000cb44:	003df206 	br	1000c310 <__alt_data_end+0xf800c310>
1000cb48:	123ff804 	addi	r8,r2,-32
1000cb4c:	01000804 	movi	r4,32
1000cb50:	1a10d83a 	srl	r8,r3,r8
1000cb54:	11000a26 	beq	r2,r4,1000cb80 <__subdf3+0x8f4>
1000cb58:	01001004 	movi	r4,64
1000cb5c:	2085c83a 	sub	r2,r4,r2
1000cb60:	1884983a 	sll	r2,r3,r2
1000cb64:	1444b03a 	or	r2,r2,r17
1000cb68:	1004c03a 	cmpne	r2,r2,zero
1000cb6c:	40a2b03a 	or	r17,r8,r2
1000cb70:	0005883a 	mov	r2,zero
1000cb74:	003f8606 	br	1000c990 <__alt_data_end+0xf800c990>
1000cb78:	0005883a 	mov	r2,zero
1000cb7c:	003fdc06 	br	1000caf0 <__alt_data_end+0xf800caf0>
1000cb80:	0005883a 	mov	r2,zero
1000cb84:	003ff706 	br	1000cb64 <__alt_data_end+0xf800cb64>

1000cb88 <__fixdfsi>:
1000cb88:	280cd53a 	srli	r6,r5,20
1000cb8c:	00c00434 	movhi	r3,16
1000cb90:	18ffffc4 	addi	r3,r3,-1
1000cb94:	3181ffcc 	andi	r6,r6,2047
1000cb98:	01c0ff84 	movi	r7,1022
1000cb9c:	28c6703a 	and	r3,r5,r3
1000cba0:	280ad7fa 	srli	r5,r5,31
1000cba4:	3980120e 	bge	r7,r6,1000cbf0 <__fixdfsi+0x68>
1000cba8:	00810744 	movi	r2,1053
1000cbac:	11800c16 	blt	r2,r6,1000cbe0 <__fixdfsi+0x58>
1000cbb0:	00810cc4 	movi	r2,1075
1000cbb4:	1185c83a 	sub	r2,r2,r6
1000cbb8:	01c007c4 	movi	r7,31
1000cbbc:	18c00434 	orhi	r3,r3,16
1000cbc0:	38800d16 	blt	r7,r2,1000cbf8 <__fixdfsi+0x70>
1000cbc4:	31befb44 	addi	r6,r6,-1043
1000cbc8:	2084d83a 	srl	r2,r4,r2
1000cbcc:	1986983a 	sll	r3,r3,r6
1000cbd0:	1884b03a 	or	r2,r3,r2
1000cbd4:	28000726 	beq	r5,zero,1000cbf4 <__fixdfsi+0x6c>
1000cbd8:	0085c83a 	sub	r2,zero,r2
1000cbdc:	f800283a 	ret
1000cbe0:	00a00034 	movhi	r2,32768
1000cbe4:	10bfffc4 	addi	r2,r2,-1
1000cbe8:	2885883a 	add	r2,r5,r2
1000cbec:	f800283a 	ret
1000cbf0:	0005883a 	mov	r2,zero
1000cbf4:	f800283a 	ret
1000cbf8:	008104c4 	movi	r2,1043
1000cbfc:	1185c83a 	sub	r2,r2,r6
1000cc00:	1884d83a 	srl	r2,r3,r2
1000cc04:	003ff306 	br	1000cbd4 <__alt_data_end+0xf800cbd4>

1000cc08 <__floatsidf>:
1000cc08:	defffd04 	addi	sp,sp,-12
1000cc0c:	dfc00215 	stw	ra,8(sp)
1000cc10:	dc400115 	stw	r17,4(sp)
1000cc14:	dc000015 	stw	r16,0(sp)
1000cc18:	20002b26 	beq	r4,zero,1000ccc8 <__floatsidf+0xc0>
1000cc1c:	2023883a 	mov	r17,r4
1000cc20:	2020d7fa 	srli	r16,r4,31
1000cc24:	20002d16 	blt	r4,zero,1000ccdc <__floatsidf+0xd4>
1000cc28:	8809883a 	mov	r4,r17
1000cc2c:	000cd8c0 	call	1000cd8c <__clzsi2>
1000cc30:	01410784 	movi	r5,1054
1000cc34:	288bc83a 	sub	r5,r5,r2
1000cc38:	01010cc4 	movi	r4,1075
1000cc3c:	2149c83a 	sub	r4,r4,r5
1000cc40:	00c007c4 	movi	r3,31
1000cc44:	1900160e 	bge	r3,r4,1000cca0 <__floatsidf+0x98>
1000cc48:	00c104c4 	movi	r3,1043
1000cc4c:	1947c83a 	sub	r3,r3,r5
1000cc50:	88c6983a 	sll	r3,r17,r3
1000cc54:	00800434 	movhi	r2,16
1000cc58:	10bfffc4 	addi	r2,r2,-1
1000cc5c:	1886703a 	and	r3,r3,r2
1000cc60:	2941ffcc 	andi	r5,r5,2047
1000cc64:	800d883a 	mov	r6,r16
1000cc68:	0005883a 	mov	r2,zero
1000cc6c:	280a953a 	slli	r5,r5,20
1000cc70:	31803fcc 	andi	r6,r6,255
1000cc74:	01000434 	movhi	r4,16
1000cc78:	300c97fa 	slli	r6,r6,31
1000cc7c:	213fffc4 	addi	r4,r4,-1
1000cc80:	1906703a 	and	r3,r3,r4
1000cc84:	1946b03a 	or	r3,r3,r5
1000cc88:	1986b03a 	or	r3,r3,r6
1000cc8c:	dfc00217 	ldw	ra,8(sp)
1000cc90:	dc400117 	ldw	r17,4(sp)
1000cc94:	dc000017 	ldw	r16,0(sp)
1000cc98:	dec00304 	addi	sp,sp,12
1000cc9c:	f800283a 	ret
1000cca0:	00c002c4 	movi	r3,11
1000cca4:	1887c83a 	sub	r3,r3,r2
1000cca8:	88c6d83a 	srl	r3,r17,r3
1000ccac:	8904983a 	sll	r2,r17,r4
1000ccb0:	01000434 	movhi	r4,16
1000ccb4:	213fffc4 	addi	r4,r4,-1
1000ccb8:	2941ffcc 	andi	r5,r5,2047
1000ccbc:	1906703a 	and	r3,r3,r4
1000ccc0:	800d883a 	mov	r6,r16
1000ccc4:	003fe906 	br	1000cc6c <__alt_data_end+0xf800cc6c>
1000ccc8:	000d883a 	mov	r6,zero
1000cccc:	000b883a 	mov	r5,zero
1000ccd0:	0007883a 	mov	r3,zero
1000ccd4:	0005883a 	mov	r2,zero
1000ccd8:	003fe406 	br	1000cc6c <__alt_data_end+0xf800cc6c>
1000ccdc:	0123c83a 	sub	r17,zero,r4
1000cce0:	003fd106 	br	1000cc28 <__alt_data_end+0xf800cc28>

1000cce4 <__floatunsidf>:
1000cce4:	defffe04 	addi	sp,sp,-8
1000cce8:	dc000015 	stw	r16,0(sp)
1000ccec:	dfc00115 	stw	ra,4(sp)
1000ccf0:	2021883a 	mov	r16,r4
1000ccf4:	20002226 	beq	r4,zero,1000cd80 <__floatunsidf+0x9c>
1000ccf8:	000cd8c0 	call	1000cd8c <__clzsi2>
1000ccfc:	01010784 	movi	r4,1054
1000cd00:	2089c83a 	sub	r4,r4,r2
1000cd04:	01810cc4 	movi	r6,1075
1000cd08:	310dc83a 	sub	r6,r6,r4
1000cd0c:	00c007c4 	movi	r3,31
1000cd10:	1980120e 	bge	r3,r6,1000cd5c <__floatunsidf+0x78>
1000cd14:	00c104c4 	movi	r3,1043
1000cd18:	1907c83a 	sub	r3,r3,r4
1000cd1c:	80ca983a 	sll	r5,r16,r3
1000cd20:	00800434 	movhi	r2,16
1000cd24:	10bfffc4 	addi	r2,r2,-1
1000cd28:	2101ffcc 	andi	r4,r4,2047
1000cd2c:	0021883a 	mov	r16,zero
1000cd30:	288a703a 	and	r5,r5,r2
1000cd34:	2008953a 	slli	r4,r4,20
1000cd38:	00c00434 	movhi	r3,16
1000cd3c:	18ffffc4 	addi	r3,r3,-1
1000cd40:	28c6703a 	and	r3,r5,r3
1000cd44:	8005883a 	mov	r2,r16
1000cd48:	1906b03a 	or	r3,r3,r4
1000cd4c:	dfc00117 	ldw	ra,4(sp)
1000cd50:	dc000017 	ldw	r16,0(sp)
1000cd54:	dec00204 	addi	sp,sp,8
1000cd58:	f800283a 	ret
1000cd5c:	00c002c4 	movi	r3,11
1000cd60:	188bc83a 	sub	r5,r3,r2
1000cd64:	814ad83a 	srl	r5,r16,r5
1000cd68:	00c00434 	movhi	r3,16
1000cd6c:	18ffffc4 	addi	r3,r3,-1
1000cd70:	81a0983a 	sll	r16,r16,r6
1000cd74:	2101ffcc 	andi	r4,r4,2047
1000cd78:	28ca703a 	and	r5,r5,r3
1000cd7c:	003fed06 	br	1000cd34 <__alt_data_end+0xf800cd34>
1000cd80:	0009883a 	mov	r4,zero
1000cd84:	000b883a 	mov	r5,zero
1000cd88:	003fea06 	br	1000cd34 <__alt_data_end+0xf800cd34>

1000cd8c <__clzsi2>:
1000cd8c:	00bfffd4 	movui	r2,65535
1000cd90:	11000536 	bltu	r2,r4,1000cda8 <__clzsi2+0x1c>
1000cd94:	00803fc4 	movi	r2,255
1000cd98:	11000f36 	bltu	r2,r4,1000cdd8 <__clzsi2+0x4c>
1000cd9c:	00800804 	movi	r2,32
1000cda0:	0007883a 	mov	r3,zero
1000cda4:	00000506 	br	1000cdbc <__clzsi2+0x30>
1000cda8:	00804034 	movhi	r2,256
1000cdac:	10bfffc4 	addi	r2,r2,-1
1000cdb0:	11000c2e 	bgeu	r2,r4,1000cde4 <__clzsi2+0x58>
1000cdb4:	00800204 	movi	r2,8
1000cdb8:	00c00604 	movi	r3,24
1000cdbc:	20c8d83a 	srl	r4,r4,r3
1000cdc0:	00c40074 	movhi	r3,4097
1000cdc4:	18d2b304 	addi	r3,r3,19148
1000cdc8:	1909883a 	add	r4,r3,r4
1000cdcc:	20c00003 	ldbu	r3,0(r4)
1000cdd0:	10c5c83a 	sub	r2,r2,r3
1000cdd4:	f800283a 	ret
1000cdd8:	00800604 	movi	r2,24
1000cddc:	00c00204 	movi	r3,8
1000cde0:	003ff606 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000cde4:	00800404 	movi	r2,16
1000cde8:	1007883a 	mov	r3,r2
1000cdec:	003ff306 	br	1000cdbc <__alt_data_end+0xf800cdbc>

1000cdf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000cdf0:	defffe04 	addi	sp,sp,-8
1000cdf4:	dfc00115 	stw	ra,4(sp)
1000cdf8:	df000015 	stw	fp,0(sp)
1000cdfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ce00:	d0a00b17 	ldw	r2,-32724(gp)
1000ce04:	10000326 	beq	r2,zero,1000ce14 <alt_get_errno+0x24>
1000ce08:	d0a00b17 	ldw	r2,-32724(gp)
1000ce0c:	103ee83a 	callr	r2
1000ce10:	00000106 	br	1000ce18 <alt_get_errno+0x28>
1000ce14:	d0a6f404 	addi	r2,gp,-25648
}
1000ce18:	e037883a 	mov	sp,fp
1000ce1c:	dfc00117 	ldw	ra,4(sp)
1000ce20:	df000017 	ldw	fp,0(sp)
1000ce24:	dec00204 	addi	sp,sp,8
1000ce28:	f800283a 	ret

1000ce2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000ce2c:	defffb04 	addi	sp,sp,-20
1000ce30:	dfc00415 	stw	ra,16(sp)
1000ce34:	df000315 	stw	fp,12(sp)
1000ce38:	df000304 	addi	fp,sp,12
1000ce3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000ce40:	e0bfff17 	ldw	r2,-4(fp)
1000ce44:	10000616 	blt	r2,zero,1000ce60 <close+0x34>
1000ce48:	e0bfff17 	ldw	r2,-4(fp)
1000ce4c:	10c00324 	muli	r3,r2,12
1000ce50:	00840074 	movhi	r2,4097
1000ce54:	10954104 	addi	r2,r2,21764
1000ce58:	1885883a 	add	r2,r3,r2
1000ce5c:	00000106 	br	1000ce64 <close+0x38>
1000ce60:	0005883a 	mov	r2,zero
1000ce64:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000ce68:	e0bffd17 	ldw	r2,-12(fp)
1000ce6c:	10001926 	beq	r2,zero,1000ced4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ce70:	e0bffd17 	ldw	r2,-12(fp)
1000ce74:	10800017 	ldw	r2,0(r2)
1000ce78:	10800417 	ldw	r2,16(r2)
1000ce7c:	10000626 	beq	r2,zero,1000ce98 <close+0x6c>
1000ce80:	e0bffd17 	ldw	r2,-12(fp)
1000ce84:	10800017 	ldw	r2,0(r2)
1000ce88:	10800417 	ldw	r2,16(r2)
1000ce8c:	e13ffd17 	ldw	r4,-12(fp)
1000ce90:	103ee83a 	callr	r2
1000ce94:	00000106 	br	1000ce9c <close+0x70>
1000ce98:	0005883a 	mov	r2,zero
1000ce9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000cea0:	e13fff17 	ldw	r4,-4(fp)
1000cea4:	000d4ec0 	call	1000d4ec <alt_release_fd>
    if (rval < 0)
1000cea8:	e0bffe17 	ldw	r2,-8(fp)
1000ceac:	1000070e 	bge	r2,zero,1000cecc <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000ceb0:	000cdf00 	call	1000cdf0 <alt_get_errno>
1000ceb4:	1007883a 	mov	r3,r2
1000ceb8:	e0bffe17 	ldw	r2,-8(fp)
1000cebc:	0085c83a 	sub	r2,zero,r2
1000cec0:	18800015 	stw	r2,0(r3)
      return -1;
1000cec4:	00bfffc4 	movi	r2,-1
1000cec8:	00000706 	br	1000cee8 <close+0xbc>
    }
    return 0;
1000cecc:	0005883a 	mov	r2,zero
1000ced0:	00000506 	br	1000cee8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ced4:	000cdf00 	call	1000cdf0 <alt_get_errno>
1000ced8:	1007883a 	mov	r3,r2
1000cedc:	00801444 	movi	r2,81
1000cee0:	18800015 	stw	r2,0(r3)
    return -1;
1000cee4:	00bfffc4 	movi	r2,-1
  }
}
1000cee8:	e037883a 	mov	sp,fp
1000ceec:	dfc00117 	ldw	ra,4(sp)
1000cef0:	df000017 	ldw	fp,0(sp)
1000cef4:	dec00204 	addi	sp,sp,8
1000cef8:	f800283a 	ret

1000cefc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000cefc:	defffc04 	addi	sp,sp,-16
1000cf00:	df000315 	stw	fp,12(sp)
1000cf04:	df000304 	addi	fp,sp,12
1000cf08:	e13ffd15 	stw	r4,-12(fp)
1000cf0c:	e17ffe15 	stw	r5,-8(fp)
1000cf10:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000cf14:	e0bfff17 	ldw	r2,-4(fp)
}
1000cf18:	e037883a 	mov	sp,fp
1000cf1c:	df000017 	ldw	fp,0(sp)
1000cf20:	dec00104 	addi	sp,sp,4
1000cf24:	f800283a 	ret

1000cf28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000cf28:	defffe04 	addi	sp,sp,-8
1000cf2c:	dfc00115 	stw	ra,4(sp)
1000cf30:	df000015 	stw	fp,0(sp)
1000cf34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000cf38:	d0a00b17 	ldw	r2,-32724(gp)
1000cf3c:	10000326 	beq	r2,zero,1000cf4c <alt_get_errno+0x24>
1000cf40:	d0a00b17 	ldw	r2,-32724(gp)
1000cf44:	103ee83a 	callr	r2
1000cf48:	00000106 	br	1000cf50 <alt_get_errno+0x28>
1000cf4c:	d0a6f404 	addi	r2,gp,-25648
}
1000cf50:	e037883a 	mov	sp,fp
1000cf54:	dfc00117 	ldw	ra,4(sp)
1000cf58:	df000017 	ldw	fp,0(sp)
1000cf5c:	dec00204 	addi	sp,sp,8
1000cf60:	f800283a 	ret

1000cf64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000cf64:	defffb04 	addi	sp,sp,-20
1000cf68:	dfc00415 	stw	ra,16(sp)
1000cf6c:	df000315 	stw	fp,12(sp)
1000cf70:	df000304 	addi	fp,sp,12
1000cf74:	e13ffe15 	stw	r4,-8(fp)
1000cf78:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000cf7c:	e0bffe17 	ldw	r2,-8(fp)
1000cf80:	10000616 	blt	r2,zero,1000cf9c <fstat+0x38>
1000cf84:	e0bffe17 	ldw	r2,-8(fp)
1000cf88:	10c00324 	muli	r3,r2,12
1000cf8c:	00840074 	movhi	r2,4097
1000cf90:	10954104 	addi	r2,r2,21764
1000cf94:	1885883a 	add	r2,r3,r2
1000cf98:	00000106 	br	1000cfa0 <fstat+0x3c>
1000cf9c:	0005883a 	mov	r2,zero
1000cfa0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000cfa4:	e0bffd17 	ldw	r2,-12(fp)
1000cfa8:	10001026 	beq	r2,zero,1000cfec <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000cfac:	e0bffd17 	ldw	r2,-12(fp)
1000cfb0:	10800017 	ldw	r2,0(r2)
1000cfb4:	10800817 	ldw	r2,32(r2)
1000cfb8:	10000726 	beq	r2,zero,1000cfd8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000cfbc:	e0bffd17 	ldw	r2,-12(fp)
1000cfc0:	10800017 	ldw	r2,0(r2)
1000cfc4:	10800817 	ldw	r2,32(r2)
1000cfc8:	e17fff17 	ldw	r5,-4(fp)
1000cfcc:	e13ffd17 	ldw	r4,-12(fp)
1000cfd0:	103ee83a 	callr	r2
1000cfd4:	00000a06 	br	1000d000 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000cfd8:	e0bfff17 	ldw	r2,-4(fp)
1000cfdc:	00c80004 	movi	r3,8192
1000cfe0:	10c00115 	stw	r3,4(r2)
      return 0;
1000cfe4:	0005883a 	mov	r2,zero
1000cfe8:	00000506 	br	1000d000 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000cfec:	000cf280 	call	1000cf28 <alt_get_errno>
1000cff0:	1007883a 	mov	r3,r2
1000cff4:	00801444 	movi	r2,81
1000cff8:	18800015 	stw	r2,0(r3)
    return -1;
1000cffc:	00bfffc4 	movi	r2,-1
  }
}
1000d000:	e037883a 	mov	sp,fp
1000d004:	dfc00117 	ldw	ra,4(sp)
1000d008:	df000017 	ldw	fp,0(sp)
1000d00c:	dec00204 	addi	sp,sp,8
1000d010:	f800283a 	ret

1000d014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d014:	defffe04 	addi	sp,sp,-8
1000d018:	dfc00115 	stw	ra,4(sp)
1000d01c:	df000015 	stw	fp,0(sp)
1000d020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d024:	d0a00b17 	ldw	r2,-32724(gp)
1000d028:	10000326 	beq	r2,zero,1000d038 <alt_get_errno+0x24>
1000d02c:	d0a00b17 	ldw	r2,-32724(gp)
1000d030:	103ee83a 	callr	r2
1000d034:	00000106 	br	1000d03c <alt_get_errno+0x28>
1000d038:	d0a6f404 	addi	r2,gp,-25648
}
1000d03c:	e037883a 	mov	sp,fp
1000d040:	dfc00117 	ldw	ra,4(sp)
1000d044:	df000017 	ldw	fp,0(sp)
1000d048:	dec00204 	addi	sp,sp,8
1000d04c:	f800283a 	ret

1000d050 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d050:	deffed04 	addi	sp,sp,-76
1000d054:	dfc01215 	stw	ra,72(sp)
1000d058:	df001115 	stw	fp,68(sp)
1000d05c:	df001104 	addi	fp,sp,68
1000d060:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d064:	e0bfff17 	ldw	r2,-4(fp)
1000d068:	10000616 	blt	r2,zero,1000d084 <isatty+0x34>
1000d06c:	e0bfff17 	ldw	r2,-4(fp)
1000d070:	10c00324 	muli	r3,r2,12
1000d074:	00840074 	movhi	r2,4097
1000d078:	10954104 	addi	r2,r2,21764
1000d07c:	1885883a 	add	r2,r3,r2
1000d080:	00000106 	br	1000d088 <isatty+0x38>
1000d084:	0005883a 	mov	r2,zero
1000d088:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000d08c:	e0bfef17 	ldw	r2,-68(fp)
1000d090:	10000e26 	beq	r2,zero,1000d0cc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000d094:	e0bfef17 	ldw	r2,-68(fp)
1000d098:	10800017 	ldw	r2,0(r2)
1000d09c:	10800817 	ldw	r2,32(r2)
1000d0a0:	1000021e 	bne	r2,zero,1000d0ac <isatty+0x5c>
    {
      return 1;
1000d0a4:	00800044 	movi	r2,1
1000d0a8:	00000d06 	br	1000d0e0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000d0ac:	e0bff004 	addi	r2,fp,-64
1000d0b0:	100b883a 	mov	r5,r2
1000d0b4:	e13fff17 	ldw	r4,-4(fp)
1000d0b8:	000cf640 	call	1000cf64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000d0bc:	e0bff117 	ldw	r2,-60(fp)
1000d0c0:	10880020 	cmpeqi	r2,r2,8192
1000d0c4:	10803fcc 	andi	r2,r2,255
1000d0c8:	00000506 	br	1000d0e0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d0cc:	000d0140 	call	1000d014 <alt_get_errno>
1000d0d0:	1007883a 	mov	r3,r2
1000d0d4:	00801444 	movi	r2,81
1000d0d8:	18800015 	stw	r2,0(r3)
    return 0;
1000d0dc:	0005883a 	mov	r2,zero
  }
}
1000d0e0:	e037883a 	mov	sp,fp
1000d0e4:	dfc00117 	ldw	ra,4(sp)
1000d0e8:	df000017 	ldw	fp,0(sp)
1000d0ec:	dec00204 	addi	sp,sp,8
1000d0f0:	f800283a 	ret

1000d0f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000d0f4:	defffc04 	addi	sp,sp,-16
1000d0f8:	df000315 	stw	fp,12(sp)
1000d0fc:	df000304 	addi	fp,sp,12
1000d100:	e13ffd15 	stw	r4,-12(fp)
1000d104:	e17ffe15 	stw	r5,-8(fp)
1000d108:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000d10c:	e0fffe17 	ldw	r3,-8(fp)
1000d110:	e0bffd17 	ldw	r2,-12(fp)
1000d114:	18800c26 	beq	r3,r2,1000d148 <alt_load_section+0x54>
  {
    while( to != end )
1000d118:	00000806 	br	1000d13c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000d11c:	e0bffe17 	ldw	r2,-8(fp)
1000d120:	10c00104 	addi	r3,r2,4
1000d124:	e0fffe15 	stw	r3,-8(fp)
1000d128:	e0fffd17 	ldw	r3,-12(fp)
1000d12c:	19000104 	addi	r4,r3,4
1000d130:	e13ffd15 	stw	r4,-12(fp)
1000d134:	18c00017 	ldw	r3,0(r3)
1000d138:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000d13c:	e0fffe17 	ldw	r3,-8(fp)
1000d140:	e0bfff17 	ldw	r2,-4(fp)
1000d144:	18bff51e 	bne	r3,r2,1000d11c <__alt_data_end+0xf800d11c>
    {
      *to++ = *from++;
    }
  }
}
1000d148:	0001883a 	nop
1000d14c:	e037883a 	mov	sp,fp
1000d150:	df000017 	ldw	fp,0(sp)
1000d154:	dec00104 	addi	sp,sp,4
1000d158:	f800283a 	ret

1000d15c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000d15c:	defffe04 	addi	sp,sp,-8
1000d160:	dfc00115 	stw	ra,4(sp)
1000d164:	df000015 	stw	fp,0(sp)
1000d168:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000d16c:	01840074 	movhi	r6,4097
1000d170:	3199e904 	addi	r6,r6,26532
1000d174:	01440074 	movhi	r5,4097
1000d178:	29530e04 	addi	r5,r5,19512
1000d17c:	01040074 	movhi	r4,4097
1000d180:	2119e904 	addi	r4,r4,26532
1000d184:	000d0f40 	call	1000d0f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000d188:	01840034 	movhi	r6,4096
1000d18c:	31809104 	addi	r6,r6,580
1000d190:	01440034 	movhi	r5,4096
1000d194:	29400804 	addi	r5,r5,32
1000d198:	01040034 	movhi	r4,4096
1000d19c:	21000804 	addi	r4,r4,32
1000d1a0:	000d0f40 	call	1000d0f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000d1a4:	01840074 	movhi	r6,4097
1000d1a8:	31930e04 	addi	r6,r6,19512
1000d1ac:	01440074 	movhi	r5,4097
1000d1b0:	29521704 	addi	r5,r5,18524
1000d1b4:	01040074 	movhi	r4,4097
1000d1b8:	21121704 	addi	r4,r4,18524
1000d1bc:	000d0f40 	call	1000d0f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000d1c0:	00137480 	call	10013748 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000d1c4:	00139c00 	call	100139c0 <alt_icache_flush_all>
}
1000d1c8:	0001883a 	nop
1000d1cc:	e037883a 	mov	sp,fp
1000d1d0:	dfc00117 	ldw	ra,4(sp)
1000d1d4:	df000017 	ldw	fp,0(sp)
1000d1d8:	dec00204 	addi	sp,sp,8
1000d1dc:	f800283a 	ret

1000d1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d1e0:	defffe04 	addi	sp,sp,-8
1000d1e4:	dfc00115 	stw	ra,4(sp)
1000d1e8:	df000015 	stw	fp,0(sp)
1000d1ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d1f0:	d0a00b17 	ldw	r2,-32724(gp)
1000d1f4:	10000326 	beq	r2,zero,1000d204 <alt_get_errno+0x24>
1000d1f8:	d0a00b17 	ldw	r2,-32724(gp)
1000d1fc:	103ee83a 	callr	r2
1000d200:	00000106 	br	1000d208 <alt_get_errno+0x28>
1000d204:	d0a6f404 	addi	r2,gp,-25648
}
1000d208:	e037883a 	mov	sp,fp
1000d20c:	dfc00117 	ldw	ra,4(sp)
1000d210:	df000017 	ldw	fp,0(sp)
1000d214:	dec00204 	addi	sp,sp,8
1000d218:	f800283a 	ret

1000d21c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000d21c:	defff904 	addi	sp,sp,-28
1000d220:	dfc00615 	stw	ra,24(sp)
1000d224:	df000515 	stw	fp,20(sp)
1000d228:	df000504 	addi	fp,sp,20
1000d22c:	e13ffd15 	stw	r4,-12(fp)
1000d230:	e17ffe15 	stw	r5,-8(fp)
1000d234:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000d238:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d23c:	e0bffd17 	ldw	r2,-12(fp)
1000d240:	10000616 	blt	r2,zero,1000d25c <lseek+0x40>
1000d244:	e0bffd17 	ldw	r2,-12(fp)
1000d248:	10c00324 	muli	r3,r2,12
1000d24c:	00840074 	movhi	r2,4097
1000d250:	10954104 	addi	r2,r2,21764
1000d254:	1885883a 	add	r2,r3,r2
1000d258:	00000106 	br	1000d260 <lseek+0x44>
1000d25c:	0005883a 	mov	r2,zero
1000d260:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000d264:	e0bffc17 	ldw	r2,-16(fp)
1000d268:	10001026 	beq	r2,zero,1000d2ac <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000d26c:	e0bffc17 	ldw	r2,-16(fp)
1000d270:	10800017 	ldw	r2,0(r2)
1000d274:	10800717 	ldw	r2,28(r2)
1000d278:	10000926 	beq	r2,zero,1000d2a0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000d27c:	e0bffc17 	ldw	r2,-16(fp)
1000d280:	10800017 	ldw	r2,0(r2)
1000d284:	10800717 	ldw	r2,28(r2)
1000d288:	e1bfff17 	ldw	r6,-4(fp)
1000d28c:	e17ffe17 	ldw	r5,-8(fp)
1000d290:	e13ffc17 	ldw	r4,-16(fp)
1000d294:	103ee83a 	callr	r2
1000d298:	e0bffb15 	stw	r2,-20(fp)
1000d29c:	00000506 	br	1000d2b4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000d2a0:	00bfde84 	movi	r2,-134
1000d2a4:	e0bffb15 	stw	r2,-20(fp)
1000d2a8:	00000206 	br	1000d2b4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1000d2ac:	00bfebc4 	movi	r2,-81
1000d2b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000d2b4:	e0bffb17 	ldw	r2,-20(fp)
1000d2b8:	1000070e 	bge	r2,zero,1000d2d8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000d2bc:	000d1e00 	call	1000d1e0 <alt_get_errno>
1000d2c0:	1007883a 	mov	r3,r2
1000d2c4:	e0bffb17 	ldw	r2,-20(fp)
1000d2c8:	0085c83a 	sub	r2,zero,r2
1000d2cc:	18800015 	stw	r2,0(r3)
    rc = -1;
1000d2d0:	00bfffc4 	movi	r2,-1
1000d2d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000d2d8:	e0bffb17 	ldw	r2,-20(fp)
}
1000d2dc:	e037883a 	mov	sp,fp
1000d2e0:	dfc00117 	ldw	ra,4(sp)
1000d2e4:	df000017 	ldw	fp,0(sp)
1000d2e8:	dec00204 	addi	sp,sp,8
1000d2ec:	f800283a 	ret

1000d2f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000d2f0:	defffd04 	addi	sp,sp,-12
1000d2f4:	dfc00215 	stw	ra,8(sp)
1000d2f8:	df000115 	stw	fp,4(sp)
1000d2fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000d300:	0009883a 	mov	r4,zero
1000d304:	000d7680 	call	1000d768 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000d308:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000d30c:	000d7a00 	call	1000d7a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000d310:	01840074 	movhi	r6,4097
1000d314:	3192f604 	addi	r6,r6,19416
1000d318:	01440074 	movhi	r5,4097
1000d31c:	2952f604 	addi	r5,r5,19416
1000d320:	01040074 	movhi	r4,4097
1000d324:	2112f604 	addi	r4,r4,19416
1000d328:	0013d580 	call	10013d58 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000d32c:	00138700 	call	10013870 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000d330:	01040074 	movhi	r4,4097
1000d334:	210e3404 	addi	r4,r4,14544
1000d338:	00144c80 	call	100144c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000d33c:	d0a6f517 	ldw	r2,-25644(gp)
1000d340:	d0e6f617 	ldw	r3,-25640(gp)
1000d344:	d126f717 	ldw	r4,-25636(gp)
1000d348:	200d883a 	mov	r6,r4
1000d34c:	180b883a 	mov	r5,r3
1000d350:	1009883a 	mov	r4,r2
1000d354:	00002900 	call	10000290 <main>
1000d358:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000d35c:	01000044 	movi	r4,1
1000d360:	000ce2c0 	call	1000ce2c <close>
  exit (result);
1000d364:	e13fff17 	ldw	r4,-4(fp)
1000d368:	00144dc0 	call	100144dc <exit>

1000d36c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000d36c:	defffe04 	addi	sp,sp,-8
1000d370:	df000115 	stw	fp,4(sp)
1000d374:	df000104 	addi	fp,sp,4
1000d378:	e13fff15 	stw	r4,-4(fp)
}
1000d37c:	0001883a 	nop
1000d380:	e037883a 	mov	sp,fp
1000d384:	df000017 	ldw	fp,0(sp)
1000d388:	dec00104 	addi	sp,sp,4
1000d38c:	f800283a 	ret

1000d390 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000d390:	defffe04 	addi	sp,sp,-8
1000d394:	df000115 	stw	fp,4(sp)
1000d398:	df000104 	addi	fp,sp,4
1000d39c:	e13fff15 	stw	r4,-4(fp)
}
1000d3a0:	0001883a 	nop
1000d3a4:	e037883a 	mov	sp,fp
1000d3a8:	df000017 	ldw	fp,0(sp)
1000d3ac:	dec00104 	addi	sp,sp,4
1000d3b0:	f800283a 	ret

1000d3b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d3b4:	defffe04 	addi	sp,sp,-8
1000d3b8:	dfc00115 	stw	ra,4(sp)
1000d3bc:	df000015 	stw	fp,0(sp)
1000d3c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d3c4:	d0a00b17 	ldw	r2,-32724(gp)
1000d3c8:	10000326 	beq	r2,zero,1000d3d8 <alt_get_errno+0x24>
1000d3cc:	d0a00b17 	ldw	r2,-32724(gp)
1000d3d0:	103ee83a 	callr	r2
1000d3d4:	00000106 	br	1000d3dc <alt_get_errno+0x28>
1000d3d8:	d0a6f404 	addi	r2,gp,-25648
}
1000d3dc:	e037883a 	mov	sp,fp
1000d3e0:	dfc00117 	ldw	ra,4(sp)
1000d3e4:	df000017 	ldw	fp,0(sp)
1000d3e8:	dec00204 	addi	sp,sp,8
1000d3ec:	f800283a 	ret

1000d3f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000d3f0:	defff904 	addi	sp,sp,-28
1000d3f4:	dfc00615 	stw	ra,24(sp)
1000d3f8:	df000515 	stw	fp,20(sp)
1000d3fc:	df000504 	addi	fp,sp,20
1000d400:	e13ffd15 	stw	r4,-12(fp)
1000d404:	e17ffe15 	stw	r5,-8(fp)
1000d408:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d40c:	e0bffd17 	ldw	r2,-12(fp)
1000d410:	10000616 	blt	r2,zero,1000d42c <read+0x3c>
1000d414:	e0bffd17 	ldw	r2,-12(fp)
1000d418:	10c00324 	muli	r3,r2,12
1000d41c:	00840074 	movhi	r2,4097
1000d420:	10954104 	addi	r2,r2,21764
1000d424:	1885883a 	add	r2,r3,r2
1000d428:	00000106 	br	1000d430 <read+0x40>
1000d42c:	0005883a 	mov	r2,zero
1000d430:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d434:	e0bffb17 	ldw	r2,-20(fp)
1000d438:	10002226 	beq	r2,zero,1000d4c4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d43c:	e0bffb17 	ldw	r2,-20(fp)
1000d440:	10800217 	ldw	r2,8(r2)
1000d444:	108000cc 	andi	r2,r2,3
1000d448:	10800060 	cmpeqi	r2,r2,1
1000d44c:	1000181e 	bne	r2,zero,1000d4b0 <read+0xc0>
        (fd->dev->read))
1000d450:	e0bffb17 	ldw	r2,-20(fp)
1000d454:	10800017 	ldw	r2,0(r2)
1000d458:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d45c:	10001426 	beq	r2,zero,1000d4b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000d460:	e0bffb17 	ldw	r2,-20(fp)
1000d464:	10800017 	ldw	r2,0(r2)
1000d468:	10800517 	ldw	r2,20(r2)
1000d46c:	e0ffff17 	ldw	r3,-4(fp)
1000d470:	180d883a 	mov	r6,r3
1000d474:	e17ffe17 	ldw	r5,-8(fp)
1000d478:	e13ffb17 	ldw	r4,-20(fp)
1000d47c:	103ee83a 	callr	r2
1000d480:	e0bffc15 	stw	r2,-16(fp)
1000d484:	e0bffc17 	ldw	r2,-16(fp)
1000d488:	1000070e 	bge	r2,zero,1000d4a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000d48c:	000d3b40 	call	1000d3b4 <alt_get_errno>
1000d490:	1007883a 	mov	r3,r2
1000d494:	e0bffc17 	ldw	r2,-16(fp)
1000d498:	0085c83a 	sub	r2,zero,r2
1000d49c:	18800015 	stw	r2,0(r3)
          return -1;
1000d4a0:	00bfffc4 	movi	r2,-1
1000d4a4:	00000c06 	br	1000d4d8 <read+0xe8>
        }
        return rval;
1000d4a8:	e0bffc17 	ldw	r2,-16(fp)
1000d4ac:	00000a06 	br	1000d4d8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000d4b0:	000d3b40 	call	1000d3b4 <alt_get_errno>
1000d4b4:	1007883a 	mov	r3,r2
1000d4b8:	00800344 	movi	r2,13
1000d4bc:	18800015 	stw	r2,0(r3)
1000d4c0:	00000406 	br	1000d4d4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000d4c4:	000d3b40 	call	1000d3b4 <alt_get_errno>
1000d4c8:	1007883a 	mov	r3,r2
1000d4cc:	00801444 	movi	r2,81
1000d4d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000d4d4:	00bfffc4 	movi	r2,-1
}
1000d4d8:	e037883a 	mov	sp,fp
1000d4dc:	dfc00117 	ldw	ra,4(sp)
1000d4e0:	df000017 	ldw	fp,0(sp)
1000d4e4:	dec00204 	addi	sp,sp,8
1000d4e8:	f800283a 	ret

1000d4ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000d4ec:	defffe04 	addi	sp,sp,-8
1000d4f0:	df000115 	stw	fp,4(sp)
1000d4f4:	df000104 	addi	fp,sp,4
1000d4f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000d4fc:	e0bfff17 	ldw	r2,-4(fp)
1000d500:	108000d0 	cmplti	r2,r2,3
1000d504:	10000d1e 	bne	r2,zero,1000d53c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1000d508:	00840074 	movhi	r2,4097
1000d50c:	10954104 	addi	r2,r2,21764
1000d510:	e0ffff17 	ldw	r3,-4(fp)
1000d514:	18c00324 	muli	r3,r3,12
1000d518:	10c5883a 	add	r2,r2,r3
1000d51c:	10800204 	addi	r2,r2,8
1000d520:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000d524:	00840074 	movhi	r2,4097
1000d528:	10954104 	addi	r2,r2,21764
1000d52c:	e0ffff17 	ldw	r3,-4(fp)
1000d530:	18c00324 	muli	r3,r3,12
1000d534:	10c5883a 	add	r2,r2,r3
1000d538:	10000015 	stw	zero,0(r2)
  }
}
1000d53c:	0001883a 	nop
1000d540:	e037883a 	mov	sp,fp
1000d544:	df000017 	ldw	fp,0(sp)
1000d548:	dec00104 	addi	sp,sp,4
1000d54c:	f800283a 	ret

1000d550 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000d550:	defff904 	addi	sp,sp,-28
1000d554:	df000615 	stw	fp,24(sp)
1000d558:	df000604 	addi	fp,sp,24
1000d55c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d560:	0005303a 	rdctl	r2,status
1000d564:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d568:	e0fffe17 	ldw	r3,-8(fp)
1000d56c:	00bfff84 	movi	r2,-2
1000d570:	1884703a 	and	r2,r3,r2
1000d574:	1001703a 	wrctl	status,r2
  
  return context;
1000d578:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000d57c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000d580:	d0a00c17 	ldw	r2,-32720(gp)
1000d584:	10c000c4 	addi	r3,r2,3
1000d588:	00bfff04 	movi	r2,-4
1000d58c:	1884703a 	and	r2,r3,r2
1000d590:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000d594:	d0e00c17 	ldw	r3,-32720(gp)
1000d598:	e0bfff17 	ldw	r2,-4(fp)
1000d59c:	1887883a 	add	r3,r3,r2
1000d5a0:	00860034 	movhi	r2,6144
1000d5a4:	10800004 	addi	r2,r2,0
1000d5a8:	10c0062e 	bgeu	r2,r3,1000d5c4 <sbrk+0x74>
1000d5ac:	e0bffb17 	ldw	r2,-20(fp)
1000d5b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d5b4:	e0bffa17 	ldw	r2,-24(fp)
1000d5b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000d5bc:	00bfffc4 	movi	r2,-1
1000d5c0:	00000b06 	br	1000d5f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000d5c4:	d0a00c17 	ldw	r2,-32720(gp)
1000d5c8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000d5cc:	d0e00c17 	ldw	r3,-32720(gp)
1000d5d0:	e0bfff17 	ldw	r2,-4(fp)
1000d5d4:	1885883a 	add	r2,r3,r2
1000d5d8:	d0a00c15 	stw	r2,-32720(gp)
1000d5dc:	e0bffb17 	ldw	r2,-20(fp)
1000d5e0:	e0bffc15 	stw	r2,-16(fp)
1000d5e4:	e0bffc17 	ldw	r2,-16(fp)
1000d5e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000d5ec:	e0bffd17 	ldw	r2,-12(fp)
} 
1000d5f0:	e037883a 	mov	sp,fp
1000d5f4:	df000017 	ldw	fp,0(sp)
1000d5f8:	dec00104 	addi	sp,sp,4
1000d5fc:	f800283a 	ret

1000d600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d600:	defffe04 	addi	sp,sp,-8
1000d604:	dfc00115 	stw	ra,4(sp)
1000d608:	df000015 	stw	fp,0(sp)
1000d60c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d610:	d0a00b17 	ldw	r2,-32724(gp)
1000d614:	10000326 	beq	r2,zero,1000d624 <alt_get_errno+0x24>
1000d618:	d0a00b17 	ldw	r2,-32724(gp)
1000d61c:	103ee83a 	callr	r2
1000d620:	00000106 	br	1000d628 <alt_get_errno+0x28>
1000d624:	d0a6f404 	addi	r2,gp,-25648
}
1000d628:	e037883a 	mov	sp,fp
1000d62c:	dfc00117 	ldw	ra,4(sp)
1000d630:	df000017 	ldw	fp,0(sp)
1000d634:	dec00204 	addi	sp,sp,8
1000d638:	f800283a 	ret

1000d63c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000d63c:	defff904 	addi	sp,sp,-28
1000d640:	dfc00615 	stw	ra,24(sp)
1000d644:	df000515 	stw	fp,20(sp)
1000d648:	df000504 	addi	fp,sp,20
1000d64c:	e13ffd15 	stw	r4,-12(fp)
1000d650:	e17ffe15 	stw	r5,-8(fp)
1000d654:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d658:	e0bffd17 	ldw	r2,-12(fp)
1000d65c:	10000616 	blt	r2,zero,1000d678 <write+0x3c>
1000d660:	e0bffd17 	ldw	r2,-12(fp)
1000d664:	10c00324 	muli	r3,r2,12
1000d668:	00840074 	movhi	r2,4097
1000d66c:	10954104 	addi	r2,r2,21764
1000d670:	1885883a 	add	r2,r3,r2
1000d674:	00000106 	br	1000d67c <write+0x40>
1000d678:	0005883a 	mov	r2,zero
1000d67c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d680:	e0bffb17 	ldw	r2,-20(fp)
1000d684:	10002126 	beq	r2,zero,1000d70c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000d688:	e0bffb17 	ldw	r2,-20(fp)
1000d68c:	10800217 	ldw	r2,8(r2)
1000d690:	108000cc 	andi	r2,r2,3
1000d694:	10001826 	beq	r2,zero,1000d6f8 <write+0xbc>
1000d698:	e0bffb17 	ldw	r2,-20(fp)
1000d69c:	10800017 	ldw	r2,0(r2)
1000d6a0:	10800617 	ldw	r2,24(r2)
1000d6a4:	10001426 	beq	r2,zero,1000d6f8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000d6a8:	e0bffb17 	ldw	r2,-20(fp)
1000d6ac:	10800017 	ldw	r2,0(r2)
1000d6b0:	10800617 	ldw	r2,24(r2)
1000d6b4:	e0ffff17 	ldw	r3,-4(fp)
1000d6b8:	180d883a 	mov	r6,r3
1000d6bc:	e17ffe17 	ldw	r5,-8(fp)
1000d6c0:	e13ffb17 	ldw	r4,-20(fp)
1000d6c4:	103ee83a 	callr	r2
1000d6c8:	e0bffc15 	stw	r2,-16(fp)
1000d6cc:	e0bffc17 	ldw	r2,-16(fp)
1000d6d0:	1000070e 	bge	r2,zero,1000d6f0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000d6d4:	000d6000 	call	1000d600 <alt_get_errno>
1000d6d8:	1007883a 	mov	r3,r2
1000d6dc:	e0bffc17 	ldw	r2,-16(fp)
1000d6e0:	0085c83a 	sub	r2,zero,r2
1000d6e4:	18800015 	stw	r2,0(r3)
        return -1;
1000d6e8:	00bfffc4 	movi	r2,-1
1000d6ec:	00000c06 	br	1000d720 <write+0xe4>
      }
      return rval;
1000d6f0:	e0bffc17 	ldw	r2,-16(fp)
1000d6f4:	00000a06 	br	1000d720 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000d6f8:	000d6000 	call	1000d600 <alt_get_errno>
1000d6fc:	1007883a 	mov	r3,r2
1000d700:	00800344 	movi	r2,13
1000d704:	18800015 	stw	r2,0(r3)
1000d708:	00000406 	br	1000d71c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000d70c:	000d6000 	call	1000d600 <alt_get_errno>
1000d710:	1007883a 	mov	r3,r2
1000d714:	00801444 	movi	r2,81
1000d718:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000d71c:	00bfffc4 	movi	r2,-1
}
1000d720:	e037883a 	mov	sp,fp
1000d724:	dfc00117 	ldw	ra,4(sp)
1000d728:	df000017 	ldw	fp,0(sp)
1000d72c:	dec00204 	addi	sp,sp,8
1000d730:	f800283a 	ret

1000d734 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000d734:	defffd04 	addi	sp,sp,-12
1000d738:	dfc00215 	stw	ra,8(sp)
1000d73c:	df000115 	stw	fp,4(sp)
1000d740:	df000104 	addi	fp,sp,4
1000d744:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000d748:	d1600804 	addi	r5,gp,-32736
1000d74c:	e13fff17 	ldw	r4,-4(fp)
1000d750:	00137cc0 	call	100137cc <alt_dev_llist_insert>
}
1000d754:	e037883a 	mov	sp,fp
1000d758:	dfc00117 	ldw	ra,4(sp)
1000d75c:	df000017 	ldw	fp,0(sp)
1000d760:	dec00204 	addi	sp,sp,8
1000d764:	f800283a 	ret

1000d768 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000d768:	defffd04 	addi	sp,sp,-12
1000d76c:	dfc00215 	stw	ra,8(sp)
1000d770:	df000115 	stw	fp,4(sp)
1000d774:	df000104 	addi	fp,sp,4
1000d778:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
1000d77c:	00141cc0 	call	100141cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000d780:	00800044 	movi	r2,1
1000d784:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000d788:	0001883a 	nop
1000d78c:	e037883a 	mov	sp,fp
1000d790:	dfc00117 	ldw	ra,4(sp)
1000d794:	df000017 	ldw	fp,0(sp)
1000d798:	dec00204 	addi	sp,sp,8
1000d79c:	f800283a 	ret

1000d7a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000d7a0:	defffd04 	addi	sp,sp,-12
1000d7a4:	dfc00215 	stw	ra,8(sp)
1000d7a8:	df000115 	stw	fp,4(sp)
1000d7ac:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000d7b0:	000d883a 	mov	r6,zero
1000d7b4:	000b883a 	mov	r5,zero
1000d7b8:	01040074 	movhi	r4,4097
1000d7bc:	2115ab04 	addi	r4,r4,22188
1000d7c0:	0011e640 	call	10011e64 <altera_avalon_jtag_uart_init>
1000d7c4:	01040074 	movhi	r4,4097
1000d7c8:	2115a104 	addi	r4,r4,22148
1000d7cc:	000d7340 	call	1000d734 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
1000d7d0:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
1000d7d4:	00840074 	movhi	r2,4097
1000d7d8:	1099b904 	addi	r2,r2,26340
1000d7dc:	10800a17 	ldw	r2,40(r2)
1000d7e0:	10800017 	ldw	r2,0(r2)
1000d7e4:	1007883a 	mov	r3,r2
1000d7e8:	00840074 	movhi	r2,4097
1000d7ec:	1099b904 	addi	r2,r2,26340
1000d7f0:	10c00b15 	stw	r3,44(r2)
1000d7f4:	00840074 	movhi	r2,4097
1000d7f8:	1099b904 	addi	r2,r2,26340
1000d7fc:	10800a17 	ldw	r2,40(r2)
1000d800:	10800104 	addi	r2,r2,4
1000d804:	10800017 	ldw	r2,0(r2)
1000d808:	1007883a 	mov	r3,r2
1000d80c:	00840074 	movhi	r2,4097
1000d810:	1099b904 	addi	r2,r2,26340
1000d814:	10c00c15 	stw	r3,48(r2)
1000d818:	00840074 	movhi	r2,4097
1000d81c:	1099b904 	addi	r2,r2,26340
1000d820:	10800a17 	ldw	r2,40(r2)
1000d824:	10800204 	addi	r2,r2,8
1000d828:	10800017 	ldw	r2,0(r2)
1000d82c:	10ffffcc 	andi	r3,r2,65535
1000d830:	00840074 	movhi	r2,4097
1000d834:	1099b904 	addi	r2,r2,26340
1000d838:	10c00f15 	stw	r3,60(r2)
1000d83c:	00840074 	movhi	r2,4097
1000d840:	1099b904 	addi	r2,r2,26340
1000d844:	10800a17 	ldw	r2,40(r2)
1000d848:	10800204 	addi	r2,r2,8
1000d84c:	10800017 	ldw	r2,0(r2)
1000d850:	1006d43a 	srli	r3,r2,16
1000d854:	00840074 	movhi	r2,4097
1000d858:	1099b904 	addi	r2,r2,26340
1000d85c:	10c01015 	stw	r3,64(r2)
1000d860:	00840074 	movhi	r2,4097
1000d864:	1099b904 	addi	r2,r2,26340
1000d868:	10800a17 	ldw	r2,40(r2)
1000d86c:	10800304 	addi	r2,r2,12
1000d870:	10800017 	ldw	r2,0(r2)
1000d874:	1005d07a 	srai	r2,r2,1
1000d878:	10c0004c 	andi	r3,r2,1
1000d87c:	00840074 	movhi	r2,4097
1000d880:	1099b904 	addi	r2,r2,26340
1000d884:	10c00d15 	stw	r3,52(r2)
1000d888:	00840074 	movhi	r2,4097
1000d88c:	1099b904 	addi	r2,r2,26340
1000d890:	10800a17 	ldw	r2,40(r2)
1000d894:	10800304 	addi	r2,r2,12
1000d898:	10800017 	ldw	r2,0(r2)
1000d89c:	1005d13a 	srai	r2,r2,4
1000d8a0:	10c003cc 	andi	r3,r2,15
1000d8a4:	00840074 	movhi	r2,4097
1000d8a8:	1099b904 	addi	r2,r2,26340
1000d8ac:	10c00e15 	stw	r3,56(r2)
1000d8b0:	00840074 	movhi	r2,4097
1000d8b4:	1099b904 	addi	r2,r2,26340
1000d8b8:	10800a17 	ldw	r2,40(r2)
1000d8bc:	10800304 	addi	r2,r2,12
1000d8c0:	10800017 	ldw	r2,0(r2)
1000d8c4:	1005d43a 	srai	r2,r2,16
1000d8c8:	e0bfff05 	stb	r2,-4(fp)
1000d8cc:	00840074 	movhi	r2,4097
1000d8d0:	1099b904 	addi	r2,r2,26340
1000d8d4:	10800a17 	ldw	r2,40(r2)
1000d8d8:	10800304 	addi	r2,r2,12
1000d8dc:	10800017 	ldw	r2,0(r2)
1000d8e0:	1004d63a 	srli	r2,r2,24
1000d8e4:	e0bfff45 	stb	r2,-3(fp)
1000d8e8:	00840074 	movhi	r2,4097
1000d8ec:	1099b904 	addi	r2,r2,26340
1000d8f0:	10800e17 	ldw	r2,56(r2)
1000d8f4:	10800058 	cmpnei	r2,r2,1
1000d8f8:	1000041e 	bne	r2,zero,1000d90c <alt_sys_init+0x16c>
1000d8fc:	00840074 	movhi	r2,4097
1000d900:	1099b904 	addi	r2,r2,26340
1000d904:	10001115 	stw	zero,68(r2)
1000d908:	00000e06 	br	1000d944 <alt_sys_init+0x1a4>
1000d90c:	00840074 	movhi	r2,4097
1000d910:	1099b904 	addi	r2,r2,26340
1000d914:	10800e17 	ldw	r2,56(r2)
1000d918:	10800098 	cmpnei	r2,r2,2
1000d91c:	1000051e 	bne	r2,zero,1000d934 <alt_sys_init+0x194>
1000d920:	00840074 	movhi	r2,4097
1000d924:	1099b904 	addi	r2,r2,26340
1000d928:	00c00044 	movi	r3,1
1000d92c:	10c01115 	stw	r3,68(r2)
1000d930:	00000406 	br	1000d944 <alt_sys_init+0x1a4>
1000d934:	00840074 	movhi	r2,4097
1000d938:	1099b904 	addi	r2,r2,26340
1000d93c:	00c00084 	movi	r3,2
1000d940:	10c01115 	stw	r3,68(r2)
1000d944:	e0bfff03 	ldbu	r2,-4(fp)
1000d948:	00c00804 	movi	r3,32
1000d94c:	1885c83a 	sub	r2,r3,r2
1000d950:	00ffffc4 	movi	r3,-1
1000d954:	1886d83a 	srl	r3,r3,r2
1000d958:	00840074 	movhi	r2,4097
1000d95c:	1099b904 	addi	r2,r2,26340
1000d960:	10c01215 	stw	r3,72(r2)
1000d964:	e0ffff03 	ldbu	r3,-4(fp)
1000d968:	00840074 	movhi	r2,4097
1000d96c:	1099b904 	addi	r2,r2,26340
1000d970:	10801117 	ldw	r2,68(r2)
1000d974:	1887883a 	add	r3,r3,r2
1000d978:	00840074 	movhi	r2,4097
1000d97c:	1099b904 	addi	r2,r2,26340
1000d980:	10c01315 	stw	r3,76(r2)
1000d984:	e0bfff43 	ldbu	r2,-3(fp)
1000d988:	00c00804 	movi	r3,32
1000d98c:	1885c83a 	sub	r2,r3,r2
1000d990:	00ffffc4 	movi	r3,-1
1000d994:	1886d83a 	srl	r3,r3,r2
1000d998:	00840074 	movhi	r2,4097
1000d99c:	1099b904 	addi	r2,r2,26340
1000d9a0:	10c01415 	stw	r3,80(r2)
1000d9a4:	01040074 	movhi	r4,4097
1000d9a8:	2119b904 	addi	r4,r4,26340
1000d9ac:	000d7340 	call	1000d734 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD_AVALON_INTERFACE, SD_Card_Avalon_Interface);
1000d9b0:	01040074 	movhi	r4,4097
1000d9b4:	2119ce04 	addi	r4,r4,26424
1000d9b8:	000d7340 	call	1000d734 <alt_dev_reg>
}
1000d9bc:	0001883a 	nop
1000d9c0:	e037883a 	mov	sp,fp
1000d9c4:	dfc00117 	ldw	ra,4(sp)
1000d9c8:	df000017 	ldw	fp,0(sp)
1000d9cc:	dec00204 	addi	sp,sp,8
1000d9d0:	f800283a 	ret

1000d9d4 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
1000d9d4:	defffa04 	addi	sp,sp,-24
1000d9d8:	dfc00515 	stw	ra,20(sp)
1000d9dc:	df000415 	stw	fp,16(sp)
1000d9e0:	df000404 	addi	fp,sp,16
1000d9e4:	e13ffe15 	stw	r4,-8(fp)
1000d9e8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
1000d9ec:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
1000d9f0:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
1000d9f4:	10001e26 	beq	r2,zero,1000da70 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
1000d9f8:	00803fc4 	movi	r2,255
1000d9fc:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
1000da00:	d0a6fe17 	ldw	r2,-25608(gp)
1000da04:	e13ffe17 	ldw	r4,-8(fp)
1000da08:	e0ffff17 	ldw	r3,-4(fp)
1000da0c:	20c7883a 	add	r3,r4,r3
1000da10:	1806927a 	slli	r3,r3,9
1000da14:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
1000da18:	d0a6fd17 	ldw	r2,-25612(gp)
1000da1c:	00c00604 	movi	r3,24
1000da20:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
1000da24:	d0a6fa17 	ldw	r2,-25624(gp)
1000da28:	1080002b 	ldhuio	r2,0(r2)
1000da2c:	10bfffcc 	andi	r2,r2,65535
1000da30:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
1000da34:	e0bffd0b 	ldhu	r2,-12(fp)
1000da38:	10bfffcc 	andi	r2,r2,65535
1000da3c:	1080010c 	andi	r2,r2,4
1000da40:	103ff81e 	bne	r2,zero,1000da24 <__alt_data_end+0xf800da24>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
1000da44:	e0bffd0b 	ldhu	r2,-12(fp)
1000da48:	10bfffcc 	andi	r2,r2,65535
1000da4c:	1080040c 	andi	r2,r2,16
1000da50:	1000071e 	bne	r2,zero,1000da70 <Write_Sector_Data+0x9c>
        {
            result = true;
1000da54:	00800044 	movi	r2,1
1000da58:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
1000da5c:	d0270315 	stw	zero,-25588(gp)
            current_sector_index = sector_index+partition_offset;
1000da60:	e0fffe17 	ldw	r3,-8(fp)
1000da64:	e0bfff17 	ldw	r2,-4(fp)
1000da68:	1885883a 	add	r2,r3,r2
1000da6c:	d0a70415 	stw	r2,-25584(gp)
        }
    }
    return result;
1000da70:	e0bffc17 	ldw	r2,-16(fp)
}
1000da74:	e037883a 	mov	sp,fp
1000da78:	dfc00117 	ldw	ra,4(sp)
1000da7c:	df000017 	ldw	fp,0(sp)
1000da80:	dec00204 	addi	sp,sp,8
1000da84:	f800283a 	ret

1000da88 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
1000da88:	defffd04 	addi	sp,sp,-12
1000da8c:	dfc00215 	stw	ra,8(sp)
1000da90:	df000115 	stw	fp,4(sp)
1000da94:	df000104 	addi	fp,sp,4
    bool result = true;
1000da98:	00800044 	movi	r2,1
1000da9c:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
1000daa0:	d0a70317 	ldw	r2,-25588(gp)
1000daa4:	10000526 	beq	r2,zero,1000dabc <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
1000daa8:	d0a70417 	ldw	r2,-25584(gp)
1000daac:	000b883a 	mov	r5,zero
1000dab0:	1009883a 	mov	r4,r2
1000dab4:	000d9d40 	call	1000d9d4 <Write_Sector_Data>
1000dab8:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
1000dabc:	e0bfff17 	ldw	r2,-4(fp)
}
1000dac0:	e037883a 	mov	sp,fp
1000dac4:	dfc00117 	ldw	ra,4(sp)
1000dac8:	df000017 	ldw	fp,0(sp)
1000dacc:	dec00204 	addi	sp,sp,8
1000dad0:	f800283a 	ret

1000dad4 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
1000dad4:	defffa04 	addi	sp,sp,-24
1000dad8:	dfc00515 	stw	ra,20(sp)
1000dadc:	df000415 	stw	fp,16(sp)
1000dae0:	df000404 	addi	fp,sp,16
1000dae4:	e13ffe15 	stw	r4,-8(fp)
1000dae8:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
1000daec:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
1000daf0:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
1000daf4:	10002726 	beq	r2,zero,1000db94 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
1000daf8:	00803fc4 	movi	r2,255
1000dafc:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
1000db00:	d0a70317 	ldw	r2,-25588(gp)
1000db04:	10000726 	beq	r2,zero,1000db24 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
1000db08:	d0a70417 	ldw	r2,-25584(gp)
1000db0c:	000b883a 	mov	r5,zero
1000db10:	1009883a 	mov	r4,r2
1000db14:	000d9d40 	call	1000d9d4 <Write_Sector_Data>
1000db18:	1000021e 	bne	r2,zero,1000db24 <Read_Sector_Data+0x50>
            {
                return false;
1000db1c:	0005883a 	mov	r2,zero
1000db20:	00001d06 	br	1000db98 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
1000db24:	d0a6fe17 	ldw	r2,-25608(gp)
1000db28:	e13ffe17 	ldw	r4,-8(fp)
1000db2c:	e0ffff17 	ldw	r3,-4(fp)
1000db30:	20c7883a 	add	r3,r4,r3
1000db34:	1806927a 	slli	r3,r3,9
1000db38:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
1000db3c:	d0a6fd17 	ldw	r2,-25612(gp)
1000db40:	00c00444 	movi	r3,17
1000db44:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
1000db48:	d0a6fa17 	ldw	r2,-25624(gp)
1000db4c:	1080002b 	ldhuio	r2,0(r2)
1000db50:	10bfffcc 	andi	r2,r2,65535
1000db54:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
1000db58:	e0bffd0b 	ldhu	r2,-12(fp)
1000db5c:	10bfffcc 	andi	r2,r2,65535
1000db60:	1080010c 	andi	r2,r2,4
1000db64:	103ff81e 	bne	r2,zero,1000db48 <__alt_data_end+0xf800db48>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
1000db68:	e0bffd0b 	ldhu	r2,-12(fp)
1000db6c:	10bfffcc 	andi	r2,r2,65535
1000db70:	1080040c 	andi	r2,r2,16
1000db74:	1000071e 	bne	r2,zero,1000db94 <Read_Sector_Data+0xc0>
		{
			result = true;
1000db78:	00800044 	movi	r2,1
1000db7c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
1000db80:	d0270315 	stw	zero,-25588(gp)
            current_sector_index = sector_index+partition_offset;
1000db84:	e0fffe17 	ldw	r3,-8(fp)
1000db88:	e0bfff17 	ldw	r2,-4(fp)
1000db8c:	1885883a 	add	r2,r3,r2
1000db90:	d0a70415 	stw	r2,-25584(gp)
		}
	}
	return result;
1000db94:	e0bffc17 	ldw	r2,-16(fp)
}
1000db98:	e037883a 	mov	sp,fp
1000db9c:	dfc00117 	ldw	ra,4(sp)
1000dba0:	df000017 	ldw	fp,0(sp)
1000dba4:	dec00204 	addi	sp,sp,8
1000dba8:	f800283a 	ret

1000dbac <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
1000dbac:	defffb04 	addi	sp,sp,-20
1000dbb0:	dfc00415 	stw	ra,16(sp)
1000dbb4:	df000315 	stw	fp,12(sp)
1000dbb8:	df000304 	addi	fp,sp,12
1000dbbc:	e13ffe15 	stw	r4,-8(fp)
1000dbc0:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
1000dbc4:	e0bffe17 	ldw	r2,-8(fp)
1000dbc8:	1004d23a 	srli	r2,r2,8
1000dbcc:	d0e70017 	ldw	r3,-25600(gp)
1000dbd0:	10c5883a 	add	r2,r2,r3
1000dbd4:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
1000dbd8:	008400b4 	movhi	r2,4098
1000dbdc:	10a0f104 	addi	r2,r2,-31804
1000dbe0:	10801117 	ldw	r2,68(r2)
1000dbe4:	e0fffd17 	ldw	r3,-12(fp)
1000dbe8:	1885883a 	add	r2,r3,r2
1000dbec:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
1000dbf0:	d0a70417 	ldw	r2,-25584(gp)
1000dbf4:	e0fffd17 	ldw	r3,-12(fp)
1000dbf8:	18800726 	beq	r3,r2,1000dc18 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
1000dbfc:	e0bffd17 	ldw	r2,-12(fp)
1000dc00:	000b883a 	mov	r5,zero
1000dc04:	1009883a 	mov	r4,r2
1000dc08:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000dc0c:	1000021e 	bne	r2,zero,1000dc18 <get_cluster_flag+0x6c>
        {
            return false;
1000dc10:	0005883a 	mov	r2,zero
1000dc14:	00000d06 	br	1000dc4c <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
1000dc18:	e0bffe17 	ldw	r2,-8(fp)
1000dc1c:	10803fcc 	andi	r2,r2,255
1000dc20:	1085883a 	add	r2,r2,r2
1000dc24:	1007883a 	mov	r3,r2
1000dc28:	d0a70217 	ldw	r2,-25592(gp)
1000dc2c:	10800a17 	ldw	r2,40(r2)
1000dc30:	1885883a 	add	r2,r3,r2
1000dc34:	1080002b 	ldhuio	r2,0(r2)
1000dc38:	10bfffcc 	andi	r2,r2,65535
1000dc3c:	1007883a 	mov	r3,r2
1000dc40:	e0bfff17 	ldw	r2,-4(fp)
1000dc44:	10c0000d 	sth	r3,0(r2)
    return true;
1000dc48:	00800044 	movi	r2,1
}
1000dc4c:	e037883a 	mov	sp,fp
1000dc50:	dfc00117 	ldw	ra,4(sp)
1000dc54:	df000017 	ldw	fp,0(sp)
1000dc58:	dec00204 	addi	sp,sp,8
1000dc5c:	f800283a 	ret

1000dc60 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
1000dc60:	defffa04 	addi	sp,sp,-24
1000dc64:	dfc00515 	stw	ra,20(sp)
1000dc68:	df000415 	stw	fp,16(sp)
1000dc6c:	df000404 	addi	fp,sp,16
1000dc70:	e13ffd15 	stw	r4,-12(fp)
1000dc74:	2805883a 	mov	r2,r5
1000dc78:	e1bfff15 	stw	r6,-4(fp)
1000dc7c:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
1000dc80:	e0bffd17 	ldw	r2,-12(fp)
1000dc84:	1004d23a 	srli	r2,r2,8
1000dc88:	d0e70017 	ldw	r3,-25600(gp)
1000dc8c:	10c5883a 	add	r2,r2,r3
1000dc90:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
1000dc94:	e0bfff17 	ldw	r2,-4(fp)
1000dc98:	10000726 	beq	r2,zero,1000dcb8 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
1000dc9c:	008400b4 	movhi	r2,4098
1000dca0:	10a0f104 	addi	r2,r2,-31804
1000dca4:	10801117 	ldw	r2,68(r2)
1000dca8:	e0fffc17 	ldw	r3,-16(fp)
1000dcac:	1885883a 	add	r2,r3,r2
1000dcb0:	e0bffc15 	stw	r2,-16(fp)
1000dcb4:	00000606 	br	1000dcd0 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
1000dcb8:	008400b4 	movhi	r2,4098
1000dcbc:	10a0f104 	addi	r2,r2,-31804
1000dcc0:	10801217 	ldw	r2,72(r2)
1000dcc4:	e0fffc17 	ldw	r3,-16(fp)
1000dcc8:	1885883a 	add	r2,r3,r2
1000dccc:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
1000dcd0:	d0a70417 	ldw	r2,-25584(gp)
1000dcd4:	e0fffc17 	ldw	r3,-16(fp)
1000dcd8:	18800726 	beq	r3,r2,1000dcf8 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
1000dcdc:	e0bffc17 	ldw	r2,-16(fp)
1000dce0:	000b883a 	mov	r5,zero
1000dce4:	1009883a 	mov	r4,r2
1000dce8:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000dcec:	1000021e 	bne	r2,zero,1000dcf8 <mark_cluster+0x98>
        {
            return false;
1000dcf0:	0005883a 	mov	r2,zero
1000dcf4:	00000d06 	br	1000dd2c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
1000dcf8:	e0bffd17 	ldw	r2,-12(fp)
1000dcfc:	10803fcc 	andi	r2,r2,255
1000dd00:	1085883a 	add	r2,r2,r2
1000dd04:	1007883a 	mov	r3,r2
1000dd08:	d0a70217 	ldw	r2,-25592(gp)
1000dd0c:	10800a17 	ldw	r2,40(r2)
1000dd10:	1885883a 	add	r2,r3,r2
1000dd14:	1007883a 	mov	r3,r2
1000dd18:	e0bffe0f 	ldh	r2,-8(fp)
1000dd1c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
1000dd20:	00800044 	movi	r2,1
1000dd24:	d0a70315 	stw	r2,-25588(gp)
    return true;
1000dd28:	00800044 	movi	r2,1
}
1000dd2c:	e037883a 	mov	sp,fp
1000dd30:	dfc00117 	ldw	ra,4(sp)
1000dd34:	df000017 	ldw	fp,0(sp)
1000dd38:	dec00204 	addi	sp,sp,8
1000dd3c:	f800283a 	ret

1000dd40 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
1000dd40:	defff704 	addi	sp,sp,-36
1000dd44:	dfc00815 	stw	ra,32(sp)
1000dd48:	df000715 	stw	fp,28(sp)
1000dd4c:	df000704 	addi	fp,sp,28
	bool result = false;
1000dd50:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
1000dd54:	000b883a 	mov	r5,zero
1000dd58:	0009883a 	mov	r4,zero
1000dd5c:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000dd60:	10005a26 	beq	r2,zero,1000decc <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
1000dd64:	d0a70217 	ldw	r2,-25592(gp)
1000dd68:	10800a17 	ldw	r2,40(r2)
1000dd6c:	10807f84 	addi	r2,r2,510
1000dd70:	1080002b 	ldhuio	r2,0(r2)
1000dd74:	10bfffcc 	andi	r2,r2,65535
1000dd78:	10bfffcc 	andi	r2,r2,65535
1000dd7c:	10a0001c 	xori	r2,r2,32768
1000dd80:	10a00004 	addi	r2,r2,-32768
1000dd84:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
1000dd88:	e0bffb17 	ldw	r2,-20(fp)
1000dd8c:	10ffffcc 	andi	r3,r2,65535
1000dd90:	00aa9554 	movui	r2,43605
1000dd94:	18804d1e 	bne	r3,r2,1000decc <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
1000dd98:	e03ffa15 	stw	zero,-24(fp)
1000dd9c:	00004806 	br	1000dec0 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
1000dda0:	e0bffa17 	ldw	r2,-24(fp)
1000dda4:	1004913a 	slli	r2,r2,4
1000dda8:	10806f84 	addi	r2,r2,446
1000ddac:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
1000ddb0:	d0a70217 	ldw	r2,-25592(gp)
1000ddb4:	10c00a17 	ldw	r3,40(r2)
1000ddb8:	e0bffc17 	ldw	r2,-16(fp)
1000ddbc:	1885883a 	add	r2,r3,r2
1000ddc0:	10800104 	addi	r2,r2,4
1000ddc4:	10800023 	ldbuio	r2,0(r2)
1000ddc8:	10803fcc 	andi	r2,r2,255
1000ddcc:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
1000ddd0:	e0bffd07 	ldb	r2,-12(fp)
1000ddd4:	10800060 	cmpeqi	r2,r2,1
1000ddd8:	1000091e 	bne	r2,zero,1000de00 <Check_for_Master_Boot_Record+0xc0>
1000dddc:	e0bffd07 	ldb	r2,-12(fp)
1000dde0:	10800120 	cmpeqi	r2,r2,4
1000dde4:	1000061e 	bne	r2,zero,1000de00 <Check_for_Master_Boot_Record+0xc0>
1000dde8:	e0bffd07 	ldb	r2,-12(fp)
1000ddec:	108001a0 	cmpeqi	r2,r2,6
1000ddf0:	1000031e 	bne	r2,zero,1000de00 <Check_for_Master_Boot_Record+0xc0>
1000ddf4:	e0bffd07 	ldb	r2,-12(fp)
1000ddf8:	10800398 	cmpnei	r2,r2,14
1000ddfc:	10002d1e 	bne	r2,zero,1000deb4 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
1000de00:	d0a70217 	ldw	r2,-25592(gp)
1000de04:	10c00a17 	ldw	r3,40(r2)
1000de08:	e0bffc17 	ldw	r2,-16(fp)
1000de0c:	1885883a 	add	r2,r3,r2
1000de10:	10800284 	addi	r2,r2,10
1000de14:	1080002b 	ldhuio	r2,0(r2)
1000de18:	10bfffcc 	andi	r2,r2,65535
1000de1c:	1006943a 	slli	r3,r2,16
1000de20:	d0a70217 	ldw	r2,-25592(gp)
1000de24:	11000a17 	ldw	r4,40(r2)
1000de28:	e0bffc17 	ldw	r2,-16(fp)
1000de2c:	2085883a 	add	r2,r4,r2
1000de30:	10800204 	addi	r2,r2,8
1000de34:	1080002b 	ldhuio	r2,0(r2)
1000de38:	10bfffcc 	andi	r2,r2,65535
1000de3c:	10bfffcc 	andi	r2,r2,65535
1000de40:	1884b03a 	or	r2,r3,r2
1000de44:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
1000de48:	d0a70217 	ldw	r2,-25592(gp)
1000de4c:	10c00a17 	ldw	r3,40(r2)
1000de50:	e0bffc17 	ldw	r2,-16(fp)
1000de54:	1885883a 	add	r2,r3,r2
1000de58:	10800384 	addi	r2,r2,14
1000de5c:	1080002b 	ldhuio	r2,0(r2)
1000de60:	10bfffcc 	andi	r2,r2,65535
1000de64:	1006943a 	slli	r3,r2,16
1000de68:	d0a70217 	ldw	r2,-25592(gp)
1000de6c:	11000a17 	ldw	r4,40(r2)
1000de70:	e0bffc17 	ldw	r2,-16(fp)
1000de74:	2085883a 	add	r2,r4,r2
1000de78:	10800304 	addi	r2,r2,12
1000de7c:	1080002b 	ldhuio	r2,0(r2)
1000de80:	10bfffcc 	andi	r2,r2,65535
1000de84:	10bfffcc 	andi	r2,r2,65535
1000de88:	1884b03a 	or	r2,r3,r2
1000de8c:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
1000de90:	e0bfff17 	ldw	r2,-4(fp)
1000de94:	0080070e 	bge	zero,r2,1000deb4 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
1000de98:	00800044 	movi	r2,1
1000de9c:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
1000dea0:	e0bfff17 	ldw	r2,-4(fp)
1000dea4:	d0a70115 	stw	r2,-25596(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
1000dea8:	e0bffe17 	ldw	r2,-8(fp)
1000deac:	d0a70015 	stw	r2,-25600(gp)
						break;
1000deb0:	00000606 	br	1000decc <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
1000deb4:	e0bffa17 	ldw	r2,-24(fp)
1000deb8:	10800044 	addi	r2,r2,1
1000debc:	e0bffa15 	stw	r2,-24(fp)
1000dec0:	e0bffa17 	ldw	r2,-24(fp)
1000dec4:	10800110 	cmplti	r2,r2,4
1000dec8:	103fb51e 	bne	r2,zero,1000dda0 <__alt_data_end+0xf800dda0>
				}
			}
		}
	}

	return result;
1000decc:	e0bff917 	ldw	r2,-28(fp)
}
1000ded0:	e037883a 	mov	sp,fp
1000ded4:	dfc00117 	ldw	ra,4(sp)
1000ded8:	df000017 	ldw	fp,0(sp)
1000dedc:	dec00204 	addi	sp,sp,8
1000dee0:	f800283a 	ret

1000dee4 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
1000dee4:	defff804 	addi	sp,sp,-32
1000dee8:	dfc00715 	stw	ra,28(sp)
1000deec:	df000615 	stw	fp,24(sp)
1000def0:	df000604 	addi	fp,sp,24
1000def4:	e13ffc15 	stw	r4,-16(fp)
1000def8:	e17ffd15 	stw	r5,-12(fp)
1000defc:	e1bffe15 	stw	r6,-8(fp)
1000df00:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
1000df04:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
1000df08:	e0bffc17 	ldw	r2,-16(fp)
1000df0c:	108007cc 	andi	r2,r2,31
1000df10:	10008d1e 	bne	r2,zero,1000e148 <Read_File_Record_At_Offset+0x264>
1000df14:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
1000df18:	10008b26 	beq	r2,zero,1000e148 <Read_File_Record_At_Offset+0x264>
1000df1c:	d0a6f917 	ldw	r2,-25628(gp)
1000df20:	10008926 	beq	r2,zero,1000e148 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
1000df24:	e03ffb15 	stw	zero,-20(fp)
1000df28:	00001106 	br	1000df70 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
1000df2c:	e0fffc17 	ldw	r3,-16(fp)
1000df30:	e0bffb17 	ldw	r2,-20(fp)
1000df34:	1885883a 	add	r2,r3,r2
1000df38:	1007883a 	mov	r3,r2
1000df3c:	d0a70217 	ldw	r2,-25592(gp)
1000df40:	10800a17 	ldw	r2,40(r2)
1000df44:	1885883a 	add	r2,r3,r2
1000df48:	10800023 	ldbuio	r2,0(r2)
1000df4c:	10803fcc 	andi	r2,r2,255
1000df50:	1009883a 	mov	r4,r2
1000df54:	e0fffd17 	ldw	r3,-12(fp)
1000df58:	e0bffb17 	ldw	r2,-20(fp)
1000df5c:	1885883a 	add	r2,r3,r2
1000df60:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
1000df64:	e0bffb17 	ldw	r2,-20(fp)
1000df68:	10800044 	addi	r2,r2,1
1000df6c:	e0bffb15 	stw	r2,-20(fp)
1000df70:	e0bffb17 	ldw	r2,-20(fp)
1000df74:	10800210 	cmplti	r2,r2,8
1000df78:	103fec1e 	bne	r2,zero,1000df2c <__alt_data_end+0xf800df2c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
1000df7c:	e03ffb15 	stw	zero,-20(fp)
1000df80:	00001306 	br	1000dfd0 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
1000df84:	e0fffc17 	ldw	r3,-16(fp)
1000df88:	e0bffb17 	ldw	r2,-20(fp)
1000df8c:	1885883a 	add	r2,r3,r2
1000df90:	1007883a 	mov	r3,r2
1000df94:	d0a70217 	ldw	r2,-25592(gp)
1000df98:	10800a17 	ldw	r2,40(r2)
1000df9c:	1885883a 	add	r2,r3,r2
1000dfa0:	10800204 	addi	r2,r2,8
1000dfa4:	10800023 	ldbuio	r2,0(r2)
1000dfa8:	10803fcc 	andi	r2,r2,255
1000dfac:	1009883a 	mov	r4,r2
1000dfb0:	e0fffd17 	ldw	r3,-12(fp)
1000dfb4:	e0bffb17 	ldw	r2,-20(fp)
1000dfb8:	1885883a 	add	r2,r3,r2
1000dfbc:	10800204 	addi	r2,r2,8
1000dfc0:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
1000dfc4:	e0bffb17 	ldw	r2,-20(fp)
1000dfc8:	10800044 	addi	r2,r2,1
1000dfcc:	e0bffb15 	stw	r2,-20(fp)
1000dfd0:	e0bffb17 	ldw	r2,-20(fp)
1000dfd4:	108000d0 	cmplti	r2,r2,3
1000dfd8:	103fea1e 	bne	r2,zero,1000df84 <__alt_data_end+0xf800df84>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
1000dfdc:	d0a70217 	ldw	r2,-25592(gp)
1000dfe0:	10c00a17 	ldw	r3,40(r2)
1000dfe4:	e0bffc17 	ldw	r2,-16(fp)
1000dfe8:	1885883a 	add	r2,r3,r2
1000dfec:	108002c4 	addi	r2,r2,11
1000dff0:	10800023 	ldbuio	r2,0(r2)
1000dff4:	10803fcc 	andi	r2,r2,255
1000dff8:	1007883a 	mov	r3,r2
1000dffc:	e0bffd17 	ldw	r2,-12(fp)
1000e000:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
1000e004:	d0a70217 	ldw	r2,-25592(gp)
1000e008:	10c00a17 	ldw	r3,40(r2)
1000e00c:	e0bffc17 	ldw	r2,-16(fp)
1000e010:	1885883a 	add	r2,r3,r2
1000e014:	10800384 	addi	r2,r2,14
1000e018:	1080002b 	ldhuio	r2,0(r2)
1000e01c:	10bfffcc 	andi	r2,r2,65535
1000e020:	1007883a 	mov	r3,r2
1000e024:	e0bffd17 	ldw	r2,-12(fp)
1000e028:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
1000e02c:	d0a70217 	ldw	r2,-25592(gp)
1000e030:	10c00a17 	ldw	r3,40(r2)
1000e034:	e0bffc17 	ldw	r2,-16(fp)
1000e038:	1885883a 	add	r2,r3,r2
1000e03c:	10800404 	addi	r2,r2,16
1000e040:	1080002b 	ldhuio	r2,0(r2)
1000e044:	10bfffcc 	andi	r2,r2,65535
1000e048:	1007883a 	mov	r3,r2
1000e04c:	e0bffd17 	ldw	r2,-12(fp)
1000e050:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
1000e054:	d0a70217 	ldw	r2,-25592(gp)
1000e058:	10c00a17 	ldw	r3,40(r2)
1000e05c:	e0bffc17 	ldw	r2,-16(fp)
1000e060:	1885883a 	add	r2,r3,r2
1000e064:	10800484 	addi	r2,r2,18
1000e068:	1080002b 	ldhuio	r2,0(r2)
1000e06c:	10bfffcc 	andi	r2,r2,65535
1000e070:	1007883a 	mov	r3,r2
1000e074:	e0bffd17 	ldw	r2,-12(fp)
1000e078:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
1000e07c:	d0a70217 	ldw	r2,-25592(gp)
1000e080:	10c00a17 	ldw	r3,40(r2)
1000e084:	e0bffc17 	ldw	r2,-16(fp)
1000e088:	1885883a 	add	r2,r3,r2
1000e08c:	10800584 	addi	r2,r2,22
1000e090:	1080002b 	ldhuio	r2,0(r2)
1000e094:	10bfffcc 	andi	r2,r2,65535
1000e098:	1007883a 	mov	r3,r2
1000e09c:	e0bffd17 	ldw	r2,-12(fp)
1000e0a0:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
1000e0a4:	d0a70217 	ldw	r2,-25592(gp)
1000e0a8:	10c00a17 	ldw	r3,40(r2)
1000e0ac:	e0bffc17 	ldw	r2,-16(fp)
1000e0b0:	1885883a 	add	r2,r3,r2
1000e0b4:	10800604 	addi	r2,r2,24
1000e0b8:	1080002b 	ldhuio	r2,0(r2)
1000e0bc:	10bfffcc 	andi	r2,r2,65535
1000e0c0:	1007883a 	mov	r3,r2
1000e0c4:	e0bffd17 	ldw	r2,-12(fp)
1000e0c8:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
1000e0cc:	d0a70217 	ldw	r2,-25592(gp)
1000e0d0:	10c00a17 	ldw	r3,40(r2)
1000e0d4:	e0bffc17 	ldw	r2,-16(fp)
1000e0d8:	1885883a 	add	r2,r3,r2
1000e0dc:	10800684 	addi	r2,r2,26
1000e0e0:	1080002b 	ldhuio	r2,0(r2)
1000e0e4:	10bfffcc 	andi	r2,r2,65535
1000e0e8:	1007883a 	mov	r3,r2
1000e0ec:	e0bffd17 	ldw	r2,-12(fp)
1000e0f0:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
1000e0f4:	d0a70217 	ldw	r2,-25592(gp)
1000e0f8:	10c00a17 	ldw	r3,40(r2)
1000e0fc:	e0bffc17 	ldw	r2,-16(fp)
1000e100:	1885883a 	add	r2,r3,r2
1000e104:	10800704 	addi	r2,r2,28
1000e108:	10800037 	ldwio	r2,0(r2)
1000e10c:	1007883a 	mov	r3,r2
1000e110:	e0bffd17 	ldw	r2,-12(fp)
1000e114:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
1000e118:	e0bffd17 	ldw	r2,-12(fp)
1000e11c:	e0fffe17 	ldw	r3,-8(fp)
1000e120:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
1000e124:	e0bffd17 	ldw	r2,-12(fp)
1000e128:	e0ffff17 	ldw	r3,-4(fp)
1000e12c:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
1000e130:	e0bffc17 	ldw	r2,-16(fp)
1000e134:	1007883a 	mov	r3,r2
1000e138:	e0bffd17 	ldw	r2,-12(fp)
1000e13c:	10c00c0d 	sth	r3,48(r2)
		result = true;
1000e140:	00800044 	movi	r2,1
1000e144:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
1000e148:	e0bffa17 	ldw	r2,-24(fp)
}
1000e14c:	e037883a 	mov	sp,fp
1000e150:	dfc00117 	ldw	ra,4(sp)
1000e154:	df000017 	ldw	fp,0(sp)
1000e158:	dec00204 	addi	sp,sp,8
1000e15c:	f800283a 	ret

1000e160 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
1000e160:	defff904 	addi	sp,sp,-28
1000e164:	dfc00615 	stw	ra,24(sp)
1000e168:	df000515 	stw	fp,20(sp)
1000e16c:	df000504 	addi	fp,sp,20
1000e170:	e13ffe15 	stw	r4,-8(fp)
1000e174:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
1000e178:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
1000e17c:	e0bffe17 	ldw	r2,-8(fp)
1000e180:	108007cc 	andi	r2,r2,31
1000e184:	1000931e 	bne	r2,zero,1000e3d4 <Write_File_Record_At_Offset+0x274>
1000e188:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
1000e18c:	10009126 	beq	r2,zero,1000e3d4 <Write_File_Record_At_Offset+0x274>
1000e190:	d0a6f917 	ldw	r2,-25628(gp)
1000e194:	10008f26 	beq	r2,zero,1000e3d4 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
1000e198:	e03ffc15 	stw	zero,-16(fp)
1000e19c:	00001f06 	br	1000e21c <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
1000e1a0:	e0bffc17 	ldw	r2,-16(fp)
1000e1a4:	10800044 	addi	r2,r2,1
1000e1a8:	e0ffff17 	ldw	r3,-4(fp)
1000e1ac:	1885883a 	add	r2,r3,r2
1000e1b0:	10800003 	ldbu	r2,0(r2)
1000e1b4:	10803fcc 	andi	r2,r2,255
1000e1b8:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
1000e1bc:	e0bffd0f 	ldh	r2,-12(fp)
1000e1c0:	1004923a 	slli	r2,r2,8
1000e1c4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
1000e1c8:	e0ffff17 	ldw	r3,-4(fp)
1000e1cc:	e0bffc17 	ldw	r2,-16(fp)
1000e1d0:	1885883a 	add	r2,r3,r2
1000e1d4:	10800003 	ldbu	r2,0(r2)
1000e1d8:	10c03fcc 	andi	r3,r2,255
1000e1dc:	e0bffd0b 	ldhu	r2,-12(fp)
1000e1e0:	1884b03a 	or	r2,r3,r2
1000e1e4:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
1000e1e8:	e0fffe17 	ldw	r3,-8(fp)
1000e1ec:	e0bffc17 	ldw	r2,-16(fp)
1000e1f0:	1885883a 	add	r2,r3,r2
1000e1f4:	1007883a 	mov	r3,r2
1000e1f8:	d0a70217 	ldw	r2,-25592(gp)
1000e1fc:	10800a17 	ldw	r2,40(r2)
1000e200:	1885883a 	add	r2,r3,r2
1000e204:	1007883a 	mov	r3,r2
1000e208:	e0bffd0f 	ldh	r2,-12(fp)
1000e20c:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
1000e210:	e0bffc17 	ldw	r2,-16(fp)
1000e214:	10800084 	addi	r2,r2,2
1000e218:	e0bffc15 	stw	r2,-16(fp)
1000e21c:	e0bffc17 	ldw	r2,-16(fp)
1000e220:	10800210 	cmplti	r2,r2,8
1000e224:	103fde1e 	bne	r2,zero,1000e1a0 <__alt_data_end+0xf800e1a0>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
1000e228:	e03ffc15 	stw	zero,-16(fp)
1000e22c:	00001306 	br	1000e27c <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
1000e230:	e0fffe17 	ldw	r3,-8(fp)
1000e234:	e0bffc17 	ldw	r2,-16(fp)
1000e238:	1885883a 	add	r2,r3,r2
1000e23c:	1007883a 	mov	r3,r2
1000e240:	d0a70217 	ldw	r2,-25592(gp)
1000e244:	10800a17 	ldw	r2,40(r2)
1000e248:	1885883a 	add	r2,r3,r2
1000e24c:	10800204 	addi	r2,r2,8
1000e250:	1009883a 	mov	r4,r2
1000e254:	e0ffff17 	ldw	r3,-4(fp)
1000e258:	e0bffc17 	ldw	r2,-16(fp)
1000e25c:	1885883a 	add	r2,r3,r2
1000e260:	10800204 	addi	r2,r2,8
1000e264:	10800003 	ldbu	r2,0(r2)
1000e268:	10803fcc 	andi	r2,r2,255
1000e26c:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
1000e270:	e0bffc17 	ldw	r2,-16(fp)
1000e274:	10800044 	addi	r2,r2,1
1000e278:	e0bffc15 	stw	r2,-16(fp)
1000e27c:	e0bffc17 	ldw	r2,-16(fp)
1000e280:	108000d0 	cmplti	r2,r2,3
1000e284:	103fea1e 	bne	r2,zero,1000e230 <__alt_data_end+0xf800e230>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
1000e288:	d0a70217 	ldw	r2,-25592(gp)
1000e28c:	10c00a17 	ldw	r3,40(r2)
1000e290:	e0bffe17 	ldw	r2,-8(fp)
1000e294:	1885883a 	add	r2,r3,r2
1000e298:	108002c4 	addi	r2,r2,11
1000e29c:	1007883a 	mov	r3,r2
1000e2a0:	e0bfff17 	ldw	r2,-4(fp)
1000e2a4:	108002c3 	ldbu	r2,11(r2)
1000e2a8:	10803fcc 	andi	r2,r2,255
1000e2ac:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
1000e2b0:	d0a70217 	ldw	r2,-25592(gp)
1000e2b4:	10c00a17 	ldw	r3,40(r2)
1000e2b8:	e0bffe17 	ldw	r2,-8(fp)
1000e2bc:	1885883a 	add	r2,r3,r2
1000e2c0:	10800384 	addi	r2,r2,14
1000e2c4:	1007883a 	mov	r3,r2
1000e2c8:	e0bfff17 	ldw	r2,-4(fp)
1000e2cc:	1080030b 	ldhu	r2,12(r2)
1000e2d0:	10bfffcc 	andi	r2,r2,65535
1000e2d4:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
1000e2d8:	d0a70217 	ldw	r2,-25592(gp)
1000e2dc:	10c00a17 	ldw	r3,40(r2)
1000e2e0:	e0bffe17 	ldw	r2,-8(fp)
1000e2e4:	1885883a 	add	r2,r3,r2
1000e2e8:	10800404 	addi	r2,r2,16
1000e2ec:	1007883a 	mov	r3,r2
1000e2f0:	e0bfff17 	ldw	r2,-4(fp)
1000e2f4:	1080038b 	ldhu	r2,14(r2)
1000e2f8:	10bfffcc 	andi	r2,r2,65535
1000e2fc:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
1000e300:	d0a70217 	ldw	r2,-25592(gp)
1000e304:	10c00a17 	ldw	r3,40(r2)
1000e308:	e0bffe17 	ldw	r2,-8(fp)
1000e30c:	1885883a 	add	r2,r3,r2
1000e310:	10800484 	addi	r2,r2,18
1000e314:	1007883a 	mov	r3,r2
1000e318:	e0bfff17 	ldw	r2,-4(fp)
1000e31c:	1080040b 	ldhu	r2,16(r2)
1000e320:	10bfffcc 	andi	r2,r2,65535
1000e324:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
1000e328:	d0a70217 	ldw	r2,-25592(gp)
1000e32c:	10c00a17 	ldw	r3,40(r2)
1000e330:	e0bffe17 	ldw	r2,-8(fp)
1000e334:	1885883a 	add	r2,r3,r2
1000e338:	10800584 	addi	r2,r2,22
1000e33c:	1007883a 	mov	r3,r2
1000e340:	e0bfff17 	ldw	r2,-4(fp)
1000e344:	1080048b 	ldhu	r2,18(r2)
1000e348:	10bfffcc 	andi	r2,r2,65535
1000e34c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
1000e350:	d0a70217 	ldw	r2,-25592(gp)
1000e354:	10c00a17 	ldw	r3,40(r2)
1000e358:	e0bffe17 	ldw	r2,-8(fp)
1000e35c:	1885883a 	add	r2,r3,r2
1000e360:	10800604 	addi	r2,r2,24
1000e364:	1007883a 	mov	r3,r2
1000e368:	e0bfff17 	ldw	r2,-4(fp)
1000e36c:	1080050b 	ldhu	r2,20(r2)
1000e370:	10bfffcc 	andi	r2,r2,65535
1000e374:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
1000e378:	d0a70217 	ldw	r2,-25592(gp)
1000e37c:	10c00a17 	ldw	r3,40(r2)
1000e380:	e0bffe17 	ldw	r2,-8(fp)
1000e384:	1885883a 	add	r2,r3,r2
1000e388:	10800684 	addi	r2,r2,26
1000e38c:	1007883a 	mov	r3,r2
1000e390:	e0bfff17 	ldw	r2,-4(fp)
1000e394:	1080058b 	ldhu	r2,22(r2)
1000e398:	10bfffcc 	andi	r2,r2,65535
1000e39c:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
1000e3a0:	d0a70217 	ldw	r2,-25592(gp)
1000e3a4:	10c00a17 	ldw	r3,40(r2)
1000e3a8:	e0bffe17 	ldw	r2,-8(fp)
1000e3ac:	1885883a 	add	r2,r3,r2
1000e3b0:	10800704 	addi	r2,r2,28
1000e3b4:	1007883a 	mov	r3,r2
1000e3b8:	e0bfff17 	ldw	r2,-4(fp)
1000e3bc:	10800617 	ldw	r2,24(r2)
1000e3c0:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
1000e3c4:	00800044 	movi	r2,1
1000e3c8:	d0a70315 	stw	r2,-25588(gp)
        result = true;
1000e3cc:	00800044 	movi	r2,1
1000e3d0:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
1000e3d4:	e0bffb17 	ldw	r2,-20(fp)
}
1000e3d8:	e037883a 	mov	sp,fp
1000e3dc:	dfc00117 	ldw	ra,4(sp)
1000e3e0:	df000017 	ldw	fp,0(sp)
1000e3e4:	dec00204 	addi	sp,sp,8
1000e3e8:	f800283a 	ret

1000e3ec <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
1000e3ec:	defff804 	addi	sp,sp,-32
1000e3f0:	dfc00715 	stw	ra,28(sp)
1000e3f4:	df000615 	stw	fp,24(sp)
1000e3f8:	dc000515 	stw	r16,20(sp)
1000e3fc:	df000604 	addi	fp,sp,24
1000e400:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
1000e404:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
1000e408:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
1000e40c:	e17ffe17 	ldw	r5,-8(fp)
1000e410:	0009883a 	mov	r4,zero
1000e414:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000e418:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
1000e41c:	d0a70217 	ldw	r2,-25592(gp)
1000e420:	10800a17 	ldw	r2,40(r2)
1000e424:	10807f84 	addi	r2,r2,510
1000e428:	1080002b 	ldhuio	r2,0(r2)
1000e42c:	10bfffcc 	andi	r2,r2,65535
1000e430:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
1000e434:	e0bffd0f 	ldh	r2,-12(fp)
1000e438:	10ffffcc 	andi	r3,r2,65535
1000e43c:	00aa9554 	movui	r2,43605
1000e440:	18818a1e 	bne	r3,r2,1000ea6c <Check_for_DOS_FAT+0x680>
1000e444:	e0bffa17 	ldw	r2,-24(fp)
1000e448:	10018826 	beq	r2,zero,1000ea6c <Check_for_DOS_FAT+0x680>
	{
		int num_clusters = 0;
1000e44c:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
1000e450:	d0a70217 	ldw	r2,-25592(gp)
1000e454:	10800a17 	ldw	r2,40(r2)
1000e458:	10800023 	ldbuio	r2,0(r2)
1000e45c:	10803fcc 	andi	r2,r2,255
1000e460:	1007883a 	mov	r3,r2
1000e464:	008400b4 	movhi	r2,4098
1000e468:	10a0f104 	addi	r2,r2,-31804
1000e46c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
1000e470:	d0a70217 	ldw	r2,-25592(gp)
1000e474:	10800a17 	ldw	r2,40(r2)
1000e478:	10800044 	addi	r2,r2,1
1000e47c:	10800023 	ldbuio	r2,0(r2)
1000e480:	10803fcc 	andi	r2,r2,255
1000e484:	1007883a 	mov	r3,r2
1000e488:	008400b4 	movhi	r2,4098
1000e48c:	10a0f104 	addi	r2,r2,-31804
1000e490:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
1000e494:	d0a70217 	ldw	r2,-25592(gp)
1000e498:	10800a17 	ldw	r2,40(r2)
1000e49c:	10800084 	addi	r2,r2,2
1000e4a0:	10800023 	ldbuio	r2,0(r2)
1000e4a4:	10803fcc 	andi	r2,r2,255
1000e4a8:	1007883a 	mov	r3,r2
1000e4ac:	008400b4 	movhi	r2,4098
1000e4b0:	10a0f104 	addi	r2,r2,-31804
1000e4b4:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
1000e4b8:	e03ffb15 	stw	zero,-20(fp)
1000e4bc:	00001106 	br	1000e504 <Check_for_DOS_FAT+0x118>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
1000e4c0:	d0a70217 	ldw	r2,-25592(gp)
1000e4c4:	10c00a17 	ldw	r3,40(r2)
1000e4c8:	e0bffb17 	ldw	r2,-20(fp)
1000e4cc:	1885883a 	add	r2,r3,r2
1000e4d0:	108000c4 	addi	r2,r2,3
1000e4d4:	10800023 	ldbuio	r2,0(r2)
1000e4d8:	10803fcc 	andi	r2,r2,255
1000e4dc:	1009883a 	mov	r4,r2
1000e4e0:	008400b4 	movhi	r2,4098
1000e4e4:	10a0f104 	addi	r2,r2,-31804
1000e4e8:	e0fffb17 	ldw	r3,-20(fp)
1000e4ec:	10c5883a 	add	r2,r2,r3
1000e4f0:	108000c4 	addi	r2,r2,3
1000e4f4:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
1000e4f8:	e0bffb17 	ldw	r2,-20(fp)
1000e4fc:	10800044 	addi	r2,r2,1
1000e500:	e0bffb15 	stw	r2,-20(fp)
1000e504:	e0bffb17 	ldw	r2,-20(fp)
1000e508:	10800210 	cmplti	r2,r2,8
1000e50c:	103fec1e 	bne	r2,zero,1000e4c0 <__alt_data_end+0xf800e4c0>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
1000e510:	d0a70217 	ldw	r2,-25592(gp)
1000e514:	10800a17 	ldw	r2,40(r2)
1000e518:	10800304 	addi	r2,r2,12
1000e51c:	10800023 	ldbuio	r2,0(r2)
1000e520:	10803fcc 	andi	r2,r2,255
1000e524:	1004923a 	slli	r2,r2,8
1000e528:	1007883a 	mov	r3,r2
1000e52c:	d0a70217 	ldw	r2,-25592(gp)
1000e530:	10800a17 	ldw	r2,40(r2)
1000e534:	108002c4 	addi	r2,r2,11
1000e538:	10800023 	ldbuio	r2,0(r2)
1000e53c:	10803fcc 	andi	r2,r2,255
1000e540:	10803fcc 	andi	r2,r2,255
1000e544:	1080201c 	xori	r2,r2,128
1000e548:	10bfe004 	addi	r2,r2,-128
1000e54c:	1884b03a 	or	r2,r3,r2
1000e550:	1007883a 	mov	r3,r2
1000e554:	008400b4 	movhi	r2,4098
1000e558:	10a0f104 	addi	r2,r2,-31804
1000e55c:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
1000e560:	d0a70217 	ldw	r2,-25592(gp)
1000e564:	10800a17 	ldw	r2,40(r2)
1000e568:	10800344 	addi	r2,r2,13
1000e56c:	10800023 	ldbuio	r2,0(r2)
1000e570:	10803fcc 	andi	r2,r2,255
1000e574:	1007883a 	mov	r3,r2
1000e578:	008400b4 	movhi	r2,4098
1000e57c:	10a0f104 	addi	r2,r2,-31804
1000e580:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
1000e584:	d0a70217 	ldw	r2,-25592(gp)
1000e588:	10800a17 	ldw	r2,40(r2)
1000e58c:	10800384 	addi	r2,r2,14
1000e590:	1080002b 	ldhuio	r2,0(r2)
1000e594:	10bfffcc 	andi	r2,r2,65535
1000e598:	1007883a 	mov	r3,r2
1000e59c:	008400b4 	movhi	r2,4098
1000e5a0:	10a0f104 	addi	r2,r2,-31804
1000e5a4:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
1000e5a8:	d0a70217 	ldw	r2,-25592(gp)
1000e5ac:	10800a17 	ldw	r2,40(r2)
1000e5b0:	10800404 	addi	r2,r2,16
1000e5b4:	10800023 	ldbuio	r2,0(r2)
1000e5b8:	10803fcc 	andi	r2,r2,255
1000e5bc:	1007883a 	mov	r3,r2
1000e5c0:	008400b4 	movhi	r2,4098
1000e5c4:	10a0f104 	addi	r2,r2,-31804
1000e5c8:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
1000e5cc:	d0a70217 	ldw	r2,-25592(gp)
1000e5d0:	10800a17 	ldw	r2,40(r2)
1000e5d4:	10800484 	addi	r2,r2,18
1000e5d8:	10800023 	ldbuio	r2,0(r2)
1000e5dc:	10803fcc 	andi	r2,r2,255
1000e5e0:	1004923a 	slli	r2,r2,8
1000e5e4:	1007883a 	mov	r3,r2
1000e5e8:	d0a70217 	ldw	r2,-25592(gp)
1000e5ec:	10800a17 	ldw	r2,40(r2)
1000e5f0:	10800444 	addi	r2,r2,17
1000e5f4:	10800023 	ldbuio	r2,0(r2)
1000e5f8:	10803fcc 	andi	r2,r2,255
1000e5fc:	10803fcc 	andi	r2,r2,255
1000e600:	1884b03a 	or	r2,r3,r2
1000e604:	1007883a 	mov	r3,r2
1000e608:	008400b4 	movhi	r2,4098
1000e60c:	10a0f104 	addi	r2,r2,-31804
1000e610:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
1000e614:	d0a70217 	ldw	r2,-25592(gp)
1000e618:	10800a17 	ldw	r2,40(r2)
1000e61c:	10800504 	addi	r2,r2,20
1000e620:	10800023 	ldbuio	r2,0(r2)
1000e624:	10803fcc 	andi	r2,r2,255
1000e628:	1004923a 	slli	r2,r2,8
1000e62c:	1007883a 	mov	r3,r2
1000e630:	d0a70217 	ldw	r2,-25592(gp)
1000e634:	10800a17 	ldw	r2,40(r2)
1000e638:	108004c4 	addi	r2,r2,19
1000e63c:	10800023 	ldbuio	r2,0(r2)
1000e640:	10803fcc 	andi	r2,r2,255
1000e644:	10803fcc 	andi	r2,r2,255
1000e648:	1884b03a 	or	r2,r3,r2
1000e64c:	1007883a 	mov	r3,r2
1000e650:	008400b4 	movhi	r2,4098
1000e654:	10a0f104 	addi	r2,r2,-31804
1000e658:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
1000e65c:	d0a70217 	ldw	r2,-25592(gp)
1000e660:	10800a17 	ldw	r2,40(r2)
1000e664:	10800544 	addi	r2,r2,21
1000e668:	10800023 	ldbuio	r2,0(r2)
1000e66c:	10803fcc 	andi	r2,r2,255
1000e670:	1007883a 	mov	r3,r2
1000e674:	008400b4 	movhi	r2,4098
1000e678:	10a0f104 	addi	r2,r2,-31804
1000e67c:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
1000e680:	d0a70217 	ldw	r2,-25592(gp)
1000e684:	10800a17 	ldw	r2,40(r2)
1000e688:	10800584 	addi	r2,r2,22
1000e68c:	1080002b 	ldhuio	r2,0(r2)
1000e690:	10bfffcc 	andi	r2,r2,65535
1000e694:	1007883a 	mov	r3,r2
1000e698:	008400b4 	movhi	r2,4098
1000e69c:	10a0f104 	addi	r2,r2,-31804
1000e6a0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
1000e6a4:	d0a70217 	ldw	r2,-25592(gp)
1000e6a8:	10800a17 	ldw	r2,40(r2)
1000e6ac:	10800604 	addi	r2,r2,24
1000e6b0:	1080002b 	ldhuio	r2,0(r2)
1000e6b4:	10bfffcc 	andi	r2,r2,65535
1000e6b8:	1007883a 	mov	r3,r2
1000e6bc:	008400b4 	movhi	r2,4098
1000e6c0:	10a0f104 	addi	r2,r2,-31804
1000e6c4:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
1000e6c8:	d0a70217 	ldw	r2,-25592(gp)
1000e6cc:	10800a17 	ldw	r2,40(r2)
1000e6d0:	10800684 	addi	r2,r2,26
1000e6d4:	1080002b 	ldhuio	r2,0(r2)
1000e6d8:	10bfffcc 	andi	r2,r2,65535
1000e6dc:	1007883a 	mov	r3,r2
1000e6e0:	008400b4 	movhi	r2,4098
1000e6e4:	10a0f104 	addi	r2,r2,-31804
1000e6e8:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
1000e6ec:	d0a70217 	ldw	r2,-25592(gp)
1000e6f0:	10800a17 	ldw	r2,40(r2)
1000e6f4:	10800704 	addi	r2,r2,28
1000e6f8:	10800037 	ldwio	r2,0(r2)
1000e6fc:	1007883a 	mov	r3,r2
1000e700:	008400b4 	movhi	r2,4098
1000e704:	10a0f104 	addi	r2,r2,-31804
1000e708:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
1000e70c:	d0a70217 	ldw	r2,-25592(gp)
1000e710:	10800a17 	ldw	r2,40(r2)
1000e714:	10800804 	addi	r2,r2,32
1000e718:	10800037 	ldwio	r2,0(r2)
1000e71c:	1007883a 	mov	r3,r2
1000e720:	008400b4 	movhi	r2,4098
1000e724:	10a0f104 	addi	r2,r2,-31804
1000e728:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
1000e72c:	d0a70217 	ldw	r2,-25592(gp)
1000e730:	10800a17 	ldw	r2,40(r2)
1000e734:	10800904 	addi	r2,r2,36
1000e738:	10800023 	ldbuio	r2,0(r2)
1000e73c:	10803fcc 	andi	r2,r2,255
1000e740:	1007883a 	mov	r3,r2
1000e744:	008400b4 	movhi	r2,4098
1000e748:	10a0f104 	addi	r2,r2,-31804
1000e74c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
1000e750:	d0a70217 	ldw	r2,-25592(gp)
1000e754:	10800a17 	ldw	r2,40(r2)
1000e758:	10800944 	addi	r2,r2,37
1000e75c:	10800023 	ldbuio	r2,0(r2)
1000e760:	10803fcc 	andi	r2,r2,255
1000e764:	1007883a 	mov	r3,r2
1000e768:	008400b4 	movhi	r2,4098
1000e76c:	10a0f104 	addi	r2,r2,-31804
1000e770:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
1000e774:	d0a70217 	ldw	r2,-25592(gp)
1000e778:	10800a17 	ldw	r2,40(r2)
1000e77c:	10800984 	addi	r2,r2,38
1000e780:	10800023 	ldbuio	r2,0(r2)
1000e784:	10803fcc 	andi	r2,r2,255
1000e788:	1007883a 	mov	r3,r2
1000e78c:	008400b4 	movhi	r2,4098
1000e790:	10a0f104 	addi	r2,r2,-31804
1000e794:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
1000e798:	008400b4 	movhi	r2,4098
1000e79c:	10a0f104 	addi	r2,r2,-31804
1000e7a0:	1080040b 	ldhu	r2,16(r2)
1000e7a4:	10ffffcc 	andi	r3,r2,65535
1000e7a8:	008400b4 	movhi	r2,4098
1000e7ac:	10a0f104 	addi	r2,r2,-31804
1000e7b0:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
1000e7b4:	008400b4 	movhi	r2,4098
1000e7b8:	10a0f104 	addi	r2,r2,-31804
1000e7bc:	10c01117 	ldw	r3,68(r2)
1000e7c0:	008400b4 	movhi	r2,4098
1000e7c4:	10a0f104 	addi	r2,r2,-31804
1000e7c8:	1080068b 	ldhu	r2,26(r2)
1000e7cc:	10bfffcc 	andi	r2,r2,65535
1000e7d0:	1887883a 	add	r3,r3,r2
1000e7d4:	008400b4 	movhi	r2,4098
1000e7d8:	10a0f104 	addi	r2,r2,-31804
1000e7dc:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
1000e7e0:	008400b4 	movhi	r2,4098
1000e7e4:	10a0f104 	addi	r2,r2,-31804
1000e7e8:	10c01217 	ldw	r3,72(r2)
1000e7ec:	008400b4 	movhi	r2,4098
1000e7f0:	10a0f104 	addi	r2,r2,-31804
1000e7f4:	1080068b 	ldhu	r2,26(r2)
1000e7f8:	10bfffcc 	andi	r2,r2,65535
1000e7fc:	1887883a 	add	r3,r3,r2
1000e800:	008400b4 	movhi	r2,4098
1000e804:	10a0f104 	addi	r2,r2,-31804
1000e808:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
1000e80c:	008400b4 	movhi	r2,4098
1000e810:	10a0f104 	addi	r2,r2,-31804
1000e814:	14001317 	ldw	r16,76(r2)
1000e818:	008400b4 	movhi	r2,4098
1000e81c:	10a0f104 	addi	r2,r2,-31804
1000e820:	1080050b 	ldhu	r2,20(r2)
1000e824:	10bfffcc 	andi	r2,r2,65535
1000e828:	1006917a 	slli	r3,r2,5
1000e82c:	008400b4 	movhi	r2,4098
1000e830:	10a0f104 	addi	r2,r2,-31804
1000e834:	1080030b 	ldhu	r2,12(r2)
1000e838:	10bfffcc 	andi	r2,r2,65535
1000e83c:	100b883a 	mov	r5,r2
1000e840:	1809883a 	mov	r4,r3
1000e844:	000a5d40 	call	1000a5d4 <__divsi3>
1000e848:	8087883a 	add	r3,r16,r2
1000e84c:	008400b4 	movhi	r2,4098
1000e850:	10a0f104 	addi	r2,r2,-31804
1000e854:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
1000e858:	008400b4 	movhi	r2,4098
1000e85c:	10a0f104 	addi	r2,r2,-31804
1000e860:	1080058b 	ldhu	r2,22(r2)
1000e864:	10bfffcc 	andi	r2,r2,65535
1000e868:	10000d26 	beq	r2,zero,1000e8a0 <Check_for_DOS_FAT+0x4b4>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
1000e86c:	008400b4 	movhi	r2,4098
1000e870:	10a0f104 	addi	r2,r2,-31804
1000e874:	1080058b 	ldhu	r2,22(r2)
1000e878:	10ffffcc 	andi	r3,r2,65535
1000e87c:	008400b4 	movhi	r2,4098
1000e880:	10a0f104 	addi	r2,r2,-31804
1000e884:	10800383 	ldbu	r2,14(r2)
1000e888:	10803fcc 	andi	r2,r2,255
1000e88c:	100b883a 	mov	r5,r2
1000e890:	1809883a 	mov	r4,r3
1000e894:	000a5d40 	call	1000a5d4 <__divsi3>
1000e898:	e0bffc15 	stw	r2,-16(fp)
1000e89c:	00000b06 	br	1000e8cc <Check_for_DOS_FAT+0x4e0>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
1000e8a0:	008400b4 	movhi	r2,4098
1000e8a4:	10a0f104 	addi	r2,r2,-31804
1000e8a8:	10c00917 	ldw	r3,36(r2)
1000e8ac:	008400b4 	movhi	r2,4098
1000e8b0:	10a0f104 	addi	r2,r2,-31804
1000e8b4:	10800383 	ldbu	r2,14(r2)
1000e8b8:	10803fcc 	andi	r2,r2,255
1000e8bc:	100b883a 	mov	r5,r2
1000e8c0:	1809883a 	mov	r4,r3
1000e8c4:	000a6cc0 	call	1000a6cc <__udivsi3>
1000e8c8:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
1000e8cc:	e0bffc17 	ldw	r2,-16(fp)
1000e8d0:	1083fdc8 	cmpgei	r2,r2,4087
1000e8d4:	1000051e 	bne	r2,zero,1000e8ec <Check_for_DOS_FAT+0x500>
		{
			boot_sector_data.bits_for_cluster_index = 12;
1000e8d8:	008400b4 	movhi	r2,4098
1000e8dc:	10a0f104 	addi	r2,r2,-31804
1000e8e0:	00c00304 	movi	r3,12
1000e8e4:	10c01085 	stb	r3,66(r2)
1000e8e8:	00000c06 	br	1000e91c <Check_for_DOS_FAT+0x530>
		}
		else if (num_clusters <= 65517)
1000e8ec:	e0bffc17 	ldw	r2,-16(fp)
1000e8f0:	00fffb54 	movui	r3,65517
1000e8f4:	18800516 	blt	r3,r2,1000e90c <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.bits_for_cluster_index = 16;
1000e8f8:	008400b4 	movhi	r2,4098
1000e8fc:	10a0f104 	addi	r2,r2,-31804
1000e900:	00c00404 	movi	r3,16
1000e904:	10c01085 	stb	r3,66(r2)
1000e908:	00000406 	br	1000e91c <Check_for_DOS_FAT+0x530>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
1000e90c:	008400b4 	movhi	r2,4098
1000e910:	10a0f104 	addi	r2,r2,-31804
1000e914:	00c00804 	movi	r3,32
1000e918:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
1000e91c:	e03ffb15 	stw	zero,-20(fp)
1000e920:	00001106 	br	1000e968 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
1000e924:	d0a70217 	ldw	r2,-25592(gp)
1000e928:	10c00a17 	ldw	r3,40(r2)
1000e92c:	e0bffb17 	ldw	r2,-20(fp)
1000e930:	1885883a 	add	r2,r3,r2
1000e934:	108009c4 	addi	r2,r2,39
1000e938:	10800023 	ldbuio	r2,0(r2)
1000e93c:	10803fcc 	andi	r2,r2,255
1000e940:	1009883a 	mov	r4,r2
1000e944:	008400b4 	movhi	r2,4098
1000e948:	10a0f104 	addi	r2,r2,-31804
1000e94c:	e0fffb17 	ldw	r3,-20(fp)
1000e950:	10c5883a 	add	r2,r2,r3
1000e954:	10800ac4 	addi	r2,r2,43
1000e958:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
1000e95c:	e0bffb17 	ldw	r2,-20(fp)
1000e960:	10800044 	addi	r2,r2,1
1000e964:	e0bffb15 	stw	r2,-20(fp)
1000e968:	e0bffb17 	ldw	r2,-20(fp)
1000e96c:	10800110 	cmplti	r2,r2,4
1000e970:	103fec1e 	bne	r2,zero,1000e924 <__alt_data_end+0xf800e924>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
1000e974:	e03ffb15 	stw	zero,-20(fp)
1000e978:	00001106 	br	1000e9c0 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
1000e97c:	d0a70217 	ldw	r2,-25592(gp)
1000e980:	10c00a17 	ldw	r3,40(r2)
1000e984:	e0bffb17 	ldw	r2,-20(fp)
1000e988:	1885883a 	add	r2,r3,r2
1000e98c:	10800ac4 	addi	r2,r2,43
1000e990:	10800023 	ldbuio	r2,0(r2)
1000e994:	10803fcc 	andi	r2,r2,255
1000e998:	1009883a 	mov	r4,r2
1000e99c:	008400b4 	movhi	r2,4098
1000e9a0:	10a0f104 	addi	r2,r2,-31804
1000e9a4:	e0fffb17 	ldw	r3,-20(fp)
1000e9a8:	10c5883a 	add	r2,r2,r3
1000e9ac:	10800bc4 	addi	r2,r2,47
1000e9b0:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
1000e9b4:	e0bffb17 	ldw	r2,-20(fp)
1000e9b8:	10800044 	addi	r2,r2,1
1000e9bc:	e0bffb15 	stw	r2,-20(fp)
1000e9c0:	e0bffb17 	ldw	r2,-20(fp)
1000e9c4:	108002d0 	cmplti	r2,r2,11
1000e9c8:	103fec1e 	bne	r2,zero,1000e97c <__alt_data_end+0xf800e97c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
1000e9cc:	e03ffb15 	stw	zero,-20(fp)
1000e9d0:	00001106 	br	1000ea18 <Check_for_DOS_FAT+0x62c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
1000e9d4:	d0a70217 	ldw	r2,-25592(gp)
1000e9d8:	10c00a17 	ldw	r3,40(r2)
1000e9dc:	e0bffb17 	ldw	r2,-20(fp)
1000e9e0:	1885883a 	add	r2,r3,r2
1000e9e4:	10800d84 	addi	r2,r2,54
1000e9e8:	10800023 	ldbuio	r2,0(r2)
1000e9ec:	10803fcc 	andi	r2,r2,255
1000e9f0:	1009883a 	mov	r4,r2
1000e9f4:	008400b4 	movhi	r2,4098
1000e9f8:	10a0f104 	addi	r2,r2,-31804
1000e9fc:	e0fffb17 	ldw	r3,-20(fp)
1000ea00:	10c5883a 	add	r2,r2,r3
1000ea04:	10800e84 	addi	r2,r2,58
1000ea08:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
1000ea0c:	e0bffb17 	ldw	r2,-20(fp)
1000ea10:	10800044 	addi	r2,r2,1
1000ea14:	e0bffb15 	stw	r2,-20(fp)
1000ea18:	e0bffb17 	ldw	r2,-20(fp)
1000ea1c:	10800210 	cmplti	r2,r2,8
1000ea20:	103fec1e 	bne	r2,zero,1000e9d4 <__alt_data_end+0xf800e9d4>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
1000ea24:	e03ffb15 	stw	zero,-20(fp)
1000ea28:	00000a06 	br	1000ea54 <Check_for_DOS_FAT+0x668>
		{
			active_files[counter].in_use = false;
1000ea2c:	008400b4 	movhi	r2,4098
1000ea30:	10a10604 	addi	r2,r2,-31720
1000ea34:	e0fffb17 	ldw	r3,-20(fp)
1000ea38:	180691ba 	slli	r3,r3,6
1000ea3c:	10c5883a 	add	r2,r2,r3
1000ea40:	10800f04 	addi	r2,r2,60
1000ea44:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
1000ea48:	e0bffb17 	ldw	r2,-20(fp)
1000ea4c:	10800044 	addi	r2,r2,1
1000ea50:	e0bffb15 	stw	r2,-20(fp)
1000ea54:	e0bffb17 	ldw	r2,-20(fp)
1000ea58:	10800510 	cmplti	r2,r2,20
1000ea5c:	103ff31e 	bne	r2,zero,1000ea2c <__alt_data_end+0xf800ea2c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
1000ea60:	00800044 	movi	r2,1
1000ea64:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
1000ea68:	00000106 	br	1000ea70 <Check_for_DOS_FAT+0x684>
		}
		result = true;
	}
    else
    {
        result = false;
1000ea6c:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
1000ea70:	e0bffa17 	ldw	r2,-24(fp)
}
1000ea74:	e6ffff04 	addi	sp,fp,-4
1000ea78:	dfc00217 	ldw	ra,8(sp)
1000ea7c:	df000117 	ldw	fp,4(sp)
1000ea80:	dc000017 	ldw	r16,0(sp)
1000ea84:	dec00304 	addi	sp,sp,12
1000ea88:	f800283a 	ret

1000ea8c <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
1000ea8c:	defffc04 	addi	sp,sp,-16
1000ea90:	dfc00315 	stw	ra,12(sp)
1000ea94:	df000215 	stw	fp,8(sp)
1000ea98:	df000204 	addi	fp,sp,8
	bool result = false;
1000ea9c:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
1000eaa0:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
1000eaa4:	10002e26 	beq	r2,zero,1000eb60 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
1000eaa8:	d0a6fc17 	ldw	r2,-25616(gp)
1000eaac:	1080000b 	ldhu	r2,0(r2)
1000eab0:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
1000eab4:	d0270015 	stw	zero,-25600(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
1000eab8:	d0270115 	stw	zero,-25596(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
1000eabc:	e0bfff0f 	ldh	r2,-4(fp)
1000eac0:	10002716 	blt	r2,zero,1000eb60 <Look_for_FAT16+0xd4>
1000eac4:	e0bfff0b 	ldhu	r2,-4(fp)
1000eac8:	10bfffcc 	andi	r2,r2,65535
1000eacc:	1083000c 	andi	r2,r2,3072
1000ead0:	10830020 	cmpeqi	r2,r2,3072
1000ead4:	1000221e 	bne	r2,zero,1000eb60 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
1000ead8:	e0bfff0b 	ldhu	r2,-4(fp)
1000eadc:	10bfffcc 	andi	r2,r2,65535
1000eae0:	1083000c 	andi	r2,r2,3072
1000eae4:	10810018 	cmpnei	r2,r2,1024
1000eae8:	1000031e 	bne	r2,zero,1000eaf8 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
1000eaec:	0009883a 	mov	r4,zero
1000eaf0:	000e3ec0 	call	1000e3ec <Check_for_DOS_FAT>
1000eaf4:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
1000eaf8:	e0bfff0b 	ldhu	r2,-4(fp)
1000eafc:	10bfffcc 	andi	r2,r2,65535
1000eb00:	1083000c 	andi	r2,r2,3072
1000eb04:	1000061e 	bne	r2,zero,1000eb20 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
1000eb08:	000dd400 	call	1000dd40 <Check_for_Master_Boot_Record>
1000eb0c:	10000426 	beq	r2,zero,1000eb20 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
1000eb10:	d0a70017 	ldw	r2,-25600(gp)
1000eb14:	1009883a 	mov	r4,r2
1000eb18:	000e3ec0 	call	1000e3ec <Check_for_DOS_FAT>
1000eb1c:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
1000eb20:	e0bffe17 	ldw	r2,-8(fp)
1000eb24:	10800058 	cmpnei	r2,r2,1
1000eb28:	10000d1e 	bne	r2,zero,1000eb60 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
1000eb2c:	008400b4 	movhi	r2,4098
1000eb30:	10a0f104 	addi	r2,r2,-31804
1000eb34:	10801083 	ldbu	r2,66(r2)
1000eb38:	10803fcc 	andi	r2,r2,255
1000eb3c:	10800420 	cmpeqi	r2,r2,16
1000eb40:	1000021e 	bne	r2,zero,1000eb4c <Look_for_FAT16+0xc0>
				{
					result = false;
1000eb44:	e03ffe15 	stw	zero,-8(fp)
1000eb48:	00000506 	br	1000eb60 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
1000eb4c:	008400b4 	movhi	r2,4098
1000eb50:	10a0f104 	addi	r2,r2,-31804
1000eb54:	1080058b 	ldhu	r2,22(r2)
1000eb58:	10bfffcc 	andi	r2,r2,65535
1000eb5c:	d0a70115 	stw	r2,-25596(gp)
				}
			}
		}
	}
	return result;
1000eb60:	e0bffe17 	ldw	r2,-8(fp)
}
1000eb64:	e037883a 	mov	sp,fp
1000eb68:	dfc00117 	ldw	ra,4(sp)
1000eb6c:	df000017 	ldw	fp,0(sp)
1000eb70:	dec00204 	addi	sp,sp,8
1000eb74:	f800283a 	ret

1000eb78 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
1000eb78:	defffb04 	addi	sp,sp,-20
1000eb7c:	dfc00415 	stw	ra,16(sp)
1000eb80:	df000315 	stw	fp,12(sp)
1000eb84:	df000304 	addi	fp,sp,12
1000eb88:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
1000eb8c:	e13fff17 	ldw	r4,-4(fp)
1000eb90:	00006100 	call	10000610 <strlen>
1000eb94:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
1000eb98:	e03ffd15 	stw	zero,-12(fp)
1000eb9c:	00001e06 	br	1000ec18 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
1000eba0:	e0bffd17 	ldw	r2,-12(fp)
1000eba4:	e0ffff17 	ldw	r3,-4(fp)
1000eba8:	1885883a 	add	r2,r3,r2
1000ebac:	10800003 	ldbu	r2,0(r2)
1000ebb0:	10803fcc 	andi	r2,r2,255
1000ebb4:	1080201c 	xori	r2,r2,128
1000ebb8:	10bfe004 	addi	r2,r2,-128
1000ebbc:	10801850 	cmplti	r2,r2,97
1000ebc0:	1000121e 	bne	r2,zero,1000ec0c <filename_to_upper_case+0x94>
1000ebc4:	e0bffd17 	ldw	r2,-12(fp)
1000ebc8:	e0ffff17 	ldw	r3,-4(fp)
1000ebcc:	1885883a 	add	r2,r3,r2
1000ebd0:	10800003 	ldbu	r2,0(r2)
1000ebd4:	10803fcc 	andi	r2,r2,255
1000ebd8:	1080201c 	xori	r2,r2,128
1000ebdc:	10bfe004 	addi	r2,r2,-128
1000ebe0:	10801ec8 	cmpgei	r2,r2,123
1000ebe4:	1000091e 	bne	r2,zero,1000ec0c <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
1000ebe8:	e0bffd17 	ldw	r2,-12(fp)
1000ebec:	e0ffff17 	ldw	r3,-4(fp)
1000ebf0:	1885883a 	add	r2,r3,r2
1000ebf4:	e0fffd17 	ldw	r3,-12(fp)
1000ebf8:	e13fff17 	ldw	r4,-4(fp)
1000ebfc:	20c7883a 	add	r3,r4,r3
1000ec00:	18c00003 	ldbu	r3,0(r3)
1000ec04:	18fff804 	addi	r3,r3,-32
1000ec08:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
1000ec0c:	e0bffd17 	ldw	r2,-12(fp)
1000ec10:	10800044 	addi	r2,r2,1
1000ec14:	e0bffd15 	stw	r2,-12(fp)
1000ec18:	e0fffd17 	ldw	r3,-12(fp)
1000ec1c:	e0bffe17 	ldw	r2,-8(fp)
1000ec20:	18bfdf16 	blt	r3,r2,1000eba0 <__alt_data_end+0xf800eba0>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
1000ec24:	0001883a 	nop
1000ec28:	e037883a 	mov	sp,fp
1000ec2c:	dfc00117 	ldw	ra,4(sp)
1000ec30:	df000017 	ldw	fp,0(sp)
1000ec34:	dec00204 	addi	sp,sp,8
1000ec38:	f800283a 	ret

1000ec3c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
1000ec3c:	defff804 	addi	sp,sp,-32
1000ec40:	dfc00715 	stw	ra,28(sp)
1000ec44:	df000615 	stw	fp,24(sp)
1000ec48:	df000604 	addi	fp,sp,24
1000ec4c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
1000ec50:	e13fff17 	ldw	r4,-4(fp)
1000ec54:	00006100 	call	10000610 <strlen>
1000ec58:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
1000ec5c:	00bfffc4 	movi	r2,-1
1000ec60:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
1000ec64:	00bfffc4 	movi	r2,-1
1000ec68:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
1000ec6c:	00800044 	movi	r2,1
1000ec70:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
1000ec74:	e03ffa15 	stw	zero,-24(fp)
1000ec78:	00006d06 	br	1000ee30 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
1000ec7c:	e0bffa17 	ldw	r2,-24(fp)
1000ec80:	e0ffff17 	ldw	r3,-4(fp)
1000ec84:	1885883a 	add	r2,r3,r2
1000ec88:	10800003 	ldbu	r2,0(r2)
1000ec8c:	10803fcc 	andi	r2,r2,255
1000ec90:	1080201c 	xori	r2,r2,128
1000ec94:	10bfe004 	addi	r2,r2,-128
1000ec98:	10800820 	cmpeqi	r2,r2,32
1000ec9c:	10003e1e 	bne	r2,zero,1000ed98 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
1000eca0:	e0bffa17 	ldw	r2,-24(fp)
1000eca4:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
1000eca8:	e0bffb17 	ldw	r2,-20(fp)
1000ecac:	1880121e 	bne	r3,r2,1000ecf8 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
1000ecb0:	e0bffa17 	ldw	r2,-24(fp)
1000ecb4:	e0ffff17 	ldw	r3,-4(fp)
1000ecb8:	1885883a 	add	r2,r3,r2
1000ecbc:	10800003 	ldbu	r2,0(r2)
1000ecc0:	10803fcc 	andi	r2,r2,255
1000ecc4:	1080201c 	xori	r2,r2,128
1000ecc8:	10bfe004 	addi	r2,r2,-128
1000eccc:	10801720 	cmpeqi	r2,r2,92
1000ecd0:	1000311e 	bne	r2,zero,1000ed98 <check_file_name_for_FAT16_compliance+0x15c>
1000ecd4:	e0bffa17 	ldw	r2,-24(fp)
1000ecd8:	e0ffff17 	ldw	r3,-4(fp)
1000ecdc:	1885883a 	add	r2,r3,r2
1000ece0:	10800003 	ldbu	r2,0(r2)
1000ece4:	10803fcc 	andi	r2,r2,255
1000ece8:	1080201c 	xori	r2,r2,128
1000ecec:	10bfe004 	addi	r2,r2,-128
1000ecf0:	10800be0 	cmpeqi	r2,r2,47
1000ecf4:	1000281e 	bne	r2,zero,1000ed98 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
1000ecf8:	e0fffa17 	ldw	r3,-24(fp)
1000ecfc:	e0bffc17 	ldw	r2,-16(fp)
1000ed00:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
1000ed04:	10800258 	cmpnei	r2,r2,9
1000ed08:	1000091e 	bne	r2,zero,1000ed30 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
1000ed0c:	e0bffa17 	ldw	r2,-24(fp)
1000ed10:	e0ffff17 	ldw	r3,-4(fp)
1000ed14:	1885883a 	add	r2,r3,r2
1000ed18:	10800003 	ldbu	r2,0(r2)
1000ed1c:	10803fcc 	andi	r2,r2,255
1000ed20:	1080201c 	xori	r2,r2,128
1000ed24:	10bfe004 	addi	r2,r2,-128
1000ed28:	10800b98 	cmpnei	r2,r2,46
1000ed2c:	10001a1e 	bne	r2,zero,1000ed98 <check_file_name_for_FAT16_compliance+0x15c>
1000ed30:	e0fffb17 	ldw	r3,-20(fp)
1000ed34:	e0bffc17 	ldw	r2,-16(fp)
1000ed38:	18801926 	beq	r3,r2,1000eda0 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
1000ed3c:	e0fffa17 	ldw	r3,-24(fp)
1000ed40:	e0bffc17 	ldw	r2,-16(fp)
1000ed44:	1885c83a 	sub	r2,r3,r2
1000ed48:	10800110 	cmplti	r2,r2,4
1000ed4c:	1000141e 	bne	r2,zero,1000eda0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
1000ed50:	e0bffa17 	ldw	r2,-24(fp)
1000ed54:	e0ffff17 	ldw	r3,-4(fp)
1000ed58:	1885883a 	add	r2,r3,r2
1000ed5c:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
1000ed60:	10803fcc 	andi	r2,r2,255
1000ed64:	1080201c 	xori	r2,r2,128
1000ed68:	10bfe004 	addi	r2,r2,-128
1000ed6c:	10801720 	cmpeqi	r2,r2,92
1000ed70:	10000b1e 	bne	r2,zero,1000eda0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
1000ed74:	e0bffa17 	ldw	r2,-24(fp)
1000ed78:	e0ffff17 	ldw	r3,-4(fp)
1000ed7c:	1885883a 	add	r2,r3,r2
1000ed80:	10800003 	ldbu	r2,0(r2)
1000ed84:	10803fcc 	andi	r2,r2,255
1000ed88:	1080201c 	xori	r2,r2,128
1000ed8c:	10bfe004 	addi	r2,r2,-128
1000ed90:	10800be0 	cmpeqi	r2,r2,47
1000ed94:	1000021e 	bne	r2,zero,1000eda0 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
1000ed98:	e03ffd15 	stw	zero,-12(fp)
            break;
1000ed9c:	00002706 	br	1000ee3c <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
1000eda0:	e0bffa17 	ldw	r2,-24(fp)
1000eda4:	e0ffff17 	ldw	r3,-4(fp)
1000eda8:	1885883a 	add	r2,r3,r2
1000edac:	10800003 	ldbu	r2,0(r2)
1000edb0:	10803fcc 	andi	r2,r2,255
1000edb4:	1080201c 	xori	r2,r2,128
1000edb8:	10bfe004 	addi	r2,r2,-128
1000edbc:	10801720 	cmpeqi	r2,r2,92
1000edc0:	1000091e 	bne	r2,zero,1000ede8 <check_file_name_for_FAT16_compliance+0x1ac>
1000edc4:	e0bffa17 	ldw	r2,-24(fp)
1000edc8:	e0ffff17 	ldw	r3,-4(fp)
1000edcc:	1885883a 	add	r2,r3,r2
1000edd0:	10800003 	ldbu	r2,0(r2)
1000edd4:	10803fcc 	andi	r2,r2,255
1000edd8:	1080201c 	xori	r2,r2,128
1000eddc:	10bfe004 	addi	r2,r2,-128
1000ede0:	10800bd8 	cmpnei	r2,r2,47
1000ede4:	1000041e 	bne	r2,zero,1000edf8 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
1000ede8:	e0bffa17 	ldw	r2,-24(fp)
1000edec:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
1000edf0:	e0bffa17 	ldw	r2,-24(fp)
1000edf4:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
1000edf8:	e0bffa17 	ldw	r2,-24(fp)
1000edfc:	e0ffff17 	ldw	r3,-4(fp)
1000ee00:	1885883a 	add	r2,r3,r2
1000ee04:	10800003 	ldbu	r2,0(r2)
1000ee08:	10803fcc 	andi	r2,r2,255
1000ee0c:	1080201c 	xori	r2,r2,128
1000ee10:	10bfe004 	addi	r2,r2,-128
1000ee14:	10800b98 	cmpnei	r2,r2,46
1000ee18:	1000021e 	bne	r2,zero,1000ee24 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
1000ee1c:	e0bffa17 	ldw	r2,-24(fp)
1000ee20:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
1000ee24:	e0bffa17 	ldw	r2,-24(fp)
1000ee28:	10800044 	addi	r2,r2,1
1000ee2c:	e0bffa15 	stw	r2,-24(fp)
1000ee30:	e0fffa17 	ldw	r3,-24(fp)
1000ee34:	e0bffe17 	ldw	r2,-8(fp)
1000ee38:	18bf9016 	blt	r3,r2,1000ec7c <__alt_data_end+0xf800ec7c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
1000ee3c:	e0bffe17 	ldw	r2,-8(fp)
1000ee40:	10bfffc4 	addi	r2,r2,-1
1000ee44:	e0ffff17 	ldw	r3,-4(fp)
1000ee48:	1885883a 	add	r2,r3,r2
1000ee4c:	10800003 	ldbu	r2,0(r2)
1000ee50:	10803fcc 	andi	r2,r2,255
1000ee54:	1080201c 	xori	r2,r2,128
1000ee58:	10bfe004 	addi	r2,r2,-128
1000ee5c:	10801720 	cmpeqi	r2,r2,92
1000ee60:	10000a1e 	bne	r2,zero,1000ee8c <check_file_name_for_FAT16_compliance+0x250>
1000ee64:	e0bffe17 	ldw	r2,-8(fp)
1000ee68:	10bfffc4 	addi	r2,r2,-1
1000ee6c:	e0ffff17 	ldw	r3,-4(fp)
1000ee70:	1885883a 	add	r2,r3,r2
1000ee74:	10800003 	ldbu	r2,0(r2)
1000ee78:	10803fcc 	andi	r2,r2,255
1000ee7c:	1080201c 	xori	r2,r2,128
1000ee80:	10bfe004 	addi	r2,r2,-128
1000ee84:	10800bd8 	cmpnei	r2,r2,47
1000ee88:	1000011e 	bne	r2,zero,1000ee90 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
1000ee8c:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
1000ee90:	e0bffd17 	ldw	r2,-12(fp)
}
1000ee94:	e037883a 	mov	sp,fp
1000ee98:	dfc00117 	ldw	ra,4(sp)
1000ee9c:	df000017 	ldw	fp,0(sp)
1000eea0:	dec00204 	addi	sp,sp,8
1000eea4:	f800283a 	ret

1000eea8 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
1000eea8:	defffb04 	addi	sp,sp,-20
1000eeac:	dfc00415 	stw	ra,16(sp)
1000eeb0:	df000315 	stw	fp,12(sp)
1000eeb4:	df000304 	addi	fp,sp,12
1000eeb8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
1000eebc:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
1000eec0:	e13fff17 	ldw	r4,-4(fp)
1000eec4:	00006100 	call	10000610 <strlen>
1000eec8:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
1000eecc:	e03ffd15 	stw	zero,-12(fp)
1000eed0:	00001506 	br	1000ef28 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
1000eed4:	e0bffd17 	ldw	r2,-12(fp)
1000eed8:	e0ffff17 	ldw	r3,-4(fp)
1000eedc:	1885883a 	add	r2,r3,r2
1000eee0:	10800003 	ldbu	r2,0(r2)
1000eee4:	10803fcc 	andi	r2,r2,255
1000eee8:	1080201c 	xori	r2,r2,128
1000eeec:	10bfe004 	addi	r2,r2,-128
1000eef0:	10801720 	cmpeqi	r2,r2,92
1000eef4:	10000f1e 	bne	r2,zero,1000ef34 <get_dir_divider_location+0x8c>
1000eef8:	e0bffd17 	ldw	r2,-12(fp)
1000eefc:	e0ffff17 	ldw	r3,-4(fp)
1000ef00:	1885883a 	add	r2,r3,r2
1000ef04:	10800003 	ldbu	r2,0(r2)
1000ef08:	10803fcc 	andi	r2,r2,255
1000ef0c:	1080201c 	xori	r2,r2,128
1000ef10:	10bfe004 	addi	r2,r2,-128
1000ef14:	10800be0 	cmpeqi	r2,r2,47
1000ef18:	1000061e 	bne	r2,zero,1000ef34 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
1000ef1c:	e0bffd17 	ldw	r2,-12(fp)
1000ef20:	10800044 	addi	r2,r2,1
1000ef24:	e0bffd15 	stw	r2,-12(fp)
1000ef28:	e0fffd17 	ldw	r3,-12(fp)
1000ef2c:	e0bffe17 	ldw	r2,-8(fp)
1000ef30:	18bfe816 	blt	r3,r2,1000eed4 <__alt_data_end+0xf800eed4>
        {
            break;
        }
    }
    
    if (index == length)
1000ef34:	e0fffd17 	ldw	r3,-12(fp)
1000ef38:	e0bffe17 	ldw	r2,-8(fp)
1000ef3c:	1880021e 	bne	r3,r2,1000ef48 <get_dir_divider_location+0xa0>
    {
        index = -1;
1000ef40:	00bfffc4 	movi	r2,-1
1000ef44:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
1000ef48:	e0bffd17 	ldw	r2,-12(fp)
}
1000ef4c:	e037883a 	mov	sp,fp
1000ef50:	dfc00117 	ldw	ra,4(sp)
1000ef54:	df000017 	ldw	fp,0(sp)
1000ef58:	dec00204 	addi	sp,sp,8
1000ef5c:	f800283a 	ret

1000ef60 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
1000ef60:	defffa04 	addi	sp,sp,-24
1000ef64:	df000515 	stw	fp,20(sp)
1000ef68:	df000504 	addi	fp,sp,20
1000ef6c:	e13ffd15 	stw	r4,-12(fp)
1000ef70:	e17ffe15 	stw	r5,-8(fp)
1000ef74:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
1000ef78:	00800044 	movi	r2,1
1000ef7c:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
1000ef80:	e03ffc15 	stw	zero,-16(fp)
1000ef84:	00004606 	br	1000f0a0 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
1000ef88:	e0fffd17 	ldw	r3,-12(fp)
1000ef8c:	e0bffc17 	ldw	r2,-16(fp)
1000ef90:	1885883a 	add	r2,r3,r2
1000ef94:	10800003 	ldbu	r2,0(r2)
1000ef98:	10803fcc 	andi	r2,r2,255
1000ef9c:	10801870 	cmpltui	r2,r2,97
1000efa0:	1000101e 	bne	r2,zero,1000efe4 <match_file_record_to_name_ext+0x84>
1000efa4:	e0fffd17 	ldw	r3,-12(fp)
1000efa8:	e0bffc17 	ldw	r2,-16(fp)
1000efac:	1885883a 	add	r2,r3,r2
1000efb0:	10800003 	ldbu	r2,0(r2)
1000efb4:	10803fcc 	andi	r2,r2,255
1000efb8:	10801ee8 	cmpgeui	r2,r2,123
1000efbc:	1000091e 	bne	r2,zero,1000efe4 <match_file_record_to_name_ext+0x84>
1000efc0:	e0fffd17 	ldw	r3,-12(fp)
1000efc4:	e0bffc17 	ldw	r2,-16(fp)
1000efc8:	1885883a 	add	r2,r3,r2
1000efcc:	10800003 	ldbu	r2,0(r2)
1000efd0:	10bff804 	addi	r2,r2,-32
1000efd4:	10c03fcc 	andi	r3,r2,255
1000efd8:	18c0201c 	xori	r3,r3,128
1000efdc:	18ffe004 	addi	r3,r3,-128
1000efe0:	00000706 	br	1000f000 <match_file_record_to_name_ext+0xa0>
1000efe4:	e0fffd17 	ldw	r3,-12(fp)
1000efe8:	e0bffc17 	ldw	r2,-16(fp)
1000efec:	1885883a 	add	r2,r3,r2
1000eff0:	10800003 	ldbu	r2,0(r2)
1000eff4:	10c03fcc 	andi	r3,r2,255
1000eff8:	18c0201c 	xori	r3,r3,128
1000effc:	18ffe004 	addi	r3,r3,-128
1000f000:	e0bffc17 	ldw	r2,-16(fp)
1000f004:	e13ffe17 	ldw	r4,-8(fp)
1000f008:	2085883a 	add	r2,r4,r2
1000f00c:	10800003 	ldbu	r2,0(r2)
1000f010:	10803fcc 	andi	r2,r2,255
1000f014:	1080201c 	xori	r2,r2,128
1000f018:	10bfe004 	addi	r2,r2,-128
1000f01c:	10801850 	cmplti	r2,r2,97
1000f020:	1000121e 	bne	r2,zero,1000f06c <match_file_record_to_name_ext+0x10c>
1000f024:	e0bffc17 	ldw	r2,-16(fp)
1000f028:	e13ffe17 	ldw	r4,-8(fp)
1000f02c:	2085883a 	add	r2,r4,r2
1000f030:	10800003 	ldbu	r2,0(r2)
1000f034:	10803fcc 	andi	r2,r2,255
1000f038:	1080201c 	xori	r2,r2,128
1000f03c:	10bfe004 	addi	r2,r2,-128
1000f040:	10801ec8 	cmpgei	r2,r2,123
1000f044:	1000091e 	bne	r2,zero,1000f06c <match_file_record_to_name_ext+0x10c>
1000f048:	e0bffc17 	ldw	r2,-16(fp)
1000f04c:	e13ffe17 	ldw	r4,-8(fp)
1000f050:	2085883a 	add	r2,r4,r2
1000f054:	10800003 	ldbu	r2,0(r2)
1000f058:	10bff804 	addi	r2,r2,-32
1000f05c:	10803fcc 	andi	r2,r2,255
1000f060:	1080201c 	xori	r2,r2,128
1000f064:	10bfe004 	addi	r2,r2,-128
1000f068:	00000706 	br	1000f088 <match_file_record_to_name_ext+0x128>
1000f06c:	e0bffc17 	ldw	r2,-16(fp)
1000f070:	e13ffe17 	ldw	r4,-8(fp)
1000f074:	2085883a 	add	r2,r4,r2
1000f078:	10800003 	ldbu	r2,0(r2)
1000f07c:	10803fcc 	andi	r2,r2,255
1000f080:	1080201c 	xori	r2,r2,128
1000f084:	10bfe004 	addi	r2,r2,-128
1000f088:	18800226 	beq	r3,r2,1000f094 <match_file_record_to_name_ext+0x134>
        {
            match = false;
1000f08c:	e03ffb15 	stw	zero,-20(fp)
			break;
1000f090:	00000606 	br	1000f0ac <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
1000f094:	e0bffc17 	ldw	r2,-16(fp)
1000f098:	10800044 	addi	r2,r2,1
1000f09c:	e0bffc15 	stw	r2,-16(fp)
1000f0a0:	e0bffc17 	ldw	r2,-16(fp)
1000f0a4:	10800210 	cmplti	r2,r2,8
1000f0a8:	103fb71e 	bne	r2,zero,1000ef88 <__alt_data_end+0xf800ef88>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
1000f0ac:	e03ffc15 	stw	zero,-16(fp)
1000f0b0:	00004a06 	br	1000f1dc <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
1000f0b4:	e0fffd17 	ldw	r3,-12(fp)
1000f0b8:	e0bffc17 	ldw	r2,-16(fp)
1000f0bc:	1885883a 	add	r2,r3,r2
1000f0c0:	10800204 	addi	r2,r2,8
1000f0c4:	10800003 	ldbu	r2,0(r2)
1000f0c8:	10803fcc 	andi	r2,r2,255
1000f0cc:	10801870 	cmpltui	r2,r2,97
1000f0d0:	1000121e 	bne	r2,zero,1000f11c <match_file_record_to_name_ext+0x1bc>
1000f0d4:	e0fffd17 	ldw	r3,-12(fp)
1000f0d8:	e0bffc17 	ldw	r2,-16(fp)
1000f0dc:	1885883a 	add	r2,r3,r2
1000f0e0:	10800204 	addi	r2,r2,8
1000f0e4:	10800003 	ldbu	r2,0(r2)
1000f0e8:	10803fcc 	andi	r2,r2,255
1000f0ec:	10801ee8 	cmpgeui	r2,r2,123
1000f0f0:	10000a1e 	bne	r2,zero,1000f11c <match_file_record_to_name_ext+0x1bc>
1000f0f4:	e0fffd17 	ldw	r3,-12(fp)
1000f0f8:	e0bffc17 	ldw	r2,-16(fp)
1000f0fc:	1885883a 	add	r2,r3,r2
1000f100:	10800204 	addi	r2,r2,8
1000f104:	10800003 	ldbu	r2,0(r2)
1000f108:	10bff804 	addi	r2,r2,-32
1000f10c:	10c03fcc 	andi	r3,r2,255
1000f110:	18c0201c 	xori	r3,r3,128
1000f114:	18ffe004 	addi	r3,r3,-128
1000f118:	00000806 	br	1000f13c <match_file_record_to_name_ext+0x1dc>
1000f11c:	e0fffd17 	ldw	r3,-12(fp)
1000f120:	e0bffc17 	ldw	r2,-16(fp)
1000f124:	1885883a 	add	r2,r3,r2
1000f128:	10800204 	addi	r2,r2,8
1000f12c:	10800003 	ldbu	r2,0(r2)
1000f130:	10c03fcc 	andi	r3,r2,255
1000f134:	18c0201c 	xori	r3,r3,128
1000f138:	18ffe004 	addi	r3,r3,-128
1000f13c:	e0bffc17 	ldw	r2,-16(fp)
1000f140:	e13fff17 	ldw	r4,-4(fp)
1000f144:	2085883a 	add	r2,r4,r2
1000f148:	10800003 	ldbu	r2,0(r2)
1000f14c:	10803fcc 	andi	r2,r2,255
1000f150:	1080201c 	xori	r2,r2,128
1000f154:	10bfe004 	addi	r2,r2,-128
1000f158:	10801850 	cmplti	r2,r2,97
1000f15c:	1000121e 	bne	r2,zero,1000f1a8 <match_file_record_to_name_ext+0x248>
1000f160:	e0bffc17 	ldw	r2,-16(fp)
1000f164:	e13fff17 	ldw	r4,-4(fp)
1000f168:	2085883a 	add	r2,r4,r2
1000f16c:	10800003 	ldbu	r2,0(r2)
1000f170:	10803fcc 	andi	r2,r2,255
1000f174:	1080201c 	xori	r2,r2,128
1000f178:	10bfe004 	addi	r2,r2,-128
1000f17c:	10801ec8 	cmpgei	r2,r2,123
1000f180:	1000091e 	bne	r2,zero,1000f1a8 <match_file_record_to_name_ext+0x248>
1000f184:	e0bffc17 	ldw	r2,-16(fp)
1000f188:	e13fff17 	ldw	r4,-4(fp)
1000f18c:	2085883a 	add	r2,r4,r2
1000f190:	10800003 	ldbu	r2,0(r2)
1000f194:	10bff804 	addi	r2,r2,-32
1000f198:	10803fcc 	andi	r2,r2,255
1000f19c:	1080201c 	xori	r2,r2,128
1000f1a0:	10bfe004 	addi	r2,r2,-128
1000f1a4:	00000706 	br	1000f1c4 <match_file_record_to_name_ext+0x264>
1000f1a8:	e0bffc17 	ldw	r2,-16(fp)
1000f1ac:	e13fff17 	ldw	r4,-4(fp)
1000f1b0:	2085883a 	add	r2,r4,r2
1000f1b4:	10800003 	ldbu	r2,0(r2)
1000f1b8:	10803fcc 	andi	r2,r2,255
1000f1bc:	1080201c 	xori	r2,r2,128
1000f1c0:	10bfe004 	addi	r2,r2,-128
1000f1c4:	18800226 	beq	r3,r2,1000f1d0 <match_file_record_to_name_ext+0x270>
        {
            match = false;
1000f1c8:	e03ffb15 	stw	zero,-20(fp)
			break;
1000f1cc:	00000606 	br	1000f1e8 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
1000f1d0:	e0bffc17 	ldw	r2,-16(fp)
1000f1d4:	10800044 	addi	r2,r2,1
1000f1d8:	e0bffc15 	stw	r2,-16(fp)
1000f1dc:	e0bffc17 	ldw	r2,-16(fp)
1000f1e0:	108000d0 	cmplti	r2,r2,3
1000f1e4:	103fb31e 	bne	r2,zero,1000f0b4 <__alt_data_end+0xf800f0b4>
        {
            match = false;
			break;
        }
    }
	return match;
1000f1e8:	e0bffb17 	ldw	r2,-20(fp)
}
1000f1ec:	e037883a 	mov	sp,fp
1000f1f0:	df000017 	ldw	fp,0(sp)
1000f1f4:	dec00104 	addi	sp,sp,4
1000f1f8:	f800283a 	ret

1000f1fc <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
1000f1fc:	deffe704 	addi	sp,sp,-100
1000f200:	dfc01815 	stw	ra,96(sp)
1000f204:	df001715 	stw	fp,92(sp)
1000f208:	df001704 	addi	fp,sp,92
1000f20c:	e13ffd15 	stw	r4,-12(fp)
1000f210:	e17ffe15 	stw	r5,-8(fp)
1000f214:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
1000f218:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
1000f21c:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
1000f220:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
1000f224:	e13ffd17 	ldw	r4,-12(fp)
1000f228:	000eea80 	call	1000eea8 <get_dir_divider_location>
1000f22c:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
1000f230:	00013106 	br	1000f6f8 <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
1000f234:	00800804 	movi	r2,32
1000f238:	e0bff905 	stb	r2,-28(fp)
1000f23c:	00800804 	movi	r2,32
1000f240:	e0bff945 	stb	r2,-27(fp)
1000f244:	00800804 	movi	r2,32
1000f248:	e0bff985 	stb	r2,-26(fp)
1000f24c:	00800804 	movi	r2,32
1000f250:	e0bff9c5 	stb	r2,-25(fp)
1000f254:	00800804 	movi	r2,32
1000f258:	e0bffa05 	stb	r2,-24(fp)
1000f25c:	00800804 	movi	r2,32
1000f260:	e0bffa45 	stb	r2,-23(fp)
1000f264:	00800804 	movi	r2,32
1000f268:	e0bffa85 	stb	r2,-22(fp)
1000f26c:	00800804 	movi	r2,32
1000f270:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
1000f274:	00800804 	movi	r2,32
1000f278:	e0bffb05 	stb	r2,-20(fp)
1000f27c:	00800804 	movi	r2,32
1000f280:	e0bffb45 	stb	r2,-19(fp)
1000f284:	00800804 	movi	r2,32
1000f288:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
1000f28c:	00bfffc4 	movi	r2,-1
1000f290:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
1000f294:	e0bfea17 	ldw	r2,-88(fp)
1000f298:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
1000f29c:	e03fec15 	stw	zero,-80(fp)
1000f2a0:	00002d06 	br	1000f358 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
1000f2a4:	e0ffec17 	ldw	r3,-80(fp)
1000f2a8:	e0bfed17 	ldw	r2,-76(fp)
1000f2ac:	1885883a 	add	r2,r3,r2
1000f2b0:	1007883a 	mov	r3,r2
1000f2b4:	e0bffd17 	ldw	r2,-12(fp)
1000f2b8:	10c5883a 	add	r2,r2,r3
1000f2bc:	10800003 	ldbu	r2,0(r2)
1000f2c0:	10803fcc 	andi	r2,r2,255
1000f2c4:	1080201c 	xori	r2,r2,128
1000f2c8:	10bfe004 	addi	r2,r2,-128
1000f2cc:	10800b98 	cmpnei	r2,r2,46
1000f2d0:	1000031e 	bne	r2,zero,1000f2e0 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
1000f2d4:	e0bfec17 	ldw	r2,-80(fp)
1000f2d8:	e0bfee15 	stw	r2,-72(fp)
1000f2dc:	00001b06 	br	1000f34c <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
1000f2e0:	e0bfee17 	ldw	r2,-72(fp)
1000f2e4:	10000c0e 	bge	r2,zero,1000f318 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
1000f2e8:	e0ffec17 	ldw	r3,-80(fp)
1000f2ec:	e0bfed17 	ldw	r2,-76(fp)
1000f2f0:	1885883a 	add	r2,r3,r2
1000f2f4:	1007883a 	mov	r3,r2
1000f2f8:	e0bffd17 	ldw	r2,-12(fp)
1000f2fc:	10c5883a 	add	r2,r2,r3
1000f300:	10c00003 	ldbu	r3,0(r2)
1000f304:	e13ff904 	addi	r4,fp,-28
1000f308:	e0bfec17 	ldw	r2,-80(fp)
1000f30c:	2085883a 	add	r2,r4,r2
1000f310:	10c00005 	stb	r3,0(r2)
1000f314:	00000d06 	br	1000f34c <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
1000f318:	e0ffec17 	ldw	r3,-80(fp)
1000f31c:	e0bfee17 	ldw	r2,-72(fp)
1000f320:	1885c83a 	sub	r2,r3,r2
1000f324:	e13fec17 	ldw	r4,-80(fp)
1000f328:	e0ffed17 	ldw	r3,-76(fp)
1000f32c:	20c7883a 	add	r3,r4,r3
1000f330:	1809883a 	mov	r4,r3
1000f334:	e0fffd17 	ldw	r3,-12(fp)
1000f338:	1907883a 	add	r3,r3,r4
1000f33c:	18c00003 	ldbu	r3,0(r3)
1000f340:	e13ffb04 	addi	r4,fp,-20
1000f344:	2085883a 	add	r2,r4,r2
1000f348:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
1000f34c:	e0bfec17 	ldw	r2,-80(fp)
1000f350:	10800044 	addi	r2,r2,1
1000f354:	e0bfec15 	stw	r2,-80(fp)
1000f358:	e0ffec17 	ldw	r3,-80(fp)
1000f35c:	e0bfeb17 	ldw	r2,-84(fp)
1000f360:	18bfd016 	blt	r3,r2,1000f2a4 <__alt_data_end+0xf800f2a4>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
1000f364:	e0bfea17 	ldw	r2,-88(fp)
1000f368:	10005e1e 	bne	r2,zero,1000f4e4 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
1000f36c:	008400b4 	movhi	r2,4098
1000f370:	10a0f104 	addi	r2,r2,-31804
1000f374:	1080050b 	ldhu	r2,20(r2)
1000f378:	10bfffcc 	andi	r2,r2,65535
1000f37c:	1006917a 	slli	r3,r2,5
1000f380:	008400b4 	movhi	r2,4098
1000f384:	10a0f104 	addi	r2,r2,-31804
1000f388:	1080030b 	ldhu	r2,12(r2)
1000f38c:	10bfffcc 	andi	r2,r2,65535
1000f390:	100b883a 	mov	r5,r2
1000f394:	1809883a 	mov	r4,r3
1000f398:	000a5d40 	call	1000a5d4 <__divsi3>
1000f39c:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1000f3a0:	e03ff015 	stw	zero,-64(fp)
1000f3a4:	00003b06 	br	1000f494 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
1000f3a8:	008400b4 	movhi	r2,4098
1000f3ac:	10a0f104 	addi	r2,r2,-31804
1000f3b0:	10c01317 	ldw	r3,76(r2)
1000f3b4:	e0bff017 	ldw	r2,-64(fp)
1000f3b8:	1885883a 	add	r2,r3,r2
1000f3bc:	1007883a 	mov	r3,r2
1000f3c0:	d0a70017 	ldw	r2,-25600(gp)
1000f3c4:	100b883a 	mov	r5,r2
1000f3c8:	1809883a 	mov	r4,r3
1000f3cc:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000f3d0:	10003426 	beq	r2,zero,1000f4a4 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
1000f3d4:	e03ff115 	stw	zero,-60(fp)
1000f3d8:	00002506 	br	1000f470 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
1000f3dc:	e0bff117 	ldw	r2,-60(fp)
1000f3e0:	1004917a 	slli	r2,r2,5
1000f3e4:	e0fff017 	ldw	r3,-64(fp)
1000f3e8:	180f883a 	mov	r7,r3
1000f3ec:	000d883a 	mov	r6,zero
1000f3f0:	e17fff17 	ldw	r5,-4(fp)
1000f3f4:	1009883a 	mov	r4,r2
1000f3f8:	000dee40 	call	1000dee4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
1000f3fc:	e0bfff17 	ldw	r2,-4(fp)
1000f400:	10800003 	ldbu	r2,0(r2)
1000f404:	10803fcc 	andi	r2,r2,255
1000f408:	10803960 	cmpeqi	r2,r2,229
1000f40c:	1000151e 	bne	r2,zero,1000f464 <get_home_directory_cluster_for_file+0x268>
1000f410:	e0bfff17 	ldw	r2,-4(fp)
1000f414:	10800003 	ldbu	r2,0(r2)
1000f418:	10803fcc 	andi	r2,r2,255
1000f41c:	10001126 	beq	r2,zero,1000f464 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
1000f420:	e0fffb04 	addi	r3,fp,-20
1000f424:	e0bff904 	addi	r2,fp,-28
1000f428:	180d883a 	mov	r6,r3
1000f42c:	100b883a 	mov	r5,r2
1000f430:	e13fff17 	ldw	r4,-4(fp)
1000f434:	000ef600 	call	1000ef60 <match_file_record_to_name_ext>
1000f438:	e0bff815 	stw	r2,-32(fp)
                            if (match)
1000f43c:	e0bff817 	ldw	r2,-32(fp)
1000f440:	10000826 	beq	r2,zero,1000f464 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
1000f444:	e0bfff17 	ldw	r2,-4(fp)
1000f448:	1080058b 	ldhu	r2,22(r2)
1000f44c:	10bfffcc 	andi	r2,r2,65535
1000f450:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
1000f454:	e0bfff17 	ldw	r2,-4(fp)
1000f458:	00c00044 	movi	r3,1
1000f45c:	10c00a15 	stw	r3,40(r2)
                                break;
1000f460:	00000606 	br	1000f47c <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
1000f464:	e0bff117 	ldw	r2,-60(fp)
1000f468:	10800044 	addi	r2,r2,1
1000f46c:	e0bff115 	stw	r2,-60(fp)
1000f470:	e0bff117 	ldw	r2,-60(fp)
1000f474:	10800410 	cmplti	r2,r2,16
1000f478:	103fd81e 	bne	r2,zero,1000f3dc <__alt_data_end+0xf800f3dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
1000f47c:	e0ffef17 	ldw	r3,-68(fp)
1000f480:	e0bfea17 	ldw	r2,-88(fp)
1000f484:	1880091e 	bne	r3,r2,1000f4ac <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1000f488:	e0bff017 	ldw	r2,-64(fp)
1000f48c:	10800044 	addi	r2,r2,1
1000f490:	e0bff015 	stw	r2,-64(fp)
1000f494:	e0fff017 	ldw	r3,-64(fp)
1000f498:	e0bff717 	ldw	r2,-36(fp)
1000f49c:	18bfc216 	blt	r3,r2,1000f3a8 <__alt_data_end+0xf800f3a8>
1000f4a0:	00000306 	br	1000f4b0 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
1000f4a4:	0001883a 	nop
1000f4a8:	00000106 	br	1000f4b0 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
1000f4ac:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
1000f4b0:	e0ffef17 	ldw	r3,-68(fp)
1000f4b4:	e0bfea17 	ldw	r2,-88(fp)
1000f4b8:	18800826 	beq	r3,r2,1000f4dc <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
1000f4bc:	e0bfef17 	ldw	r2,-68(fp)
1000f4c0:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
1000f4c4:	e0ffed17 	ldw	r3,-76(fp)
1000f4c8:	e0bfeb17 	ldw	r2,-84(fp)
1000f4cc:	1885883a 	add	r2,r3,r2
1000f4d0:	10800044 	addi	r2,r2,1
1000f4d4:	e0bfed15 	stw	r2,-76(fp)
1000f4d8:	00007d06 	br	1000f6d0 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
1000f4dc:	0005883a 	mov	r2,zero
1000f4e0:	00009106 	br	1000f728 <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
1000f4e4:	e0bfea17 	ldw	r2,-88(fp)
1000f4e8:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
1000f4ec:	e0bff417 	ldw	r2,-48(fp)
1000f4f0:	10ffff84 	addi	r3,r2,-2
1000f4f4:	008400b4 	movhi	r2,4098
1000f4f8:	10a0f104 	addi	r2,r2,-31804
1000f4fc:	10800383 	ldbu	r2,14(r2)
1000f500:	10803fcc 	andi	r2,r2,255
1000f504:	1885383a 	mul	r2,r3,r2
1000f508:	1007883a 	mov	r3,r2
1000f50c:	008400b4 	movhi	r2,4098
1000f510:	10a0f104 	addi	r2,r2,-31804
1000f514:	10801417 	ldw	r2,80(r2)
1000f518:	1885883a 	add	r2,r3,r2
1000f51c:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1000f520:	e03ff215 	stw	zero,-56(fp)
1000f524:	00003606 	br	1000f600 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
1000f528:	e0fff217 	ldw	r3,-56(fp)
1000f52c:	e0bff517 	ldw	r2,-44(fp)
1000f530:	1885883a 	add	r2,r3,r2
1000f534:	d0e70017 	ldw	r3,-25600(gp)
1000f538:	180b883a 	mov	r5,r3
1000f53c:	1009883a 	mov	r4,r2
1000f540:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000f544:	10003526 	beq	r2,zero,1000f61c <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
1000f548:	e03ff315 	stw	zero,-52(fp)
1000f54c:	00002306 	br	1000f5dc <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
1000f550:	e0bff317 	ldw	r2,-52(fp)
1000f554:	1004917a 	slli	r2,r2,5
1000f558:	e0fff417 	ldw	r3,-48(fp)
1000f55c:	e13ff217 	ldw	r4,-56(fp)
1000f560:	200f883a 	mov	r7,r4
1000f564:	180d883a 	mov	r6,r3
1000f568:	e17fff17 	ldw	r5,-4(fp)
1000f56c:	1009883a 	mov	r4,r2
1000f570:	000dee40 	call	1000dee4 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
1000f574:	e0bfff17 	ldw	r2,-4(fp)
1000f578:	10800003 	ldbu	r2,0(r2)
1000f57c:	10803fcc 	andi	r2,r2,255
1000f580:	10803960 	cmpeqi	r2,r2,229
1000f584:	1000121e 	bne	r2,zero,1000f5d0 <get_home_directory_cluster_for_file+0x3d4>
1000f588:	e0bfff17 	ldw	r2,-4(fp)
1000f58c:	10800003 	ldbu	r2,0(r2)
1000f590:	10803fcc 	andi	r2,r2,255
1000f594:	10000e26 	beq	r2,zero,1000f5d0 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
1000f598:	e0fffb04 	addi	r3,fp,-20
1000f59c:	e0bff904 	addi	r2,fp,-28
1000f5a0:	180d883a 	mov	r6,r3
1000f5a4:	100b883a 	mov	r5,r2
1000f5a8:	e13fff17 	ldw	r4,-4(fp)
1000f5ac:	000ef600 	call	1000ef60 <match_file_record_to_name_ext>
1000f5b0:	e0bff615 	stw	r2,-40(fp)
                                if (match)
1000f5b4:	e0bff617 	ldw	r2,-40(fp)
1000f5b8:	10000526 	beq	r2,zero,1000f5d0 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
1000f5bc:	e0bfff17 	ldw	r2,-4(fp)
1000f5c0:	1080058b 	ldhu	r2,22(r2)
1000f5c4:	10bfffcc 	andi	r2,r2,65535
1000f5c8:	e0bfef15 	stw	r2,-68(fp)
                                    break;
1000f5cc:	00000606 	br	1000f5e8 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
1000f5d0:	e0bff317 	ldw	r2,-52(fp)
1000f5d4:	10800044 	addi	r2,r2,1
1000f5d8:	e0bff315 	stw	r2,-52(fp)
1000f5dc:	e0bff317 	ldw	r2,-52(fp)
1000f5e0:	10800410 	cmplti	r2,r2,16
1000f5e4:	103fda1e 	bne	r2,zero,1000f550 <__alt_data_end+0xf800f550>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
1000f5e8:	e0ffef17 	ldw	r3,-68(fp)
1000f5ec:	e0bfea17 	ldw	r2,-88(fp)
1000f5f0:	18800c1e 	bne	r3,r2,1000f624 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1000f5f4:	e0bff217 	ldw	r2,-56(fp)
1000f5f8:	10800044 	addi	r2,r2,1
1000f5fc:	e0bff215 	stw	r2,-56(fp)
1000f600:	008400b4 	movhi	r2,4098
1000f604:	10a0f104 	addi	r2,r2,-31804
1000f608:	10800383 	ldbu	r2,14(r2)
1000f60c:	10803fcc 	andi	r2,r2,255
1000f610:	e0fff217 	ldw	r3,-56(fp)
1000f614:	18bfc416 	blt	r3,r2,1000f528 <__alt_data_end+0xf800f528>
1000f618:	00000306 	br	1000f628 <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
1000f61c:	0001883a 	nop
1000f620:	00000106 	br	1000f628 <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
1000f624:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
1000f628:	e0ffef17 	ldw	r3,-68(fp)
1000f62c:	e0bfea17 	ldw	r2,-88(fp)
1000f630:	1880141e 	bne	r3,r2,1000f684 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
1000f634:	e0bfef17 	ldw	r2,-68(fp)
1000f638:	e0fffc04 	addi	r3,fp,-16
1000f63c:	180b883a 	mov	r5,r3
1000f640:	1009883a 	mov	r4,r2
1000f644:	000dbac0 	call	1000dbac <get_cluster_flag>
1000f648:	10000c26 	beq	r2,zero,1000f67c <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
1000f64c:	e0bffc0b 	ldhu	r2,-16(fp)
1000f650:	10bfffcc 	andi	r2,r2,65535
1000f654:	10fffe0c 	andi	r3,r2,65528
1000f658:	00bffe14 	movui	r2,65528
1000f65c:	1880021e 	bne	r3,r2,1000f668 <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
1000f660:	0005883a 	mov	r2,zero
1000f664:	00003006 	br	1000f728 <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
1000f668:	e0bffc0b 	ldhu	r2,-16(fp)
1000f66c:	10bfffcc 	andi	r2,r2,65535
1000f670:	10bffe0c 	andi	r2,r2,65528
1000f674:	e0bfef15 	stw	r2,-68(fp)
1000f678:	00000206 	br	1000f684 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
1000f67c:	0005883a 	mov	r2,zero
1000f680:	00002906 	br	1000f728 <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
1000f684:	e0bff417 	ldw	r2,-48(fp)
1000f688:	00fffdd4 	movui	r3,65527
1000f68c:	18800316 	blt	r3,r2,1000f69c <get_home_directory_cluster_for_file+0x4a0>
1000f690:	e0ffef17 	ldw	r3,-68(fp)
1000f694:	e0bfea17 	ldw	r2,-88(fp)
1000f698:	18bf9426 	beq	r3,r2,1000f4ec <__alt_data_end+0xf800f4ec>
            if (new_cluster != home_dir_cluster)
1000f69c:	e0ffef17 	ldw	r3,-68(fp)
1000f6a0:	e0bfea17 	ldw	r2,-88(fp)
1000f6a4:	18800826 	beq	r3,r2,1000f6c8 <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
1000f6a8:	e0bfef17 	ldw	r2,-68(fp)
1000f6ac:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
1000f6b0:	e0ffed17 	ldw	r3,-76(fp)
1000f6b4:	e0bfeb17 	ldw	r2,-84(fp)
1000f6b8:	1885883a 	add	r2,r3,r2
1000f6bc:	10800044 	addi	r2,r2,1
1000f6c0:	e0bfed15 	stw	r2,-76(fp)
1000f6c4:	00000206 	br	1000f6d0 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
1000f6c8:	0005883a 	mov	r2,zero
1000f6cc:	00001606 	br	1000f728 <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
1000f6d0:	e0bfed17 	ldw	r2,-76(fp)
1000f6d4:	e0fffd17 	ldw	r3,-12(fp)
1000f6d8:	1885883a 	add	r2,r3,r2
1000f6dc:	1009883a 	mov	r4,r2
1000f6e0:	000eea80 	call	1000eea8 <get_dir_divider_location>
1000f6e4:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
1000f6e8:	e0bfeb17 	ldw	r2,-84(fp)
1000f6ec:	1000020e 	bge	r2,zero,1000f6f8 <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
1000f6f0:	00800044 	movi	r2,1
1000f6f4:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
1000f6f8:	e0bfeb17 	ldw	r2,-84(fp)
1000f6fc:	00becd16 	blt	zero,r2,1000f234 <__alt_data_end+0xf800f234>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
1000f700:	e0bffe17 	ldw	r2,-8(fp)
1000f704:	e0ffea17 	ldw	r3,-88(fp)
1000f708:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
1000f70c:	e0bfea17 	ldw	r2,-88(fp)
1000f710:	1000041e 	bne	r2,zero,1000f724 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
1000f714:	e0bfff17 	ldw	r2,-4(fp)
1000f718:	10000a15 	stw	zero,40(r2)
		result = true;
1000f71c:	00800044 	movi	r2,1
1000f720:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
1000f724:	e0bfe917 	ldw	r2,-92(fp)
}
1000f728:	e037883a 	mov	sp,fp
1000f72c:	dfc00117 	ldw	ra,4(sp)
1000f730:	df000017 	ldw	fp,0(sp)
1000f734:	dec00204 	addi	sp,sp,8
1000f738:	f800283a 	ret

1000f73c <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
1000f73c:	deffe804 	addi	sp,sp,-96
1000f740:	dfc01715 	stw	ra,92(sp)
1000f744:	df001615 	stw	fp,88(sp)
1000f748:	df001604 	addi	fp,sp,88
1000f74c:	e13ffd15 	stw	r4,-12(fp)
1000f750:	e17ffe15 	stw	r5,-8(fp)
1000f754:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
1000f758:	e13ffe17 	ldw	r4,-8(fp)
1000f75c:	000eea80 	call	1000eea8 <get_dir_divider_location>
1000f760:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
1000f764:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
1000f768:	00800804 	movi	r2,32
1000f76c:	e0bff905 	stb	r2,-28(fp)
1000f770:	00800804 	movi	r2,32
1000f774:	e0bff945 	stb	r2,-27(fp)
1000f778:	00800804 	movi	r2,32
1000f77c:	e0bff985 	stb	r2,-26(fp)
1000f780:	00800804 	movi	r2,32
1000f784:	e0bff9c5 	stb	r2,-25(fp)
1000f788:	00800804 	movi	r2,32
1000f78c:	e0bffa05 	stb	r2,-24(fp)
1000f790:	00800804 	movi	r2,32
1000f794:	e0bffa45 	stb	r2,-23(fp)
1000f798:	00800804 	movi	r2,32
1000f79c:	e0bffa85 	stb	r2,-22(fp)
1000f7a0:	00800804 	movi	r2,32
1000f7a4:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
1000f7a8:	00800804 	movi	r2,32
1000f7ac:	e0bffb05 	stb	r2,-20(fp)
1000f7b0:	00800804 	movi	r2,32
1000f7b4:	e0bffb45 	stb	r2,-19(fp)
1000f7b8:	00800804 	movi	r2,32
1000f7bc:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
1000f7c0:	00bfffc4 	movi	r2,-1
1000f7c4:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
1000f7c8:	e0bffd17 	ldw	r2,-12(fp)
1000f7cc:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
1000f7d0:	e13ffe17 	ldw	r4,-8(fp)
1000f7d4:	00006100 	call	10000610 <strlen>
1000f7d8:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
1000f7dc:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
1000f7e0:	00000b06 	br	1000f810 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
1000f7e4:	e0ffeb17 	ldw	r3,-84(fp)
1000f7e8:	e0bfea17 	ldw	r2,-88(fp)
1000f7ec:	1885883a 	add	r2,r3,r2
1000f7f0:	10800044 	addi	r2,r2,1
1000f7f4:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
1000f7f8:	e0bfeb17 	ldw	r2,-84(fp)
1000f7fc:	e0fffe17 	ldw	r3,-8(fp)
1000f800:	1885883a 	add	r2,r3,r2
1000f804:	1009883a 	mov	r4,r2
1000f808:	000eea80 	call	1000eea8 <get_dir_divider_location>
1000f80c:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
1000f810:	e0bfea17 	ldw	r2,-88(fp)
1000f814:	00bff316 	blt	zero,r2,1000f7e4 <__alt_data_end+0xf800f7e4>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
1000f818:	e0bfeb17 	ldw	r2,-84(fp)
1000f81c:	e0bfee15 	stw	r2,-72(fp)
1000f820:	00002706 	br	1000f8c0 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
1000f824:	e0bfee17 	ldw	r2,-72(fp)
1000f828:	e0fffe17 	ldw	r3,-8(fp)
1000f82c:	1885883a 	add	r2,r3,r2
1000f830:	10800003 	ldbu	r2,0(r2)
1000f834:	10803fcc 	andi	r2,r2,255
1000f838:	1080201c 	xori	r2,r2,128
1000f83c:	10bfe004 	addi	r2,r2,-128
1000f840:	10800b98 	cmpnei	r2,r2,46
1000f844:	1000031e 	bne	r2,zero,1000f854 <find_file_in_directory+0x118>
        {
            ext_index = index;
1000f848:	e0bfee17 	ldw	r2,-72(fp)
1000f84c:	e0bfec15 	stw	r2,-80(fp)
1000f850:	00001806 	br	1000f8b4 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
1000f854:	e0bfec17 	ldw	r2,-80(fp)
1000f858:	10000b0e 	bge	r2,zero,1000f888 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
1000f85c:	e0ffee17 	ldw	r3,-72(fp)
1000f860:	e0bfeb17 	ldw	r2,-84(fp)
1000f864:	1885c83a 	sub	r2,r3,r2
1000f868:	e0ffee17 	ldw	r3,-72(fp)
1000f86c:	e13ffe17 	ldw	r4,-8(fp)
1000f870:	20c7883a 	add	r3,r4,r3
1000f874:	18c00003 	ldbu	r3,0(r3)
1000f878:	e13ff904 	addi	r4,fp,-28
1000f87c:	2085883a 	add	r2,r4,r2
1000f880:	10c00005 	stb	r3,0(r2)
1000f884:	00000b06 	br	1000f8b4 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
1000f888:	e0ffee17 	ldw	r3,-72(fp)
1000f88c:	e0bfec17 	ldw	r2,-80(fp)
1000f890:	1885c83a 	sub	r2,r3,r2
1000f894:	10bfffc4 	addi	r2,r2,-1
1000f898:	e0ffee17 	ldw	r3,-72(fp)
1000f89c:	e13ffe17 	ldw	r4,-8(fp)
1000f8a0:	20c7883a 	add	r3,r4,r3
1000f8a4:	18c00003 	ldbu	r3,0(r3)
1000f8a8:	e13ffb04 	addi	r4,fp,-20
1000f8ac:	2085883a 	add	r2,r4,r2
1000f8b0:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
1000f8b4:	e0bfee17 	ldw	r2,-72(fp)
1000f8b8:	10800044 	addi	r2,r2,1
1000f8bc:	e0bfee15 	stw	r2,-72(fp)
1000f8c0:	e0ffee17 	ldw	r3,-72(fp)
1000f8c4:	e0bff417 	ldw	r2,-48(fp)
1000f8c8:	18bfd616 	blt	r3,r2,1000f824 <__alt_data_end+0xf800f824>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
1000f8cc:	e0bffd17 	ldw	r2,-12(fp)
1000f8d0:	1000481e 	bne	r2,zero,1000f9f4 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
1000f8d4:	008400b4 	movhi	r2,4098
1000f8d8:	10a0f104 	addi	r2,r2,-31804
1000f8dc:	1080050b 	ldhu	r2,20(r2)
1000f8e0:	10bfffcc 	andi	r2,r2,65535
1000f8e4:	1006917a 	slli	r3,r2,5
1000f8e8:	008400b4 	movhi	r2,4098
1000f8ec:	10a0f104 	addi	r2,r2,-31804
1000f8f0:	1080030b 	ldhu	r2,12(r2)
1000f8f4:	10bfffcc 	andi	r2,r2,65535
1000f8f8:	100b883a 	mov	r5,r2
1000f8fc:	1809883a 	mov	r4,r3
1000f900:	000a5d40 	call	1000a5d4 <__divsi3>
1000f904:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1000f908:	e03ff015 	stw	zero,-64(fp)
1000f90c:	00003506 	br	1000f9e4 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
1000f910:	008400b4 	movhi	r2,4098
1000f914:	10a0f104 	addi	r2,r2,-31804
1000f918:	10c01317 	ldw	r3,76(r2)
1000f91c:	e0bff017 	ldw	r2,-64(fp)
1000f920:	1885883a 	add	r2,r3,r2
1000f924:	1007883a 	mov	r3,r2
1000f928:	d0a70017 	ldw	r2,-25600(gp)
1000f92c:	100b883a 	mov	r5,r2
1000f930:	1809883a 	mov	r4,r3
1000f934:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000f938:	10009626 	beq	r2,zero,1000fb94 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
1000f93c:	e03ff115 	stw	zero,-60(fp)
1000f940:	00002006 	br	1000f9c4 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
1000f944:	e0bff117 	ldw	r2,-60(fp)
1000f948:	1004917a 	slli	r2,r2,5
1000f94c:	e0fff017 	ldw	r3,-64(fp)
1000f950:	180f883a 	mov	r7,r3
1000f954:	000d883a 	mov	r6,zero
1000f958:	e17fff17 	ldw	r5,-4(fp)
1000f95c:	1009883a 	mov	r4,r2
1000f960:	000dee40 	call	1000dee4 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
1000f964:	e0bfff17 	ldw	r2,-4(fp)
1000f968:	10800003 	ldbu	r2,0(r2)
1000f96c:	10803fcc 	andi	r2,r2,255
1000f970:	10803960 	cmpeqi	r2,r2,229
1000f974:	1000101e 	bne	r2,zero,1000f9b8 <find_file_in_directory+0x27c>
1000f978:	e0bfff17 	ldw	r2,-4(fp)
1000f97c:	10800003 	ldbu	r2,0(r2)
1000f980:	10803fcc 	andi	r2,r2,255
1000f984:	10000c26 	beq	r2,zero,1000f9b8 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
1000f988:	e0fffb04 	addi	r3,fp,-20
1000f98c:	e0bff904 	addi	r2,fp,-28
1000f990:	180d883a 	mov	r6,r3
1000f994:	100b883a 	mov	r5,r2
1000f998:	e13fff17 	ldw	r4,-4(fp)
1000f99c:	000ef600 	call	1000ef60 <match_file_record_to_name_ext>
1000f9a0:	e0bff815 	stw	r2,-32(fp)

                        if (match)
1000f9a4:	e0bff817 	ldw	r2,-32(fp)
1000f9a8:	10000326 	beq	r2,zero,1000f9b8 <find_file_in_directory+0x27c>
                        {
                            result = true;
1000f9ac:	00800044 	movi	r2,1
1000f9b0:	e0bfef15 	stw	r2,-68(fp)
                            break;
1000f9b4:	00000606 	br	1000f9d0 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
1000f9b8:	e0bff117 	ldw	r2,-60(fp)
1000f9bc:	10800044 	addi	r2,r2,1
1000f9c0:	e0bff115 	stw	r2,-60(fp)
1000f9c4:	e0bff117 	ldw	r2,-60(fp)
1000f9c8:	10800410 	cmplti	r2,r2,16
1000f9cc:	103fdd1e 	bne	r2,zero,1000f944 <__alt_data_end+0xf800f944>
            }
            else
            {
                break;
            }
            if (result)
1000f9d0:	e0bfef17 	ldw	r2,-68(fp)
1000f9d4:	1000711e 	bne	r2,zero,1000fb9c <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1000f9d8:	e0bff017 	ldw	r2,-64(fp)
1000f9dc:	10800044 	addi	r2,r2,1
1000f9e0:	e0bff015 	stw	r2,-64(fp)
1000f9e4:	e0fff017 	ldw	r3,-64(fp)
1000f9e8:	e0bff717 	ldw	r2,-36(fp)
1000f9ec:	18bfc816 	blt	r3,r2,1000f910 <__alt_data_end+0xf800f910>
1000f9f0:	00006b06 	br	1000fba0 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
1000f9f4:	e0bfed17 	ldw	r2,-76(fp)
1000f9f8:	10ffff84 	addi	r3,r2,-2
1000f9fc:	008400b4 	movhi	r2,4098
1000fa00:	10a0f104 	addi	r2,r2,-31804
1000fa04:	10800383 	ldbu	r2,14(r2)
1000fa08:	10803fcc 	andi	r2,r2,255
1000fa0c:	1885383a 	mul	r2,r3,r2
1000fa10:	1007883a 	mov	r3,r2
1000fa14:	008400b4 	movhi	r2,4098
1000fa18:	10a0f104 	addi	r2,r2,-31804
1000fa1c:	10801417 	ldw	r2,80(r2)
1000fa20:	1885883a 	add	r2,r3,r2
1000fa24:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1000fa28:	e03ff215 	stw	zero,-56(fp)
1000fa2c:	00003306 	br	1000fafc <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
1000fa30:	e0fff217 	ldw	r3,-56(fp)
1000fa34:	e0bff517 	ldw	r2,-44(fp)
1000fa38:	1885883a 	add	r2,r3,r2
1000fa3c:	d0e70017 	ldw	r3,-25600(gp)
1000fa40:	180b883a 	mov	r5,r3
1000fa44:	1009883a 	mov	r4,r2
1000fa48:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000fa4c:	10003226 	beq	r2,zero,1000fb18 <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
1000fa50:	e03ff315 	stw	zero,-52(fp)
1000fa54:	00002106 	br	1000fadc <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
1000fa58:	e0bff317 	ldw	r2,-52(fp)
1000fa5c:	1004917a 	slli	r2,r2,5
1000fa60:	e0ffed17 	ldw	r3,-76(fp)
1000fa64:	e13ff217 	ldw	r4,-56(fp)
1000fa68:	200f883a 	mov	r7,r4
1000fa6c:	180d883a 	mov	r6,r3
1000fa70:	e17fff17 	ldw	r5,-4(fp)
1000fa74:	1009883a 	mov	r4,r2
1000fa78:	000dee40 	call	1000dee4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
1000fa7c:	e0bfff17 	ldw	r2,-4(fp)
1000fa80:	10800003 	ldbu	r2,0(r2)
1000fa84:	10803fcc 	andi	r2,r2,255
1000fa88:	10803960 	cmpeqi	r2,r2,229
1000fa8c:	1000101e 	bne	r2,zero,1000fad0 <find_file_in_directory+0x394>
1000fa90:	e0bfff17 	ldw	r2,-4(fp)
1000fa94:	10800003 	ldbu	r2,0(r2)
1000fa98:	10803fcc 	andi	r2,r2,255
1000fa9c:	10000c26 	beq	r2,zero,1000fad0 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
1000faa0:	e0fffb04 	addi	r3,fp,-20
1000faa4:	e0bff904 	addi	r2,fp,-28
1000faa8:	180d883a 	mov	r6,r3
1000faac:	100b883a 	mov	r5,r2
1000fab0:	e13fff17 	ldw	r4,-4(fp)
1000fab4:	000ef600 	call	1000ef60 <match_file_record_to_name_ext>
1000fab8:	e0bff615 	stw	r2,-40(fp)

                            if (match)
1000fabc:	e0bff617 	ldw	r2,-40(fp)
1000fac0:	10000326 	beq	r2,zero,1000fad0 <find_file_in_directory+0x394>
                            {                               
                                result = true;
1000fac4:	00800044 	movi	r2,1
1000fac8:	e0bfef15 	stw	r2,-68(fp)
                                break;
1000facc:	00000606 	br	1000fae8 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
1000fad0:	e0bff317 	ldw	r2,-52(fp)
1000fad4:	10800044 	addi	r2,r2,1
1000fad8:	e0bff315 	stw	r2,-52(fp)
1000fadc:	e0bff317 	ldw	r2,-52(fp)
1000fae0:	10800410 	cmplti	r2,r2,16
1000fae4:	103fdc1e 	bne	r2,zero,1000fa58 <__alt_data_end+0xf800fa58>
                }
                else
                {
                    break;
                }
                if (result)
1000fae8:	e0bfef17 	ldw	r2,-68(fp)
1000faec:	10000c1e 	bne	r2,zero,1000fb20 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1000faf0:	e0bff217 	ldw	r2,-56(fp)
1000faf4:	10800044 	addi	r2,r2,1
1000faf8:	e0bff215 	stw	r2,-56(fp)
1000fafc:	008400b4 	movhi	r2,4098
1000fb00:	10a0f104 	addi	r2,r2,-31804
1000fb04:	10800383 	ldbu	r2,14(r2)
1000fb08:	10803fcc 	andi	r2,r2,255
1000fb0c:	e0fff217 	ldw	r3,-56(fp)
1000fb10:	18bfc716 	blt	r3,r2,1000fa30 <__alt_data_end+0xf800fa30>
1000fb14:	00000306 	br	1000fb24 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
1000fb18:	0001883a 	nop
1000fb1c:	00000106 	br	1000fb24 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
1000fb20:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
1000fb24:	e0bfef17 	ldw	r2,-68(fp)
1000fb28:	1000141e 	bne	r2,zero,1000fb7c <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
1000fb2c:	e0bfed17 	ldw	r2,-76(fp)
1000fb30:	e0fffc04 	addi	r3,fp,-16
1000fb34:	180b883a 	mov	r5,r3
1000fb38:	1009883a 	mov	r4,r2
1000fb3c:	000dbac0 	call	1000dbac <get_cluster_flag>
1000fb40:	10000c26 	beq	r2,zero,1000fb74 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
1000fb44:	e0bffc0b 	ldhu	r2,-16(fp)
1000fb48:	10bfffcc 	andi	r2,r2,65535
1000fb4c:	10fffe0c 	andi	r3,r2,65528
1000fb50:	00bffe14 	movui	r2,65528
1000fb54:	1880021e 	bne	r3,r2,1000fb60 <find_file_in_directory+0x424>
					{
						return false;
1000fb58:	0005883a 	mov	r2,zero
1000fb5c:	00001106 	br	1000fba4 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
1000fb60:	e0bffc0b 	ldhu	r2,-16(fp)
1000fb64:	10bfffcc 	andi	r2,r2,65535
1000fb68:	10bffe0c 	andi	r2,r2,65528
1000fb6c:	e0bfed15 	stw	r2,-76(fp)
1000fb70:	00000206 	br	1000fb7c <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
1000fb74:	0005883a 	mov	r2,zero
1000fb78:	00000a06 	br	1000fba4 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
1000fb7c:	e0bfed17 	ldw	r2,-76(fp)
1000fb80:	00fffdd4 	movui	r3,65527
1000fb84:	18800616 	blt	r3,r2,1000fba0 <find_file_in_directory+0x464>
1000fb88:	e0bfef17 	ldw	r2,-68(fp)
1000fb8c:	103f9926 	beq	r2,zero,1000f9f4 <__alt_data_end+0xf800f9f4>
1000fb90:	00000306 	br	1000fba0 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
1000fb94:	0001883a 	nop
1000fb98:	00000106 	br	1000fba0 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
1000fb9c:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
1000fba0:	e0bfef17 	ldw	r2,-68(fp)
}
1000fba4:	e037883a 	mov	sp,fp
1000fba8:	dfc00117 	ldw	ra,4(sp)
1000fbac:	df000017 	ldw	fp,0(sp)
1000fbb0:	dec00204 	addi	sp,sp,8
1000fbb4:	f800283a 	ret

1000fbb8 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
1000fbb8:	defff504 	addi	sp,sp,-44
1000fbbc:	dfc00a15 	stw	ra,40(sp)
1000fbc0:	df000915 	stw	fp,36(sp)
1000fbc4:	df000904 	addi	fp,sp,36
1000fbc8:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
1000fbcc:	008400b4 	movhi	r2,4098
1000fbd0:	10a0f104 	addi	r2,r2,-31804
1000fbd4:	10801117 	ldw	r2,68(r2)
1000fbd8:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
1000fbdc:	00800084 	movi	r2,2
1000fbe0:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
1000fbe4:	00bfffc4 	movi	r2,-1
1000fbe8:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
1000fbec:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
1000fbf0:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
1000fbf4:	008400b4 	movhi	r2,4098
1000fbf8:	10a0f104 	addi	r2,r2,-31804
1000fbfc:	10801417 	ldw	r2,80(r2)
1000fc00:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
1000fc04:	008400b4 	movhi	r2,4098
1000fc08:	10a0f104 	addi	r2,r2,-31804
1000fc0c:	1080058b 	ldhu	r2,22(r2)
1000fc10:	10bfffcc 	andi	r2,r2,65535
1000fc14:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
1000fc18:	008400b4 	movhi	r2,4098
1000fc1c:	10a0f104 	addi	r2,r2,-31804
1000fc20:	10800917 	ldw	r2,36(r2)
1000fc24:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
1000fc28:	e0bffd17 	ldw	r2,-12(fp)
1000fc2c:	e0fffe17 	ldw	r3,-8(fp)
1000fc30:	18800d2e 	bgeu	r3,r2,1000fc68 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
1000fc34:	e0fffd17 	ldw	r3,-12(fp)
1000fc38:	e0bffc17 	ldw	r2,-16(fp)
1000fc3c:	1887c83a 	sub	r3,r3,r2
1000fc40:	008400b4 	movhi	r2,4098
1000fc44:	10a0f104 	addi	r2,r2,-31804
1000fc48:	10800383 	ldbu	r2,14(r2)
1000fc4c:	10803fcc 	andi	r2,r2,255
1000fc50:	100b883a 	mov	r5,r2
1000fc54:	1809883a 	mov	r4,r3
1000fc58:	000a6cc0 	call	1000a6cc <__udivsi3>
1000fc5c:	10800044 	addi	r2,r2,1
1000fc60:	e0bffb15 	stw	r2,-20(fp)
1000fc64:	00002c06 	br	1000fd18 <find_first_empty_cluster+0x160>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
1000fc68:	e0fffe17 	ldw	r3,-8(fp)
1000fc6c:	e0bffc17 	ldw	r2,-16(fp)
1000fc70:	1887c83a 	sub	r3,r3,r2
1000fc74:	008400b4 	movhi	r2,4098
1000fc78:	10a0f104 	addi	r2,r2,-31804
1000fc7c:	10800383 	ldbu	r2,14(r2)
1000fc80:	10803fcc 	andi	r2,r2,255
1000fc84:	100b883a 	mov	r5,r2
1000fc88:	1809883a 	mov	r4,r3
1000fc8c:	000a6cc0 	call	1000a6cc <__udivsi3>
1000fc90:	10800044 	addi	r2,r2,1
1000fc94:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
1000fc98:	00001f06 	br	1000fd18 <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
1000fc9c:	e0bff717 	ldw	r2,-36(fp)
1000fca0:	d0e70017 	ldw	r3,-25600(gp)
1000fca4:	180b883a 	mov	r5,r3
1000fca8:	1009883a 	mov	r4,r2
1000fcac:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000fcb0:	10001426 	beq	r2,zero,1000fd04 <find_first_empty_cluster+0x14c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
1000fcb4:	e0bff817 	ldw	r2,-32(fp)
1000fcb8:	10803fcc 	andi	r2,r2,255
1000fcbc:	1085883a 	add	r2,r2,r2
1000fcc0:	1007883a 	mov	r3,r2
1000fcc4:	d0a70217 	ldw	r2,-25592(gp)
1000fcc8:	10800a17 	ldw	r2,40(r2)
1000fccc:	1885883a 	add	r2,r3,r2
1000fcd0:	1080002b 	ldhuio	r2,0(r2)
1000fcd4:	10bfffcc 	andi	r2,r2,65535
1000fcd8:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
1000fcdc:	e0bff90f 	ldh	r2,-28(fp)
1000fce0:	10000726 	beq	r2,zero,1000fd00 <find_first_empty_cluster+0x148>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
1000fce4:	e0bff817 	ldw	r2,-32(fp)
1000fce8:	10800044 	addi	r2,r2,1
1000fcec:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
1000fcf0:	e0bff817 	ldw	r2,-32(fp)
1000fcf4:	10803fcc 	andi	r2,r2,255
1000fcf8:	103fee1e 	bne	r2,zero,1000fcb4 <__alt_data_end+0xf800fcb4>
1000fcfc:	00000106 	br	1000fd04 <find_first_empty_cluster+0x14c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
1000fd00:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
1000fd04:	e0bff90f 	ldh	r2,-28(fp)
1000fd08:	10000926 	beq	r2,zero,1000fd30 <find_first_empty_cluster+0x178>
        {
            break;
        }
        sector++;
1000fd0c:	e0bff717 	ldw	r2,-36(fp)
1000fd10:	10800044 	addi	r2,r2,1
1000fd14:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
1000fd18:	008400b4 	movhi	r2,4098
1000fd1c:	10a0f104 	addi	r2,r2,-31804
1000fd20:	10c01217 	ldw	r3,72(r2)
1000fd24:	e0bff717 	ldw	r2,-36(fp)
1000fd28:	18bfdc1e 	bne	r3,r2,1000fc9c <__alt_data_end+0xf800fc9c>
1000fd2c:	00000106 	br	1000fd34 <find_first_empty_cluster+0x17c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
1000fd30:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
1000fd34:	e0bff90f 	ldh	r2,-28(fp)
1000fd38:	1000081e 	bne	r2,zero,1000fd5c <find_first_empty_cluster+0x1a4>
1000fd3c:	e0bff90f 	ldh	r2,-28(fp)
1000fd40:	e0fffb17 	ldw	r3,-20(fp)
1000fd44:	18800536 	bltu	r3,r2,1000fd5c <find_first_empty_cluster+0x1a4>
    {
        *cluster_number = cluster_index;
1000fd48:	e0bfff17 	ldw	r2,-4(fp)
1000fd4c:	e0fff817 	ldw	r3,-32(fp)
1000fd50:	10c00015 	stw	r3,0(r2)
		result = true;
1000fd54:	00800044 	movi	r2,1
1000fd58:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
1000fd5c:	e0bffa17 	ldw	r2,-24(fp)
}
1000fd60:	e037883a 	mov	sp,fp
1000fd64:	dfc00117 	ldw	ra,4(sp)
1000fd68:	df000017 	ldw	fp,0(sp)
1000fd6c:	dec00204 	addi	sp,sp,8
1000fd70:	f800283a 	ret

1000fd74 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
1000fd74:	defff604 	addi	sp,sp,-40
1000fd78:	dfc00915 	stw	ra,36(sp)
1000fd7c:	df000815 	stw	fp,32(sp)
1000fd80:	df000804 	addi	fp,sp,32
1000fd84:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
1000fd88:	00bfffc4 	movi	r2,-1
1000fd8c:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
1000fd90:	e0bfff17 	ldw	r2,-4(fp)
1000fd94:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
1000fd98:	e0bff917 	ldw	r2,-28(fp)
1000fd9c:	10ffff84 	addi	r3,r2,-2
1000fda0:	008400b4 	movhi	r2,4098
1000fda4:	10a0f104 	addi	r2,r2,-31804
1000fda8:	10800383 	ldbu	r2,14(r2)
1000fdac:	10803fcc 	andi	r2,r2,255
1000fdb0:	1885383a 	mul	r2,r3,r2
1000fdb4:	1007883a 	mov	r3,r2
1000fdb8:	008400b4 	movhi	r2,4098
1000fdbc:	10a0f104 	addi	r2,r2,-31804
1000fdc0:	10801417 	ldw	r2,80(r2)
1000fdc4:	1885883a 	add	r2,r3,r2
1000fdc8:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1000fdcc:	e03ffa15 	stw	zero,-24(fp)
1000fdd0:	00002c06 	br	1000fe84 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
1000fdd4:	e0fffa17 	ldw	r3,-24(fp)
1000fdd8:	e0bffc17 	ldw	r2,-16(fp)
1000fddc:	1885883a 	add	r2,r3,r2
1000fde0:	d0e70017 	ldw	r3,-25600(gp)
1000fde4:	180b883a 	mov	r5,r3
1000fde8:	1009883a 	mov	r4,r2
1000fdec:	000dad40 	call	1000dad4 <Read_Sector_Data>
1000fdf0:	10002b26 	beq	r2,zero,1000fea0 <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
1000fdf4:	e03ffb15 	stw	zero,-20(fp)
1000fdf8:	00001c06 	br	1000fe6c <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
1000fdfc:	e0bffb17 	ldw	r2,-20(fp)
1000fe00:	1004917a 	slli	r2,r2,5
1000fe04:	1007883a 	mov	r3,r2
1000fe08:	d0a70217 	ldw	r2,-25592(gp)
1000fe0c:	10800a17 	ldw	r2,40(r2)
1000fe10:	1885883a 	add	r2,r3,r2
1000fe14:	10800023 	ldbuio	r2,0(r2)
1000fe18:	10803fcc 	andi	r2,r2,255
1000fe1c:	10803fcc 	andi	r2,r2,255
1000fe20:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
1000fe24:	e0bffd0b 	ldhu	r2,-12(fp)
1000fe28:	10803960 	cmpeqi	r2,r2,229
1000fe2c:	1000021e 	bne	r2,zero,1000fe38 <find_first_empty_record_in_a_subdirectory+0xc4>
1000fe30:	e0bffd0b 	ldhu	r2,-12(fp)
1000fe34:	10000a1e 	bne	r2,zero,1000fe60 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
1000fe38:	e0bffa17 	ldw	r2,-24(fp)
1000fe3c:	1006913a 	slli	r3,r2,4
1000fe40:	e0bffb17 	ldw	r2,-20(fp)
1000fe44:	1885883a 	add	r2,r3,r2
1000fe48:	1006943a 	slli	r3,r2,16
1000fe4c:	e0bff917 	ldw	r2,-28(fp)
1000fe50:	1884b03a 	or	r2,r3,r2
1000fe54:	e0bff815 	stw	r2,-32(fp)
                        return result;
1000fe58:	e0bff817 	ldw	r2,-32(fp)
1000fe5c:	00005306 	br	1000ffac <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
1000fe60:	e0bffb17 	ldw	r2,-20(fp)
1000fe64:	10800044 	addi	r2,r2,1
1000fe68:	e0bffb15 	stw	r2,-20(fp)
1000fe6c:	e0bffb17 	ldw	r2,-20(fp)
1000fe70:	10800410 	cmplti	r2,r2,16
1000fe74:	103fe11e 	bne	r2,zero,1000fdfc <__alt_data_end+0xf800fdfc>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1000fe78:	e0bffa17 	ldw	r2,-24(fp)
1000fe7c:	10800044 	addi	r2,r2,1
1000fe80:	e0bffa15 	stw	r2,-24(fp)
1000fe84:	008400b4 	movhi	r2,4098
1000fe88:	10a0f104 	addi	r2,r2,-31804
1000fe8c:	10800383 	ldbu	r2,14(r2)
1000fe90:	10803fcc 	andi	r2,r2,255
1000fe94:	e0fffa17 	ldw	r3,-24(fp)
1000fe98:	18bfce16 	blt	r3,r2,1000fdd4 <__alt_data_end+0xf800fdd4>
1000fe9c:	00000106 	br	1000fea4 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
1000fea0:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
1000fea4:	e0bff817 	ldw	r2,-32(fp)
1000fea8:	1000390e 	bge	r2,zero,1000ff90 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
1000feac:	e0bff917 	ldw	r2,-28(fp)
1000feb0:	e0fffd84 	addi	r3,fp,-10
1000feb4:	180b883a 	mov	r5,r3
1000feb8:	1009883a 	mov	r4,r2
1000febc:	000dbac0 	call	1000dbac <get_cluster_flag>
1000fec0:	10003126 	beq	r2,zero,1000ff88 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
1000fec4:	e0bffd8b 	ldhu	r2,-10(fp)
1000fec8:	10bfffcc 	andi	r2,r2,65535
1000fecc:	10fffe0c 	andi	r3,r2,65528
1000fed0:	00bffe14 	movui	r2,65528
1000fed4:	18802e1e 	bne	r3,r2,1000ff90 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
1000fed8:	e0bffe04 	addi	r2,fp,-8
1000fedc:	1009883a 	mov	r4,r2
1000fee0:	000fbb80 	call	1000fbb8 <find_first_empty_cluster>
1000fee4:	10002326 	beq	r2,zero,1000ff74 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
1000fee8:	e0bff917 	ldw	r2,-28(fp)
1000feec:	e0fffe17 	ldw	r3,-8(fp)
1000fef0:	18ffffcc 	andi	r3,r3,65535
1000fef4:	18e0001c 	xori	r3,r3,32768
1000fef8:	18e00004 	addi	r3,r3,-32768
1000fefc:	01800044 	movi	r6,1
1000ff00:	180b883a 	mov	r5,r3
1000ff04:	1009883a 	mov	r4,r2
1000ff08:	000dc600 	call	1000dc60 <mark_cluster>
1000ff0c:	10001926 	beq	r2,zero,1000ff74 <find_first_empty_record_in_a_subdirectory+0x200>
1000ff10:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
1000ff14:	01800044 	movi	r6,1
1000ff18:	017fffc4 	movi	r5,-1
1000ff1c:	1009883a 	mov	r4,r2
1000ff20:	000dc600 	call	1000dc60 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
1000ff24:	10001326 	beq	r2,zero,1000ff74 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
1000ff28:	e0bff917 	ldw	r2,-28(fp)
1000ff2c:	e0fffe17 	ldw	r3,-8(fp)
1000ff30:	18ffffcc 	andi	r3,r3,65535
1000ff34:	18e0001c 	xori	r3,r3,32768
1000ff38:	18e00004 	addi	r3,r3,-32768
1000ff3c:	000d883a 	mov	r6,zero
1000ff40:	180b883a 	mov	r5,r3
1000ff44:	1009883a 	mov	r4,r2
1000ff48:	000dc600 	call	1000dc60 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
1000ff4c:	10000926 	beq	r2,zero,1000ff74 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
1000ff50:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
1000ff54:	000d883a 	mov	r6,zero
1000ff58:	017fffc4 	movi	r5,-1
1000ff5c:	1009883a 	mov	r4,r2
1000ff60:	000dc600 	call	1000dc60 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
1000ff64:	10000326 	beq	r2,zero,1000ff74 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
1000ff68:	000da880 	call	1000da88 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
1000ff6c:	e0bffe17 	ldw	r2,-8(fp)
1000ff70:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
1000ff74:	e0bffd8b 	ldhu	r2,-10(fp)
1000ff78:	10bfffcc 	andi	r2,r2,65535
1000ff7c:	10bffe0c 	andi	r2,r2,65528
1000ff80:	e0bff915 	stw	r2,-28(fp)
1000ff84:	00000206 	br	1000ff90 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
1000ff88:	00bfffc4 	movi	r2,-1
1000ff8c:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
1000ff90:	e0bff917 	ldw	r2,-28(fp)
1000ff94:	00fffdd4 	movui	r3,65527
1000ff98:	18800316 	blt	r3,r2,1000ffa8 <find_first_empty_record_in_a_subdirectory+0x234>
1000ff9c:	e0bff817 	ldw	r2,-32(fp)
1000ffa0:	10bfffe0 	cmpeqi	r2,r2,-1
1000ffa4:	103f7c1e 	bne	r2,zero,1000fd98 <__alt_data_end+0xf800fd98>
    return result; 
1000ffa8:	e0bff817 	ldw	r2,-32(fp)
}
1000ffac:	e037883a 	mov	sp,fp
1000ffb0:	dfc00117 	ldw	ra,4(sp)
1000ffb4:	df000017 	ldw	fp,0(sp)
1000ffb8:	dec00204 	addi	sp,sp,8
1000ffbc:	f800283a 	ret

1000ffc0 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
1000ffc0:	defff904 	addi	sp,sp,-28
1000ffc4:	dfc00615 	stw	ra,24(sp)
1000ffc8:	df000515 	stw	fp,20(sp)
1000ffcc:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
1000ffd0:	008400b4 	movhi	r2,4098
1000ffd4:	10a0f104 	addi	r2,r2,-31804
1000ffd8:	1080050b 	ldhu	r2,20(r2)
1000ffdc:	10bfffcc 	andi	r2,r2,65535
1000ffe0:	1006917a 	slli	r3,r2,5
1000ffe4:	008400b4 	movhi	r2,4098
1000ffe8:	10a0f104 	addi	r2,r2,-31804
1000ffec:	1080030b 	ldhu	r2,12(r2)
1000fff0:	10bfffcc 	andi	r2,r2,65535
1000fff4:	100b883a 	mov	r5,r2
1000fff8:	1809883a 	mov	r4,r3
1000fffc:	000a5d40 	call	1000a5d4 <__divsi3>
10010000:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
10010004:	00bfffc4 	movi	r2,-1
10010008:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1001000c:	e03ffb15 	stw	zero,-20(fp)
10010010:	00002d06 	br	100100c8 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
10010014:	008400b4 	movhi	r2,4098
10010018:	10a0f104 	addi	r2,r2,-31804
1001001c:	10c01317 	ldw	r3,76(r2)
10010020:	e0bffb17 	ldw	r2,-20(fp)
10010024:	1885883a 	add	r2,r3,r2
10010028:	1007883a 	mov	r3,r2
1001002c:	d0a70017 	ldw	r2,-25600(gp)
10010030:	100b883a 	mov	r5,r2
10010034:	1809883a 	mov	r4,r3
10010038:	000dad40 	call	1000dad4 <Read_Sector_Data>
1001003c:	10002626 	beq	r2,zero,100100d8 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
10010040:	e03ffc15 	stw	zero,-16(fp)
10010044:	00001a06 	br	100100b0 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
10010048:	e0bffc17 	ldw	r2,-16(fp)
1001004c:	1004917a 	slli	r2,r2,5
10010050:	1007883a 	mov	r3,r2
10010054:	d0a70217 	ldw	r2,-25592(gp)
10010058:	10800a17 	ldw	r2,40(r2)
1001005c:	1885883a 	add	r2,r3,r2
10010060:	10800023 	ldbuio	r2,0(r2)
10010064:	10803fcc 	andi	r2,r2,255
10010068:	10803fcc 	andi	r2,r2,255
1001006c:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
10010070:	e0bfff0b 	ldhu	r2,-4(fp)
10010074:	10803960 	cmpeqi	r2,r2,229
10010078:	1000021e 	bne	r2,zero,10010084 <find_first_empty_record_in_root_directory+0xc4>
1001007c:	e0bfff0b 	ldhu	r2,-4(fp)
10010080:	1000081e 	bne	r2,zero,100100a4 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
10010084:	e0bffb17 	ldw	r2,-20(fp)
10010088:	1006913a 	slli	r3,r2,4
1001008c:	e0bffc17 	ldw	r2,-16(fp)
10010090:	1885883a 	add	r2,r3,r2
10010094:	1004943a 	slli	r2,r2,16
10010098:	e0bffe15 	stw	r2,-8(fp)
                    return result;
1001009c:	e0bffe17 	ldw	r2,-8(fp)
100100a0:	00000f06 	br	100100e0 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
100100a4:	e0bffc17 	ldw	r2,-16(fp)
100100a8:	10800044 	addi	r2,r2,1
100100ac:	e0bffc15 	stw	r2,-16(fp)
100100b0:	e0bffc17 	ldw	r2,-16(fp)
100100b4:	10800410 	cmplti	r2,r2,16
100100b8:	103fe31e 	bne	r2,zero,10010048 <__alt_data_end+0xf8010048>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
100100bc:	e0bffb17 	ldw	r2,-20(fp)
100100c0:	10800044 	addi	r2,r2,1
100100c4:	e0bffb15 	stw	r2,-20(fp)
100100c8:	e0fffb17 	ldw	r3,-20(fp)
100100cc:	e0bffd17 	ldw	r2,-12(fp)
100100d0:	18bfd016 	blt	r3,r2,10010014 <__alt_data_end+0xf8010014>
100100d4:	00000106 	br	100100dc <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
100100d8:	0001883a 	nop
        }
    }
    return result;
100100dc:	e0bffe17 	ldw	r2,-8(fp)
}
100100e0:	e037883a 	mov	sp,fp
100100e4:	dfc00117 	ldw	ra,4(sp)
100100e8:	df000017 	ldw	fp,0(sp)
100100ec:	dec00204 	addi	sp,sp,8
100100f0:	f800283a 	ret

100100f4 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
100100f4:	defffa04 	addi	sp,sp,-24
100100f8:	df000515 	stw	fp,20(sp)
100100fc:	df000504 	addi	fp,sp,20
10010100:	e13ffd15 	stw	r4,-12(fp)
10010104:	e17ffe15 	stw	r5,-8(fp)
10010108:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
1001010c:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
10010110:	e03ffb15 	stw	zero,-20(fp)
10010114:	00002506 	br	100101ac <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
10010118:	e0bffc17 	ldw	r2,-16(fp)
1001011c:	e0fffd17 	ldw	r3,-12(fp)
10010120:	1885883a 	add	r2,r3,r2
10010124:	10800003 	ldbu	r2,0(r2)
10010128:	10803fcc 	andi	r2,r2,255
1001012c:	1080201c 	xori	r2,r2,128
10010130:	10bfe004 	addi	r2,r2,-128
10010134:	10800ba0 	cmpeqi	r2,r2,46
10010138:	1000141e 	bne	r2,zero,1001018c <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
1001013c:	e0bffb17 	ldw	r2,-20(fp)
10010140:	e0fffe17 	ldw	r3,-8(fp)
10010144:	1885883a 	add	r2,r3,r2
10010148:	e0fffc17 	ldw	r3,-16(fp)
1001014c:	e13ffd17 	ldw	r4,-12(fp)
10010150:	20c7883a 	add	r3,r4,r3
10010154:	18c00003 	ldbu	r3,0(r3)
10010158:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
1001015c:	e0bffc17 	ldw	r2,-16(fp)
10010160:	e0fffd17 	ldw	r3,-12(fp)
10010164:	1885883a 	add	r2,r3,r2
10010168:	10800003 	ldbu	r2,0(r2)
1001016c:	10803fcc 	andi	r2,r2,255
10010170:	1080201c 	xori	r2,r2,128
10010174:	10bfe004 	addi	r2,r2,-128
10010178:	10000926 	beq	r2,zero,100101a0 <convert_filename_to_name_extension+0xac>
1001017c:	e0bffc17 	ldw	r2,-16(fp)
10010180:	10800044 	addi	r2,r2,1
10010184:	e0bffc15 	stw	r2,-16(fp)
10010188:	00000506 	br	100101a0 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
1001018c:	e0bffb17 	ldw	r2,-20(fp)
10010190:	e0fffe17 	ldw	r3,-8(fp)
10010194:	1885883a 	add	r2,r3,r2
10010198:	00c00804 	movi	r3,32
1001019c:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
100101a0:	e0bffb17 	ldw	r2,-20(fp)
100101a4:	10800044 	addi	r2,r2,1
100101a8:	e0bffb15 	stw	r2,-20(fp)
100101ac:	e0bffb17 	ldw	r2,-20(fp)
100101b0:	10800210 	cmplti	r2,r2,8
100101b4:	103fd81e 	bne	r2,zero,10010118 <__alt_data_end+0xf8010118>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
100101b8:	e0bffc17 	ldw	r2,-16(fp)
100101bc:	e0fffd17 	ldw	r3,-12(fp)
100101c0:	1885883a 	add	r2,r3,r2
100101c4:	10800003 	ldbu	r2,0(r2)
100101c8:	10803fcc 	andi	r2,r2,255
100101cc:	1080201c 	xori	r2,r2,128
100101d0:	10bfe004 	addi	r2,r2,-128
100101d4:	10800b98 	cmpnei	r2,r2,46
100101d8:	1000031e 	bne	r2,zero,100101e8 <convert_filename_to_name_extension+0xf4>
100101dc:	e0bffc17 	ldw	r2,-16(fp)
100101e0:	10800044 	addi	r2,r2,1
100101e4:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
100101e8:	e03ffb15 	stw	zero,-20(fp)
100101ec:	00001c06 	br	10010260 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
100101f0:	e0bffc17 	ldw	r2,-16(fp)
100101f4:	e0fffd17 	ldw	r3,-12(fp)
100101f8:	1885883a 	add	r2,r3,r2
100101fc:	10800003 	ldbu	r2,0(r2)
10010200:	10803fcc 	andi	r2,r2,255
10010204:	1080201c 	xori	r2,r2,128
10010208:	10bfe004 	addi	r2,r2,-128
1001020c:	10000c26 	beq	r2,zero,10010240 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
10010210:	e0bffb17 	ldw	r2,-20(fp)
10010214:	e0ffff17 	ldw	r3,-4(fp)
10010218:	1885883a 	add	r2,r3,r2
1001021c:	e0fffc17 	ldw	r3,-16(fp)
10010220:	e13ffd17 	ldw	r4,-12(fp)
10010224:	20c7883a 	add	r3,r4,r3
10010228:	18c00003 	ldbu	r3,0(r3)
1001022c:	10c00005 	stb	r3,0(r2)
            local++;
10010230:	e0bffc17 	ldw	r2,-16(fp)
10010234:	10800044 	addi	r2,r2,1
10010238:	e0bffc15 	stw	r2,-16(fp)
1001023c:	00000506 	br	10010254 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
10010240:	e0bffb17 	ldw	r2,-20(fp)
10010244:	e0ffff17 	ldw	r3,-4(fp)
10010248:	1885883a 	add	r2,r3,r2
1001024c:	00c00804 	movi	r3,32
10010250:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
10010254:	e0bffb17 	ldw	r2,-20(fp)
10010258:	10800044 	addi	r2,r2,1
1001025c:	e0bffb15 	stw	r2,-20(fp)
10010260:	e0bffb17 	ldw	r2,-20(fp)
10010264:	108000d0 	cmplti	r2,r2,3
10010268:	103fe11e 	bne	r2,zero,100101f0 <__alt_data_end+0xf80101f0>
        {
            extension[counter] = ' ';
        }
    }

}
1001026c:	0001883a 	nop
10010270:	e037883a 	mov	sp,fp
10010274:	df000017 	ldw	fp,0(sp)
10010278:	dec00104 	addi	sp,sp,4
1001027c:	f800283a 	ret

10010280 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
10010280:	defff504 	addi	sp,sp,-44
10010284:	dfc00a15 	stw	ra,40(sp)
10010288:	df000915 	stw	fp,36(sp)
1001028c:	df000904 	addi	fp,sp,36
10010290:	e13ffd15 	stw	r4,-12(fp)
10010294:	e17ffe15 	stw	r5,-8(fp)
10010298:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
1001029c:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
100102a0:	e0bffc04 	addi	r2,fp,-16
100102a4:	1009883a 	mov	r4,r2
100102a8:	000fbb80 	call	1000fbb8 <find_first_empty_cluster>
100102ac:	1000a026 	beq	r2,zero,10010530 <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
100102b0:	e0bfff17 	ldw	r2,-4(fp)
100102b4:	10800a17 	ldw	r2,40(r2)
100102b8:	1000031e 	bne	r2,zero,100102c8 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
100102bc:	000ffc00 	call	1000ffc0 <find_first_empty_record_in_root_directory>
100102c0:	e0bff815 	stw	r2,-32(fp)
100102c4:	00000606 	br	100102e0 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
100102c8:	e0bfff17 	ldw	r2,-4(fp)
100102cc:	1080058b 	ldhu	r2,22(r2)
100102d0:	10bfffcc 	andi	r2,r2,65535
100102d4:	1009883a 	mov	r4,r2
100102d8:	000fd740 	call	1000fd74 <find_first_empty_record_in_a_subdirectory>
100102dc:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
100102e0:	e0bff817 	ldw	r2,-32(fp)
100102e4:	10009216 	blt	r2,zero,10010530 <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
100102e8:	e13ffd17 	ldw	r4,-12(fp)
100102ec:	000eea80 	call	1000eea8 <get_dir_divider_location>
100102f0:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
100102f4:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
100102f8:	00000b06 	br	10010328 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
100102fc:	e0fffa17 	ldw	r3,-24(fp)
10010300:	e0bff917 	ldw	r2,-28(fp)
10010304:	1885883a 	add	r2,r3,r2
10010308:	10800044 	addi	r2,r2,1
1001030c:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
10010310:	e0bffa17 	ldw	r2,-24(fp)
10010314:	e0fffd17 	ldw	r3,-12(fp)
10010318:	1885883a 	add	r2,r3,r2
1001031c:	1009883a 	mov	r4,r2
10010320:	000eea80 	call	1000eea8 <get_dir_divider_location>
10010324:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
10010328:	e0bff917 	ldw	r2,-28(fp)
1001032c:	00bff316 	blt	zero,r2,100102fc <__alt_data_end+0xf80102fc>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
10010330:	e0bffa17 	ldw	r2,-24(fp)
10010334:	e0fffd17 	ldw	r3,-12(fp)
10010338:	1887883a 	add	r3,r3,r2
1001033c:	e13ffe17 	ldw	r4,-8(fp)
10010340:	e0bffe17 	ldw	r2,-8(fp)
10010344:	10800204 	addi	r2,r2,8
10010348:	100d883a 	mov	r6,r2
1001034c:	200b883a 	mov	r5,r4
10010350:	1809883a 	mov	r4,r3
10010354:	00100f40 	call	100100f4 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
10010358:	e0bffe17 	ldw	r2,-8(fp)
1001035c:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
10010360:	e0bffe17 	ldw	r2,-8(fp)
10010364:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
10010368:	e0bffe17 	ldw	r2,-8(fp)
1001036c:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
10010370:	e0bffe17 	ldw	r2,-8(fp)
10010374:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
10010378:	e0bffe17 	ldw	r2,-8(fp)
1001037c:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
10010380:	e0bffe17 	ldw	r2,-8(fp)
10010384:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
10010388:	e0bffc17 	ldw	r2,-16(fp)
1001038c:	1007883a 	mov	r3,r2
10010390:	e0bffe17 	ldw	r2,-8(fp)
10010394:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
10010398:	e0bffe17 	ldw	r2,-8(fp)
1001039c:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
100103a0:	e0fffc17 	ldw	r3,-16(fp)
100103a4:	e0bffe17 	ldw	r2,-8(fp)
100103a8:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
100103ac:	e0bffe17 	ldw	r2,-8(fp)
100103b0:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
100103b4:	e0bffe17 	ldw	r2,-8(fp)
100103b8:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
100103bc:	e0bff817 	ldw	r2,-32(fp)
100103c0:	10ffffcc 	andi	r3,r2,65535
100103c4:	e0bffe17 	ldw	r2,-8(fp)
100103c8:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
100103cc:	e0bff817 	ldw	r2,-32(fp)
100103d0:	1004d43a 	srli	r2,r2,16
100103d4:	1000010e 	bge	r2,zero,100103dc <create_file+0x15c>
100103d8:	108003c4 	addi	r2,r2,15
100103dc:	1005d13a 	srai	r2,r2,4
100103e0:	1007883a 	mov	r3,r2
100103e4:	e0bffe17 	ldw	r2,-8(fp)
100103e8:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
100103ec:	e0bff817 	ldw	r2,-32(fp)
100103f0:	1004d43a 	srli	r2,r2,16
100103f4:	1007883a 	mov	r3,r2
100103f8:	00a00034 	movhi	r2,32768
100103fc:	108003c4 	addi	r2,r2,15
10010400:	1884703a 	and	r2,r3,r2
10010404:	1000040e 	bge	r2,zero,10010418 <create_file+0x198>
10010408:	10bfffc4 	addi	r2,r2,-1
1001040c:	00fffc04 	movi	r3,-16
10010410:	10c4b03a 	or	r2,r2,r3
10010414:	10800044 	addi	r2,r2,1
10010418:	1004917a 	slli	r2,r2,5
1001041c:	1007883a 	mov	r3,r2
10010420:	e0bffe17 	ldw	r2,-8(fp)
10010424:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
10010428:	e0bfff17 	ldw	r2,-4(fp)
1001042c:	1080058b 	ldhu	r2,22(r2)
10010430:	10ffffcc 	andi	r3,r2,65535
10010434:	e0bffe17 	ldw	r2,-8(fp)
10010438:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
1001043c:	e0bffe17 	ldw	r2,-8(fp)
10010440:	00c00044 	movi	r3,1
10010444:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
10010448:	e0bffe17 	ldw	r2,-8(fp)
1001044c:	00c00044 	movi	r3,1
10010450:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
10010454:	e0bffe17 	ldw	r2,-8(fp)
10010458:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
1001045c:	1000071e 	bne	r2,zero,1001047c <create_file+0x1fc>
10010460:	008400b4 	movhi	r2,4098
10010464:	10a0f104 	addi	r2,r2,-31804
10010468:	10c01317 	ldw	r3,76(r2)
1001046c:	e0bffe17 	ldw	r2,-8(fp)
10010470:	10800b17 	ldw	r2,44(r2)
10010474:	1885883a 	add	r2,r3,r2
10010478:	00000f06 	br	100104b8 <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
1001047c:	008400b4 	movhi	r2,4098
10010480:	10a0f104 	addi	r2,r2,-31804
10010484:	10c01417 	ldw	r3,80(r2)
10010488:	e0bffe17 	ldw	r2,-8(fp)
1001048c:	10800a17 	ldw	r2,40(r2)
10010490:	113fff84 	addi	r4,r2,-2
10010494:	008400b4 	movhi	r2,4098
10010498:	10a0f104 	addi	r2,r2,-31804
1001049c:	10800383 	ldbu	r2,14(r2)
100104a0:	10803fcc 	andi	r2,r2,255
100104a4:	2085383a 	mul	r2,r4,r2
100104a8:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
100104ac:	e0bffe17 	ldw	r2,-8(fp)
100104b0:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
100104b4:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
100104b8:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
100104bc:	e0bffb17 	ldw	r2,-20(fp)
100104c0:	d0e70017 	ldw	r3,-25600(gp)
100104c4:	180b883a 	mov	r5,r3
100104c8:	1009883a 	mov	r4,r2
100104cc:	000dad40 	call	1000dad4 <Read_Sector_Data>
100104d0:	10001726 	beq	r2,zero,10010530 <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
100104d4:	e0bffe17 	ldw	r2,-8(fp)
100104d8:	10800c0b 	ldhu	r2,48(r2)
100104dc:	10bfffcc 	andi	r2,r2,65535
100104e0:	10a0001c 	xori	r2,r2,32768
100104e4:	10a00004 	addi	r2,r2,-32768
100104e8:	e17ffe17 	ldw	r5,-8(fp)
100104ec:	1009883a 	mov	r4,r2
100104f0:	000e1600 	call	1000e160 <Write_File_Record_At_Offset>
100104f4:	10000e26 	beq	r2,zero,10010530 <create_file+0x2b0>
                {
                    Save_Modified_Sector();
100104f8:	000da880 	call	1000da88 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
100104fc:	e0bffc17 	ldw	r2,-16(fp)
10010500:	01800044 	movi	r6,1
10010504:	017fffc4 	movi	r5,-1
10010508:	1009883a 	mov	r4,r2
1001050c:	000dc600 	call	1000dc60 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
10010510:	e0bffc17 	ldw	r2,-16(fp)
10010514:	000d883a 	mov	r6,zero
10010518:	017fffc4 	movi	r5,-1
1001051c:	1009883a 	mov	r4,r2
10010520:	000dc600 	call	1000dc60 <mark_cluster>
10010524:	10000226 	beq	r2,zero,10010530 <create_file+0x2b0>
                    {
                        result = true;
10010528:	00800044 	movi	r2,1
1001052c:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
10010530:	e0bff717 	ldw	r2,-36(fp)
}
10010534:	e037883a 	mov	sp,fp
10010538:	dfc00117 	ldw	ra,4(sp)
1001053c:	df000017 	ldw	fp,0(sp)
10010540:	dec00204 	addi	sp,sp,8
10010544:	f800283a 	ret

10010548 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
10010548:	defffb04 	addi	sp,sp,-20
1001054c:	df000415 	stw	fp,16(sp)
10010550:	df000404 	addi	fp,sp,16
10010554:	e13ffe15 	stw	r4,-8(fp)
10010558:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
1001055c:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
10010560:	e03ffc15 	stw	zero,-16(fp)
10010564:	00001506 	br	100105bc <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
10010568:	e0fffe17 	ldw	r3,-8(fp)
1001056c:	e0bffc17 	ldw	r2,-16(fp)
10010570:	1885883a 	add	r2,r3,r2
10010574:	10800003 	ldbu	r2,0(r2)
10010578:	10803fcc 	andi	r2,r2,255
1001057c:	10800820 	cmpeqi	r2,r2,32
10010580:	10000b1e 	bne	r2,zero,100105b0 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
10010584:	e0bffd17 	ldw	r2,-12(fp)
10010588:	e0ffff17 	ldw	r3,-4(fp)
1001058c:	1885883a 	add	r2,r3,r2
10010590:	e13ffe17 	ldw	r4,-8(fp)
10010594:	e0fffc17 	ldw	r3,-16(fp)
10010598:	20c7883a 	add	r3,r4,r3
1001059c:	18c00003 	ldbu	r3,0(r3)
100105a0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
100105a4:	e0bffd17 	ldw	r2,-12(fp)
100105a8:	10800044 	addi	r2,r2,1
100105ac:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
100105b0:	e0bffc17 	ldw	r2,-16(fp)
100105b4:	10800044 	addi	r2,r2,1
100105b8:	e0bffc15 	stw	r2,-16(fp)
100105bc:	e0bffc17 	ldw	r2,-16(fp)
100105c0:	10800210 	cmplti	r2,r2,8
100105c4:	103fe81e 	bne	r2,zero,10010568 <__alt_data_end+0xf8010568>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
100105c8:	e0bffe17 	ldw	r2,-8(fp)
100105cc:	10800203 	ldbu	r2,8(r2)
100105d0:	10803fcc 	andi	r2,r2,255
100105d4:	10800820 	cmpeqi	r2,r2,32
100105d8:	1000241e 	bne	r2,zero,1001066c <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
100105dc:	e0bffd17 	ldw	r2,-12(fp)
100105e0:	e0ffff17 	ldw	r3,-4(fp)
100105e4:	1885883a 	add	r2,r3,r2
100105e8:	00c00b84 	movi	r3,46
100105ec:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
100105f0:	e0bffd17 	ldw	r2,-12(fp)
100105f4:	10800044 	addi	r2,r2,1
100105f8:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
100105fc:	e03ffc15 	stw	zero,-16(fp)
10010600:	00001706 	br	10010660 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
10010604:	e0fffe17 	ldw	r3,-8(fp)
10010608:	e0bffc17 	ldw	r2,-16(fp)
1001060c:	1885883a 	add	r2,r3,r2
10010610:	10800204 	addi	r2,r2,8
10010614:	10800003 	ldbu	r2,0(r2)
10010618:	10803fcc 	andi	r2,r2,255
1001061c:	10800820 	cmpeqi	r2,r2,32
10010620:	10000c1e 	bne	r2,zero,10010654 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
10010624:	e0bffd17 	ldw	r2,-12(fp)
10010628:	e0ffff17 	ldw	r3,-4(fp)
1001062c:	1885883a 	add	r2,r3,r2
10010630:	e13ffe17 	ldw	r4,-8(fp)
10010634:	e0fffc17 	ldw	r3,-16(fp)
10010638:	20c7883a 	add	r3,r4,r3
1001063c:	18c00204 	addi	r3,r3,8
10010640:	18c00003 	ldbu	r3,0(r3)
10010644:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
10010648:	e0bffd17 	ldw	r2,-12(fp)
1001064c:	10800044 	addi	r2,r2,1
10010650:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
10010654:	e0bffc17 	ldw	r2,-16(fp)
10010658:	10800044 	addi	r2,r2,1
1001065c:	e0bffc15 	stw	r2,-16(fp)
10010660:	e0bffc17 	ldw	r2,-16(fp)
10010664:	108000d0 	cmplti	r2,r2,3
10010668:	103fe61e 	bne	r2,zero,10010604 <__alt_data_end+0xf8010604>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
1001066c:	e0bffd17 	ldw	r2,-12(fp)
10010670:	e0ffff17 	ldw	r3,-4(fp)
10010674:	1885883a 	add	r2,r3,r2
10010678:	10000005 	stb	zero,0(r2)
}
1001067c:	0001883a 	nop
10010680:	e037883a 	mov	sp,fp
10010684:	df000017 	ldw	fp,0(sp)
10010688:	dec00104 	addi	sp,sp,4
1001068c:	f800283a 	ret

10010690 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
10010690:	defffc04 	addi	sp,sp,-16
10010694:	dfc00315 	stw	ra,12(sp)
10010698:	df000215 	stw	fp,8(sp)
1001069c:	df000204 	addi	fp,sp,8
100106a0:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
100106a4:	d1600804 	addi	r5,gp,-32736
100106a8:	e13fff17 	ldw	r4,-4(fp)
100106ac:	00139300 	call	10013930 <alt_find_dev>
100106b0:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
100106b4:	e0bffe17 	ldw	r2,-8(fp)
100106b8:	10001e26 	beq	r2,zero,10010734 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
100106bc:	e0bffe17 	ldw	r2,-8(fp)
100106c0:	10800a17 	ldw	r2,40(r2)
100106c4:	10808d04 	addi	r2,r2,564
100106c8:	d0a6fa15 	stw	r2,-25624(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
100106cc:	e0bffe17 	ldw	r2,-8(fp)
100106d0:	10800a17 	ldw	r2,40(r2)
100106d4:	10808904 	addi	r2,r2,548
100106d8:	d0a6fb15 	stw	r2,-25620(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
100106dc:	e0bffe17 	ldw	r2,-8(fp)
100106e0:	10800a17 	ldw	r2,40(r2)
100106e4:	10808404 	addi	r2,r2,528
100106e8:	d0a6fc15 	stw	r2,-25616(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
100106ec:	e0bffe17 	ldw	r2,-8(fp)
100106f0:	10800a17 	ldw	r2,40(r2)
100106f4:	10808c04 	addi	r2,r2,560
100106f8:	d0a6fd15 	stw	r2,-25612(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
100106fc:	e0bffe17 	ldw	r2,-8(fp)
10010700:	10800a17 	ldw	r2,40(r2)
10010704:	10808b04 	addi	r2,r2,556
10010708:	d0a6fe15 	stw	r2,-25608(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
1001070c:	e0bffe17 	ldw	r2,-8(fp)
10010710:	10800a17 	ldw	r2,40(r2)
10010714:	d0a6ff15 	stw	r2,-25604(gp)
		device_pointer = dev;
10010718:	e0bffe17 	ldw	r2,-8(fp)
1001071c:	d0a70215 	stw	r2,-25592(gp)
		initialized = false;
10010720:	d026f815 	stw	zero,-25632(gp)
		is_sd_card_formated_as_FAT16 = false;
10010724:	d026f915 	stw	zero,-25628(gp)
		search_data.valid = false;
10010728:	008400b4 	movhi	r2,4098
1001072c:	10a0ec04 	addi	r2,r2,-31824
10010730:	10000415 	stw	zero,16(r2)
	}
	return dev;
10010734:	e0bffe17 	ldw	r2,-8(fp)
}
10010738:	e037883a 	mov	sp,fp
1001073c:	dfc00117 	ldw	ra,4(sp)
10010740:	df000017 	ldw	fp,0(sp)
10010744:	dec00204 	addi	sp,sp,8
10010748:	f800283a 	ret

1001074c <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
1001074c:	defffd04 	addi	sp,sp,-12
10010750:	df000215 	stw	fp,8(sp)
10010754:	df000204 	addi	fp,sp,8
    bool result = false;
10010758:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
1001075c:	d0a70217 	ldw	r2,-25592(gp)
10010760:	10000826 	beq	r2,zero,10010784 <alt_up_sd_card_is_Present+0x38>
10010764:	d0a6fa17 	ldw	r2,-25624(gp)
10010768:	1080002b 	ldhuio	r2,0(r2)
1001076c:	10bfffcc 	andi	r2,r2,65535
10010770:	1080008c 	andi	r2,r2,2
10010774:	10000326 	beq	r2,zero,10010784 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
10010778:	00800044 	movi	r2,1
1001077c:	e0bffe15 	stw	r2,-8(fp)
10010780:	00001e06 	br	100107fc <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
10010784:	d0a6f817 	ldw	r2,-25632(gp)
10010788:	10800058 	cmpnei	r2,r2,1
1001078c:	10001b1e 	bne	r2,zero,100107fc <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
10010790:	d026f815 	stw	zero,-25632(gp)
		search_data.valid = false;
10010794:	008400b4 	movhi	r2,4098
10010798:	10a0ec04 	addi	r2,r2,-31824
1001079c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
100107a0:	d026f915 	stw	zero,-25628(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
100107a4:	e03fff15 	stw	zero,-4(fp)
100107a8:	00001106 	br	100107f0 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
100107ac:	008400b4 	movhi	r2,4098
100107b0:	10a10604 	addi	r2,r2,-31720
100107b4:	e0ffff17 	ldw	r3,-4(fp)
100107b8:	180691ba 	slli	r3,r3,6
100107bc:	10c5883a 	add	r2,r2,r3
100107c0:	10800f04 	addi	r2,r2,60
100107c4:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
100107c8:	008400b4 	movhi	r2,4098
100107cc:	10a10604 	addi	r2,r2,-31720
100107d0:	e0ffff17 	ldw	r3,-4(fp)
100107d4:	180691ba 	slli	r3,r3,6
100107d8:	10c5883a 	add	r2,r2,r3
100107dc:	10800e04 	addi	r2,r2,56
100107e0:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
100107e4:	e0bfff17 	ldw	r2,-4(fp)
100107e8:	10800044 	addi	r2,r2,1
100107ec:	e0bfff15 	stw	r2,-4(fp)
100107f0:	e0bfff17 	ldw	r2,-4(fp)
100107f4:	10800510 	cmplti	r2,r2,20
100107f8:	103fec1e 	bne	r2,zero,100107ac <__alt_data_end+0xf80107ac>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
100107fc:	e0bffe17 	ldw	r2,-8(fp)
}
10010800:	e037883a 	mov	sp,fp
10010804:	df000017 	ldw	fp,0(sp)
10010808:	dec00104 	addi	sp,sp,4
1001080c:	f800283a 	ret

10010810 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
10010810:	defffd04 	addi	sp,sp,-12
10010814:	dfc00215 	stw	ra,8(sp)
10010818:	df000115 	stw	fp,4(sp)
1001081c:	df000104 	addi	fp,sp,4
	bool result = false;
10010820:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
10010824:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
10010828:	10000c26 	beq	r2,zero,1001085c <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
1001082c:	d0a6f817 	ldw	r2,-25632(gp)
10010830:	1000071e 	bne	r2,zero,10010850 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
10010834:	000ea8c0 	call	1000ea8c <Look_for_FAT16>
10010838:	d0a6f915 	stw	r2,-25628(gp)
			initialized = is_sd_card_formated_as_FAT16;
1001083c:	d0a6f917 	ldw	r2,-25628(gp)
10010840:	d0a6f815 	stw	r2,-25632(gp)
			search_data.valid = false;
10010844:	008400b4 	movhi	r2,4098
10010848:	10a0ec04 	addi	r2,r2,-31824
1001084c:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
10010850:	d0a6f917 	ldw	r2,-25628(gp)
10010854:	e0bfff15 	stw	r2,-4(fp)
10010858:	00000206 	br	10010864 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
1001085c:	d026f815 	stw	zero,-25632(gp)
		is_sd_card_formated_as_FAT16 = false;
10010860:	d026f915 	stw	zero,-25628(gp)
	}

	return result;
10010864:	e0bfff17 	ldw	r2,-4(fp)
}
10010868:	e037883a 	mov	sp,fp
1001086c:	dfc00117 	ldw	ra,4(sp)
10010870:	df000017 	ldw	fp,0(sp)
10010874:	dec00204 	addi	sp,sp,8
10010878:	f800283a 	ret

1001087c <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
1001087c:	deffea04 	addi	sp,sp,-88
10010880:	dfc01515 	stw	ra,84(sp)
10010884:	df001415 	stw	fp,80(sp)
10010888:	df001404 	addi	fp,sp,80
1001088c:	e13ffe15 	stw	r4,-8(fp)
10010890:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
10010894:	00800084 	movi	r2,2
10010898:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
1001089c:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
100108a0:	10002426 	beq	r2,zero,10010934 <alt_up_sd_card_find_first+0xb8>
100108a4:	d0a6f917 	ldw	r2,-25628(gp)
100108a8:	10002226 	beq	r2,zero,10010934 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
100108ac:	e0ffee04 	addi	r3,fp,-72
100108b0:	e0bfed04 	addi	r2,fp,-76
100108b4:	180d883a 	mov	r6,r3
100108b8:	100b883a 	mov	r5,r2
100108bc:	e13ffe17 	ldw	r4,-8(fp)
100108c0:	000f1fc0 	call	1000f1fc <get_home_directory_cluster_for_file>
100108c4:	10001926 	beq	r2,zero,1001092c <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
100108c8:	e0bfed17 	ldw	r2,-76(fp)
100108cc:	1007883a 	mov	r3,r2
100108d0:	008400b4 	movhi	r2,4098
100108d4:	10a0ec04 	addi	r2,r2,-31824
100108d8:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
100108dc:	e0bfed17 	ldw	r2,-76(fp)
100108e0:	1007883a 	mov	r3,r2
100108e4:	008400b4 	movhi	r2,4098
100108e8:	10a0ec04 	addi	r2,r2,-31824
100108ec:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
100108f0:	008400b4 	movhi	r2,4098
100108f4:	10a0ec04 	addi	r2,r2,-31824
100108f8:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
100108fc:	008400b4 	movhi	r2,4098
10010900:	10a0ec04 	addi	r2,r2,-31824
10010904:	00ffffc4 	movi	r3,-1
10010908:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
1001090c:	008400b4 	movhi	r2,4098
10010910:	10a0ec04 	addi	r2,r2,-31824
10010914:	00c00044 	movi	r3,1
10010918:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
1001091c:	e13fff17 	ldw	r4,-4(fp)
10010920:	001094c0 	call	1001094c <alt_up_sd_card_find_next>
10010924:	e0bfec0d 	sth	r2,-80(fp)
10010928:	00000206 	br	10010934 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
1001092c:	00800044 	movi	r2,1
10010930:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
10010934:	e0bfec0b 	ldhu	r2,-80(fp)
}
10010938:	e037883a 	mov	sp,fp
1001093c:	dfc00117 	ldw	ra,4(sp)
10010940:	df000017 	ldw	fp,0(sp)
10010944:	dec00204 	addi	sp,sp,8
10010948:	f800283a 	ret

1001094c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
1001094c:	deffe404 	addi	sp,sp,-112
10010950:	dfc01b15 	stw	ra,108(sp)
10010954:	df001a15 	stw	fp,104(sp)
10010958:	df001a04 	addi	fp,sp,104
1001095c:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
10010960:	00800084 	movi	r2,2
10010964:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
10010968:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
1001096c:	1000e126 	beq	r2,zero,10010cf4 <alt_up_sd_card_find_next+0x3a8>
10010970:	d0a6f917 	ldw	r2,-25628(gp)
10010974:	1000df26 	beq	r2,zero,10010cf4 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
10010978:	008400b4 	movhi	r2,4098
1001097c:	10a0ec04 	addi	r2,r2,-31824
10010980:	10800417 	ldw	r2,16(r2)
10010984:	1000d926 	beq	r2,zero,10010cec <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
10010988:	008400b4 	movhi	r2,4098
1001098c:	10a0ec04 	addi	r2,r2,-31824
10010990:	10800117 	ldw	r2,4(r2)
10010994:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
10010998:	e0bfe717 	ldw	r2,-100(fp)
1001099c:	1000581e 	bne	r2,zero,10010b00 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
100109a0:	008400b4 	movhi	r2,4098
100109a4:	10a0f104 	addi	r2,r2,-31804
100109a8:	1080050b 	ldhu	r2,20(r2)
100109ac:	10bfffcc 	andi	r2,r2,65535
100109b0:	1006917a 	slli	r3,r2,5
100109b4:	008400b4 	movhi	r2,4098
100109b8:	10a0f104 	addi	r2,r2,-31804
100109bc:	1080030b 	ldhu	r2,12(r2)
100109c0:	10bfffcc 	andi	r2,r2,65535
100109c4:	100b883a 	mov	r5,r2
100109c8:	1809883a 	mov	r4,r3
100109cc:	000a5d40 	call	1000a5d4 <__divsi3>
100109d0:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
100109d4:	008400b4 	movhi	r2,4098
100109d8:	10a0ec04 	addi	r2,r2,-31824
100109dc:	10800217 	ldw	r2,8(r2)
100109e0:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
100109e4:	008400b4 	movhi	r2,4098
100109e8:	10a0ec04 	addi	r2,r2,-31824
100109ec:	1080030b 	ldhu	r2,12(r2)
100109f0:	10bfffcc 	andi	r2,r2,65535
100109f4:	10a0001c 	xori	r2,r2,32768
100109f8:	10a00004 	addi	r2,r2,-32768
100109fc:	10800044 	addi	r2,r2,1
10010a00:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
10010a04:	00003606 	br	10010ae0 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
10010a08:	008400b4 	movhi	r2,4098
10010a0c:	10a0f104 	addi	r2,r2,-31804
10010a10:	10c01317 	ldw	r3,76(r2)
10010a14:	e0bfe817 	ldw	r2,-96(fp)
10010a18:	1885883a 	add	r2,r3,r2
10010a1c:	1007883a 	mov	r3,r2
10010a20:	d0a70017 	ldw	r2,-25600(gp)
10010a24:	100b883a 	mov	r5,r2
10010a28:	1809883a 	mov	r4,r3
10010a2c:	000dad40 	call	1000dad4 <Read_Sector_Data>
10010a30:	10002f26 	beq	r2,zero,10010af0 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
10010a34:	00002306 	br	10010ac4 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
10010a38:	e0bfe917 	ldw	r2,-92(fp)
10010a3c:	1004917a 	slli	r2,r2,5
10010a40:	e13fe817 	ldw	r4,-96(fp)
10010a44:	e0ffef04 	addi	r3,fp,-68
10010a48:	200f883a 	mov	r7,r4
10010a4c:	000d883a 	mov	r6,zero
10010a50:	180b883a 	mov	r5,r3
10010a54:	1009883a 	mov	r4,r2
10010a58:	000dee40 	call	1000dee4 <Read_File_Record_At_Offset>
10010a5c:	10001626 	beq	r2,zero,10010ab8 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
10010a60:	e0bfef03 	ldbu	r2,-68(fp)
10010a64:	10803fcc 	andi	r2,r2,255
10010a68:	10001326 	beq	r2,zero,10010ab8 <alt_up_sd_card_find_next+0x16c>
10010a6c:	e0bfef03 	ldbu	r2,-68(fp)
10010a70:	10803fcc 	andi	r2,r2,255
10010a74:	10803960 	cmpeqi	r2,r2,229
10010a78:	10000f1e 	bne	r2,zero,10010ab8 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
10010a7c:	e0bfe917 	ldw	r2,-92(fp)
10010a80:	1007883a 	mov	r3,r2
10010a84:	008400b4 	movhi	r2,4098
10010a88:	10a0ec04 	addi	r2,r2,-31824
10010a8c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
10010a90:	e0ffe817 	ldw	r3,-96(fp)
10010a94:	008400b4 	movhi	r2,4098
10010a98:	10a0ec04 	addi	r2,r2,-31824
10010a9c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
10010aa0:	e0bfef04 	addi	r2,fp,-68
10010aa4:	e17fff17 	ldw	r5,-4(fp)
10010aa8:	1009883a 	mov	r4,r2
10010aac:	00105480 	call	10010548 <copy_file_record_name_to_string>
									return 0;
10010ab0:	0005883a 	mov	r2,zero
10010ab4:	00009006 	br	10010cf8 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
10010ab8:	e0bfe917 	ldw	r2,-92(fp)
10010abc:	10800044 	addi	r2,r2,1
10010ac0:	e0bfe915 	stw	r2,-92(fp)
10010ac4:	e0bfe917 	ldw	r2,-92(fp)
10010ac8:	10800410 	cmplti	r2,r2,16
10010acc:	103fda1e 	bne	r2,zero,10010a38 <__alt_data_end+0xf8010a38>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
10010ad0:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
10010ad4:	e0bfe817 	ldw	r2,-96(fp)
10010ad8:	10800044 	addi	r2,r2,1
10010adc:	e0bfe815 	stw	r2,-96(fp)
10010ae0:	e0ffe817 	ldw	r3,-96(fp)
10010ae4:	e0bfec17 	ldw	r2,-80(fp)
10010ae8:	18bfc716 	blt	r3,r2,10010a08 <__alt_data_end+0xf8010a08>
10010aec:	00000106 	br	10010af4 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
10010af0:	0001883a 	nop
					}
				}
				result = -1;
10010af4:	00bfffc4 	movi	r2,-1
10010af8:	e0bfe60d 	sth	r2,-104(fp)
10010afc:	00007d06 	br	10010cf4 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
10010b00:	008400b4 	movhi	r2,4098
10010b04:	10a0ec04 	addi	r2,r2,-31824
10010b08:	1080030b 	ldhu	r2,12(r2)
10010b0c:	10bfffcc 	andi	r2,r2,65535
10010b10:	10a0001c 	xori	r2,r2,32768
10010b14:	10a00004 	addi	r2,r2,-32768
10010b18:	10800044 	addi	r2,r2,1
10010b1c:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
10010b20:	e0bfe717 	ldw	r2,-100(fp)
10010b24:	10ffff84 	addi	r3,r2,-2
10010b28:	008400b4 	movhi	r2,4098
10010b2c:	10a0f104 	addi	r2,r2,-31804
10010b30:	10800383 	ldbu	r2,14(r2)
10010b34:	10803fcc 	andi	r2,r2,255
10010b38:	1885383a 	mul	r2,r3,r2
10010b3c:	1007883a 	mov	r3,r2
10010b40:	008400b4 	movhi	r2,4098
10010b44:	10a0f104 	addi	r2,r2,-31804
10010b48:	10801417 	ldw	r2,80(r2)
10010b4c:	1885883a 	add	r2,r3,r2
10010b50:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
10010b54:	008400b4 	movhi	r2,4098
10010b58:	10a0ec04 	addi	r2,r2,-31824
10010b5c:	10800217 	ldw	r2,8(r2)
10010b60:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
10010b64:	00003806 	br	10010c48 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
10010b68:	e0ffeb17 	ldw	r3,-84(fp)
10010b6c:	e0bfed17 	ldw	r2,-76(fp)
10010b70:	1885883a 	add	r2,r3,r2
10010b74:	d0e70017 	ldw	r3,-25600(gp)
10010b78:	180b883a 	mov	r5,r3
10010b7c:	1009883a 	mov	r4,r2
10010b80:	000dad40 	call	1000dad4 <Read_Sector_Data>
10010b84:	10003726 	beq	r2,zero,10010c64 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
10010b88:	00002806 	br	10010c2c <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
10010b8c:	e0bfea17 	ldw	r2,-88(fp)
10010b90:	1004917a 	slli	r2,r2,5
10010b94:	e13fe717 	ldw	r4,-100(fp)
10010b98:	e17feb17 	ldw	r5,-84(fp)
10010b9c:	e0ffef04 	addi	r3,fp,-68
10010ba0:	280f883a 	mov	r7,r5
10010ba4:	200d883a 	mov	r6,r4
10010ba8:	180b883a 	mov	r5,r3
10010bac:	1009883a 	mov	r4,r2
10010bb0:	000dee40 	call	1000dee4 <Read_File_Record_At_Offset>
10010bb4:	10001a26 	beq	r2,zero,10010c20 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
10010bb8:	e0bfef03 	ldbu	r2,-68(fp)
10010bbc:	10803fcc 	andi	r2,r2,255
10010bc0:	10001726 	beq	r2,zero,10010c20 <alt_up_sd_card_find_next+0x2d4>
10010bc4:	e0bfef03 	ldbu	r2,-68(fp)
10010bc8:	10803fcc 	andi	r2,r2,255
10010bcc:	10803960 	cmpeqi	r2,r2,229
10010bd0:	1000131e 	bne	r2,zero,10010c20 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
10010bd4:	e0ffe717 	ldw	r3,-100(fp)
10010bd8:	008400b4 	movhi	r2,4098
10010bdc:	10a0ec04 	addi	r2,r2,-31824
10010be0:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
10010be4:	e0bfea17 	ldw	r2,-88(fp)
10010be8:	1007883a 	mov	r3,r2
10010bec:	008400b4 	movhi	r2,4098
10010bf0:	10a0ec04 	addi	r2,r2,-31824
10010bf4:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
10010bf8:	e0ffeb17 	ldw	r3,-84(fp)
10010bfc:	008400b4 	movhi	r2,4098
10010c00:	10a0ec04 	addi	r2,r2,-31824
10010c04:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
10010c08:	e0bfef04 	addi	r2,fp,-68
10010c0c:	e17fff17 	ldw	r5,-4(fp)
10010c10:	1009883a 	mov	r4,r2
10010c14:	00105480 	call	10010548 <copy_file_record_name_to_string>
										return 0;
10010c18:	0005883a 	mov	r2,zero
10010c1c:	00003606 	br	10010cf8 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
10010c20:	e0bfea17 	ldw	r2,-88(fp)
10010c24:	10800044 	addi	r2,r2,1
10010c28:	e0bfea15 	stw	r2,-88(fp)
10010c2c:	e0bfea17 	ldw	r2,-88(fp)
10010c30:	10800410 	cmplti	r2,r2,16
10010c34:	103fd51e 	bne	r2,zero,10010b8c <__alt_data_end+0xf8010b8c>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
10010c38:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
10010c3c:	e0bfeb17 	ldw	r2,-84(fp)
10010c40:	10800044 	addi	r2,r2,1
10010c44:	e0bfeb15 	stw	r2,-84(fp)
10010c48:	008400b4 	movhi	r2,4098
10010c4c:	10a0f104 	addi	r2,r2,-31804
10010c50:	10800383 	ldbu	r2,14(r2)
10010c54:	10803fcc 	andi	r2,r2,255
10010c58:	e0ffeb17 	ldw	r3,-84(fp)
10010c5c:	18bfc216 	blt	r3,r2,10010b68 <__alt_data_end+0xf8010b68>
10010c60:	00000106 	br	10010c68 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
10010c64:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
10010c68:	008400b4 	movhi	r2,4098
10010c6c:	10a0f104 	addi	r2,r2,-31804
10010c70:	10800383 	ldbu	r2,14(r2)
10010c74:	10803fcc 	andi	r2,r2,255
10010c78:	e0ffeb17 	ldw	r3,-84(fp)
10010c7c:	18801716 	blt	r3,r2,10010cdc <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
10010c80:	e0bfe717 	ldw	r2,-100(fp)
10010c84:	e0ffee04 	addi	r3,fp,-72
10010c88:	180b883a 	mov	r5,r3
10010c8c:	1009883a 	mov	r4,r2
10010c90:	000dbac0 	call	1000dbac <get_cluster_flag>
10010c94:	10000f26 	beq	r2,zero,10010cd4 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
10010c98:	e0bfee0b 	ldhu	r2,-72(fp)
10010c9c:	10bfffcc 	andi	r2,r2,65535
10010ca0:	10fffe0c 	andi	r3,r2,65528
10010ca4:	00bffe14 	movui	r2,65528
10010ca8:	1880051e 	bne	r3,r2,10010cc0 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
10010cac:	00bfffc4 	movi	r2,-1
10010cb0:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
10010cb4:	008400b4 	movhi	r2,4098
10010cb8:	10a0ec04 	addi	r2,r2,-31824
10010cbc:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
10010cc0:	e0bfee0b 	ldhu	r2,-72(fp)
10010cc4:	10bfffcc 	andi	r2,r2,65535
10010cc8:	10bffe0c 	andi	r2,r2,65528
10010ccc:	e0bfe715 	stw	r2,-100(fp)
10010cd0:	00000206 	br	10010cdc <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
10010cd4:	00bfffc4 	movi	r2,-1
10010cd8:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
10010cdc:	e0bfe717 	ldw	r2,-100(fp)
10010ce0:	00fffdd4 	movui	r3,65527
10010ce4:	18bf8e0e 	bge	r3,r2,10010b20 <__alt_data_end+0xf8010b20>
10010ce8:	00000206 	br	10010cf4 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
10010cec:	008000c4 	movi	r2,3
10010cf0:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
10010cf4:	e0bfe60b 	ldhu	r2,-104(fp)
}
10010cf8:	e037883a 	mov	sp,fp
10010cfc:	dfc00117 	ldw	ra,4(sp)
10010d00:	df000017 	ldw	fp,0(sp)
10010d04:	dec00204 	addi	sp,sp,8
10010d08:	f800283a 	ret

10010d0c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
10010d0c:	deffe904 	addi	sp,sp,-92
10010d10:	dfc01615 	stw	ra,88(sp)
10010d14:	df001515 	stw	fp,84(sp)
10010d18:	df001504 	addi	fp,sp,84
10010d1c:	e13ffe15 	stw	r4,-8(fp)
10010d20:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
10010d24:	00bfffc4 	movi	r2,-1
10010d28:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
10010d2c:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
10010d30:	1000cf26 	beq	r2,zero,10011070 <alt_up_sd_card_fopen+0x364>
10010d34:	d0a6f917 	ldw	r2,-25628(gp)
10010d38:	1000cd26 	beq	r2,zero,10011070 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
10010d3c:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
10010d40:	e13ffe17 	ldw	r4,-8(fp)
10010d44:	000eb780 	call	1000eb78 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
10010d48:	e13ffe17 	ldw	r4,-8(fp)
10010d4c:	000ec3c0 	call	1000ec3c <check_file_name_for_FAT16_compliance>
10010d50:	1000c726 	beq	r2,zero,10011070 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
10010d54:	e0ffee04 	addi	r3,fp,-72
10010d58:	e0bfed04 	addi	r2,fp,-76
10010d5c:	180d883a 	mov	r6,r3
10010d60:	100b883a 	mov	r5,r2
10010d64:	e13ffe17 	ldw	r4,-8(fp)
10010d68:	000f1fc0 	call	1000f1fc <get_home_directory_cluster_for_file>
10010d6c:	1000021e 	bne	r2,zero,10010d78 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
10010d70:	e0bfeb0b 	ldhu	r2,-84(fp)
10010d74:	0000bf06 	br	10011074 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
10010d78:	e03fec15 	stw	zero,-80(fp)
10010d7c:	00000e06 	br	10010db8 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
10010d80:	008400b4 	movhi	r2,4098
10010d84:	10a10604 	addi	r2,r2,-31720
10010d88:	e0ffec17 	ldw	r3,-80(fp)
10010d8c:	180691ba 	slli	r3,r3,6
10010d90:	10c5883a 	add	r2,r2,r3
10010d94:	10800f04 	addi	r2,r2,60
10010d98:	10800017 	ldw	r2,0(r2)
10010d9c:	1000031e 	bne	r2,zero,10010dac <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
10010da0:	e0bfec17 	ldw	r2,-80(fp)
10010da4:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
10010da8:	00000606 	br	10010dc4 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
10010dac:	e0bfec17 	ldw	r2,-80(fp)
10010db0:	10800044 	addi	r2,r2,1
10010db4:	e0bfec15 	stw	r2,-80(fp)
10010db8:	e0bfec17 	ldw	r2,-80(fp)
10010dbc:	10800510 	cmplti	r2,r2,20
10010dc0:	103fef1e 	bne	r2,zero,10010d80 <__alt_data_end+0xf8010d80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
10010dc4:	e0bfeb0f 	ldh	r2,-84(fp)
10010dc8:	1000a916 	blt	r2,zero,10011070 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
10010dcc:	e0bfed17 	ldw	r2,-76(fp)
10010dd0:	1009883a 	mov	r4,r2
10010dd4:	e0bfeb0f 	ldh	r2,-84(fp)
10010dd8:	100691ba 	slli	r3,r2,6
10010ddc:	008400b4 	movhi	r2,4098
10010de0:	10a10604 	addi	r2,r2,-31720
10010de4:	1885883a 	add	r2,r3,r2
10010de8:	100d883a 	mov	r6,r2
10010dec:	e17ffe17 	ldw	r5,-8(fp)
10010df0:	000f73c0 	call	1000f73c <find_file_in_directory>
10010df4:	10007b26 	beq	r2,zero,10010fe4 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
10010df8:	e0bfff17 	ldw	r2,-4(fp)
10010dfc:	10000226 	beq	r2,zero,10010e08 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
10010e00:	00bfffc4 	movi	r2,-1
10010e04:	00009b06 	br	10011074 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
10010e08:	e13feb0f 	ldh	r4,-84(fp)
10010e0c:	e0ffeb0f 	ldh	r3,-84(fp)
10010e10:	008400b4 	movhi	r2,4098
10010e14:	10a10604 	addi	r2,r2,-31720
10010e18:	180691ba 	slli	r3,r3,6
10010e1c:	10c5883a 	add	r2,r2,r3
10010e20:	10800584 	addi	r2,r2,22
10010e24:	1080000b 	ldhu	r2,0(r2)
10010e28:	10ffffcc 	andi	r3,r2,65535
10010e2c:	008400b4 	movhi	r2,4098
10010e30:	10a10604 	addi	r2,r2,-31720
10010e34:	200891ba 	slli	r4,r4,6
10010e38:	1105883a 	add	r2,r2,r4
10010e3c:	10800704 	addi	r2,r2,28
10010e40:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
10010e44:	e0ffeb0f 	ldh	r3,-84(fp)
10010e48:	008400b4 	movhi	r2,4098
10010e4c:	10a10604 	addi	r2,r2,-31720
10010e50:	180691ba 	slli	r3,r3,6
10010e54:	10c5883a 	add	r2,r2,r3
10010e58:	10800804 	addi	r2,r2,32
10010e5c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
10010e60:	e0ffeb0f 	ldh	r3,-84(fp)
10010e64:	008400b4 	movhi	r2,4098
10010e68:	10a10604 	addi	r2,r2,-31720
10010e6c:	180691ba 	slli	r3,r3,6
10010e70:	10c5883a 	add	r2,r2,r3
10010e74:	10800904 	addi	r2,r2,36
10010e78:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
10010e7c:	e0ffeb0f 	ldh	r3,-84(fp)
10010e80:	008400b4 	movhi	r2,4098
10010e84:	10a10604 	addi	r2,r2,-31720
10010e88:	180691ba 	slli	r3,r3,6
10010e8c:	10c5883a 	add	r2,r2,r3
10010e90:	10800f04 	addi	r2,r2,60
10010e94:	00c00044 	movi	r3,1
10010e98:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
10010e9c:	e0ffeb0f 	ldh	r3,-84(fp)
10010ea0:	008400b4 	movhi	r2,4098
10010ea4:	10a10604 	addi	r2,r2,-31720
10010ea8:	180691ba 	slli	r3,r3,6
10010eac:	10c5883a 	add	r2,r2,r3
10010eb0:	10800e04 	addi	r2,r2,56
10010eb4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
10010eb8:	e03fec15 	stw	zero,-80(fp)
10010ebc:	00004506 	br	10010fd4 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
10010ec0:	e0ffeb0f 	ldh	r3,-84(fp)
10010ec4:	e0bfec17 	ldw	r2,-80(fp)
10010ec8:	18803f26 	beq	r3,r2,10010fc8 <alt_up_sd_card_fopen+0x2bc>
10010ecc:	008400b4 	movhi	r2,4098
10010ed0:	10a10604 	addi	r2,r2,-31720
10010ed4:	e0ffec17 	ldw	r3,-80(fp)
10010ed8:	180691ba 	slli	r3,r3,6
10010edc:	10c5883a 	add	r2,r2,r3
10010ee0:	10800f04 	addi	r2,r2,60
10010ee4:	10800017 	ldw	r2,0(r2)
10010ee8:	10800058 	cmpnei	r2,r2,1
10010eec:	1000361e 	bne	r2,zero,10010fc8 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
10010ef0:	e0ffeb0f 	ldh	r3,-84(fp)
10010ef4:	008400b4 	movhi	r2,4098
10010ef8:	10a10604 	addi	r2,r2,-31720
10010efc:	180691ba 	slli	r3,r3,6
10010f00:	10c5883a 	add	r2,r2,r3
10010f04:	10800a04 	addi	r2,r2,40
10010f08:	10c00017 	ldw	r3,0(r2)
10010f0c:	008400b4 	movhi	r2,4098
10010f10:	10a10604 	addi	r2,r2,-31720
10010f14:	e13fec17 	ldw	r4,-80(fp)
10010f18:	200891ba 	slli	r4,r4,6
10010f1c:	1105883a 	add	r2,r2,r4
10010f20:	10800a04 	addi	r2,r2,40
10010f24:	10800017 	ldw	r2,0(r2)
10010f28:	1880271e 	bne	r3,r2,10010fc8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
10010f2c:	e0ffeb0f 	ldh	r3,-84(fp)
10010f30:	008400b4 	movhi	r2,4098
10010f34:	10a10604 	addi	r2,r2,-31720
10010f38:	180691ba 	slli	r3,r3,6
10010f3c:	10c5883a 	add	r2,r2,r3
10010f40:	10800b04 	addi	r2,r2,44
10010f44:	10c00017 	ldw	r3,0(r2)
10010f48:	008400b4 	movhi	r2,4098
10010f4c:	10a10604 	addi	r2,r2,-31720
10010f50:	e13fec17 	ldw	r4,-80(fp)
10010f54:	200891ba 	slli	r4,r4,6
10010f58:	1105883a 	add	r2,r2,r4
10010f5c:	10800b04 	addi	r2,r2,44
10010f60:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
10010f64:	1880181e 	bne	r3,r2,10010fc8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
10010f68:	e0ffeb0f 	ldh	r3,-84(fp)
10010f6c:	008400b4 	movhi	r2,4098
10010f70:	10a10604 	addi	r2,r2,-31720
10010f74:	180691ba 	slli	r3,r3,6
10010f78:	10c5883a 	add	r2,r2,r3
10010f7c:	10800c04 	addi	r2,r2,48
10010f80:	1100000b 	ldhu	r4,0(r2)
10010f84:	008400b4 	movhi	r2,4098
10010f88:	10a10604 	addi	r2,r2,-31720
10010f8c:	e0ffec17 	ldw	r3,-80(fp)
10010f90:	180691ba 	slli	r3,r3,6
10010f94:	10c5883a 	add	r2,r2,r3
10010f98:	10800c04 	addi	r2,r2,48
10010f9c:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
10010fa0:	20ffffcc 	andi	r3,r4,65535
10010fa4:	18e0001c 	xori	r3,r3,32768
10010fa8:	18e00004 	addi	r3,r3,-32768
10010fac:	10bfffcc 	andi	r2,r2,65535
10010fb0:	10a0001c 	xori	r2,r2,32768
10010fb4:	10a00004 	addi	r2,r2,-32768
10010fb8:	1880031e 	bne	r3,r2,10010fc8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
10010fbc:	00bfff84 	movi	r2,-2
10010fc0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
10010fc4:	00002a06 	br	10011070 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
10010fc8:	e0bfec17 	ldw	r2,-80(fp)
10010fcc:	10800044 	addi	r2,r2,1
10010fd0:	e0bfec15 	stw	r2,-80(fp)
10010fd4:	e0bfec17 	ldw	r2,-80(fp)
10010fd8:	10800510 	cmplti	r2,r2,20
10010fdc:	103fb81e 	bne	r2,zero,10010ec0 <__alt_data_end+0xf8010ec0>
10010fe0:	00002306 	br	10011070 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
10010fe4:	e0bfff17 	ldw	r2,-4(fp)
10010fe8:	10001f26 	beq	r2,zero,10011068 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
10010fec:	e0bfeb0f 	ldh	r2,-84(fp)
10010ff0:	100691ba 	slli	r3,r2,6
10010ff4:	008400b4 	movhi	r2,4098
10010ff8:	10a10604 	addi	r2,r2,-31720
10010ffc:	1885883a 	add	r2,r3,r2
10011000:	e0ffee04 	addi	r3,fp,-72
10011004:	180d883a 	mov	r6,r3
10011008:	100b883a 	mov	r5,r2
1001100c:	e13ffe17 	ldw	r4,-8(fp)
10011010:	00102800 	call	10010280 <create_file>
10011014:	10001126 	beq	r2,zero,1001105c <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
10011018:	e0ffeb0f 	ldh	r3,-84(fp)
1001101c:	008400b4 	movhi	r2,4098
10011020:	10a10604 	addi	r2,r2,-31720
10011024:	180691ba 	slli	r3,r3,6
10011028:	10c5883a 	add	r2,r2,r3
1001102c:	10800f04 	addi	r2,r2,60
10011030:	00c00044 	movi	r3,1
10011034:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
10011038:	e0ffeb0f 	ldh	r3,-84(fp)
1001103c:	008400b4 	movhi	r2,4098
10011040:	10a10604 	addi	r2,r2,-31720
10011044:	180691ba 	slli	r3,r3,6
10011048:	10c5883a 	add	r2,r2,r3
1001104c:	10800e04 	addi	r2,r2,56
10011050:	00c00044 	movi	r3,1
10011054:	10c00015 	stw	r3,0(r2)
10011058:	00000506 	br	10011070 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
1001105c:	00bfffc4 	movi	r2,-1
10011060:	e0bfeb0d 	sth	r2,-84(fp)
10011064:	00000206 	br	10011070 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
10011068:	00bfffc4 	movi	r2,-1
1001106c:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
10011070:	e0bfeb0b 	ldhu	r2,-84(fp)
}
10011074:	e037883a 	mov	sp,fp
10011078:	dfc00117 	ldw	ra,4(sp)
1001107c:	df000017 	ldw	fp,0(sp)
10011080:	dec00204 	addi	sp,sp,8
10011084:	f800283a 	ret

10011088 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
10011088:	defffd04 	addi	sp,sp,-12
1001108c:	df000215 	stw	fp,8(sp)
10011090:	df000204 	addi	fp,sp,8
10011094:	2007883a 	mov	r3,r4
10011098:	2805883a 	mov	r2,r5
1001109c:	e0fffe0d 	sth	r3,-8(fp)
100110a0:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
100110a4:	e0bffe0f 	ldh	r2,-8(fp)
100110a8:	10001416 	blt	r2,zero,100110fc <alt_up_sd_card_set_attributes+0x74>
100110ac:	e0bffe0f 	ldh	r2,-8(fp)
100110b0:	10800508 	cmpgei	r2,r2,20
100110b4:	1000111e 	bne	r2,zero,100110fc <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
100110b8:	e0fffe0f 	ldh	r3,-8(fp)
100110bc:	008400b4 	movhi	r2,4098
100110c0:	10a10604 	addi	r2,r2,-31720
100110c4:	180691ba 	slli	r3,r3,6
100110c8:	10c5883a 	add	r2,r2,r3
100110cc:	10800f04 	addi	r2,r2,60
100110d0:	10800017 	ldw	r2,0(r2)
100110d4:	10000926 	beq	r2,zero,100110fc <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
100110d8:	e0fffe0f 	ldh	r3,-8(fp)
100110dc:	e0bfff0b 	ldhu	r2,-4(fp)
100110e0:	1009883a 	mov	r4,r2
100110e4:	008400b4 	movhi	r2,4098
100110e8:	10a10604 	addi	r2,r2,-31720
100110ec:	180691ba 	slli	r3,r3,6
100110f0:	10c5883a 	add	r2,r2,r3
100110f4:	108002c4 	addi	r2,r2,11
100110f8:	11000005 	stb	r4,0(r2)
        }
    }
}
100110fc:	0001883a 	nop
10011100:	e037883a 	mov	sp,fp
10011104:	df000017 	ldw	fp,0(sp)
10011108:	dec00104 	addi	sp,sp,4
1001110c:	f800283a 	ret

10011110 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
10011110:	defffd04 	addi	sp,sp,-12
10011114:	df000215 	stw	fp,8(sp)
10011118:	df000204 	addi	fp,sp,8
1001111c:	2005883a 	mov	r2,r4
10011120:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
10011124:	00bfffc4 	movi	r2,-1
10011128:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
1001112c:	e0bfff0f 	ldh	r2,-4(fp)
10011130:	10001416 	blt	r2,zero,10011184 <alt_up_sd_card_get_attributes+0x74>
10011134:	e0bfff0f 	ldh	r2,-4(fp)
10011138:	10800508 	cmpgei	r2,r2,20
1001113c:	1000111e 	bne	r2,zero,10011184 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
10011140:	e0ffff0f 	ldh	r3,-4(fp)
10011144:	008400b4 	movhi	r2,4098
10011148:	10a10604 	addi	r2,r2,-31720
1001114c:	180691ba 	slli	r3,r3,6
10011150:	10c5883a 	add	r2,r2,r3
10011154:	10800f04 	addi	r2,r2,60
10011158:	10800017 	ldw	r2,0(r2)
1001115c:	10000926 	beq	r2,zero,10011184 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
10011160:	e0ffff0f 	ldh	r3,-4(fp)
10011164:	008400b4 	movhi	r2,4098
10011168:	10a10604 	addi	r2,r2,-31720
1001116c:	180691ba 	slli	r3,r3,6
10011170:	10c5883a 	add	r2,r2,r3
10011174:	108002c4 	addi	r2,r2,11
10011178:	10800003 	ldbu	r2,0(r2)
1001117c:	10803fcc 	andi	r2,r2,255
10011180:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
10011184:	e0bffe0b 	ldhu	r2,-8(fp)
}
10011188:	e037883a 	mov	sp,fp
1001118c:	df000017 	ldw	fp,0(sp)
10011190:	dec00104 	addi	sp,sp,4
10011194:	f800283a 	ret

10011198 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
10011198:	defffa04 	addi	sp,sp,-24
1001119c:	dfc00515 	stw	ra,20(sp)
100111a0:	df000415 	stw	fp,16(sp)
100111a4:	df000404 	addi	fp,sp,16
100111a8:	2005883a 	mov	r2,r4
100111ac:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
100111b0:	00bfffc4 	movi	r2,-1
100111b4:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
100111b8:	e0bfff0f 	ldh	r2,-4(fp)
100111bc:	1000ce16 	blt	r2,zero,100114f8 <alt_up_sd_card_read+0x360>
100111c0:	e0bfff0f 	ldh	r2,-4(fp)
100111c4:	10800508 	cmpgei	r2,r2,20
100111c8:	1000cb1e 	bne	r2,zero,100114f8 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
100111cc:	e0ffff0f 	ldh	r3,-4(fp)
100111d0:	008400b4 	movhi	r2,4098
100111d4:	10a10604 	addi	r2,r2,-31720
100111d8:	180691ba 	slli	r3,r3,6
100111dc:	10c5883a 	add	r2,r2,r3
100111e0:	10800f04 	addi	r2,r2,60
100111e4:	10800017 	ldw	r2,0(r2)
100111e8:	1000c326 	beq	r2,zero,100114f8 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
100111ec:	e0ffff0f 	ldh	r3,-4(fp)
100111f0:	008400b4 	movhi	r2,4098
100111f4:	10a10604 	addi	r2,r2,-31720
100111f8:	180691ba 	slli	r3,r3,6
100111fc:	10c5883a 	add	r2,r2,r3
10011200:	10800904 	addi	r2,r2,36
10011204:	10c00017 	ldw	r3,0(r2)
10011208:	e13fff0f 	ldh	r4,-4(fp)
1001120c:	008400b4 	movhi	r2,4098
10011210:	10a10604 	addi	r2,r2,-31720
10011214:	200891ba 	slli	r4,r4,6
10011218:	1105883a 	add	r2,r2,r4
1001121c:	10800604 	addi	r2,r2,24
10011220:	10800017 	ldw	r2,0(r2)
10011224:	1880b42e 	bgeu	r3,r2,100114f8 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011228:	008400b4 	movhi	r2,4098
1001122c:	10a0f104 	addi	r2,r2,-31804
10011230:	10c01417 	ldw	r3,80(r2)
10011234:	e13fff0f 	ldh	r4,-4(fp)
10011238:	008400b4 	movhi	r2,4098
1001123c:	10a10604 	addi	r2,r2,-31720
10011240:	200891ba 	slli	r4,r4,6
10011244:	1105883a 	add	r2,r2,r4
10011248:	10800704 	addi	r2,r2,28
1001124c:	10800017 	ldw	r2,0(r2)
10011250:	113fff84 	addi	r4,r2,-2
10011254:	008400b4 	movhi	r2,4098
10011258:	10a0f104 	addi	r2,r2,-31804
1001125c:	10800383 	ldbu	r2,14(r2)
10011260:	10803fcc 	andi	r2,r2,255
10011264:	2085383a 	mul	r2,r4,r2
10011268:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
1001126c:	e13fff0f 	ldh	r4,-4(fp)
10011270:	008400b4 	movhi	r2,4098
10011274:	10a10604 	addi	r2,r2,-31720
10011278:	200891ba 	slli	r4,r4,6
1001127c:	1105883a 	add	r2,r2,r4
10011280:	10800804 	addi	r2,r2,32
10011284:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011288:	1885883a 	add	r2,r3,r2
1001128c:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
10011290:	e0ffff0f 	ldh	r3,-4(fp)
10011294:	008400b4 	movhi	r2,4098
10011298:	10a10604 	addi	r2,r2,-31720
1001129c:	180691ba 	slli	r3,r3,6
100112a0:	10c5883a 	add	r2,r2,r3
100112a4:	10800904 	addi	r2,r2,36
100112a8:	10800017 	ldw	r2,0(r2)
100112ac:	10006826 	beq	r2,zero,10011450 <alt_up_sd_card_read+0x2b8>
100112b0:	e0ffff0f 	ldh	r3,-4(fp)
100112b4:	008400b4 	movhi	r2,4098
100112b8:	10a10604 	addi	r2,r2,-31720
100112bc:	180691ba 	slli	r3,r3,6
100112c0:	10c5883a 	add	r2,r2,r3
100112c4:	10800904 	addi	r2,r2,36
100112c8:	10800017 	ldw	r2,0(r2)
100112cc:	10807fcc 	andi	r2,r2,511
100112d0:	10005f1e 	bne	r2,zero,10011450 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
100112d4:	e0ffff0f 	ldh	r3,-4(fp)
100112d8:	008400b4 	movhi	r2,4098
100112dc:	10a10604 	addi	r2,r2,-31720
100112e0:	180691ba 	slli	r3,r3,6
100112e4:	10c5883a 	add	r2,r2,r3
100112e8:	10800804 	addi	r2,r2,32
100112ec:	10c00017 	ldw	r3,0(r2)
100112f0:	008400b4 	movhi	r2,4098
100112f4:	10a0f104 	addi	r2,r2,-31804
100112f8:	10800383 	ldbu	r2,14(r2)
100112fc:	10803fcc 	andi	r2,r2,255
10011300:	10bfffc4 	addi	r2,r2,-1
10011304:	1880401e 	bne	r3,r2,10011408 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
10011308:	e0ffff0f 	ldh	r3,-4(fp)
1001130c:	008400b4 	movhi	r2,4098
10011310:	10a10604 	addi	r2,r2,-31720
10011314:	180691ba 	slli	r3,r3,6
10011318:	10c5883a 	add	r2,r2,r3
1001131c:	10800704 	addi	r2,r2,28
10011320:	10800017 	ldw	r2,0(r2)
10011324:	e0fffe04 	addi	r3,fp,-8
10011328:	180b883a 	mov	r5,r3
1001132c:	1009883a 	mov	r4,r2
10011330:	000dbac0 	call	1000dbac <get_cluster_flag>
10011334:	10003226 	beq	r2,zero,10011400 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
10011338:	e0bffe0b 	ldhu	r2,-8(fp)
1001133c:	10bfffcc 	andi	r2,r2,65535
10011340:	10fffe0c 	andi	r3,r2,65528
10011344:	00bffe14 	movui	r2,65528
10011348:	1880021e 	bne	r3,r2,10011354 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
1001134c:	00bfffc4 	movi	r2,-1
10011350:	00006a06 	br	100114fc <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
10011354:	e13fff0f 	ldh	r4,-4(fp)
10011358:	e0bffe0b 	ldhu	r2,-8(fp)
1001135c:	10ffffcc 	andi	r3,r2,65535
10011360:	008400b4 	movhi	r2,4098
10011364:	10a10604 	addi	r2,r2,-31720
10011368:	200891ba 	slli	r4,r4,6
1001136c:	1105883a 	add	r2,r2,r4
10011370:	10800704 	addi	r2,r2,28
10011374:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
10011378:	e0ffff0f 	ldh	r3,-4(fp)
1001137c:	008400b4 	movhi	r2,4098
10011380:	10a10604 	addi	r2,r2,-31720
10011384:	180691ba 	slli	r3,r3,6
10011388:	10c5883a 	add	r2,r2,r3
1001138c:	10800804 	addi	r2,r2,32
10011390:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011394:	008400b4 	movhi	r2,4098
10011398:	10a0f104 	addi	r2,r2,-31804
1001139c:	10c01417 	ldw	r3,80(r2)
100113a0:	e13fff0f 	ldh	r4,-4(fp)
100113a4:	008400b4 	movhi	r2,4098
100113a8:	10a10604 	addi	r2,r2,-31720
100113ac:	200891ba 	slli	r4,r4,6
100113b0:	1105883a 	add	r2,r2,r4
100113b4:	10800704 	addi	r2,r2,28
100113b8:	10800017 	ldw	r2,0(r2)
100113bc:	113fff84 	addi	r4,r2,-2
100113c0:	008400b4 	movhi	r2,4098
100113c4:	10a0f104 	addi	r2,r2,-31804
100113c8:	10800383 	ldbu	r2,14(r2)
100113cc:	10803fcc 	andi	r2,r2,255
100113d0:	2085383a 	mul	r2,r4,r2
100113d4:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
100113d8:	e13fff0f 	ldh	r4,-4(fp)
100113dc:	008400b4 	movhi	r2,4098
100113e0:	10a10604 	addi	r2,r2,-31720
100113e4:	200891ba 	slli	r4,r4,6
100113e8:	1105883a 	add	r2,r2,r4
100113ec:	10800804 	addi	r2,r2,32
100113f0:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
100113f4:	1885883a 	add	r2,r3,r2
100113f8:	e0bffd15 	stw	r2,-12(fp)
100113fc:	00001406 	br	10011450 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
10011400:	00bfff84 	movi	r2,-2
10011404:	00003d06 	br	100114fc <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
10011408:	e13fff0f 	ldh	r4,-4(fp)
1001140c:	e0ffff0f 	ldh	r3,-4(fp)
10011410:	008400b4 	movhi	r2,4098
10011414:	10a10604 	addi	r2,r2,-31720
10011418:	180691ba 	slli	r3,r3,6
1001141c:	10c5883a 	add	r2,r2,r3
10011420:	10800804 	addi	r2,r2,32
10011424:	10800017 	ldw	r2,0(r2)
10011428:	10c00044 	addi	r3,r2,1
1001142c:	008400b4 	movhi	r2,4098
10011430:	10a10604 	addi	r2,r2,-31720
10011434:	200891ba 	slli	r4,r4,6
10011438:	1105883a 	add	r2,r2,r4
1001143c:	10800804 	addi	r2,r2,32
10011440:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
10011444:	e0bffd17 	ldw	r2,-12(fp)
10011448:	10800044 	addi	r2,r2,1
1001144c:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
10011450:	d0e70017 	ldw	r3,-25600(gp)
10011454:	e0bffd17 	ldw	r2,-12(fp)
10011458:	1885883a 	add	r2,r3,r2
1001145c:	1007883a 	mov	r3,r2
10011460:	d0a70417 	ldw	r2,-25584(gp)
10011464:	18800726 	beq	r3,r2,10011484 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
10011468:	d0a70017 	ldw	r2,-25600(gp)
1001146c:	100b883a 	mov	r5,r2
10011470:	e13ffd17 	ldw	r4,-12(fp)
10011474:	000dad40 	call	1000dad4 <Read_Sector_Data>
10011478:	1000021e 	bne	r2,zero,10011484 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
1001147c:	00bfff84 	movi	r2,-2
10011480:	00001e06 	br	100114fc <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
10011484:	d0e6ff17 	ldw	r3,-25604(gp)
10011488:	e13fff0f 	ldh	r4,-4(fp)
1001148c:	008400b4 	movhi	r2,4098
10011490:	10a10604 	addi	r2,r2,-31720
10011494:	200891ba 	slli	r4,r4,6
10011498:	1105883a 	add	r2,r2,r4
1001149c:	10800904 	addi	r2,r2,36
100114a0:	10800017 	ldw	r2,0(r2)
100114a4:	10807fcc 	andi	r2,r2,511
100114a8:	1885883a 	add	r2,r3,r2
100114ac:	10800023 	ldbuio	r2,0(r2)
100114b0:	10803fcc 	andi	r2,r2,255
100114b4:	10803fcc 	andi	r2,r2,255
100114b8:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
100114bc:	e13fff0f 	ldh	r4,-4(fp)
100114c0:	e0ffff0f 	ldh	r3,-4(fp)
100114c4:	008400b4 	movhi	r2,4098
100114c8:	10a10604 	addi	r2,r2,-31720
100114cc:	180691ba 	slli	r3,r3,6
100114d0:	10c5883a 	add	r2,r2,r3
100114d4:	10800904 	addi	r2,r2,36
100114d8:	10800017 	ldw	r2,0(r2)
100114dc:	10c00044 	addi	r3,r2,1
100114e0:	008400b4 	movhi	r2,4098
100114e4:	10a10604 	addi	r2,r2,-31720
100114e8:	200891ba 	slli	r4,r4,6
100114ec:	1105883a 	add	r2,r2,r4
100114f0:	10800904 	addi	r2,r2,36
100114f4:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
100114f8:	e0bffc0b 	ldhu	r2,-16(fp)
}
100114fc:	e037883a 	mov	sp,fp
10011500:	dfc00117 	ldw	ra,4(sp)
10011504:	df000017 	ldw	fp,0(sp)
10011508:	dec00204 	addi	sp,sp,8
1001150c:	f800283a 	ret

10011510 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
10011510:	defff704 	addi	sp,sp,-36
10011514:	dfc00815 	stw	ra,32(sp)
10011518:	df000715 	stw	fp,28(sp)
1001151c:	dc000615 	stw	r16,24(sp)
10011520:	df000704 	addi	fp,sp,28
10011524:	2007883a 	mov	r3,r4
10011528:	2805883a 	mov	r2,r5
1001152c:	e0fffd0d 	sth	r3,-12(fp)
10011530:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
10011534:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
10011538:	e0bffd0f 	ldh	r2,-12(fp)
1001153c:	10017a16 	blt	r2,zero,10011b28 <alt_up_sd_card_write+0x618>
10011540:	e0bffd0f 	ldh	r2,-12(fp)
10011544:	10800508 	cmpgei	r2,r2,20
10011548:	1001771e 	bne	r2,zero,10011b28 <alt_up_sd_card_write+0x618>
    {
        if (active_files[file_handle].in_use)
1001154c:	e0fffd0f 	ldh	r3,-12(fp)
10011550:	008400b4 	movhi	r2,4098
10011554:	10a10604 	addi	r2,r2,-31720
10011558:	180691ba 	slli	r3,r3,6
1001155c:	10c5883a 	add	r2,r2,r3
10011560:	10800f04 	addi	r2,r2,60
10011564:	10800017 	ldw	r2,0(r2)
10011568:	10016f26 	beq	r2,zero,10011b28 <alt_up_sd_card_write+0x618>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
1001156c:	008400b4 	movhi	r2,4098
10011570:	10a0f104 	addi	r2,r2,-31804
10011574:	10c01417 	ldw	r3,80(r2)
10011578:	e13ffd0f 	ldh	r4,-12(fp)
1001157c:	008400b4 	movhi	r2,4098
10011580:	10a10604 	addi	r2,r2,-31720
10011584:	200891ba 	slli	r4,r4,6
10011588:	1105883a 	add	r2,r2,r4
1001158c:	10800704 	addi	r2,r2,28
10011590:	10800017 	ldw	r2,0(r2)
10011594:	113fff84 	addi	r4,r2,-2
10011598:	008400b4 	movhi	r2,4098
1001159c:	10a0f104 	addi	r2,r2,-31804
100115a0:	10800383 	ldbu	r2,14(r2)
100115a4:	10803fcc 	andi	r2,r2,255
100115a8:	2085383a 	mul	r2,r4,r2
100115ac:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
100115b0:	e13ffd0f 	ldh	r4,-12(fp)
100115b4:	008400b4 	movhi	r2,4098
100115b8:	10a10604 	addi	r2,r2,-31720
100115bc:	200891ba 	slli	r4,r4,6
100115c0:	1105883a 	add	r2,r2,r4
100115c4:	10800804 	addi	r2,r2,32
100115c8:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
100115cc:	1885883a 	add	r2,r3,r2
100115d0:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
100115d4:	e0fffd0f 	ldh	r3,-12(fp)
100115d8:	008400b4 	movhi	r2,4098
100115dc:	10a10604 	addi	r2,r2,-31720
100115e0:	180691ba 	slli	r3,r3,6
100115e4:	10c5883a 	add	r2,r2,r3
100115e8:	10800904 	addi	r2,r2,36
100115ec:	10c00017 	ldw	r3,0(r2)
100115f0:	008400b4 	movhi	r2,4098
100115f4:	10a0f104 	addi	r2,r2,-31804
100115f8:	1080030b 	ldhu	r2,12(r2)
100115fc:	10bfffcc 	andi	r2,r2,65535
10011600:	100b883a 	mov	r5,r2
10011604:	1809883a 	mov	r4,r3
10011608:	000a7300 	call	1000a730 <__umodsi3>
1001160c:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
10011610:	e0fffd0f 	ldh	r3,-12(fp)
10011614:	008400b4 	movhi	r2,4098
10011618:	10a10604 	addi	r2,r2,-31720
1001161c:	180691ba 	slli	r3,r3,6
10011620:	10c5883a 	add	r2,r2,r3
10011624:	10800904 	addi	r2,r2,36
10011628:	10c00017 	ldw	r3,0(r2)
1001162c:	e13ffd0f 	ldh	r4,-12(fp)
10011630:	008400b4 	movhi	r2,4098
10011634:	10a10604 	addi	r2,r2,-31720
10011638:	200891ba 	slli	r4,r4,6
1001163c:	1105883a 	add	r2,r2,r4
10011640:	10800604 	addi	r2,r2,24
10011644:	10800017 	ldw	r2,0(r2)
10011648:	1880672e 	bgeu	r3,r2,100117e8 <alt_up_sd_card_write+0x2d8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
1001164c:	e0fffd0f 	ldh	r3,-12(fp)
10011650:	008400b4 	movhi	r2,4098
10011654:	10a10604 	addi	r2,r2,-31720
10011658:	180691ba 	slli	r3,r3,6
1001165c:	10c5883a 	add	r2,r2,r3
10011660:	10800904 	addi	r2,r2,36
10011664:	10800017 	ldw	r2,0(r2)
10011668:	1000e426 	beq	r2,zero,100119fc <alt_up_sd_card_write+0x4ec>
1001166c:	e0bffb0f 	ldh	r2,-20(fp)
10011670:	1000e21e 	bne	r2,zero,100119fc <alt_up_sd_card_write+0x4ec>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
10011674:	e0fffd0f 	ldh	r3,-12(fp)
10011678:	008400b4 	movhi	r2,4098
1001167c:	10a10604 	addi	r2,r2,-31720
10011680:	180691ba 	slli	r3,r3,6
10011684:	10c5883a 	add	r2,r2,r3
10011688:	10800804 	addi	r2,r2,32
1001168c:	10c00017 	ldw	r3,0(r2)
10011690:	008400b4 	movhi	r2,4098
10011694:	10a0f104 	addi	r2,r2,-31804
10011698:	10800383 	ldbu	r2,14(r2)
1001169c:	10803fcc 	andi	r2,r2,255
100116a0:	10bfffc4 	addi	r2,r2,-1
100116a4:	18803d1e 	bne	r3,r2,1001179c <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
100116a8:	e0fffd0f 	ldh	r3,-12(fp)
100116ac:	008400b4 	movhi	r2,4098
100116b0:	10a10604 	addi	r2,r2,-31720
100116b4:	180691ba 	slli	r3,r3,6
100116b8:	10c5883a 	add	r2,r2,r3
100116bc:	10800704 	addi	r2,r2,28
100116c0:	10800017 	ldw	r2,0(r2)
100116c4:	e0fffb84 	addi	r3,fp,-18
100116c8:	180b883a 	mov	r5,r3
100116cc:	1009883a 	mov	r4,r2
100116d0:	000dbac0 	call	1000dbac <get_cluster_flag>
100116d4:	10002f26 	beq	r2,zero,10011794 <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
100116d8:	e0bffb8b 	ldhu	r2,-18(fp)
100116dc:	10bfffcc 	andi	r2,r2,65535
100116e0:	10bffe28 	cmpgeui	r2,r2,65528
100116e4:	1000c51e 	bne	r2,zero,100119fc <alt_up_sd_card_write+0x4ec>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
100116e8:	e13ffd0f 	ldh	r4,-12(fp)
100116ec:	e0bffb8b 	ldhu	r2,-18(fp)
100116f0:	10ffffcc 	andi	r3,r2,65535
100116f4:	008400b4 	movhi	r2,4098
100116f8:	10a10604 	addi	r2,r2,-31720
100116fc:	200891ba 	slli	r4,r4,6
10011700:	1105883a 	add	r2,r2,r4
10011704:	10800704 	addi	r2,r2,28
10011708:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
1001170c:	e0fffd0f 	ldh	r3,-12(fp)
10011710:	008400b4 	movhi	r2,4098
10011714:	10a10604 	addi	r2,r2,-31720
10011718:	180691ba 	slli	r3,r3,6
1001171c:	10c5883a 	add	r2,r2,r3
10011720:	10800804 	addi	r2,r2,32
10011724:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011728:	008400b4 	movhi	r2,4098
1001172c:	10a0f104 	addi	r2,r2,-31804
10011730:	10c01417 	ldw	r3,80(r2)
10011734:	e13ffd0f 	ldh	r4,-12(fp)
10011738:	008400b4 	movhi	r2,4098
1001173c:	10a10604 	addi	r2,r2,-31720
10011740:	200891ba 	slli	r4,r4,6
10011744:	1105883a 	add	r2,r2,r4
10011748:	10800704 	addi	r2,r2,28
1001174c:	10800017 	ldw	r2,0(r2)
10011750:	113fff84 	addi	r4,r2,-2
10011754:	008400b4 	movhi	r2,4098
10011758:	10a0f104 	addi	r2,r2,-31804
1001175c:	10800383 	ldbu	r2,14(r2)
10011760:	10803fcc 	andi	r2,r2,255
10011764:	2085383a 	mul	r2,r4,r2
10011768:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
1001176c:	e13ffd0f 	ldh	r4,-12(fp)
10011770:	008400b4 	movhi	r2,4098
10011774:	10a10604 	addi	r2,r2,-31720
10011778:	200891ba 	slli	r4,r4,6
1001177c:	1105883a 	add	r2,r2,r4
10011780:	10800804 	addi	r2,r2,32
10011784:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011788:	1885883a 	add	r2,r3,r2
1001178c:	e0bffa15 	stw	r2,-24(fp)
10011790:	00009a06 	br	100119fc <alt_up_sd_card_write+0x4ec>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
10011794:	0005883a 	mov	r2,zero
10011798:	0000e406 	br	10011b2c <alt_up_sd_card_write+0x61c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
1001179c:	e13ffd0f 	ldh	r4,-12(fp)
100117a0:	e0fffd0f 	ldh	r3,-12(fp)
100117a4:	008400b4 	movhi	r2,4098
100117a8:	10a10604 	addi	r2,r2,-31720
100117ac:	180691ba 	slli	r3,r3,6
100117b0:	10c5883a 	add	r2,r2,r3
100117b4:	10800804 	addi	r2,r2,32
100117b8:	10800017 	ldw	r2,0(r2)
100117bc:	10c00044 	addi	r3,r2,1
100117c0:	008400b4 	movhi	r2,4098
100117c4:	10a10604 	addi	r2,r2,-31720
100117c8:	200891ba 	slli	r4,r4,6
100117cc:	1105883a 	add	r2,r2,r4
100117d0:	10800804 	addi	r2,r2,32
100117d4:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
100117d8:	e0bffa17 	ldw	r2,-24(fp)
100117dc:	10800044 	addi	r2,r2,1
100117e0:	e0bffa15 	stw	r2,-24(fp)
100117e4:	00008506 	br	100119fc <alt_up_sd_card_write+0x4ec>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
100117e8:	e0fffd0f 	ldh	r3,-12(fp)
100117ec:	008400b4 	movhi	r2,4098
100117f0:	10a10604 	addi	r2,r2,-31720
100117f4:	180691ba 	slli	r3,r3,6
100117f8:	10c5883a 	add	r2,r2,r3
100117fc:	10800904 	addi	r2,r2,36
10011800:	10800017 	ldw	r2,0(r2)
10011804:	10007d26 	beq	r2,zero,100119fc <alt_up_sd_card_write+0x4ec>
10011808:	e0bffb0f 	ldh	r2,-20(fp)
1001180c:	10007b1e 	bne	r2,zero,100119fc <alt_up_sd_card_write+0x4ec>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
10011810:	e0fffd0f 	ldh	r3,-12(fp)
10011814:	008400b4 	movhi	r2,4098
10011818:	10a10604 	addi	r2,r2,-31720
1001181c:	180691ba 	slli	r3,r3,6
10011820:	10c5883a 	add	r2,r2,r3
10011824:	10800804 	addi	r2,r2,32
10011828:	10c00017 	ldw	r3,0(r2)
1001182c:	008400b4 	movhi	r2,4098
10011830:	10a0f104 	addi	r2,r2,-31804
10011834:	10800383 	ldbu	r2,14(r2)
10011838:	10803fcc 	andi	r2,r2,255
1001183c:	10bfffc4 	addi	r2,r2,-1
10011840:	18803e1e 	bne	r3,r2,1001193c <alt_up_sd_card_write+0x42c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
10011844:	e0bffc04 	addi	r2,fp,-16
10011848:	1009883a 	mov	r4,r2
1001184c:	000fbb80 	call	1000fbb8 <find_first_empty_cluster>
10011850:	10003826 	beq	r2,zero,10011934 <alt_up_sd_card_write+0x424>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
10011854:	e0fffd0f 	ldh	r3,-12(fp)
10011858:	008400b4 	movhi	r2,4098
1001185c:	10a10604 	addi	r2,r2,-31720
10011860:	180691ba 	slli	r3,r3,6
10011864:	10c5883a 	add	r2,r2,r3
10011868:	10800704 	addi	r2,r2,28
1001186c:	10800017 	ldw	r2,0(r2)
10011870:	e0fffc17 	ldw	r3,-16(fp)
10011874:	18ffffcc 	andi	r3,r3,65535
10011878:	18e0001c 	xori	r3,r3,32768
1001187c:	18e00004 	addi	r3,r3,-32768
10011880:	01800044 	movi	r6,1
10011884:	180b883a 	mov	r5,r3
10011888:	1009883a 	mov	r4,r2
1001188c:	000dc600 	call	1000dc60 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
10011890:	e0bffc17 	ldw	r2,-16(fp)
10011894:	01800044 	movi	r6,1
10011898:	017fffc4 	movi	r5,-1
1001189c:	1009883a 	mov	r4,r2
100118a0:	000dc600 	call	1000dc60 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
100118a4:	e0fffd0f 	ldh	r3,-12(fp)
100118a8:	008400b4 	movhi	r2,4098
100118ac:	10a10604 	addi	r2,r2,-31720
100118b0:	180691ba 	slli	r3,r3,6
100118b4:	10c5883a 	add	r2,r2,r3
100118b8:	10800704 	addi	r2,r2,28
100118bc:	10800017 	ldw	r2,0(r2)
100118c0:	e0fffc17 	ldw	r3,-16(fp)
100118c4:	18ffffcc 	andi	r3,r3,65535
100118c8:	18e0001c 	xori	r3,r3,32768
100118cc:	18e00004 	addi	r3,r3,-32768
100118d0:	000d883a 	mov	r6,zero
100118d4:	180b883a 	mov	r5,r3
100118d8:	1009883a 	mov	r4,r2
100118dc:	000dc600 	call	1000dc60 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
100118e0:	e0bffc17 	ldw	r2,-16(fp)
100118e4:	000d883a 	mov	r6,zero
100118e8:	017fffc4 	movi	r5,-1
100118ec:	1009883a 	mov	r4,r2
100118f0:	000dc600 	call	1000dc60 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
100118f4:	e13ffd0f 	ldh	r4,-12(fp)
100118f8:	e0fffc17 	ldw	r3,-16(fp)
100118fc:	008400b4 	movhi	r2,4098
10011900:	10a10604 	addi	r2,r2,-31720
10011904:	200891ba 	slli	r4,r4,6
10011908:	1105883a 	add	r2,r2,r4
1001190c:	10800704 	addi	r2,r2,28
10011910:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
10011914:	e0fffd0f 	ldh	r3,-12(fp)
10011918:	008400b4 	movhi	r2,4098
1001191c:	10a10604 	addi	r2,r2,-31720
10011920:	180691ba 	slli	r3,r3,6
10011924:	10c5883a 	add	r2,r2,r3
10011928:	10800804 	addi	r2,r2,32
1001192c:	10000015 	stw	zero,0(r2)
10011930:	00001806 	br	10011994 <alt_up_sd_card_write+0x484>
						}
						else
						{
							return false;
10011934:	0005883a 	mov	r2,zero
10011938:	00007c06 	br	10011b2c <alt_up_sd_card_write+0x61c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
1001193c:	e43ffd0f 	ldh	r16,-12(fp)
10011940:	e0fffd0f 	ldh	r3,-12(fp)
10011944:	008400b4 	movhi	r2,4098
10011948:	10a10604 	addi	r2,r2,-31720
1001194c:	180691ba 	slli	r3,r3,6
10011950:	10c5883a 	add	r2,r2,r3
10011954:	10800904 	addi	r2,r2,36
10011958:	10c00017 	ldw	r3,0(r2)
1001195c:	008400b4 	movhi	r2,4098
10011960:	10a0f104 	addi	r2,r2,-31804
10011964:	1080030b 	ldhu	r2,12(r2)
10011968:	10bfffcc 	andi	r2,r2,65535
1001196c:	100b883a 	mov	r5,r2
10011970:	1809883a 	mov	r4,r3
10011974:	000a6cc0 	call	1000a6cc <__udivsi3>
10011978:	1009883a 	mov	r4,r2
1001197c:	008400b4 	movhi	r2,4098
10011980:	10a10604 	addi	r2,r2,-31720
10011984:	800691ba 	slli	r3,r16,6
10011988:	10c5883a 	add	r2,r2,r3
1001198c:	10800804 	addi	r2,r2,32
10011990:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011994:	008400b4 	movhi	r2,4098
10011998:	10a0f104 	addi	r2,r2,-31804
1001199c:	10c01417 	ldw	r3,80(r2)
100119a0:	e13ffd0f 	ldh	r4,-12(fp)
100119a4:	008400b4 	movhi	r2,4098
100119a8:	10a10604 	addi	r2,r2,-31720
100119ac:	200891ba 	slli	r4,r4,6
100119b0:	1105883a 	add	r2,r2,r4
100119b4:	10800704 	addi	r2,r2,28
100119b8:	10800017 	ldw	r2,0(r2)
100119bc:	113fff84 	addi	r4,r2,-2
100119c0:	008400b4 	movhi	r2,4098
100119c4:	10a0f104 	addi	r2,r2,-31804
100119c8:	10800383 	ldbu	r2,14(r2)
100119cc:	10803fcc 	andi	r2,r2,255
100119d0:	2085383a 	mul	r2,r4,r2
100119d4:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
100119d8:	e13ffd0f 	ldh	r4,-12(fp)
100119dc:	008400b4 	movhi	r2,4098
100119e0:	10a10604 	addi	r2,r2,-31720
100119e4:	200891ba 	slli	r4,r4,6
100119e8:	1105883a 	add	r2,r2,r4
100119ec:	10800804 	addi	r2,r2,32
100119f0:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
100119f4:	1885883a 	add	r2,r3,r2
100119f8:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
100119fc:	d0e70017 	ldw	r3,-25600(gp)
10011a00:	e0bffa17 	ldw	r2,-24(fp)
10011a04:	1885883a 	add	r2,r3,r2
10011a08:	1007883a 	mov	r3,r2
10011a0c:	d0a70417 	ldw	r2,-25584(gp)
10011a10:	18800726 	beq	r3,r2,10011a30 <alt_up_sd_card_write+0x520>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
10011a14:	d0a70017 	ldw	r2,-25600(gp)
10011a18:	100b883a 	mov	r5,r2
10011a1c:	e13ffa17 	ldw	r4,-24(fp)
10011a20:	000dad40 	call	1000dad4 <Read_Sector_Data>
10011a24:	1000021e 	bne	r2,zero,10011a30 <alt_up_sd_card_write+0x520>
                {
					return false;
10011a28:	0005883a 	mov	r2,zero
10011a2c:	00003f06 	br	10011b2c <alt_up_sd_card_write+0x61c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
10011a30:	d0e6ff17 	ldw	r3,-25604(gp)
10011a34:	e0bffb0f 	ldh	r2,-20(fp)
10011a38:	1885883a 	add	r2,r3,r2
10011a3c:	e0fffe07 	ldb	r3,-8(fp)
10011a40:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
10011a44:	e13ffd0f 	ldh	r4,-12(fp)
10011a48:	e0fffd0f 	ldh	r3,-12(fp)
10011a4c:	008400b4 	movhi	r2,4098
10011a50:	10a10604 	addi	r2,r2,-31720
10011a54:	180691ba 	slli	r3,r3,6
10011a58:	10c5883a 	add	r2,r2,r3
10011a5c:	10800904 	addi	r2,r2,36
10011a60:	10800017 	ldw	r2,0(r2)
10011a64:	10c00044 	addi	r3,r2,1
10011a68:	008400b4 	movhi	r2,4098
10011a6c:	10a10604 	addi	r2,r2,-31720
10011a70:	200891ba 	slli	r4,r4,6
10011a74:	1105883a 	add	r2,r2,r4
10011a78:	10800904 	addi	r2,r2,36
10011a7c:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
10011a80:	e0fffd0f 	ldh	r3,-12(fp)
10011a84:	008400b4 	movhi	r2,4098
10011a88:	10a10604 	addi	r2,r2,-31720
10011a8c:	180691ba 	slli	r3,r3,6
10011a90:	10c5883a 	add	r2,r2,r3
10011a94:	10800904 	addi	r2,r2,36
10011a98:	10c00017 	ldw	r3,0(r2)
10011a9c:	e13ffd0f 	ldh	r4,-12(fp)
10011aa0:	008400b4 	movhi	r2,4098
10011aa4:	10a10604 	addi	r2,r2,-31720
10011aa8:	200891ba 	slli	r4,r4,6
10011aac:	1105883a 	add	r2,r2,r4
10011ab0:	10800604 	addi	r2,r2,24
10011ab4:	10800017 	ldw	r2,0(r2)
10011ab8:	18801736 	bltu	r3,r2,10011b18 <alt_up_sd_card_write+0x608>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
10011abc:	e13ffd0f 	ldh	r4,-12(fp)
10011ac0:	e0fffd0f 	ldh	r3,-12(fp)
10011ac4:	008400b4 	movhi	r2,4098
10011ac8:	10a10604 	addi	r2,r2,-31720
10011acc:	180691ba 	slli	r3,r3,6
10011ad0:	10c5883a 	add	r2,r2,r3
10011ad4:	10800604 	addi	r2,r2,24
10011ad8:	10800017 	ldw	r2,0(r2)
10011adc:	10c00044 	addi	r3,r2,1
10011ae0:	008400b4 	movhi	r2,4098
10011ae4:	10a10604 	addi	r2,r2,-31720
10011ae8:	200891ba 	slli	r4,r4,6
10011aec:	1105883a 	add	r2,r2,r4
10011af0:	10800604 	addi	r2,r2,24
10011af4:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
10011af8:	e0fffd0f 	ldh	r3,-12(fp)
10011afc:	008400b4 	movhi	r2,4098
10011b00:	10a10604 	addi	r2,r2,-31720
10011b04:	180691ba 	slli	r3,r3,6
10011b08:	10c5883a 	add	r2,r2,r3
10011b0c:	10800e04 	addi	r2,r2,56
10011b10:	00c00044 	movi	r3,1
10011b14:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
10011b18:	00800044 	movi	r2,1
10011b1c:	d0a70315 	stw	r2,-25588(gp)
			result = true;
10011b20:	00800044 	movi	r2,1
10011b24:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
10011b28:	e0bff917 	ldw	r2,-28(fp)
}
10011b2c:	e6ffff04 	addi	sp,fp,-4
10011b30:	dfc00217 	ldw	ra,8(sp)
10011b34:	df000117 	ldw	fp,4(sp)
10011b38:	dc000017 	ldw	r16,0(sp)
10011b3c:	dec00304 	addi	sp,sp,12
10011b40:	f800283a 	ret

10011b44 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
10011b44:	defffb04 	addi	sp,sp,-20
10011b48:	dfc00415 	stw	ra,16(sp)
10011b4c:	df000315 	stw	fp,12(sp)
10011b50:	df000304 	addi	fp,sp,12
10011b54:	2005883a 	mov	r2,r4
10011b58:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
10011b5c:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
10011b60:	001074c0 	call	1001074c <alt_up_sd_card_is_Present>
10011b64:	10006026 	beq	r2,zero,10011ce8 <alt_up_sd_card_fclose+0x1a4>
10011b68:	d0a6f917 	ldw	r2,-25628(gp)
10011b6c:	10005e26 	beq	r2,zero,10011ce8 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
10011b70:	e0ffff0f 	ldh	r3,-4(fp)
10011b74:	008400b4 	movhi	r2,4098
10011b78:	10a10604 	addi	r2,r2,-31720
10011b7c:	180691ba 	slli	r3,r3,6
10011b80:	10c5883a 	add	r2,r2,r3
10011b84:	10800f04 	addi	r2,r2,60
10011b88:	10800017 	ldw	r2,0(r2)
10011b8c:	10005626 	beq	r2,zero,10011ce8 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
10011b90:	e0ffff0f 	ldh	r3,-4(fp)
10011b94:	008400b4 	movhi	r2,4098
10011b98:	10a10604 	addi	r2,r2,-31720
10011b9c:	180691ba 	slli	r3,r3,6
10011ba0:	10c5883a 	add	r2,r2,r3
10011ba4:	10800e04 	addi	r2,r2,56
10011ba8:	10800017 	ldw	r2,0(r2)
10011bac:	10004526 	beq	r2,zero,10011cc4 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
10011bb0:	e0ffff0f 	ldh	r3,-4(fp)
10011bb4:	008400b4 	movhi	r2,4098
10011bb8:	10a10604 	addi	r2,r2,-31720
10011bbc:	180691ba 	slli	r3,r3,6
10011bc0:	10c5883a 	add	r2,r2,r3
10011bc4:	10800b04 	addi	r2,r2,44
10011bc8:	10800017 	ldw	r2,0(r2)
10011bcc:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
10011bd0:	e0ffff0f 	ldh	r3,-4(fp)
10011bd4:	008400b4 	movhi	r2,4098
10011bd8:	10a10604 	addi	r2,r2,-31720
10011bdc:	180691ba 	slli	r3,r3,6
10011be0:	10c5883a 	add	r2,r2,r3
10011be4:	10800a04 	addi	r2,r2,40
10011be8:	10800017 	ldw	r2,0(r2)
10011bec:	1000071e 	bne	r2,zero,10011c0c <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
10011bf0:	008400b4 	movhi	r2,4098
10011bf4:	10a0f104 	addi	r2,r2,-31804
10011bf8:	10801317 	ldw	r2,76(r2)
10011bfc:	e0fffe17 	ldw	r3,-8(fp)
10011c00:	1885883a 	add	r2,r3,r2
10011c04:	e0bffe15 	stw	r2,-8(fp)
10011c08:	00001406 	br	10011c5c <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
10011c0c:	008400b4 	movhi	r2,4098
10011c10:	10a0f104 	addi	r2,r2,-31804
10011c14:	10c01417 	ldw	r3,80(r2)
10011c18:	e0bffe17 	ldw	r2,-8(fp)
10011c1c:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
10011c20:	e13fff0f 	ldh	r4,-4(fp)
10011c24:	008400b4 	movhi	r2,4098
10011c28:	10a10604 	addi	r2,r2,-31720
10011c2c:	200891ba 	slli	r4,r4,6
10011c30:	1105883a 	add	r2,r2,r4
10011c34:	10800a04 	addi	r2,r2,40
10011c38:	10800017 	ldw	r2,0(r2)
10011c3c:	113fff84 	addi	r4,r2,-2
10011c40:	008400b4 	movhi	r2,4098
10011c44:	10a0f104 	addi	r2,r2,-31804
10011c48:	10800383 	ldbu	r2,14(r2)
10011c4c:	10803fcc 	andi	r2,r2,255
10011c50:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
10011c54:	1885883a 	add	r2,r3,r2
10011c58:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
10011c5c:	e0bffe17 	ldw	r2,-8(fp)
10011c60:	d0e70017 	ldw	r3,-25600(gp)
10011c64:	180b883a 	mov	r5,r3
10011c68:	1009883a 	mov	r4,r2
10011c6c:	000dad40 	call	1000dad4 <Read_Sector_Data>
10011c70:	10001426 	beq	r2,zero,10011cc4 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
10011c74:	e0ffff0f 	ldh	r3,-4(fp)
10011c78:	008400b4 	movhi	r2,4098
10011c7c:	10a10604 	addi	r2,r2,-31720
10011c80:	180691ba 	slli	r3,r3,6
10011c84:	10c5883a 	add	r2,r2,r3
10011c88:	10800c04 	addi	r2,r2,48
10011c8c:	1080000b 	ldhu	r2,0(r2)
10011c90:	113fffcc 	andi	r4,r2,65535
10011c94:	2120001c 	xori	r4,r4,32768
10011c98:	21200004 	addi	r4,r4,-32768
10011c9c:	e0bfff0f 	ldh	r2,-4(fp)
10011ca0:	100691ba 	slli	r3,r2,6
10011ca4:	008400b4 	movhi	r2,4098
10011ca8:	10a10604 	addi	r2,r2,-31720
10011cac:	1885883a 	add	r2,r3,r2
10011cb0:	100b883a 	mov	r5,r2
10011cb4:	000e1600 	call	1000e160 <Write_File_Record_At_Offset>
10011cb8:	10000226 	beq	r2,zero,10011cc4 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
10011cbc:	000da880 	call	1000da88 <Save_Modified_Sector>
10011cc0:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
10011cc4:	e0ffff0f 	ldh	r3,-4(fp)
10011cc8:	008400b4 	movhi	r2,4098
10011ccc:	10a10604 	addi	r2,r2,-31720
10011cd0:	180691ba 	slli	r3,r3,6
10011cd4:	10c5883a 	add	r2,r2,r3
10011cd8:	10800f04 	addi	r2,r2,60
10011cdc:	10000015 	stw	zero,0(r2)
			result = true;
10011ce0:	00800044 	movi	r2,1
10011ce4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
10011ce8:	e0bffd17 	ldw	r2,-12(fp)
}
10011cec:	e037883a 	mov	sp,fp
10011cf0:	dfc00117 	ldw	ra,4(sp)
10011cf4:	df000017 	ldw	fp,0(sp)
10011cf8:	dec00204 	addi	sp,sp,8
10011cfc:	f800283a 	ret

10011d00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10011d00:	defffa04 	addi	sp,sp,-24
10011d04:	dfc00515 	stw	ra,20(sp)
10011d08:	df000415 	stw	fp,16(sp)
10011d0c:	df000404 	addi	fp,sp,16
10011d10:	e13ffd15 	stw	r4,-12(fp)
10011d14:	e17ffe15 	stw	r5,-8(fp)
10011d18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011d1c:	e0bffd17 	ldw	r2,-12(fp)
10011d20:	10800017 	ldw	r2,0(r2)
10011d24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10011d28:	e0bffc17 	ldw	r2,-16(fp)
10011d2c:	10c00a04 	addi	r3,r2,40
10011d30:	e0bffd17 	ldw	r2,-12(fp)
10011d34:	10800217 	ldw	r2,8(r2)
10011d38:	100f883a 	mov	r7,r2
10011d3c:	e1bfff17 	ldw	r6,-4(fp)
10011d40:	e17ffe17 	ldw	r5,-8(fp)
10011d44:	1809883a 	mov	r4,r3
10011d48:	00123280 	call	10012328 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10011d4c:	e037883a 	mov	sp,fp
10011d50:	dfc00117 	ldw	ra,4(sp)
10011d54:	df000017 	ldw	fp,0(sp)
10011d58:	dec00204 	addi	sp,sp,8
10011d5c:	f800283a 	ret

10011d60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10011d60:	defffa04 	addi	sp,sp,-24
10011d64:	dfc00515 	stw	ra,20(sp)
10011d68:	df000415 	stw	fp,16(sp)
10011d6c:	df000404 	addi	fp,sp,16
10011d70:	e13ffd15 	stw	r4,-12(fp)
10011d74:	e17ffe15 	stw	r5,-8(fp)
10011d78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011d7c:	e0bffd17 	ldw	r2,-12(fp)
10011d80:	10800017 	ldw	r2,0(r2)
10011d84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10011d88:	e0bffc17 	ldw	r2,-16(fp)
10011d8c:	10c00a04 	addi	r3,r2,40
10011d90:	e0bffd17 	ldw	r2,-12(fp)
10011d94:	10800217 	ldw	r2,8(r2)
10011d98:	100f883a 	mov	r7,r2
10011d9c:	e1bfff17 	ldw	r6,-4(fp)
10011da0:	e17ffe17 	ldw	r5,-8(fp)
10011da4:	1809883a 	mov	r4,r3
10011da8:	00125440 	call	10012544 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10011dac:	e037883a 	mov	sp,fp
10011db0:	dfc00117 	ldw	ra,4(sp)
10011db4:	df000017 	ldw	fp,0(sp)
10011db8:	dec00204 	addi	sp,sp,8
10011dbc:	f800283a 	ret

10011dc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10011dc0:	defffc04 	addi	sp,sp,-16
10011dc4:	dfc00315 	stw	ra,12(sp)
10011dc8:	df000215 	stw	fp,8(sp)
10011dcc:	df000204 	addi	fp,sp,8
10011dd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011dd4:	e0bfff17 	ldw	r2,-4(fp)
10011dd8:	10800017 	ldw	r2,0(r2)
10011ddc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10011de0:	e0bffe17 	ldw	r2,-8(fp)
10011de4:	10c00a04 	addi	r3,r2,40
10011de8:	e0bfff17 	ldw	r2,-4(fp)
10011dec:	10800217 	ldw	r2,8(r2)
10011df0:	100b883a 	mov	r5,r2
10011df4:	1809883a 	mov	r4,r3
10011df8:	00121d00 	call	100121d0 <altera_avalon_jtag_uart_close>
}
10011dfc:	e037883a 	mov	sp,fp
10011e00:	dfc00117 	ldw	ra,4(sp)
10011e04:	df000017 	ldw	fp,0(sp)
10011e08:	dec00204 	addi	sp,sp,8
10011e0c:	f800283a 	ret

10011e10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10011e10:	defffa04 	addi	sp,sp,-24
10011e14:	dfc00515 	stw	ra,20(sp)
10011e18:	df000415 	stw	fp,16(sp)
10011e1c:	df000404 	addi	fp,sp,16
10011e20:	e13ffd15 	stw	r4,-12(fp)
10011e24:	e17ffe15 	stw	r5,-8(fp)
10011e28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10011e2c:	e0bffd17 	ldw	r2,-12(fp)
10011e30:	10800017 	ldw	r2,0(r2)
10011e34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10011e38:	e0bffc17 	ldw	r2,-16(fp)
10011e3c:	10800a04 	addi	r2,r2,40
10011e40:	e1bfff17 	ldw	r6,-4(fp)
10011e44:	e17ffe17 	ldw	r5,-8(fp)
10011e48:	1009883a 	mov	r4,r2
10011e4c:	00122380 	call	10012238 <altera_avalon_jtag_uart_ioctl>
}
10011e50:	e037883a 	mov	sp,fp
10011e54:	dfc00117 	ldw	ra,4(sp)
10011e58:	df000017 	ldw	fp,0(sp)
10011e5c:	dec00204 	addi	sp,sp,8
10011e60:	f800283a 	ret

10011e64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10011e64:	defffa04 	addi	sp,sp,-24
10011e68:	dfc00515 	stw	ra,20(sp)
10011e6c:	df000415 	stw	fp,16(sp)
10011e70:	df000404 	addi	fp,sp,16
10011e74:	e13ffd15 	stw	r4,-12(fp)
10011e78:	e17ffe15 	stw	r5,-8(fp)
10011e7c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011e80:	e0bffd17 	ldw	r2,-12(fp)
10011e84:	00c00044 	movi	r3,1
10011e88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10011e8c:	e0bffd17 	ldw	r2,-12(fp)
10011e90:	10800017 	ldw	r2,0(r2)
10011e94:	10800104 	addi	r2,r2,4
10011e98:	1007883a 	mov	r3,r2
10011e9c:	e0bffd17 	ldw	r2,-12(fp)
10011ea0:	10800817 	ldw	r2,32(r2)
10011ea4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10011ea8:	e0bffe17 	ldw	r2,-8(fp)
10011eac:	e0ffff17 	ldw	r3,-4(fp)
10011eb0:	d8000015 	stw	zero,0(sp)
10011eb4:	e1fffd17 	ldw	r7,-12(fp)
10011eb8:	01840074 	movhi	r6,4097
10011ebc:	3187c904 	addi	r6,r6,7972
10011ec0:	180b883a 	mov	r5,r3
10011ec4:	1009883a 	mov	r4,r2
10011ec8:	00139f40 	call	100139f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10011ecc:	e0bffd17 	ldw	r2,-12(fp)
10011ed0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10011ed4:	e0bffd17 	ldw	r2,-12(fp)
10011ed8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10011edc:	d0e70617 	ldw	r3,-25576(gp)
10011ee0:	e1fffd17 	ldw	r7,-12(fp)
10011ee4:	01840074 	movhi	r6,4097
10011ee8:	31884c04 	addi	r6,r6,8496
10011eec:	180b883a 	mov	r5,r3
10011ef0:	1009883a 	mov	r4,r2
10011ef4:	001361c0 	call	1001361c <alt_alarm_start>
10011ef8:	1000040e 	bge	r2,zero,10011f0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10011efc:	e0fffd17 	ldw	r3,-12(fp)
10011f00:	00a00034 	movhi	r2,32768
10011f04:	10bfffc4 	addi	r2,r2,-1
10011f08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10011f0c:	0001883a 	nop
10011f10:	e037883a 	mov	sp,fp
10011f14:	dfc00117 	ldw	ra,4(sp)
10011f18:	df000017 	ldw	fp,0(sp)
10011f1c:	dec00204 	addi	sp,sp,8
10011f20:	f800283a 	ret

10011f24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10011f24:	defff804 	addi	sp,sp,-32
10011f28:	df000715 	stw	fp,28(sp)
10011f2c:	df000704 	addi	fp,sp,28
10011f30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10011f34:	e0bfff17 	ldw	r2,-4(fp)
10011f38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10011f3c:	e0bffb17 	ldw	r2,-20(fp)
10011f40:	10800017 	ldw	r2,0(r2)
10011f44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011f48:	e0bffc17 	ldw	r2,-16(fp)
10011f4c:	10800104 	addi	r2,r2,4
10011f50:	10800037 	ldwio	r2,0(r2)
10011f54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10011f58:	e0bffd17 	ldw	r2,-12(fp)
10011f5c:	1080c00c 	andi	r2,r2,768
10011f60:	10006d26 	beq	r2,zero,10012118 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10011f64:	e0bffd17 	ldw	r2,-12(fp)
10011f68:	1080400c 	andi	r2,r2,256
10011f6c:	10003526 	beq	r2,zero,10012044 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10011f70:	00800074 	movhi	r2,1
10011f74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011f78:	e0bffb17 	ldw	r2,-20(fp)
10011f7c:	10800a17 	ldw	r2,40(r2)
10011f80:	10800044 	addi	r2,r2,1
10011f84:	1081ffcc 	andi	r2,r2,2047
10011f88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10011f8c:	e0bffb17 	ldw	r2,-20(fp)
10011f90:	10c00b17 	ldw	r3,44(r2)
10011f94:	e0bffe17 	ldw	r2,-8(fp)
10011f98:	18801526 	beq	r3,r2,10011ff0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10011f9c:	e0bffc17 	ldw	r2,-16(fp)
10011fa0:	10800037 	ldwio	r2,0(r2)
10011fa4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10011fa8:	e0bff917 	ldw	r2,-28(fp)
10011fac:	10a0000c 	andi	r2,r2,32768
10011fb0:	10001126 	beq	r2,zero,10011ff8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10011fb4:	e0bffb17 	ldw	r2,-20(fp)
10011fb8:	10800a17 	ldw	r2,40(r2)
10011fbc:	e0fff917 	ldw	r3,-28(fp)
10011fc0:	1809883a 	mov	r4,r3
10011fc4:	e0fffb17 	ldw	r3,-20(fp)
10011fc8:	1885883a 	add	r2,r3,r2
10011fcc:	10800e04 	addi	r2,r2,56
10011fd0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011fd4:	e0bffb17 	ldw	r2,-20(fp)
10011fd8:	10800a17 	ldw	r2,40(r2)
10011fdc:	10800044 	addi	r2,r2,1
10011fe0:	10c1ffcc 	andi	r3,r2,2047
10011fe4:	e0bffb17 	ldw	r2,-20(fp)
10011fe8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10011fec:	003fe206 	br	10011f78 <__alt_data_end+0xf8011f78>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10011ff0:	0001883a 	nop
10011ff4:	00000106 	br	10011ffc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10011ff8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10011ffc:	e0bff917 	ldw	r2,-28(fp)
10012000:	10bfffec 	andhi	r2,r2,65535
10012004:	10000f26 	beq	r2,zero,10012044 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012008:	e0bffb17 	ldw	r2,-20(fp)
1001200c:	10c00817 	ldw	r3,32(r2)
10012010:	00bfff84 	movi	r2,-2
10012014:	1886703a 	and	r3,r3,r2
10012018:	e0bffb17 	ldw	r2,-20(fp)
1001201c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10012020:	e0bffc17 	ldw	r2,-16(fp)
10012024:	10800104 	addi	r2,r2,4
10012028:	1007883a 	mov	r3,r2
1001202c:	e0bffb17 	ldw	r2,-20(fp)
10012030:	10800817 	ldw	r2,32(r2)
10012034:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012038:	e0bffc17 	ldw	r2,-16(fp)
1001203c:	10800104 	addi	r2,r2,4
10012040:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012044:	e0bffd17 	ldw	r2,-12(fp)
10012048:	1080800c 	andi	r2,r2,512
1001204c:	103fbe26 	beq	r2,zero,10011f48 <__alt_data_end+0xf8011f48>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10012050:	e0bffd17 	ldw	r2,-12(fp)
10012054:	1004d43a 	srli	r2,r2,16
10012058:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1001205c:	00001406 	br	100120b0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10012060:	e0bffc17 	ldw	r2,-16(fp)
10012064:	e0fffb17 	ldw	r3,-20(fp)
10012068:	18c00d17 	ldw	r3,52(r3)
1001206c:	e13ffb17 	ldw	r4,-20(fp)
10012070:	20c7883a 	add	r3,r4,r3
10012074:	18c20e04 	addi	r3,r3,2104
10012078:	18c00003 	ldbu	r3,0(r3)
1001207c:	18c03fcc 	andi	r3,r3,255
10012080:	18c0201c 	xori	r3,r3,128
10012084:	18ffe004 	addi	r3,r3,-128
10012088:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001208c:	e0bffb17 	ldw	r2,-20(fp)
10012090:	10800d17 	ldw	r2,52(r2)
10012094:	10800044 	addi	r2,r2,1
10012098:	10c1ffcc 	andi	r3,r2,2047
1001209c:	e0bffb17 	ldw	r2,-20(fp)
100120a0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100120a4:	e0bffa17 	ldw	r2,-24(fp)
100120a8:	10bfffc4 	addi	r2,r2,-1
100120ac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100120b0:	e0bffa17 	ldw	r2,-24(fp)
100120b4:	10000526 	beq	r2,zero,100120cc <altera_avalon_jtag_uart_irq+0x1a8>
100120b8:	e0bffb17 	ldw	r2,-20(fp)
100120bc:	10c00d17 	ldw	r3,52(r2)
100120c0:	e0bffb17 	ldw	r2,-20(fp)
100120c4:	10800c17 	ldw	r2,48(r2)
100120c8:	18bfe51e 	bne	r3,r2,10012060 <__alt_data_end+0xf8012060>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100120cc:	e0bffa17 	ldw	r2,-24(fp)
100120d0:	103f9d26 	beq	r2,zero,10011f48 <__alt_data_end+0xf8011f48>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100120d4:	e0bffb17 	ldw	r2,-20(fp)
100120d8:	10c00817 	ldw	r3,32(r2)
100120dc:	00bfff44 	movi	r2,-3
100120e0:	1886703a 	and	r3,r3,r2
100120e4:	e0bffb17 	ldw	r2,-20(fp)
100120e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100120ec:	e0bffb17 	ldw	r2,-20(fp)
100120f0:	10800017 	ldw	r2,0(r2)
100120f4:	10800104 	addi	r2,r2,4
100120f8:	1007883a 	mov	r3,r2
100120fc:	e0bffb17 	ldw	r2,-20(fp)
10012100:	10800817 	ldw	r2,32(r2)
10012104:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012108:	e0bffc17 	ldw	r2,-16(fp)
1001210c:	10800104 	addi	r2,r2,4
10012110:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012114:	003f8c06 	br	10011f48 <__alt_data_end+0xf8011f48>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10012118:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1001211c:	0001883a 	nop
10012120:	e037883a 	mov	sp,fp
10012124:	df000017 	ldw	fp,0(sp)
10012128:	dec00104 	addi	sp,sp,4
1001212c:	f800283a 	ret

10012130 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10012130:	defff804 	addi	sp,sp,-32
10012134:	df000715 	stw	fp,28(sp)
10012138:	df000704 	addi	fp,sp,28
1001213c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10012140:	e0bffb17 	ldw	r2,-20(fp)
10012144:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012148:	e0bff917 	ldw	r2,-28(fp)
1001214c:	10800017 	ldw	r2,0(r2)
10012150:	10800104 	addi	r2,r2,4
10012154:	10800037 	ldwio	r2,0(r2)
10012158:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001215c:	e0bffa17 	ldw	r2,-24(fp)
10012160:	1081000c 	andi	r2,r2,1024
10012164:	10000b26 	beq	r2,zero,10012194 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012168:	e0bff917 	ldw	r2,-28(fp)
1001216c:	10800017 	ldw	r2,0(r2)
10012170:	10800104 	addi	r2,r2,4
10012174:	1007883a 	mov	r3,r2
10012178:	e0bff917 	ldw	r2,-28(fp)
1001217c:	10800817 	ldw	r2,32(r2)
10012180:	10810014 	ori	r2,r2,1024
10012184:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012188:	e0bff917 	ldw	r2,-28(fp)
1001218c:	10000915 	stw	zero,36(r2)
10012190:	00000a06 	br	100121bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012194:	e0bff917 	ldw	r2,-28(fp)
10012198:	10c00917 	ldw	r3,36(r2)
1001219c:	00a00034 	movhi	r2,32768
100121a0:	10bfff04 	addi	r2,r2,-4
100121a4:	10c00536 	bltu	r2,r3,100121bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100121a8:	e0bff917 	ldw	r2,-28(fp)
100121ac:	10800917 	ldw	r2,36(r2)
100121b0:	10c00044 	addi	r3,r2,1
100121b4:	e0bff917 	ldw	r2,-28(fp)
100121b8:	10c00915 	stw	r3,36(r2)
100121bc:	d0a70617 	ldw	r2,-25576(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100121c0:	e037883a 	mov	sp,fp
100121c4:	df000017 	ldw	fp,0(sp)
100121c8:	dec00104 	addi	sp,sp,4
100121cc:	f800283a 	ret

100121d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100121d0:	defffd04 	addi	sp,sp,-12
100121d4:	df000215 	stw	fp,8(sp)
100121d8:	df000204 	addi	fp,sp,8
100121dc:	e13ffe15 	stw	r4,-8(fp)
100121e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100121e4:	00000506 	br	100121fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100121e8:	e0bfff17 	ldw	r2,-4(fp)
100121ec:	1090000c 	andi	r2,r2,16384
100121f0:	10000226 	beq	r2,zero,100121fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100121f4:	00bffd44 	movi	r2,-11
100121f8:	00000b06 	br	10012228 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100121fc:	e0bffe17 	ldw	r2,-8(fp)
10012200:	10c00d17 	ldw	r3,52(r2)
10012204:	e0bffe17 	ldw	r2,-8(fp)
10012208:	10800c17 	ldw	r2,48(r2)
1001220c:	18800526 	beq	r3,r2,10012224 <altera_avalon_jtag_uart_close+0x54>
10012210:	e0bffe17 	ldw	r2,-8(fp)
10012214:	10c00917 	ldw	r3,36(r2)
10012218:	e0bffe17 	ldw	r2,-8(fp)
1001221c:	10800117 	ldw	r2,4(r2)
10012220:	18bff136 	bltu	r3,r2,100121e8 <__alt_data_end+0xf80121e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012224:	0005883a 	mov	r2,zero
}
10012228:	e037883a 	mov	sp,fp
1001222c:	df000017 	ldw	fp,0(sp)
10012230:	dec00104 	addi	sp,sp,4
10012234:	f800283a 	ret

10012238 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012238:	defffa04 	addi	sp,sp,-24
1001223c:	df000515 	stw	fp,20(sp)
10012240:	df000504 	addi	fp,sp,20
10012244:	e13ffd15 	stw	r4,-12(fp)
10012248:	e17ffe15 	stw	r5,-8(fp)
1001224c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012250:	00bff9c4 	movi	r2,-25
10012254:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012258:	e0bffe17 	ldw	r2,-8(fp)
1001225c:	10da8060 	cmpeqi	r3,r2,27137
10012260:	1800031e 	bne	r3,zero,10012270 <altera_avalon_jtag_uart_ioctl+0x38>
10012264:	109a80a0 	cmpeqi	r2,r2,27138
10012268:	1000181e 	bne	r2,zero,100122cc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1001226c:	00002906 	br	10012314 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012270:	e0bffd17 	ldw	r2,-12(fp)
10012274:	10c00117 	ldw	r3,4(r2)
10012278:	00a00034 	movhi	r2,32768
1001227c:	10bfffc4 	addi	r2,r2,-1
10012280:	18802126 	beq	r3,r2,10012308 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012284:	e0bfff17 	ldw	r2,-4(fp)
10012288:	10800017 	ldw	r2,0(r2)
1001228c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012290:	e0bffc17 	ldw	r2,-16(fp)
10012294:	10800090 	cmplti	r2,r2,2
10012298:	1000061e 	bne	r2,zero,100122b4 <altera_avalon_jtag_uart_ioctl+0x7c>
1001229c:	e0fffc17 	ldw	r3,-16(fp)
100122a0:	00a00034 	movhi	r2,32768
100122a4:	10bfffc4 	addi	r2,r2,-1
100122a8:	18800226 	beq	r3,r2,100122b4 <altera_avalon_jtag_uart_ioctl+0x7c>
100122ac:	e0bffc17 	ldw	r2,-16(fp)
100122b0:	00000206 	br	100122bc <altera_avalon_jtag_uart_ioctl+0x84>
100122b4:	00a00034 	movhi	r2,32768
100122b8:	10bfff84 	addi	r2,r2,-2
100122bc:	e0fffd17 	ldw	r3,-12(fp)
100122c0:	18800115 	stw	r2,4(r3)
      rc = 0;
100122c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100122c8:	00000f06 	br	10012308 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100122cc:	e0bffd17 	ldw	r2,-12(fp)
100122d0:	10c00117 	ldw	r3,4(r2)
100122d4:	00a00034 	movhi	r2,32768
100122d8:	10bfffc4 	addi	r2,r2,-1
100122dc:	18800c26 	beq	r3,r2,10012310 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100122e0:	e0bffd17 	ldw	r2,-12(fp)
100122e4:	10c00917 	ldw	r3,36(r2)
100122e8:	e0bffd17 	ldw	r2,-12(fp)
100122ec:	10800117 	ldw	r2,4(r2)
100122f0:	1885803a 	cmpltu	r2,r3,r2
100122f4:	10c03fcc 	andi	r3,r2,255
100122f8:	e0bfff17 	ldw	r2,-4(fp)
100122fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012300:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012304:	00000206 	br	10012310 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012308:	0001883a 	nop
1001230c:	00000106 	br	10012314 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10012310:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012314:	e0bffb17 	ldw	r2,-20(fp)
}
10012318:	e037883a 	mov	sp,fp
1001231c:	df000017 	ldw	fp,0(sp)
10012320:	dec00104 	addi	sp,sp,4
10012324:	f800283a 	ret

10012328 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012328:	defff304 	addi	sp,sp,-52
1001232c:	dfc00c15 	stw	ra,48(sp)
10012330:	df000b15 	stw	fp,44(sp)
10012334:	df000b04 	addi	fp,sp,44
10012338:	e13ffc15 	stw	r4,-16(fp)
1001233c:	e17ffd15 	stw	r5,-12(fp)
10012340:	e1bffe15 	stw	r6,-8(fp)
10012344:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012348:	e0bffd17 	ldw	r2,-12(fp)
1001234c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012350:	00004706 	br	10012470 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012354:	e0bffc17 	ldw	r2,-16(fp)
10012358:	10800a17 	ldw	r2,40(r2)
1001235c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10012360:	e0bffc17 	ldw	r2,-16(fp)
10012364:	10800b17 	ldw	r2,44(r2)
10012368:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1001236c:	e0fff717 	ldw	r3,-36(fp)
10012370:	e0bff817 	ldw	r2,-32(fp)
10012374:	18800536 	bltu	r3,r2,1001238c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012378:	e0fff717 	ldw	r3,-36(fp)
1001237c:	e0bff817 	ldw	r2,-32(fp)
10012380:	1885c83a 	sub	r2,r3,r2
10012384:	e0bff615 	stw	r2,-40(fp)
10012388:	00000406 	br	1001239c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1001238c:	00c20004 	movi	r3,2048
10012390:	e0bff817 	ldw	r2,-32(fp)
10012394:	1885c83a 	sub	r2,r3,r2
10012398:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1001239c:	e0bff617 	ldw	r2,-40(fp)
100123a0:	10001e26 	beq	r2,zero,1001241c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100123a4:	e0fffe17 	ldw	r3,-8(fp)
100123a8:	e0bff617 	ldw	r2,-40(fp)
100123ac:	1880022e 	bgeu	r3,r2,100123b8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100123b0:	e0bffe17 	ldw	r2,-8(fp)
100123b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100123b8:	e0bffc17 	ldw	r2,-16(fp)
100123bc:	10c00e04 	addi	r3,r2,56
100123c0:	e0bff817 	ldw	r2,-32(fp)
100123c4:	1885883a 	add	r2,r3,r2
100123c8:	e1bff617 	ldw	r6,-40(fp)
100123cc:	100b883a 	mov	r5,r2
100123d0:	e13ff517 	ldw	r4,-44(fp)
100123d4:	0005f9c0 	call	10005f9c <memcpy>
      ptr   += n;
100123d8:	e0fff517 	ldw	r3,-44(fp)
100123dc:	e0bff617 	ldw	r2,-40(fp)
100123e0:	1885883a 	add	r2,r3,r2
100123e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100123e8:	e0fffe17 	ldw	r3,-8(fp)
100123ec:	e0bff617 	ldw	r2,-40(fp)
100123f0:	1885c83a 	sub	r2,r3,r2
100123f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100123f8:	e0fff817 	ldw	r3,-32(fp)
100123fc:	e0bff617 	ldw	r2,-40(fp)
10012400:	1885883a 	add	r2,r3,r2
10012404:	10c1ffcc 	andi	r3,r2,2047
10012408:	e0bffc17 	ldw	r2,-16(fp)
1001240c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10012410:	e0bffe17 	ldw	r2,-8(fp)
10012414:	00bfcf16 	blt	zero,r2,10012354 <__alt_data_end+0xf8012354>
10012418:	00000106 	br	10012420 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1001241c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10012420:	e0fff517 	ldw	r3,-44(fp)
10012424:	e0bffd17 	ldw	r2,-12(fp)
10012428:	1880141e 	bne	r3,r2,1001247c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1001242c:	e0bfff17 	ldw	r2,-4(fp)
10012430:	1090000c 	andi	r2,r2,16384
10012434:	1000131e 	bne	r2,zero,10012484 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012438:	0001883a 	nop
1001243c:	e0bffc17 	ldw	r2,-16(fp)
10012440:	10c00a17 	ldw	r3,40(r2)
10012444:	e0bff717 	ldw	r2,-36(fp)
10012448:	1880051e 	bne	r3,r2,10012460 <altera_avalon_jtag_uart_read+0x138>
1001244c:	e0bffc17 	ldw	r2,-16(fp)
10012450:	10c00917 	ldw	r3,36(r2)
10012454:	e0bffc17 	ldw	r2,-16(fp)
10012458:	10800117 	ldw	r2,4(r2)
1001245c:	18bff736 	bltu	r3,r2,1001243c <__alt_data_end+0xf801243c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10012460:	e0bffc17 	ldw	r2,-16(fp)
10012464:	10c00a17 	ldw	r3,40(r2)
10012468:	e0bff717 	ldw	r2,-36(fp)
1001246c:	18800726 	beq	r3,r2,1001248c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012470:	e0bffe17 	ldw	r2,-8(fp)
10012474:	00bfb716 	blt	zero,r2,10012354 <__alt_data_end+0xf8012354>
10012478:	00000506 	br	10012490 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1001247c:	0001883a 	nop
10012480:	00000306 	br	10012490 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012484:	0001883a 	nop
10012488:	00000106 	br	10012490 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1001248c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012490:	e0fff517 	ldw	r3,-44(fp)
10012494:	e0bffd17 	ldw	r2,-12(fp)
10012498:	18801826 	beq	r3,r2,100124fc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001249c:	0005303a 	rdctl	r2,status
100124a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100124a4:	e0fffb17 	ldw	r3,-20(fp)
100124a8:	00bfff84 	movi	r2,-2
100124ac:	1884703a 	and	r2,r3,r2
100124b0:	1001703a 	wrctl	status,r2
  
  return context;
100124b4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100124b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100124bc:	e0bffc17 	ldw	r2,-16(fp)
100124c0:	10800817 	ldw	r2,32(r2)
100124c4:	10c00054 	ori	r3,r2,1
100124c8:	e0bffc17 	ldw	r2,-16(fp)
100124cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100124d0:	e0bffc17 	ldw	r2,-16(fp)
100124d4:	10800017 	ldw	r2,0(r2)
100124d8:	10800104 	addi	r2,r2,4
100124dc:	1007883a 	mov	r3,r2
100124e0:	e0bffc17 	ldw	r2,-16(fp)
100124e4:	10800817 	ldw	r2,32(r2)
100124e8:	18800035 	stwio	r2,0(r3)
100124ec:	e0bffa17 	ldw	r2,-24(fp)
100124f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100124f4:	e0bff917 	ldw	r2,-28(fp)
100124f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100124fc:	e0fff517 	ldw	r3,-44(fp)
10012500:	e0bffd17 	ldw	r2,-12(fp)
10012504:	18800426 	beq	r3,r2,10012518 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012508:	e0fff517 	ldw	r3,-44(fp)
1001250c:	e0bffd17 	ldw	r2,-12(fp)
10012510:	1885c83a 	sub	r2,r3,r2
10012514:	00000606 	br	10012530 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10012518:	e0bfff17 	ldw	r2,-4(fp)
1001251c:	1090000c 	andi	r2,r2,16384
10012520:	10000226 	beq	r2,zero,1001252c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012524:	00bffd44 	movi	r2,-11
10012528:	00000106 	br	10012530 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1001252c:	00bffec4 	movi	r2,-5
}
10012530:	e037883a 	mov	sp,fp
10012534:	dfc00117 	ldw	ra,4(sp)
10012538:	df000017 	ldw	fp,0(sp)
1001253c:	dec00204 	addi	sp,sp,8
10012540:	f800283a 	ret

10012544 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012544:	defff304 	addi	sp,sp,-52
10012548:	dfc00c15 	stw	ra,48(sp)
1001254c:	df000b15 	stw	fp,44(sp)
10012550:	df000b04 	addi	fp,sp,44
10012554:	e13ffc15 	stw	r4,-16(fp)
10012558:	e17ffd15 	stw	r5,-12(fp)
1001255c:	e1bffe15 	stw	r6,-8(fp)
10012560:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012564:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012568:	e0bffd17 	ldw	r2,-12(fp)
1001256c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012570:	00003706 	br	10012650 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012574:	e0bffc17 	ldw	r2,-16(fp)
10012578:	10800c17 	ldw	r2,48(r2)
1001257c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10012580:	e0bffc17 	ldw	r2,-16(fp)
10012584:	10800d17 	ldw	r2,52(r2)
10012588:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1001258c:	e0fff917 	ldw	r3,-28(fp)
10012590:	e0bff517 	ldw	r2,-44(fp)
10012594:	1880062e 	bgeu	r3,r2,100125b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10012598:	e0fff517 	ldw	r3,-44(fp)
1001259c:	e0bff917 	ldw	r2,-28(fp)
100125a0:	1885c83a 	sub	r2,r3,r2
100125a4:	10bfffc4 	addi	r2,r2,-1
100125a8:	e0bff615 	stw	r2,-40(fp)
100125ac:	00000b06 	br	100125dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100125b0:	e0bff517 	ldw	r2,-44(fp)
100125b4:	10000526 	beq	r2,zero,100125cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100125b8:	00c20004 	movi	r3,2048
100125bc:	e0bff917 	ldw	r2,-28(fp)
100125c0:	1885c83a 	sub	r2,r3,r2
100125c4:	e0bff615 	stw	r2,-40(fp)
100125c8:	00000406 	br	100125dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100125cc:	00c1ffc4 	movi	r3,2047
100125d0:	e0bff917 	ldw	r2,-28(fp)
100125d4:	1885c83a 	sub	r2,r3,r2
100125d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100125dc:	e0bff617 	ldw	r2,-40(fp)
100125e0:	10001e26 	beq	r2,zero,1001265c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100125e4:	e0fffe17 	ldw	r3,-8(fp)
100125e8:	e0bff617 	ldw	r2,-40(fp)
100125ec:	1880022e 	bgeu	r3,r2,100125f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100125f0:	e0bffe17 	ldw	r2,-8(fp)
100125f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100125f8:	e0bffc17 	ldw	r2,-16(fp)
100125fc:	10c20e04 	addi	r3,r2,2104
10012600:	e0bff917 	ldw	r2,-28(fp)
10012604:	1885883a 	add	r2,r3,r2
10012608:	e1bff617 	ldw	r6,-40(fp)
1001260c:	e17ffd17 	ldw	r5,-12(fp)
10012610:	1009883a 	mov	r4,r2
10012614:	0005f9c0 	call	10005f9c <memcpy>
      ptr   += n;
10012618:	e0fffd17 	ldw	r3,-12(fp)
1001261c:	e0bff617 	ldw	r2,-40(fp)
10012620:	1885883a 	add	r2,r3,r2
10012624:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10012628:	e0fffe17 	ldw	r3,-8(fp)
1001262c:	e0bff617 	ldw	r2,-40(fp)
10012630:	1885c83a 	sub	r2,r3,r2
10012634:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012638:	e0fff917 	ldw	r3,-28(fp)
1001263c:	e0bff617 	ldw	r2,-40(fp)
10012640:	1885883a 	add	r2,r3,r2
10012644:	10c1ffcc 	andi	r3,r2,2047
10012648:	e0bffc17 	ldw	r2,-16(fp)
1001264c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012650:	e0bffe17 	ldw	r2,-8(fp)
10012654:	00bfc716 	blt	zero,r2,10012574 <__alt_data_end+0xf8012574>
10012658:	00000106 	br	10012660 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1001265c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012660:	0005303a 	rdctl	r2,status
10012664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012668:	e0fffb17 	ldw	r3,-20(fp)
1001266c:	00bfff84 	movi	r2,-2
10012670:	1884703a 	and	r2,r3,r2
10012674:	1001703a 	wrctl	status,r2
  
  return context;
10012678:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1001267c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012680:	e0bffc17 	ldw	r2,-16(fp)
10012684:	10800817 	ldw	r2,32(r2)
10012688:	10c00094 	ori	r3,r2,2
1001268c:	e0bffc17 	ldw	r2,-16(fp)
10012690:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012694:	e0bffc17 	ldw	r2,-16(fp)
10012698:	10800017 	ldw	r2,0(r2)
1001269c:	10800104 	addi	r2,r2,4
100126a0:	1007883a 	mov	r3,r2
100126a4:	e0bffc17 	ldw	r2,-16(fp)
100126a8:	10800817 	ldw	r2,32(r2)
100126ac:	18800035 	stwio	r2,0(r3)
100126b0:	e0bffa17 	ldw	r2,-24(fp)
100126b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100126b8:	e0bff817 	ldw	r2,-32(fp)
100126bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100126c0:	e0bffe17 	ldw	r2,-8(fp)
100126c4:	0080100e 	bge	zero,r2,10012708 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100126c8:	e0bfff17 	ldw	r2,-4(fp)
100126cc:	1090000c 	andi	r2,r2,16384
100126d0:	1000101e 	bne	r2,zero,10012714 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100126d4:	0001883a 	nop
100126d8:	e0bffc17 	ldw	r2,-16(fp)
100126dc:	10c00d17 	ldw	r3,52(r2)
100126e0:	e0bff517 	ldw	r2,-44(fp)
100126e4:	1880051e 	bne	r3,r2,100126fc <altera_avalon_jtag_uart_write+0x1b8>
100126e8:	e0bffc17 	ldw	r2,-16(fp)
100126ec:	10c00917 	ldw	r3,36(r2)
100126f0:	e0bffc17 	ldw	r2,-16(fp)
100126f4:	10800117 	ldw	r2,4(r2)
100126f8:	18bff736 	bltu	r3,r2,100126d8 <__alt_data_end+0xf80126d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100126fc:	e0bffc17 	ldw	r2,-16(fp)
10012700:	10800917 	ldw	r2,36(r2)
10012704:	1000051e 	bne	r2,zero,1001271c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10012708:	e0bffe17 	ldw	r2,-8(fp)
1001270c:	00bfd016 	blt	zero,r2,10012650 <__alt_data_end+0xf8012650>
10012710:	00000306 	br	10012720 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012714:	0001883a 	nop
10012718:	00000106 	br	10012720 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1001271c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012720:	e0fffd17 	ldw	r3,-12(fp)
10012724:	e0bff717 	ldw	r2,-36(fp)
10012728:	18800426 	beq	r3,r2,1001273c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1001272c:	e0fffd17 	ldw	r3,-12(fp)
10012730:	e0bff717 	ldw	r2,-36(fp)
10012734:	1885c83a 	sub	r2,r3,r2
10012738:	00000606 	br	10012754 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1001273c:	e0bfff17 	ldw	r2,-4(fp)
10012740:	1090000c 	andi	r2,r2,16384
10012744:	10000226 	beq	r2,zero,10012750 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012748:	00bffd44 	movi	r2,-11
1001274c:	00000106 	br	10012754 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10012750:	00bffec4 	movi	r2,-5
}
10012754:	e037883a 	mov	sp,fp
10012758:	dfc00117 	ldw	ra,4(sp)
1001275c:	df000017 	ldw	fp,0(sp)
10012760:	dec00204 	addi	sp,sp,8
10012764:	f800283a 	ret

10012768 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
10012768:	defffc04 	addi	sp,sp,-16
1001276c:	dfc00315 	stw	ra,12(sp)
10012770:	df000215 	stw	fp,8(sp)
10012774:	df000204 	addi	fp,sp,8
10012778:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
1001277c:	d1600804 	addi	r5,gp,-32736
10012780:	e13fff17 	ldw	r4,-4(fp)
10012784:	00139300 	call	10013930 <alt_find_dev>
10012788:	e0bffe15 	stw	r2,-8(fp)

  return dev;
1001278c:	e0bffe17 	ldw	r2,-8(fp)
}
10012790:	e037883a 	mov	sp,fp
10012794:	dfc00117 	ldw	ra,4(sp)
10012798:	df000017 	ldw	fp,0(sp)
1001279c:	dec00204 	addi	sp,sp,8
100127a0:	f800283a 	ret

100127a4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
100127a4:	defffa04 	addi	sp,sp,-24
100127a8:	df000515 	stw	fp,20(sp)
100127ac:	df000504 	addi	fp,sp,20
100127b0:	e13ffc15 	stw	r4,-16(fp)
100127b4:	e17ffd15 	stw	r5,-12(fp)
100127b8:	e1bffe15 	stw	r6,-8(fp)
100127bc:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
100127c0:	e0bffc17 	ldw	r2,-16(fp)
100127c4:	10800f17 	ldw	r2,60(r2)
100127c8:	e0fffe17 	ldw	r3,-8(fp)
100127cc:	1880042e 	bgeu	r3,r2,100127e0 <alt_up_pixel_buffer_dma_draw+0x3c>
100127d0:	e0bffc17 	ldw	r2,-16(fp)
100127d4:	10801017 	ldw	r2,64(r2)
100127d8:	e0ffff17 	ldw	r3,-4(fp)
100127dc:	18800236 	bltu	r3,r2,100127e8 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
100127e0:	00bfffc4 	movi	r2,-1
100127e4:	00005006 	br	10012928 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
100127e8:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100127ec:	e0bffc17 	ldw	r2,-16(fp)
100127f0:	10800d17 	ldw	r2,52(r2)
100127f4:	1000151e 	bne	r2,zero,1001284c <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
100127f8:	e0bffc17 	ldw	r2,-16(fp)
100127fc:	10c01217 	ldw	r3,72(r2)
10012800:	e0bffe17 	ldw	r2,-8(fp)
10012804:	1886703a 	and	r3,r3,r2
10012808:	e0bffc17 	ldw	r2,-16(fp)
1001280c:	10801117 	ldw	r2,68(r2)
10012810:	1884983a 	sll	r2,r3,r2
10012814:	e0fffb17 	ldw	r3,-20(fp)
10012818:	1885883a 	add	r2,r3,r2
1001281c:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
10012820:	e0bffc17 	ldw	r2,-16(fp)
10012824:	10c01417 	ldw	r3,80(r2)
10012828:	e0bfff17 	ldw	r2,-4(fp)
1001282c:	1886703a 	and	r3,r3,r2
10012830:	e0bffc17 	ldw	r2,-16(fp)
10012834:	10801317 	ldw	r2,76(r2)
10012838:	1884983a 	sll	r2,r3,r2
1001283c:	e0fffb17 	ldw	r3,-20(fp)
10012840:	1885883a 	add	r2,r3,r2
10012844:	e0bffb15 	stw	r2,-20(fp)
10012848:	00001706 	br	100128a8 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
1001284c:	e0bffc17 	ldw	r2,-16(fp)
10012850:	10c01217 	ldw	r3,72(r2)
10012854:	e0bffe17 	ldw	r2,-8(fp)
10012858:	1886703a 	and	r3,r3,r2
1001285c:	e0bffc17 	ldw	r2,-16(fp)
10012860:	10801117 	ldw	r2,68(r2)
10012864:	1884983a 	sll	r2,r3,r2
10012868:	e0fffb17 	ldw	r3,-20(fp)
1001286c:	1885883a 	add	r2,r3,r2
10012870:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
10012874:	e0bffc17 	ldw	r2,-16(fp)
10012878:	10c01417 	ldw	r3,80(r2)
1001287c:	e0bfff17 	ldw	r2,-4(fp)
10012880:	1886703a 	and	r3,r3,r2
10012884:	e0bffc17 	ldw	r2,-16(fp)
10012888:	10800f17 	ldw	r2,60(r2)
1001288c:	1887383a 	mul	r3,r3,r2
10012890:	e0bffc17 	ldw	r2,-16(fp)
10012894:	10801117 	ldw	r2,68(r2)
10012898:	1884983a 	sll	r2,r3,r2
1001289c:	e0fffb17 	ldw	r3,-20(fp)
100128a0:	1885883a 	add	r2,r3,r2
100128a4:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100128a8:	e0bffc17 	ldw	r2,-16(fp)
100128ac:	10800e17 	ldw	r2,56(r2)
100128b0:	10800058 	cmpnei	r2,r2,1
100128b4:	1000081e 	bne	r2,zero,100128d8 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
100128b8:	e0bffc17 	ldw	r2,-16(fp)
100128bc:	10c00c17 	ldw	r3,48(r2)
100128c0:	e0bffb17 	ldw	r2,-20(fp)
100128c4:	1885883a 	add	r2,r3,r2
100128c8:	1007883a 	mov	r3,r2
100128cc:	e0bffd17 	ldw	r2,-12(fp)
100128d0:	18800025 	stbio	r2,0(r3)
100128d4:	00001306 	br	10012924 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100128d8:	e0bffc17 	ldw	r2,-16(fp)
100128dc:	10800e17 	ldw	r2,56(r2)
100128e0:	10800098 	cmpnei	r2,r2,2
100128e4:	1000081e 	bne	r2,zero,10012908 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
100128e8:	e0bffc17 	ldw	r2,-16(fp)
100128ec:	10c00c17 	ldw	r3,48(r2)
100128f0:	e0bffb17 	ldw	r2,-20(fp)
100128f4:	1885883a 	add	r2,r3,r2
100128f8:	1007883a 	mov	r3,r2
100128fc:	e0bffd17 	ldw	r2,-12(fp)
10012900:	1880002d 	sthio	r2,0(r3)
10012904:	00000706 	br	10012924 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10012908:	e0bffc17 	ldw	r2,-16(fp)
1001290c:	10c00c17 	ldw	r3,48(r2)
10012910:	e0bffb17 	ldw	r2,-20(fp)
10012914:	1885883a 	add	r2,r3,r2
10012918:	1007883a 	mov	r3,r2
1001291c:	e0bffd17 	ldw	r2,-12(fp)
10012920:	18800035 	stwio	r2,0(r3)
	}

	return 0;
10012924:	0005883a 	mov	r2,zero
}
10012928:	e037883a 	mov	sp,fp
1001292c:	df000017 	ldw	fp,0(sp)
10012930:	dec00104 	addi	sp,sp,4
10012934:	f800283a 	ret

10012938 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
10012938:	defffd04 	addi	sp,sp,-12
1001293c:	df000215 	stw	fp,8(sp)
10012940:	df000204 	addi	fp,sp,8
10012944:	e13ffe15 	stw	r4,-8(fp)
10012948:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
1001294c:	e0bffe17 	ldw	r2,-8(fp)
10012950:	10800a17 	ldw	r2,40(r2)
10012954:	10800104 	addi	r2,r2,4
10012958:	1007883a 	mov	r3,r2
1001295c:	e0bfff17 	ldw	r2,-4(fp)
10012960:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
10012964:	e0bffe17 	ldw	r2,-8(fp)
10012968:	10800a17 	ldw	r2,40(r2)
1001296c:	10800104 	addi	r2,r2,4
10012970:	10800037 	ldwio	r2,0(r2)
10012974:	1007883a 	mov	r3,r2
10012978:	e0bffe17 	ldw	r2,-8(fp)
1001297c:	10c00c15 	stw	r3,48(r2)
	return 0;
10012980:	0005883a 	mov	r2,zero
}
10012984:	e037883a 	mov	sp,fp
10012988:	df000017 	ldw	fp,0(sp)
1001298c:	dec00104 	addi	sp,sp,4
10012990:	f800283a 	ret

10012994 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
10012994:	defffd04 	addi	sp,sp,-12
10012998:	df000215 	stw	fp,8(sp)
1001299c:	dc000115 	stw	r16,4(sp)
100129a0:	df000204 	addi	fp,sp,8
100129a4:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
100129a8:	e0bffe17 	ldw	r2,-8(fp)
100129ac:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
100129b0:	e0bffe17 	ldw	r2,-8(fp)
100129b4:	10800a17 	ldw	r2,40(r2)
100129b8:	1007883a 	mov	r3,r2
100129bc:	00800044 	movi	r2,1
100129c0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
100129c4:	e0bffe17 	ldw	r2,-8(fp)
100129c8:	10c00b17 	ldw	r3,44(r2)
100129cc:	e0bffe17 	ldw	r2,-8(fp)
100129d0:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
100129d4:	e0bffe17 	ldw	r2,-8(fp)
100129d8:	14000b15 	stw	r16,44(r2)
	return 0;
100129dc:	0005883a 	mov	r2,zero
}
100129e0:	e6ffff04 	addi	sp,fp,-4
100129e4:	df000117 	ldw	fp,4(sp)
100129e8:	dc000017 	ldw	r16,0(sp)
100129ec:	dec00204 	addi	sp,sp,8
100129f0:	f800283a 	ret

100129f4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
100129f4:	defffe04 	addi	sp,sp,-8
100129f8:	df000115 	stw	fp,4(sp)
100129fc:	df000104 	addi	fp,sp,4
10012a00:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
10012a04:	e0bfff17 	ldw	r2,-4(fp)
10012a08:	10800a17 	ldw	r2,40(r2)
10012a0c:	10800304 	addi	r2,r2,12
10012a10:	10800037 	ldwio	r2,0(r2)
10012a14:	1080004c 	andi	r2,r2,1
}
10012a18:	e037883a 	mov	sp,fp
10012a1c:	df000017 	ldw	fp,0(sp)
10012a20:	dec00104 	addi	sp,sp,4
10012a24:	f800283a 	ret

10012a28 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
10012a28:	defff704 	addi	sp,sp,-36
10012a2c:	df000815 	stw	fp,32(sp)
10012a30:	dd400715 	stw	r21,28(sp)
10012a34:	dd000615 	stw	r20,24(sp)
10012a38:	dcc00515 	stw	r19,20(sp)
10012a3c:	dc800415 	stw	r18,16(sp)
10012a40:	dc400315 	stw	r17,12(sp)
10012a44:	dc000215 	stw	r16,8(sp)
10012a48:	df000804 	addi	fp,sp,32
10012a4c:	e13ff815 	stw	r4,-32(fp)
10012a50:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10012a54:	e0bff917 	ldw	r2,-28(fp)
10012a58:	10800058 	cmpnei	r2,r2,1
10012a5c:	1000031e 	bne	r2,zero,10012a6c <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
10012a60:	e0bff817 	ldw	r2,-32(fp)
10012a64:	14400c17 	ldw	r17,48(r2)
10012a68:	00000206 	br	10012a74 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
10012a6c:	e0bff817 	ldw	r2,-32(fp)
10012a70:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
10012a74:	e0bff817 	ldw	r2,-32(fp)
10012a78:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10012a7c:	e0bff817 	ldw	r2,-32(fp)
10012a80:	10800e17 	ldw	r2,56(r2)
10012a84:	10800098 	cmpnei	r2,r2,2
10012a88:	1000031e 	bne	r2,zero,10012a98 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
10012a8c:	8405883a 	add	r2,r16,r16
10012a90:	1021883a 	mov	r16,r2
10012a94:	00000306 	br	10012aa4 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
10012a98:	8405883a 	add	r2,r16,r16
10012a9c:	1085883a 	add	r2,r2,r2
10012aa0:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
10012aa4:	e0bff817 	ldw	r2,-32(fp)
10012aa8:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10012aac:	e0bff817 	ldw	r2,-32(fp)
10012ab0:	10800d17 	ldw	r2,52(r2)
10012ab4:	1000111e 	bne	r2,zero,10012afc <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10012ab8:	e0bff817 	ldw	r2,-32(fp)
10012abc:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
10012ac0:	0029883a 	mov	r20,zero
10012ac4:	00000b06 	br	10012af4 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
10012ac8:	0027883a 	mov	r19,zero
10012acc:	00000406 	br	10012ae0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
10012ad0:	9c45883a 	add	r2,r19,r17
10012ad4:	0007883a 	mov	r3,zero
10012ad8:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
10012adc:	9cc00104 	addi	r19,r19,4
10012ae0:	9c3ffb36 	bltu	r19,r16,10012ad0 <__alt_data_end+0xf8012ad0>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
10012ae4:	00800044 	movi	r2,1
10012ae8:	1544983a 	sll	r2,r2,r21
10012aec:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
10012af0:	a5000044 	addi	r20,r20,1
10012af4:	a4bff436 	bltu	r20,r18,10012ac8 <__alt_data_end+0xf8012ac8>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
10012af8:	00000a06 	br	10012b24 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
10012afc:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
10012b00:	0021883a 	mov	r16,zero
10012b04:	00000506 	br	10012b1c <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
10012b08:	8005883a 	mov	r2,r16
10012b0c:	1445883a 	add	r2,r2,r17
10012b10:	0007883a 	mov	r3,zero
10012b14:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
10012b18:	84000104 	addi	r16,r16,4
10012b1c:	8005883a 	mov	r2,r16
10012b20:	14bff936 	bltu	r2,r18,10012b08 <__alt_data_end+0xf8012b08>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
10012b24:	0001883a 	nop
10012b28:	e6fffa04 	addi	sp,fp,-24
10012b2c:	df000617 	ldw	fp,24(sp)
10012b30:	dd400517 	ldw	r21,20(sp)
10012b34:	dd000417 	ldw	r20,16(sp)
10012b38:	dcc00317 	ldw	r19,12(sp)
10012b3c:	dc800217 	ldw	r18,8(sp)
10012b40:	dc400117 	ldw	r17,4(sp)
10012b44:	dc000017 	ldw	r16,0(sp)
10012b48:	dec00704 	addi	sp,sp,28
10012b4c:	f800283a 	ret

10012b50 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
10012b50:	defff304 	addi	sp,sp,-52
10012b54:	df000c15 	stw	fp,48(sp)
10012b58:	ddc00b15 	stw	r23,44(sp)
10012b5c:	dd800a15 	stw	r22,40(sp)
10012b60:	dd400915 	stw	r21,36(sp)
10012b64:	dd000815 	stw	r20,32(sp)
10012b68:	dcc00715 	stw	r19,28(sp)
10012b6c:	dc800615 	stw	r18,24(sp)
10012b70:	dc400515 	stw	r17,20(sp)
10012b74:	dc000415 	stw	r16,16(sp)
10012b78:	df000c04 	addi	fp,sp,48
10012b7c:	e13ff415 	stw	r4,-48(fp)
10012b80:	e17ff515 	stw	r5,-44(fp)
10012b84:	e1bff615 	stw	r6,-40(fp)
10012b88:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10012b8c:	e0bff417 	ldw	r2,-48(fp)
10012b90:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
10012b94:	e0bff417 	ldw	r2,-48(fp)
10012b98:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
10012b9c:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
10012ba0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
10012ba4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
10012ba8:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
10012bac:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
10012bb0:	a580032e 	bgeu	r20,r22,10012bc0 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
10012bb4:	b02b883a 	mov	r21,r22
		l_x = r_x;
10012bb8:	a02d883a 	mov	r22,r20
		r_x = temp;
10012bbc:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
10012bc0:	9c40032e 	bgeu	r19,r17,10012bd0 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
10012bc4:	882b883a 	mov	r21,r17
		t_y = b_y;
10012bc8:	9823883a 	mov	r17,r19
		b_y = temp;
10012bcc:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
10012bd0:	b480892e 	bgeu	r22,r18,10012df8 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
10012bd4:	8c00882e 	bgeu	r17,r16,10012df8 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
10012bd8:	a4800136 	bltu	r20,r18,10012be0 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
10012bdc:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
10012be0:	9c000136 	bltu	r19,r16,10012be8 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
10012be4:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10012be8:	e0800317 	ldw	r2,12(fp)
10012bec:	10800058 	cmpnei	r2,r2,1
10012bf0:	1000031e 	bne	r2,zero,10012c00 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
10012bf4:	e0bff417 	ldw	r2,-48(fp)
10012bf8:	14000c17 	ldw	r16,48(r2)
10012bfc:	00000206 	br	10012c08 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
10012c00:	e0bff417 	ldw	r2,-48(fp)
10012c04:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10012c08:	e0bff417 	ldw	r2,-48(fp)
10012c0c:	10800d17 	ldw	r2,52(r2)
10012c10:	10003c1e 	bne	r2,zero,10012d04 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10012c14:	e0bff417 	ldw	r2,-48(fp)
10012c18:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
10012c1c:	8d44983a 	sll	r2,r17,r21
10012c20:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10012c24:	e0bff417 	ldw	r2,-48(fp)
10012c28:	10800e17 	ldw	r2,56(r2)
10012c2c:	10800058 	cmpnei	r2,r2,1
10012c30:	10000f1e 	bne	r2,zero,10012c70 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
10012c34:	8825883a 	mov	r18,r17
10012c38:	00000b06 	br	10012c68 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
10012c3c:	b023883a 	mov	r17,r22
10012c40:	00000406 	br	10012c54 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
10012c44:	8c05883a 	add	r2,r17,r16
10012c48:	b807883a 	mov	r3,r23
10012c4c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10012c50:	8c400044 	addi	r17,r17,1
10012c54:	a47ffb2e 	bgeu	r20,r17,10012c44 <__alt_data_end+0xf8012c44>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
10012c58:	00800044 	movi	r2,1
10012c5c:	1544983a 	sll	r2,r2,r21
10012c60:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10012c64:	94800044 	addi	r18,r18,1
10012c68:	9cbff42e 	bgeu	r19,r18,10012c3c <__alt_data_end+0xf8012c3c>
10012c6c:	00006306 	br	10012dfc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10012c70:	e0bff417 	ldw	r2,-48(fp)
10012c74:	10800e17 	ldw	r2,56(r2)
10012c78:	10800098 	cmpnei	r2,r2,2
10012c7c:	1000101e 	bne	r2,zero,10012cc0 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
10012c80:	8825883a 	mov	r18,r17
10012c84:	00000c06 	br	10012cb8 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
10012c88:	b023883a 	mov	r17,r22
10012c8c:	00000506 	br	10012ca4 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
10012c90:	8c45883a 	add	r2,r17,r17
10012c94:	1405883a 	add	r2,r2,r16
10012c98:	b807883a 	mov	r3,r23
10012c9c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10012ca0:	8c400044 	addi	r17,r17,1
10012ca4:	a47ffa2e 	bgeu	r20,r17,10012c90 <__alt_data_end+0xf8012c90>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
10012ca8:	00800044 	movi	r2,1
10012cac:	1544983a 	sll	r2,r2,r21
10012cb0:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10012cb4:	94800044 	addi	r18,r18,1
10012cb8:	9cbff32e 	bgeu	r19,r18,10012c88 <__alt_data_end+0xf8012c88>
10012cbc:	00004f06 	br	10012dfc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10012cc0:	8825883a 	mov	r18,r17
10012cc4:	00000d06 	br	10012cfc <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
10012cc8:	b023883a 	mov	r17,r22
10012ccc:	00000606 	br	10012ce8 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
10012cd0:	8c45883a 	add	r2,r17,r17
10012cd4:	1085883a 	add	r2,r2,r2
10012cd8:	1405883a 	add	r2,r2,r16
10012cdc:	b807883a 	mov	r3,r23
10012ce0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10012ce4:	8c400044 	addi	r17,r17,1
10012ce8:	a47ff92e 	bgeu	r20,r17,10012cd0 <__alt_data_end+0xf8012cd0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
10012cec:	00800044 	movi	r2,1
10012cf0:	1544983a 	sll	r2,r2,r21
10012cf4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10012cf8:	94800044 	addi	r18,r18,1
10012cfc:	9cbff22e 	bgeu	r19,r18,10012cc8 <__alt_data_end+0xf8012cc8>
10012d00:	00003e06 	br	10012dfc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10012d04:	e0bff417 	ldw	r2,-48(fp)
10012d08:	10800e17 	ldw	r2,56(r2)
10012d0c:	10800058 	cmpnei	r2,r2,1
10012d10:	10000f1e 	bne	r2,zero,10012d50 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
10012d14:	8c85383a 	mul	r2,r17,r18
10012d18:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10012d1c:	882b883a 	mov	r21,r17
10012d20:	00000906 	br	10012d48 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
10012d24:	b023883a 	mov	r17,r22
10012d28:	00000406 	br	10012d3c <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
10012d2c:	8c05883a 	add	r2,r17,r16
10012d30:	b807883a 	mov	r3,r23
10012d34:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10012d38:	8c400044 	addi	r17,r17,1
10012d3c:	a47ffb2e 	bgeu	r20,r17,10012d2c <__alt_data_end+0xf8012d2c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
10012d40:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10012d44:	ad400044 	addi	r21,r21,1
10012d48:	9d7ff62e 	bgeu	r19,r21,10012d24 <__alt_data_end+0xf8012d24>
10012d4c:	00002b06 	br	10012dfc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10012d50:	e0bff417 	ldw	r2,-48(fp)
10012d54:	10800e17 	ldw	r2,56(r2)
10012d58:	10800098 	cmpnei	r2,r2,2
10012d5c:	1000121e 	bne	r2,zero,10012da8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
10012d60:	9485883a 	add	r2,r18,r18
10012d64:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
10012d68:	8c85383a 	mul	r2,r17,r18
10012d6c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10012d70:	882b883a 	mov	r21,r17
10012d74:	00000a06 	br	10012da0 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
10012d78:	b023883a 	mov	r17,r22
10012d7c:	00000506 	br	10012d94 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
10012d80:	8c45883a 	add	r2,r17,r17
10012d84:	1405883a 	add	r2,r2,r16
10012d88:	b807883a 	mov	r3,r23
10012d8c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10012d90:	8c400044 	addi	r17,r17,1
10012d94:	a47ffa2e 	bgeu	r20,r17,10012d80 <__alt_data_end+0xf8012d80>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
10012d98:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10012d9c:	ad400044 	addi	r21,r21,1
10012da0:	9d7ff52e 	bgeu	r19,r21,10012d78 <__alt_data_end+0xf8012d78>
10012da4:	00001506 	br	10012dfc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
10012da8:	9485883a 	add	r2,r18,r18
10012dac:	1085883a 	add	r2,r2,r2
10012db0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
10012db4:	8c85383a 	mul	r2,r17,r18
10012db8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10012dbc:	882b883a 	mov	r21,r17
10012dc0:	00000b06 	br	10012df0 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
10012dc4:	b023883a 	mov	r17,r22
10012dc8:	00000606 	br	10012de4 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
10012dcc:	8c45883a 	add	r2,r17,r17
10012dd0:	1085883a 	add	r2,r2,r2
10012dd4:	1405883a 	add	r2,r2,r16
10012dd8:	b807883a 	mov	r3,r23
10012ddc:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10012de0:	8c400044 	addi	r17,r17,1
10012de4:	a47ff92e 	bgeu	r20,r17,10012dcc <__alt_data_end+0xf8012dcc>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
10012de8:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10012dec:	ad400044 	addi	r21,r21,1
10012df0:	9d7ff42e 	bgeu	r19,r21,10012dc4 <__alt_data_end+0xf8012dc4>
10012df4:	00000106 	br	10012dfc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
10012df8:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
10012dfc:	e6fff804 	addi	sp,fp,-32
10012e00:	df000817 	ldw	fp,32(sp)
10012e04:	ddc00717 	ldw	r23,28(sp)
10012e08:	dd800617 	ldw	r22,24(sp)
10012e0c:	dd400517 	ldw	r21,20(sp)
10012e10:	dd000417 	ldw	r20,16(sp)
10012e14:	dcc00317 	ldw	r19,12(sp)
10012e18:	dc800217 	ldw	r18,8(sp)
10012e1c:	dc400117 	ldw	r17,4(sp)
10012e20:	dc000017 	ldw	r16,0(sp)
10012e24:	dec00904 	addi	sp,sp,36
10012e28:	f800283a 	ret

10012e2c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
10012e2c:	defff404 	addi	sp,sp,-48
10012e30:	df000b15 	stw	fp,44(sp)
10012e34:	dd800a15 	stw	r22,40(sp)
10012e38:	dd400915 	stw	r21,36(sp)
10012e3c:	dd000815 	stw	r20,32(sp)
10012e40:	dcc00715 	stw	r19,28(sp)
10012e44:	dc800615 	stw	r18,24(sp)
10012e48:	dc400515 	stw	r17,20(sp)
10012e4c:	dc000415 	stw	r16,16(sp)
10012e50:	df000b04 	addi	fp,sp,44
10012e54:	e13ff515 	stw	r4,-44(fp)
10012e58:	e17ff615 	stw	r5,-40(fp)
10012e5c:	e1bff715 	stw	r6,-36(fp)
10012e60:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10012e64:	e0bff517 	ldw	r2,-44(fp)
10012e68:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
10012e6c:	e0bff517 	ldw	r2,-44(fp)
10012e70:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
10012e74:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
10012e78:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
10012e7c:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
10012e80:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
10012e84:	9c40032e 	bgeu	r19,r17,10012e94 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
10012e88:	882d883a 	mov	r22,r17
		l_x = r_x;
10012e8c:	9823883a 	mov	r17,r19
		r_x = temp;
10012e90:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
10012e94:	8c805d2e 	bgeu	r17,r18,1001300c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
10012e98:	a4005c2e 	bgeu	r20,r16,1001300c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
10012e9c:	9c800136 	bltu	r19,r18,10012ea4 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
10012ea0:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10012ea4:	e0800217 	ldw	r2,8(fp)
10012ea8:	10800058 	cmpnei	r2,r2,1
10012eac:	1000031e 	bne	r2,zero,10012ebc <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
10012eb0:	e0bff517 	ldw	r2,-44(fp)
10012eb4:	14000c17 	ldw	r16,48(r2)
10012eb8:	00000206 	br	10012ec4 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
10012ebc:	e0bff517 	ldw	r2,-44(fp)
10012ec0:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10012ec4:	e0bff517 	ldw	r2,-44(fp)
10012ec8:	10800d17 	ldw	r2,52(r2)
10012ecc:	1000231e 	bne	r2,zero,10012f5c <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10012ed0:	e0bff517 	ldw	r2,-44(fp)
10012ed4:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
10012ed8:	a484983a 	sll	r2,r20,r18
10012edc:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10012ee0:	e0bff517 	ldw	r2,-44(fp)
10012ee4:	10800e17 	ldw	r2,56(r2)
10012ee8:	10800058 	cmpnei	r2,r2,1
10012eec:	1000071e 	bne	r2,zero,10012f0c <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
10012ef0:	00000406 	br	10012f04 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
10012ef4:	8c05883a 	add	r2,r17,r16
10012ef8:	a807883a 	mov	r3,r21
10012efc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10012f00:	8c400044 	addi	r17,r17,1
10012f04:	9c7ffb2e 	bgeu	r19,r17,10012ef4 <__alt_data_end+0xf8012ef4>
10012f08:	00004106 	br	10013010 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10012f0c:	e0bff517 	ldw	r2,-44(fp)
10012f10:	10800e17 	ldw	r2,56(r2)
10012f14:	10800098 	cmpnei	r2,r2,2
10012f18:	10000e1e 	bne	r2,zero,10012f54 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
10012f1c:	00000506 	br	10012f34 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10012f20:	8c45883a 	add	r2,r17,r17
10012f24:	1405883a 	add	r2,r2,r16
10012f28:	a807883a 	mov	r3,r21
10012f2c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10012f30:	8c400044 	addi	r17,r17,1
10012f34:	9c7ffa2e 	bgeu	r19,r17,10012f20 <__alt_data_end+0xf8012f20>
10012f38:	00003506 	br	10013010 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
10012f3c:	8c45883a 	add	r2,r17,r17
10012f40:	1085883a 	add	r2,r2,r2
10012f44:	1405883a 	add	r2,r2,r16
10012f48:	a807883a 	mov	r3,r21
10012f4c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
10012f50:	8c400044 	addi	r17,r17,1
10012f54:	9c7ff92e 	bgeu	r19,r17,10012f3c <__alt_data_end+0xf8012f3c>
10012f58:	00002d06 	br	10013010 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10012f5c:	e0bff517 	ldw	r2,-44(fp)
10012f60:	10800e17 	ldw	r2,56(r2)
10012f64:	10800058 	cmpnei	r2,r2,1
10012f68:	1000091e 	bne	r2,zero,10012f90 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
10012f6c:	a485383a 	mul	r2,r20,r18
10012f70:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10012f74:	00000406 	br	10012f88 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
10012f78:	8c05883a 	add	r2,r17,r16
10012f7c:	a807883a 	mov	r3,r21
10012f80:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10012f84:	8c400044 	addi	r17,r17,1
10012f88:	9c7ffb2e 	bgeu	r19,r17,10012f78 <__alt_data_end+0xf8012f78>
10012f8c:	00002006 	br	10013010 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10012f90:	e0bff517 	ldw	r2,-44(fp)
10012f94:	10800e17 	ldw	r2,56(r2)
10012f98:	10800098 	cmpnei	r2,r2,2
10012f9c:	10000c1e 	bne	r2,zero,10012fd0 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
10012fa0:	9485883a 	add	r2,r18,r18
10012fa4:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
10012fa8:	a485383a 	mul	r2,r20,r18
10012fac:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10012fb0:	00000506 	br	10012fc8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10012fb4:	8c45883a 	add	r2,r17,r17
10012fb8:	1405883a 	add	r2,r2,r16
10012fbc:	a807883a 	mov	r3,r21
10012fc0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10012fc4:	8c400044 	addi	r17,r17,1
10012fc8:	9c7ffa2e 	bgeu	r19,r17,10012fb4 <__alt_data_end+0xf8012fb4>
10012fcc:	00001006 	br	10013010 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
10012fd0:	9485883a 	add	r2,r18,r18
10012fd4:	1085883a 	add	r2,r2,r2
10012fd8:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
10012fdc:	a485383a 	mul	r2,r20,r18
10012fe0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10012fe4:	00000606 	br	10013000 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
10012fe8:	8c45883a 	add	r2,r17,r17
10012fec:	1085883a 	add	r2,r2,r2
10012ff0:	1405883a 	add	r2,r2,r16
10012ff4:	a807883a 	mov	r3,r21
10012ff8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10012ffc:	8c400044 	addi	r17,r17,1
10013000:	9c7ff92e 	bgeu	r19,r17,10012fe8 <__alt_data_end+0xf8012fe8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
10013004:	84a1883a 	add	r16,r16,r18
10013008:	00000106 	br	10013010 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
1001300c:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
10013010:	e6fff904 	addi	sp,fp,-28
10013014:	df000717 	ldw	fp,28(sp)
10013018:	dd800617 	ldw	r22,24(sp)
1001301c:	dd400517 	ldw	r21,20(sp)
10013020:	dd000417 	ldw	r20,16(sp)
10013024:	dcc00317 	ldw	r19,12(sp)
10013028:	dc800217 	ldw	r18,8(sp)
1001302c:	dc400117 	ldw	r17,4(sp)
10013030:	dc000017 	ldw	r16,0(sp)
10013034:	dec00804 	addi	sp,sp,32
10013038:	f800283a 	ret

1001303c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
1001303c:	defff404 	addi	sp,sp,-48
10013040:	df000b15 	stw	fp,44(sp)
10013044:	dd800a15 	stw	r22,40(sp)
10013048:	dd400915 	stw	r21,36(sp)
1001304c:	dd000815 	stw	r20,32(sp)
10013050:	dcc00715 	stw	r19,28(sp)
10013054:	dc800615 	stw	r18,24(sp)
10013058:	dc400515 	stw	r17,20(sp)
1001305c:	dc000415 	stw	r16,16(sp)
10013060:	df000b04 	addi	fp,sp,44
10013064:	e13ff515 	stw	r4,-44(fp)
10013068:	e17ff615 	stw	r5,-40(fp)
1001306c:	e1bff715 	stw	r6,-36(fp)
10013070:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10013074:	e0bff517 	ldw	r2,-44(fp)
10013078:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
1001307c:	e0bff517 	ldw	r2,-44(fp)
10013080:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
10013084:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
10013088:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
1001308c:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
10013090:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
10013094:	9d00032e 	bgeu	r19,r20,100130a4 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
10013098:	a02b883a 	mov	r21,r20
		t_y = b_y;
1001309c:	9829883a 	mov	r20,r19
		b_y = temp;
100130a0:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
100130a4:	94406c2e 	bgeu	r18,r17,10013258 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
100130a8:	a4006b2e 	bgeu	r20,r16,10013258 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
100130ac:	9c000136 	bltu	r19,r16,100130b4 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
100130b0:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
100130b4:	e0800217 	ldw	r2,8(fp)
100130b8:	10800058 	cmpnei	r2,r2,1
100130bc:	1000031e 	bne	r2,zero,100130cc <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
100130c0:	e0bff517 	ldw	r2,-44(fp)
100130c4:	14000c17 	ldw	r16,48(r2)
100130c8:	00000206 	br	100130d4 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
100130cc:	e0bff517 	ldw	r2,-44(fp)
100130d0:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100130d4:	e0bff517 	ldw	r2,-44(fp)
100130d8:	10800d17 	ldw	r2,52(r2)
100130dc:	1000301e 	bne	r2,zero,100131a0 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
100130e0:	e0bff517 	ldw	r2,-44(fp)
100130e4:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
100130e8:	a544983a 	sll	r2,r20,r21
100130ec:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100130f0:	e0bff517 	ldw	r2,-44(fp)
100130f4:	10800e17 	ldw	r2,56(r2)
100130f8:	10800058 	cmpnei	r2,r2,1
100130fc:	10000b1e 	bne	r2,zero,1001312c <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
10013100:	a023883a 	mov	r17,r20
10013104:	00000706 	br	10013124 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
10013108:	9405883a 	add	r2,r18,r16
1001310c:	b007883a 	mov	r3,r22
10013110:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
10013114:	00800044 	movi	r2,1
10013118:	1544983a 	sll	r2,r2,r21
1001311c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10013120:	8c400044 	addi	r17,r17,1
10013124:	9c7ff82e 	bgeu	r19,r17,10013108 <__alt_data_end+0xf8013108>
10013128:	00004c06 	br	1001325c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
1001312c:	e0bff517 	ldw	r2,-44(fp)
10013130:	10800e17 	ldw	r2,56(r2)
10013134:	10800098 	cmpnei	r2,r2,2
10013138:	10000c1e 	bne	r2,zero,1001316c <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
1001313c:	a023883a 	mov	r17,r20
10013140:	00000806 	br	10013164 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
10013144:	9485883a 	add	r2,r18,r18
10013148:	1405883a 	add	r2,r2,r16
1001314c:	b007883a 	mov	r3,r22
10013150:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
10013154:	00800044 	movi	r2,1
10013158:	1544983a 	sll	r2,r2,r21
1001315c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10013160:	8c400044 	addi	r17,r17,1
10013164:	9c7ff72e 	bgeu	r19,r17,10013144 <__alt_data_end+0xf8013144>
10013168:	00003c06 	br	1001325c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
1001316c:	a023883a 	mov	r17,r20
10013170:	00000906 	br	10013198 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
10013174:	9485883a 	add	r2,r18,r18
10013178:	1085883a 	add	r2,r2,r2
1001317c:	1405883a 	add	r2,r2,r16
10013180:	b007883a 	mov	r3,r22
10013184:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
10013188:	00800044 	movi	r2,1
1001318c:	1544983a 	sll	r2,r2,r21
10013190:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10013194:	8c400044 	addi	r17,r17,1
10013198:	9c7ff62e 	bgeu	r19,r17,10013174 <__alt_data_end+0xf8013174>
1001319c:	00002f06 	br	1001325c <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100131a0:	e0bff517 	ldw	r2,-44(fp)
100131a4:	10800e17 	ldw	r2,56(r2)
100131a8:	10800058 	cmpnei	r2,r2,1
100131ac:	10000a1e 	bne	r2,zero,100131d8 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
100131b0:	a445383a 	mul	r2,r20,r17
100131b4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
100131b8:	00000506 	br	100131d0 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
100131bc:	9405883a 	add	r2,r18,r16
100131c0:	b007883a 	mov	r3,r22
100131c4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
100131c8:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100131cc:	a5000044 	addi	r20,r20,1
100131d0:	9d3ffa2e 	bgeu	r19,r20,100131bc <__alt_data_end+0xf80131bc>
100131d4:	00002106 	br	1001325c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100131d8:	e0bff517 	ldw	r2,-44(fp)
100131dc:	10800e17 	ldw	r2,56(r2)
100131e0:	10800098 	cmpnei	r2,r2,2
100131e4:	10000d1e 	bne	r2,zero,1001321c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
100131e8:	8c45883a 	add	r2,r17,r17
100131ec:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
100131f0:	a445383a 	mul	r2,r20,r17
100131f4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
100131f8:	00000606 	br	10013214 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
100131fc:	9485883a 	add	r2,r18,r18
10013200:	1405883a 	add	r2,r2,r16
10013204:	b007883a 	mov	r3,r22
10013208:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
1001320c:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10013210:	a5000044 	addi	r20,r20,1
10013214:	9d3ff92e 	bgeu	r19,r20,100131fc <__alt_data_end+0xf80131fc>
10013218:	00001006 	br	1001325c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
1001321c:	8c45883a 	add	r2,r17,r17
10013220:	1085883a 	add	r2,r2,r2
10013224:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
10013228:	a445383a 	mul	r2,r20,r17
1001322c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10013230:	00000706 	br	10013250 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
10013234:	9485883a 	add	r2,r18,r18
10013238:	1085883a 	add	r2,r2,r2
1001323c:	1405883a 	add	r2,r2,r16
10013240:	b007883a 	mov	r3,r22
10013244:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
10013248:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
1001324c:	a5000044 	addi	r20,r20,1
10013250:	9d3ff82e 	bgeu	r19,r20,10013234 <__alt_data_end+0xf8013234>
10013254:	00000106 	br	1001325c <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
10013258:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
1001325c:	e6fff904 	addi	sp,fp,-28
10013260:	df000717 	ldw	fp,28(sp)
10013264:	dd800617 	ldw	r22,24(sp)
10013268:	dd400517 	ldw	r21,20(sp)
1001326c:	dd000417 	ldw	r20,16(sp)
10013270:	dcc00317 	ldw	r19,12(sp)
10013274:	dc800217 	ldw	r18,8(sp)
10013278:	dc400117 	ldw	r17,4(sp)
1001327c:	dc000017 	ldw	r16,0(sp)
10013280:	dec00804 	addi	sp,sp,32
10013284:	f800283a 	ret

10013288 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
10013288:	defff804 	addi	sp,sp,-32
1001328c:	dfc00715 	stw	ra,28(sp)
10013290:	df000615 	stw	fp,24(sp)
10013294:	df000604 	addi	fp,sp,24
10013298:	e13ffc15 	stw	r4,-16(fp)
1001329c:	e17ffd15 	stw	r5,-12(fp)
100132a0:	e1bffe15 	stw	r6,-8(fp)
100132a4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
100132a8:	e0800417 	ldw	r2,16(fp)
100132ac:	d8800115 	stw	r2,4(sp)
100132b0:	e0800317 	ldw	r2,12(fp)
100132b4:	d8800015 	stw	r2,0(sp)
100132b8:	e1fffe17 	ldw	r7,-8(fp)
100132bc:	e1bfff17 	ldw	r6,-4(fp)
100132c0:	e17ffd17 	ldw	r5,-12(fp)
100132c4:	e13ffc17 	ldw	r4,-16(fp)
100132c8:	0012e2c0 	call	10012e2c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
100132cc:	e0800417 	ldw	r2,16(fp)
100132d0:	d8800115 	stw	r2,4(sp)
100132d4:	e0800317 	ldw	r2,12(fp)
100132d8:	d8800015 	stw	r2,0(sp)
100132dc:	e1c00217 	ldw	r7,8(fp)
100132e0:	e1bfff17 	ldw	r6,-4(fp)
100132e4:	e17ffd17 	ldw	r5,-12(fp)
100132e8:	e13ffc17 	ldw	r4,-16(fp)
100132ec:	0012e2c0 	call	10012e2c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
100132f0:	e0800417 	ldw	r2,16(fp)
100132f4:	d8800115 	stw	r2,4(sp)
100132f8:	e0800317 	ldw	r2,12(fp)
100132fc:	d8800015 	stw	r2,0(sp)
10013300:	e1c00217 	ldw	r7,8(fp)
10013304:	e1bffe17 	ldw	r6,-8(fp)
10013308:	e17ffd17 	ldw	r5,-12(fp)
1001330c:	e13ffc17 	ldw	r4,-16(fp)
10013310:	001303c0 	call	1001303c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
10013314:	e0800417 	ldw	r2,16(fp)
10013318:	d8800115 	stw	r2,4(sp)
1001331c:	e0800317 	ldw	r2,12(fp)
10013320:	d8800015 	stw	r2,0(sp)
10013324:	e1c00217 	ldw	r7,8(fp)
10013328:	e1bffe17 	ldw	r6,-8(fp)
1001332c:	e17fff17 	ldw	r5,-4(fp)
10013330:	e13ffc17 	ldw	r4,-16(fp)
10013334:	001303c0 	call	1001303c <alt_up_pixel_buffer_dma_draw_vline>
}
10013338:	0001883a 	nop
1001333c:	e037883a 	mov	sp,fp
10013340:	dfc00117 	ldw	ra,4(sp)
10013344:	df000017 	ldw	fp,0(sp)
10013348:	dec00204 	addi	sp,sp,8
1001334c:	f800283a 	ret

10013350 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
10013350:	deffff04 	addi	sp,sp,-4
10013354:	df000015 	stw	fp,0(sp)
10013358:	d839883a 	mov	fp,sp
1001335c:	2005883a 	mov	r2,r4
10013360:	3007883a 	mov	r3,r6
10013364:	3809883a 	mov	r4,r7
10013368:	e1800117 	ldw	r6,4(fp)
1001336c:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
10013370:	3800051e 	bne	r7,zero,10013388 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
10013374:	2909383a 	mul	r4,r5,r4
10013378:	20c7883a 	add	r3,r4,r3
1001337c:	1885883a 	add	r2,r3,r2
10013380:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
10013384:	00000e06 	br	100133c0 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
10013388:	39c00058 	cmpnei	r7,r7,1
1001338c:	3800061e 	bne	r7,zero,100133a8 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
10013390:	2909383a 	mul	r4,r5,r4
10013394:	20c7883a 	add	r3,r4,r3
10013398:	18c7883a 	add	r3,r3,r3
1001339c:	1885883a 	add	r2,r3,r2
100133a0:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
100133a4:	00000606 	br	100133c0 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
100133a8:	2909383a 	mul	r4,r5,r4
100133ac:	20c7883a 	add	r3,r4,r3
100133b0:	18c7883a 	add	r3,r3,r3
100133b4:	18c7883a 	add	r3,r3,r3
100133b8:	1885883a 	add	r2,r3,r2
100133bc:	11800035 	stwio	r6,0(r2)
}
100133c0:	0001883a 	nop
100133c4:	e037883a 	mov	sp,fp
100133c8:	df000017 	ldw	fp,0(sp)
100133cc:	dec00104 	addi	sp,sp,4
100133d0:	f800283a 	ret

100133d4 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
100133d4:	deffeb04 	addi	sp,sp,-84
100133d8:	dfc01415 	stw	ra,80(sp)
100133dc:	df001315 	stw	fp,76(sp)
100133e0:	ddc01215 	stw	r23,72(sp)
100133e4:	dd801115 	stw	r22,68(sp)
100133e8:	dd401015 	stw	r21,64(sp)
100133ec:	dd000f15 	stw	r20,60(sp)
100133f0:	dcc00e15 	stw	r19,56(sp)
100133f4:	dc800d15 	stw	r18,52(sp)
100133f8:	dc400c15 	stw	r17,48(sp)
100133fc:	dc000b15 	stw	r16,44(sp)
10013400:	df001304 	addi	fp,sp,76
10013404:	e13fef15 	stw	r4,-68(fp)
10013408:	e17ff015 	stw	r5,-64(fp)
1001340c:	e1bff115 	stw	r6,-60(fp)
10013410:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
10013414:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
10013418:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
1001341c:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
10013420:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
10013424:	a4c5c83a 	sub	r2,r20,r19
10013428:	1000010e 	bge	r2,zero,10013430 <alt_up_pixel_buffer_dma_draw_line+0x5c>
1001342c:	0085c83a 	sub	r2,zero,r2
10013430:	1007883a 	mov	r3,r2
10013434:	9445c83a 	sub	r2,r18,r17
10013438:	1000010e 	bge	r2,zero,10013440 <alt_up_pixel_buffer_dma_draw_line+0x6c>
1001343c:	0085c83a 	sub	r2,zero,r2
10013440:	10c4803a 	cmplt	r2,r2,r3
10013444:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
10013448:	e0bfef17 	ldw	r2,-68(fp)
1001344c:	10800e17 	ldw	r2,56(r2)
10013450:	10800060 	cmpeqi	r2,r2,1
10013454:	1000081e 	bne	r2,zero,10013478 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
10013458:	e0bfef17 	ldw	r2,-68(fp)
1001345c:	10800e17 	ldw	r2,56(r2)
10013460:	10800098 	cmpnei	r2,r2,2
10013464:	1000021e 	bne	r2,zero,10013470 <alt_up_pixel_buffer_dma_draw_line+0x9c>
10013468:	00800044 	movi	r2,1
1001346c:	00000306 	br	1001347c <alt_up_pixel_buffer_dma_draw_line+0xa8>
10013470:	00800084 	movi	r2,2
10013474:	00000106 	br	1001347c <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
10013478:	0005883a 	mov	r2,zero
1001347c:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
10013480:	e0800317 	ldw	r2,12(fp)
10013484:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
10013488:	e0bfef17 	ldw	r2,-68(fp)
1001348c:	10800d17 	ldw	r2,52(r2)
10013490:	1000071e 	bne	r2,zero,100134b0 <alt_up_pixel_buffer_dma_draw_line+0xdc>
10013494:	e0bfef17 	ldw	r2,-68(fp)
10013498:	10801317 	ldw	r2,76(r2)
1001349c:	e0fff417 	ldw	r3,-48(fp)
100134a0:	10c5c83a 	sub	r2,r2,r3
100134a4:	00c00044 	movi	r3,1
100134a8:	1884983a 	sll	r2,r3,r2
100134ac:	00000206 	br	100134b8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
100134b0:	e0bfef17 	ldw	r2,-68(fp)
100134b4:	10800f17 	ldw	r2,60(r2)
100134b8:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
100134bc:	e0800417 	ldw	r2,16(fp)
100134c0:	10800058 	cmpnei	r2,r2,1
100134c4:	1000031e 	bne	r2,zero,100134d4 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
100134c8:	e0bfef17 	ldw	r2,-68(fp)
100134cc:	15c00c17 	ldw	r23,48(r2)
100134d0:	00000206 	br	100134dc <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
100134d4:	e0bfef17 	ldw	r2,-68(fp)
100134d8:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
100134dc:	e0bff307 	ldb	r2,-52(fp)
100134e0:	0080060e 	bge	zero,r2,100134fc <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
100134e4:	8821883a 	mov	r16,r17
		x_0 = y_0;
100134e8:	9823883a 	mov	r17,r19
		y_0 = error;
100134ec:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
100134f0:	9021883a 	mov	r16,r18
		x_1 = y_1;
100134f4:	a025883a 	mov	r18,r20
		y_1 = error;
100134f8:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
100134fc:	9440060e 	bge	r18,r17,10013518 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
10013500:	8821883a 	mov	r16,r17
		x_0 = x_1;
10013504:	9023883a 	mov	r17,r18
		x_1 = error;
10013508:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
1001350c:	9821883a 	mov	r16,r19
		y_0 = y_1;
10013510:	a027883a 	mov	r19,r20
		y_1 = error;
10013514:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
10013518:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
1001351c:	a4c5c83a 	sub	r2,r20,r19
10013520:	1000010e 	bge	r2,zero,10013528 <alt_up_pixel_buffer_dma_draw_line+0x154>
10013524:	0085c83a 	sub	r2,zero,r2
10013528:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
1001352c:	a804d7fa 	srli	r2,r21,31
10013530:	1545883a 	add	r2,r2,r21
10013534:	1005d07a 	srai	r2,r2,1
10013538:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
1001353c:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
10013540:	9d00020e 	bge	r19,r20,1001354c <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
10013544:	04c00044 	movi	r19,1
10013548:	00000106 	br	10013550 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
1001354c:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
10013550:	e0bff307 	ldb	r2,-52(fp)
10013554:	10800058 	cmpnei	r2,r2,1
10013558:	1000211e 	bne	r2,zero,100135e0 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
1001355c:	00000f06 	br	1001359c <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
10013560:	e0bff417 	ldw	r2,-48(fp)
10013564:	d8800115 	stw	r2,4(sp)
10013568:	e0bff517 	ldw	r2,-44(fp)
1001356c:	d8800015 	stw	r2,0(sp)
10013570:	880f883a 	mov	r7,r17
10013574:	b00d883a 	mov	r6,r22
10013578:	e17ff617 	ldw	r5,-40(fp)
1001357c:	b809883a 	mov	r4,r23
10013580:	00133500 	call	10013350 <helper_plot_pixel>
			error = error + deltay;
10013584:	e0bff717 	ldw	r2,-36(fp)
10013588:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
1001358c:	0400020e 	bge	zero,r16,10013598 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
10013590:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
10013594:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
10013598:	8c400044 	addi	r17,r17,1
1001359c:	947ff00e 	bge	r18,r17,10013560 <__alt_data_end+0xf8013560>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
100135a0:	00001006 	br	100135e4 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
100135a4:	e0bff417 	ldw	r2,-48(fp)
100135a8:	d8800115 	stw	r2,4(sp)
100135ac:	e0bff517 	ldw	r2,-44(fp)
100135b0:	d8800015 	stw	r2,0(sp)
100135b4:	b00f883a 	mov	r7,r22
100135b8:	880d883a 	mov	r6,r17
100135bc:	e17ff617 	ldw	r5,-40(fp)
100135c0:	b809883a 	mov	r4,r23
100135c4:	00133500 	call	10013350 <helper_plot_pixel>
			error = error + deltay;
100135c8:	e0bff717 	ldw	r2,-36(fp)
100135cc:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
100135d0:	0400020e 	bge	zero,r16,100135dc <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
100135d4:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
100135d8:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
100135dc:	8c400044 	addi	r17,r17,1
100135e0:	947ff00e 	bge	r18,r17,100135a4 <__alt_data_end+0xf80135a4>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
100135e4:	0001883a 	nop
100135e8:	e6fff804 	addi	sp,fp,-32
100135ec:	dfc00917 	ldw	ra,36(sp)
100135f0:	df000817 	ldw	fp,32(sp)
100135f4:	ddc00717 	ldw	r23,28(sp)
100135f8:	dd800617 	ldw	r22,24(sp)
100135fc:	dd400517 	ldw	r21,20(sp)
10013600:	dd000417 	ldw	r20,16(sp)
10013604:	dcc00317 	ldw	r19,12(sp)
10013608:	dc800217 	ldw	r18,8(sp)
1001360c:	dc400117 	ldw	r17,4(sp)
10013610:	dc000017 	ldw	r16,0(sp)
10013614:	dec00a04 	addi	sp,sp,40
10013618:	f800283a 	ret

1001361c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1001361c:	defff504 	addi	sp,sp,-44
10013620:	df000a15 	stw	fp,40(sp)
10013624:	df000a04 	addi	fp,sp,40
10013628:	e13ffc15 	stw	r4,-16(fp)
1001362c:	e17ffd15 	stw	r5,-12(fp)
10013630:	e1bffe15 	stw	r6,-8(fp)
10013634:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10013638:	e03ff615 	stw	zero,-40(fp)
1001363c:	d0a70617 	ldw	r2,-25576(gp)
  
  if (alt_ticks_per_second ())
10013640:	10003c26 	beq	r2,zero,10013734 <alt_alarm_start+0x118>
  {
    if (alarm)
10013644:	e0bffc17 	ldw	r2,-16(fp)
10013648:	10003826 	beq	r2,zero,1001372c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1001364c:	e0bffc17 	ldw	r2,-16(fp)
10013650:	e0fffe17 	ldw	r3,-8(fp)
10013654:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10013658:	e0bffc17 	ldw	r2,-16(fp)
1001365c:	e0ffff17 	ldw	r3,-4(fp)
10013660:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013664:	0005303a 	rdctl	r2,status
10013668:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001366c:	e0fff917 	ldw	r3,-28(fp)
10013670:	00bfff84 	movi	r2,-2
10013674:	1884703a 	and	r2,r3,r2
10013678:	1001703a 	wrctl	status,r2
  
  return context;
1001367c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10013680:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10013684:	d0a70717 	ldw	r2,-25572(gp)
      
      current_nticks = alt_nticks();
10013688:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001368c:	e0fffd17 	ldw	r3,-12(fp)
10013690:	e0bff617 	ldw	r2,-40(fp)
10013694:	1885883a 	add	r2,r3,r2
10013698:	10c00044 	addi	r3,r2,1
1001369c:	e0bffc17 	ldw	r2,-16(fp)
100136a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100136a4:	e0bffc17 	ldw	r2,-16(fp)
100136a8:	10c00217 	ldw	r3,8(r2)
100136ac:	e0bff617 	ldw	r2,-40(fp)
100136b0:	1880042e 	bgeu	r3,r2,100136c4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100136b4:	e0bffc17 	ldw	r2,-16(fp)
100136b8:	00c00044 	movi	r3,1
100136bc:	10c00405 	stb	r3,16(r2)
100136c0:	00000206 	br	100136cc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100136c4:	e0bffc17 	ldw	r2,-16(fp)
100136c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100136cc:	e0bffc17 	ldw	r2,-16(fp)
100136d0:	d0e00e04 	addi	r3,gp,-32712
100136d4:	e0fffa15 	stw	r3,-24(fp)
100136d8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100136dc:	e0bffb17 	ldw	r2,-20(fp)
100136e0:	e0fffa17 	ldw	r3,-24(fp)
100136e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100136e8:	e0bffa17 	ldw	r2,-24(fp)
100136ec:	10c00017 	ldw	r3,0(r2)
100136f0:	e0bffb17 	ldw	r2,-20(fp)
100136f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100136f8:	e0bffa17 	ldw	r2,-24(fp)
100136fc:	10800017 	ldw	r2,0(r2)
10013700:	e0fffb17 	ldw	r3,-20(fp)
10013704:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10013708:	e0bffa17 	ldw	r2,-24(fp)
1001370c:	e0fffb17 	ldw	r3,-20(fp)
10013710:	10c00015 	stw	r3,0(r2)
10013714:	e0bff817 	ldw	r2,-32(fp)
10013718:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001371c:	e0bff717 	ldw	r2,-36(fp)
10013720:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10013724:	0005883a 	mov	r2,zero
10013728:	00000306 	br	10013738 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1001372c:	00bffa84 	movi	r2,-22
10013730:	00000106 	br	10013738 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10013734:	00bfde84 	movi	r2,-134
  }
}
10013738:	e037883a 	mov	sp,fp
1001373c:	df000017 	ldw	fp,0(sp)
10013740:	dec00104 	addi	sp,sp,4
10013744:	f800283a 	ret

10013748 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10013748:	defffe04 	addi	sp,sp,-8
1001374c:	df000115 	stw	fp,4(sp)
10013750:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10013754:	e03fff15 	stw	zero,-4(fp)
10013758:	00000506 	br	10013770 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1001375c:	e0bfff17 	ldw	r2,-4(fp)
10013760:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10013764:	e0bfff17 	ldw	r2,-4(fp)
10013768:	10800804 	addi	r2,r2,32
1001376c:	e0bfff15 	stw	r2,-4(fp)
10013770:	e0bfff17 	ldw	r2,-4(fp)
10013774:	10820030 	cmpltui	r2,r2,2048
10013778:	103ff81e 	bne	r2,zero,1001375c <__alt_data_end+0xf801375c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001377c:	0001883a 	nop
10013780:	e037883a 	mov	sp,fp
10013784:	df000017 	ldw	fp,0(sp)
10013788:	dec00104 	addi	sp,sp,4
1001378c:	f800283a 	ret

10013790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013790:	defffe04 	addi	sp,sp,-8
10013794:	dfc00115 	stw	ra,4(sp)
10013798:	df000015 	stw	fp,0(sp)
1001379c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100137a0:	d0a00b17 	ldw	r2,-32724(gp)
100137a4:	10000326 	beq	r2,zero,100137b4 <alt_get_errno+0x24>
100137a8:	d0a00b17 	ldw	r2,-32724(gp)
100137ac:	103ee83a 	callr	r2
100137b0:	00000106 	br	100137b8 <alt_get_errno+0x28>
100137b4:	d0a6f404 	addi	r2,gp,-25648
}
100137b8:	e037883a 	mov	sp,fp
100137bc:	dfc00117 	ldw	ra,4(sp)
100137c0:	df000017 	ldw	fp,0(sp)
100137c4:	dec00204 	addi	sp,sp,8
100137c8:	f800283a 	ret

100137cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100137cc:	defffa04 	addi	sp,sp,-24
100137d0:	dfc00515 	stw	ra,20(sp)
100137d4:	df000415 	stw	fp,16(sp)
100137d8:	df000404 	addi	fp,sp,16
100137dc:	e13ffe15 	stw	r4,-8(fp)
100137e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100137e4:	e0bffe17 	ldw	r2,-8(fp)
100137e8:	10000326 	beq	r2,zero,100137f8 <alt_dev_llist_insert+0x2c>
100137ec:	e0bffe17 	ldw	r2,-8(fp)
100137f0:	10800217 	ldw	r2,8(r2)
100137f4:	1000061e 	bne	r2,zero,10013810 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100137f8:	00137900 	call	10013790 <alt_get_errno>
100137fc:	1007883a 	mov	r3,r2
10013800:	00800584 	movi	r2,22
10013804:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10013808:	00bffa84 	movi	r2,-22
1001380c:	00001306 	br	1001385c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10013810:	e0bffe17 	ldw	r2,-8(fp)
10013814:	e0ffff17 	ldw	r3,-4(fp)
10013818:	e0fffc15 	stw	r3,-16(fp)
1001381c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10013820:	e0bffd17 	ldw	r2,-12(fp)
10013824:	e0fffc17 	ldw	r3,-16(fp)
10013828:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001382c:	e0bffc17 	ldw	r2,-16(fp)
10013830:	10c00017 	ldw	r3,0(r2)
10013834:	e0bffd17 	ldw	r2,-12(fp)
10013838:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001383c:	e0bffc17 	ldw	r2,-16(fp)
10013840:	10800017 	ldw	r2,0(r2)
10013844:	e0fffd17 	ldw	r3,-12(fp)
10013848:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001384c:	e0bffc17 	ldw	r2,-16(fp)
10013850:	e0fffd17 	ldw	r3,-12(fp)
10013854:	10c00015 	stw	r3,0(r2)

  return 0;  
10013858:	0005883a 	mov	r2,zero
}
1001385c:	e037883a 	mov	sp,fp
10013860:	dfc00117 	ldw	ra,4(sp)
10013864:	df000017 	ldw	fp,0(sp)
10013868:	dec00204 	addi	sp,sp,8
1001386c:	f800283a 	ret

10013870 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10013870:	defffd04 	addi	sp,sp,-12
10013874:	dfc00215 	stw	ra,8(sp)
10013878:	df000115 	stw	fp,4(sp)
1001387c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013880:	00840074 	movhi	r2,4097
10013884:	10921604 	addi	r2,r2,18520
10013888:	e0bfff15 	stw	r2,-4(fp)
1001388c:	00000606 	br	100138a8 <_do_ctors+0x38>
        (*ctor) (); 
10013890:	e0bfff17 	ldw	r2,-4(fp)
10013894:	10800017 	ldw	r2,0(r2)
10013898:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001389c:	e0bfff17 	ldw	r2,-4(fp)
100138a0:	10bfff04 	addi	r2,r2,-4
100138a4:	e0bfff15 	stw	r2,-4(fp)
100138a8:	e0ffff17 	ldw	r3,-4(fp)
100138ac:	00840074 	movhi	r2,4097
100138b0:	10921704 	addi	r2,r2,18524
100138b4:	18bff62e 	bgeu	r3,r2,10013890 <__alt_data_end+0xf8013890>
        (*ctor) (); 
}
100138b8:	0001883a 	nop
100138bc:	e037883a 	mov	sp,fp
100138c0:	dfc00117 	ldw	ra,4(sp)
100138c4:	df000017 	ldw	fp,0(sp)
100138c8:	dec00204 	addi	sp,sp,8
100138cc:	f800283a 	ret

100138d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100138d0:	defffd04 	addi	sp,sp,-12
100138d4:	dfc00215 	stw	ra,8(sp)
100138d8:	df000115 	stw	fp,4(sp)
100138dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100138e0:	00840074 	movhi	r2,4097
100138e4:	10921604 	addi	r2,r2,18520
100138e8:	e0bfff15 	stw	r2,-4(fp)
100138ec:	00000606 	br	10013908 <_do_dtors+0x38>
        (*dtor) (); 
100138f0:	e0bfff17 	ldw	r2,-4(fp)
100138f4:	10800017 	ldw	r2,0(r2)
100138f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100138fc:	e0bfff17 	ldw	r2,-4(fp)
10013900:	10bfff04 	addi	r2,r2,-4
10013904:	e0bfff15 	stw	r2,-4(fp)
10013908:	e0ffff17 	ldw	r3,-4(fp)
1001390c:	00840074 	movhi	r2,4097
10013910:	10921704 	addi	r2,r2,18524
10013914:	18bff62e 	bgeu	r3,r2,100138f0 <__alt_data_end+0xf80138f0>
        (*dtor) (); 
}
10013918:	0001883a 	nop
1001391c:	e037883a 	mov	sp,fp
10013920:	dfc00117 	ldw	ra,4(sp)
10013924:	df000017 	ldw	fp,0(sp)
10013928:	dec00204 	addi	sp,sp,8
1001392c:	f800283a 	ret

10013930 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013930:	defffa04 	addi	sp,sp,-24
10013934:	dfc00515 	stw	ra,20(sp)
10013938:	df000415 	stw	fp,16(sp)
1001393c:	df000404 	addi	fp,sp,16
10013940:	e13ffe15 	stw	r4,-8(fp)
10013944:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10013948:	e0bfff17 	ldw	r2,-4(fp)
1001394c:	10800017 	ldw	r2,0(r2)
10013950:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013954:	e13ffe17 	ldw	r4,-8(fp)
10013958:	00006100 	call	10000610 <strlen>
1001395c:	10800044 	addi	r2,r2,1
10013960:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013964:	00000d06 	br	1001399c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10013968:	e0bffc17 	ldw	r2,-16(fp)
1001396c:	10800217 	ldw	r2,8(r2)
10013970:	e0fffd17 	ldw	r3,-12(fp)
10013974:	180d883a 	mov	r6,r3
10013978:	e17ffe17 	ldw	r5,-8(fp)
1001397c:	1009883a 	mov	r4,r2
10013980:	00145140 	call	10014514 <memcmp>
10013984:	1000021e 	bne	r2,zero,10013990 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10013988:	e0bffc17 	ldw	r2,-16(fp)
1001398c:	00000706 	br	100139ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013990:	e0bffc17 	ldw	r2,-16(fp)
10013994:	10800017 	ldw	r2,0(r2)
10013998:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001399c:	e0fffc17 	ldw	r3,-16(fp)
100139a0:	e0bfff17 	ldw	r2,-4(fp)
100139a4:	18bff01e 	bne	r3,r2,10013968 <__alt_data_end+0xf8013968>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100139a8:	0005883a 	mov	r2,zero
}
100139ac:	e037883a 	mov	sp,fp
100139b0:	dfc00117 	ldw	ra,4(sp)
100139b4:	df000017 	ldw	fp,0(sp)
100139b8:	dec00204 	addi	sp,sp,8
100139bc:	f800283a 	ret

100139c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100139c0:	defffe04 	addi	sp,sp,-8
100139c4:	dfc00115 	stw	ra,4(sp)
100139c8:	df000015 	stw	fp,0(sp)
100139cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
100139d0:	01440004 	movi	r5,4096
100139d4:	0009883a 	mov	r4,zero
100139d8:	001439c0 	call	1001439c <alt_icache_flush>
#endif
}
100139dc:	0001883a 	nop
100139e0:	e037883a 	mov	sp,fp
100139e4:	dfc00117 	ldw	ra,4(sp)
100139e8:	df000017 	ldw	fp,0(sp)
100139ec:	dec00204 	addi	sp,sp,8
100139f0:	f800283a 	ret

100139f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100139f4:	defff904 	addi	sp,sp,-28
100139f8:	dfc00615 	stw	ra,24(sp)
100139fc:	df000515 	stw	fp,20(sp)
10013a00:	df000504 	addi	fp,sp,20
10013a04:	e13ffc15 	stw	r4,-16(fp)
10013a08:	e17ffd15 	stw	r5,-12(fp)
10013a0c:	e1bffe15 	stw	r6,-8(fp)
10013a10:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10013a14:	e0800217 	ldw	r2,8(fp)
10013a18:	d8800015 	stw	r2,0(sp)
10013a1c:	e1ffff17 	ldw	r7,-4(fp)
10013a20:	e1bffe17 	ldw	r6,-8(fp)
10013a24:	e17ffd17 	ldw	r5,-12(fp)
10013a28:	e13ffc17 	ldw	r4,-16(fp)
10013a2c:	0013ba40 	call	10013ba4 <alt_iic_isr_register>
}  
10013a30:	e037883a 	mov	sp,fp
10013a34:	dfc00117 	ldw	ra,4(sp)
10013a38:	df000017 	ldw	fp,0(sp)
10013a3c:	dec00204 	addi	sp,sp,8
10013a40:	f800283a 	ret

10013a44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10013a44:	defff904 	addi	sp,sp,-28
10013a48:	df000615 	stw	fp,24(sp)
10013a4c:	df000604 	addi	fp,sp,24
10013a50:	e13ffe15 	stw	r4,-8(fp)
10013a54:	e17fff15 	stw	r5,-4(fp)
10013a58:	e0bfff17 	ldw	r2,-4(fp)
10013a5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013a60:	0005303a 	rdctl	r2,status
10013a64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013a68:	e0fffb17 	ldw	r3,-20(fp)
10013a6c:	00bfff84 	movi	r2,-2
10013a70:	1884703a 	and	r2,r3,r2
10013a74:	1001703a 	wrctl	status,r2
  
  return context;
10013a78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013a7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10013a80:	00c00044 	movi	r3,1
10013a84:	e0bffa17 	ldw	r2,-24(fp)
10013a88:	1884983a 	sll	r2,r3,r2
10013a8c:	1007883a 	mov	r3,r2
10013a90:	d0a70517 	ldw	r2,-25580(gp)
10013a94:	1884b03a 	or	r2,r3,r2
10013a98:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013a9c:	d0a70517 	ldw	r2,-25580(gp)
10013aa0:	100170fa 	wrctl	ienable,r2
10013aa4:	e0bffc17 	ldw	r2,-16(fp)
10013aa8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013aac:	e0bffd17 	ldw	r2,-12(fp)
10013ab0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013ab4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10013ab8:	0001883a 	nop
}
10013abc:	e037883a 	mov	sp,fp
10013ac0:	df000017 	ldw	fp,0(sp)
10013ac4:	dec00104 	addi	sp,sp,4
10013ac8:	f800283a 	ret

10013acc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013acc:	defff904 	addi	sp,sp,-28
10013ad0:	df000615 	stw	fp,24(sp)
10013ad4:	df000604 	addi	fp,sp,24
10013ad8:	e13ffe15 	stw	r4,-8(fp)
10013adc:	e17fff15 	stw	r5,-4(fp)
10013ae0:	e0bfff17 	ldw	r2,-4(fp)
10013ae4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013ae8:	0005303a 	rdctl	r2,status
10013aec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013af0:	e0fffb17 	ldw	r3,-20(fp)
10013af4:	00bfff84 	movi	r2,-2
10013af8:	1884703a 	and	r2,r3,r2
10013afc:	1001703a 	wrctl	status,r2
  
  return context;
10013b00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013b04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10013b08:	00c00044 	movi	r3,1
10013b0c:	e0bffa17 	ldw	r2,-24(fp)
10013b10:	1884983a 	sll	r2,r3,r2
10013b14:	0084303a 	nor	r2,zero,r2
10013b18:	1007883a 	mov	r3,r2
10013b1c:	d0a70517 	ldw	r2,-25580(gp)
10013b20:	1884703a 	and	r2,r3,r2
10013b24:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013b28:	d0a70517 	ldw	r2,-25580(gp)
10013b2c:	100170fa 	wrctl	ienable,r2
10013b30:	e0bffc17 	ldw	r2,-16(fp)
10013b34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013b38:	e0bffd17 	ldw	r2,-12(fp)
10013b3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013b40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013b44:	0001883a 	nop
}
10013b48:	e037883a 	mov	sp,fp
10013b4c:	df000017 	ldw	fp,0(sp)
10013b50:	dec00104 	addi	sp,sp,4
10013b54:	f800283a 	ret

10013b58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10013b58:	defffc04 	addi	sp,sp,-16
10013b5c:	df000315 	stw	fp,12(sp)
10013b60:	df000304 	addi	fp,sp,12
10013b64:	e13ffe15 	stw	r4,-8(fp)
10013b68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10013b6c:	000530fa 	rdctl	r2,ienable
10013b70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013b74:	00c00044 	movi	r3,1
10013b78:	e0bfff17 	ldw	r2,-4(fp)
10013b7c:	1884983a 	sll	r2,r3,r2
10013b80:	1007883a 	mov	r3,r2
10013b84:	e0bffd17 	ldw	r2,-12(fp)
10013b88:	1884703a 	and	r2,r3,r2
10013b8c:	1004c03a 	cmpne	r2,r2,zero
10013b90:	10803fcc 	andi	r2,r2,255
}
10013b94:	e037883a 	mov	sp,fp
10013b98:	df000017 	ldw	fp,0(sp)
10013b9c:	dec00104 	addi	sp,sp,4
10013ba0:	f800283a 	ret

10013ba4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013ba4:	defff504 	addi	sp,sp,-44
10013ba8:	dfc00a15 	stw	ra,40(sp)
10013bac:	df000915 	stw	fp,36(sp)
10013bb0:	df000904 	addi	fp,sp,36
10013bb4:	e13ffc15 	stw	r4,-16(fp)
10013bb8:	e17ffd15 	stw	r5,-12(fp)
10013bbc:	e1bffe15 	stw	r6,-8(fp)
10013bc0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10013bc4:	00bffa84 	movi	r2,-22
10013bc8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10013bcc:	e0bffd17 	ldw	r2,-12(fp)
10013bd0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10013bd4:	e0bff817 	ldw	r2,-32(fp)
10013bd8:	10800808 	cmpgei	r2,r2,32
10013bdc:	1000271e 	bne	r2,zero,10013c7c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013be0:	0005303a 	rdctl	r2,status
10013be4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013be8:	e0fffb17 	ldw	r3,-20(fp)
10013bec:	00bfff84 	movi	r2,-2
10013bf0:	1884703a 	and	r2,r3,r2
10013bf4:	1001703a 	wrctl	status,r2
  
  return context;
10013bf8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10013bfc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10013c00:	008400b4 	movhi	r2,4098
10013c04:	10a24604 	addi	r2,r2,-30440
10013c08:	e0fff817 	ldw	r3,-32(fp)
10013c0c:	180690fa 	slli	r3,r3,3
10013c10:	10c5883a 	add	r2,r2,r3
10013c14:	e0fffe17 	ldw	r3,-8(fp)
10013c18:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013c1c:	008400b4 	movhi	r2,4098
10013c20:	10a24604 	addi	r2,r2,-30440
10013c24:	e0fff817 	ldw	r3,-32(fp)
10013c28:	180690fa 	slli	r3,r3,3
10013c2c:	10c5883a 	add	r2,r2,r3
10013c30:	10800104 	addi	r2,r2,4
10013c34:	e0ffff17 	ldw	r3,-4(fp)
10013c38:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013c3c:	e0bffe17 	ldw	r2,-8(fp)
10013c40:	10000526 	beq	r2,zero,10013c58 <alt_iic_isr_register+0xb4>
10013c44:	e0bff817 	ldw	r2,-32(fp)
10013c48:	100b883a 	mov	r5,r2
10013c4c:	e13ffc17 	ldw	r4,-16(fp)
10013c50:	0013a440 	call	10013a44 <alt_ic_irq_enable>
10013c54:	00000406 	br	10013c68 <alt_iic_isr_register+0xc4>
10013c58:	e0bff817 	ldw	r2,-32(fp)
10013c5c:	100b883a 	mov	r5,r2
10013c60:	e13ffc17 	ldw	r4,-16(fp)
10013c64:	0013acc0 	call	10013acc <alt_ic_irq_disable>
10013c68:	e0bff715 	stw	r2,-36(fp)
10013c6c:	e0bffa17 	ldw	r2,-24(fp)
10013c70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013c74:	e0bff917 	ldw	r2,-28(fp)
10013c78:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10013c7c:	e0bff717 	ldw	r2,-36(fp)
}
10013c80:	e037883a 	mov	sp,fp
10013c84:	dfc00117 	ldw	ra,4(sp)
10013c88:	df000017 	ldw	fp,0(sp)
10013c8c:	dec00204 	addi	sp,sp,8
10013c90:	f800283a 	ret

10013c94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013c94:	defff904 	addi	sp,sp,-28
10013c98:	dfc00615 	stw	ra,24(sp)
10013c9c:	df000515 	stw	fp,20(sp)
10013ca0:	df000504 	addi	fp,sp,20
10013ca4:	e13ffc15 	stw	r4,-16(fp)
10013ca8:	e17ffd15 	stw	r5,-12(fp)
10013cac:	e1bffe15 	stw	r6,-8(fp)
10013cb0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10013cb4:	e1bfff17 	ldw	r6,-4(fp)
10013cb8:	e17ffe17 	ldw	r5,-8(fp)
10013cbc:	e13ffd17 	ldw	r4,-12(fp)
10013cc0:	0013ed40 	call	10013ed4 <open>
10013cc4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10013cc8:	e0bffb17 	ldw	r2,-20(fp)
10013ccc:	10001c16 	blt	r2,zero,10013d40 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10013cd0:	00840074 	movhi	r2,4097
10013cd4:	10954104 	addi	r2,r2,21764
10013cd8:	e0fffb17 	ldw	r3,-20(fp)
10013cdc:	18c00324 	muli	r3,r3,12
10013ce0:	10c5883a 	add	r2,r2,r3
10013ce4:	10c00017 	ldw	r3,0(r2)
10013ce8:	e0bffc17 	ldw	r2,-16(fp)
10013cec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10013cf0:	00840074 	movhi	r2,4097
10013cf4:	10954104 	addi	r2,r2,21764
10013cf8:	e0fffb17 	ldw	r3,-20(fp)
10013cfc:	18c00324 	muli	r3,r3,12
10013d00:	10c5883a 	add	r2,r2,r3
10013d04:	10800104 	addi	r2,r2,4
10013d08:	10c00017 	ldw	r3,0(r2)
10013d0c:	e0bffc17 	ldw	r2,-16(fp)
10013d10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10013d14:	00840074 	movhi	r2,4097
10013d18:	10954104 	addi	r2,r2,21764
10013d1c:	e0fffb17 	ldw	r3,-20(fp)
10013d20:	18c00324 	muli	r3,r3,12
10013d24:	10c5883a 	add	r2,r2,r3
10013d28:	10800204 	addi	r2,r2,8
10013d2c:	10c00017 	ldw	r3,0(r2)
10013d30:	e0bffc17 	ldw	r2,-16(fp)
10013d34:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013d38:	e13ffb17 	ldw	r4,-20(fp)
10013d3c:	000d4ec0 	call	1000d4ec <alt_release_fd>
  }
} 
10013d40:	0001883a 	nop
10013d44:	e037883a 	mov	sp,fp
10013d48:	dfc00117 	ldw	ra,4(sp)
10013d4c:	df000017 	ldw	fp,0(sp)
10013d50:	dec00204 	addi	sp,sp,8
10013d54:	f800283a 	ret

10013d58 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10013d58:	defffb04 	addi	sp,sp,-20
10013d5c:	dfc00415 	stw	ra,16(sp)
10013d60:	df000315 	stw	fp,12(sp)
10013d64:	df000304 	addi	fp,sp,12
10013d68:	e13ffd15 	stw	r4,-12(fp)
10013d6c:	e17ffe15 	stw	r5,-8(fp)
10013d70:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013d74:	01c07fc4 	movi	r7,511
10013d78:	01800044 	movi	r6,1
10013d7c:	e17ffd17 	ldw	r5,-12(fp)
10013d80:	01040074 	movhi	r4,4097
10013d84:	21154404 	addi	r4,r4,21776
10013d88:	0013c940 	call	10013c94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013d8c:	01c07fc4 	movi	r7,511
10013d90:	000d883a 	mov	r6,zero
10013d94:	e17ffe17 	ldw	r5,-8(fp)
10013d98:	01040074 	movhi	r4,4097
10013d9c:	21154104 	addi	r4,r4,21764
10013da0:	0013c940 	call	10013c94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013da4:	01c07fc4 	movi	r7,511
10013da8:	01800044 	movi	r6,1
10013dac:	e17fff17 	ldw	r5,-4(fp)
10013db0:	01040074 	movhi	r4,4097
10013db4:	21154704 	addi	r4,r4,21788
10013db8:	0013c940 	call	10013c94 <alt_open_fd>
}  
10013dbc:	0001883a 	nop
10013dc0:	e037883a 	mov	sp,fp
10013dc4:	dfc00117 	ldw	ra,4(sp)
10013dc8:	df000017 	ldw	fp,0(sp)
10013dcc:	dec00204 	addi	sp,sp,8
10013dd0:	f800283a 	ret

10013dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013dd4:	defffe04 	addi	sp,sp,-8
10013dd8:	dfc00115 	stw	ra,4(sp)
10013ddc:	df000015 	stw	fp,0(sp)
10013de0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013de4:	d0a00b17 	ldw	r2,-32724(gp)
10013de8:	10000326 	beq	r2,zero,10013df8 <alt_get_errno+0x24>
10013dec:	d0a00b17 	ldw	r2,-32724(gp)
10013df0:	103ee83a 	callr	r2
10013df4:	00000106 	br	10013dfc <alt_get_errno+0x28>
10013df8:	d0a6f404 	addi	r2,gp,-25648
}
10013dfc:	e037883a 	mov	sp,fp
10013e00:	dfc00117 	ldw	ra,4(sp)
10013e04:	df000017 	ldw	fp,0(sp)
10013e08:	dec00204 	addi	sp,sp,8
10013e0c:	f800283a 	ret

10013e10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013e10:	defffd04 	addi	sp,sp,-12
10013e14:	df000215 	stw	fp,8(sp)
10013e18:	df000204 	addi	fp,sp,8
10013e1c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10013e20:	e0bfff17 	ldw	r2,-4(fp)
10013e24:	10800217 	ldw	r2,8(r2)
10013e28:	10d00034 	orhi	r3,r2,16384
10013e2c:	e0bfff17 	ldw	r2,-4(fp)
10013e30:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013e34:	e03ffe15 	stw	zero,-8(fp)
10013e38:	00001d06 	br	10013eb0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013e3c:	00840074 	movhi	r2,4097
10013e40:	10954104 	addi	r2,r2,21764
10013e44:	e0fffe17 	ldw	r3,-8(fp)
10013e48:	18c00324 	muli	r3,r3,12
10013e4c:	10c5883a 	add	r2,r2,r3
10013e50:	10c00017 	ldw	r3,0(r2)
10013e54:	e0bfff17 	ldw	r2,-4(fp)
10013e58:	10800017 	ldw	r2,0(r2)
10013e5c:	1880111e 	bne	r3,r2,10013ea4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013e60:	00840074 	movhi	r2,4097
10013e64:	10954104 	addi	r2,r2,21764
10013e68:	e0fffe17 	ldw	r3,-8(fp)
10013e6c:	18c00324 	muli	r3,r3,12
10013e70:	10c5883a 	add	r2,r2,r3
10013e74:	10800204 	addi	r2,r2,8
10013e78:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013e7c:	1000090e 	bge	r2,zero,10013ea4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013e80:	e0bffe17 	ldw	r2,-8(fp)
10013e84:	10c00324 	muli	r3,r2,12
10013e88:	00840074 	movhi	r2,4097
10013e8c:	10954104 	addi	r2,r2,21764
10013e90:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013e94:	e0bfff17 	ldw	r2,-4(fp)
10013e98:	18800226 	beq	r3,r2,10013ea4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013e9c:	00bffcc4 	movi	r2,-13
10013ea0:	00000806 	br	10013ec4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013ea4:	e0bffe17 	ldw	r2,-8(fp)
10013ea8:	10800044 	addi	r2,r2,1
10013eac:	e0bffe15 	stw	r2,-8(fp)
10013eb0:	d0a00a17 	ldw	r2,-32728(gp)
10013eb4:	1007883a 	mov	r3,r2
10013eb8:	e0bffe17 	ldw	r2,-8(fp)
10013ebc:	18bfdf2e 	bgeu	r3,r2,10013e3c <__alt_data_end+0xf8013e3c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013ec0:	0005883a 	mov	r2,zero
}
10013ec4:	e037883a 	mov	sp,fp
10013ec8:	df000017 	ldw	fp,0(sp)
10013ecc:	dec00104 	addi	sp,sp,4
10013ed0:	f800283a 	ret

10013ed4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013ed4:	defff604 	addi	sp,sp,-40
10013ed8:	dfc00915 	stw	ra,36(sp)
10013edc:	df000815 	stw	fp,32(sp)
10013ee0:	df000804 	addi	fp,sp,32
10013ee4:	e13ffd15 	stw	r4,-12(fp)
10013ee8:	e17ffe15 	stw	r5,-8(fp)
10013eec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10013ef0:	00bfffc4 	movi	r2,-1
10013ef4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013ef8:	00bffb44 	movi	r2,-19
10013efc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10013f00:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013f04:	d1600804 	addi	r5,gp,-32736
10013f08:	e13ffd17 	ldw	r4,-12(fp)
10013f0c:	00139300 	call	10013930 <alt_find_dev>
10013f10:	e0bff815 	stw	r2,-32(fp)
10013f14:	e0bff817 	ldw	r2,-32(fp)
10013f18:	1000051e 	bne	r2,zero,10013f30 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013f1c:	e13ffd17 	ldw	r4,-12(fp)
10013f20:	00141f00 	call	100141f0 <alt_find_file>
10013f24:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013f28:	00800044 	movi	r2,1
10013f2c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10013f30:	e0bff817 	ldw	r2,-32(fp)
10013f34:	10002926 	beq	r2,zero,10013fdc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013f38:	e13ff817 	ldw	r4,-32(fp)
10013f3c:	00142f80 	call	100142f8 <alt_get_fd>
10013f40:	e0bff915 	stw	r2,-28(fp)
10013f44:	e0bff917 	ldw	r2,-28(fp)
10013f48:	1000030e 	bge	r2,zero,10013f58 <open+0x84>
    {
      status = index;
10013f4c:	e0bff917 	ldw	r2,-28(fp)
10013f50:	e0bffa15 	stw	r2,-24(fp)
10013f54:	00002306 	br	10013fe4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10013f58:	e0bff917 	ldw	r2,-28(fp)
10013f5c:	10c00324 	muli	r3,r2,12
10013f60:	00840074 	movhi	r2,4097
10013f64:	10954104 	addi	r2,r2,21764
10013f68:	1885883a 	add	r2,r3,r2
10013f6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013f70:	e0fffe17 	ldw	r3,-8(fp)
10013f74:	00900034 	movhi	r2,16384
10013f78:	10bfffc4 	addi	r2,r2,-1
10013f7c:	1886703a 	and	r3,r3,r2
10013f80:	e0bffc17 	ldw	r2,-16(fp)
10013f84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013f88:	e0bffb17 	ldw	r2,-20(fp)
10013f8c:	1000051e 	bne	r2,zero,10013fa4 <open+0xd0>
10013f90:	e13ffc17 	ldw	r4,-16(fp)
10013f94:	0013e100 	call	10013e10 <alt_file_locked>
10013f98:	e0bffa15 	stw	r2,-24(fp)
10013f9c:	e0bffa17 	ldw	r2,-24(fp)
10013fa0:	10001016 	blt	r2,zero,10013fe4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013fa4:	e0bff817 	ldw	r2,-32(fp)
10013fa8:	10800317 	ldw	r2,12(r2)
10013fac:	10000826 	beq	r2,zero,10013fd0 <open+0xfc>
10013fb0:	e0bff817 	ldw	r2,-32(fp)
10013fb4:	10800317 	ldw	r2,12(r2)
10013fb8:	e1ffff17 	ldw	r7,-4(fp)
10013fbc:	e1bffe17 	ldw	r6,-8(fp)
10013fc0:	e17ffd17 	ldw	r5,-12(fp)
10013fc4:	e13ffc17 	ldw	r4,-16(fp)
10013fc8:	103ee83a 	callr	r2
10013fcc:	00000106 	br	10013fd4 <open+0x100>
10013fd0:	0005883a 	mov	r2,zero
10013fd4:	e0bffa15 	stw	r2,-24(fp)
10013fd8:	00000206 	br	10013fe4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013fdc:	00bffb44 	movi	r2,-19
10013fe0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013fe4:	e0bffa17 	ldw	r2,-24(fp)
10013fe8:	1000090e 	bge	r2,zero,10014010 <open+0x13c>
  {
    alt_release_fd (index);  
10013fec:	e13ff917 	ldw	r4,-28(fp)
10013ff0:	000d4ec0 	call	1000d4ec <alt_release_fd>
    ALT_ERRNO = -status;
10013ff4:	0013dd40 	call	10013dd4 <alt_get_errno>
10013ff8:	1007883a 	mov	r3,r2
10013ffc:	e0bffa17 	ldw	r2,-24(fp)
10014000:	0085c83a 	sub	r2,zero,r2
10014004:	18800015 	stw	r2,0(r3)
    return -1;
10014008:	00bfffc4 	movi	r2,-1
1001400c:	00000106 	br	10014014 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10014010:	e0bff917 	ldw	r2,-28(fp)
}
10014014:	e037883a 	mov	sp,fp
10014018:	dfc00117 	ldw	ra,4(sp)
1001401c:	df000017 	ldw	fp,0(sp)
10014020:	dec00204 	addi	sp,sp,8
10014024:	f800283a 	ret

10014028 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10014028:	defffa04 	addi	sp,sp,-24
1001402c:	df000515 	stw	fp,20(sp)
10014030:	df000504 	addi	fp,sp,20
10014034:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014038:	0005303a 	rdctl	r2,status
1001403c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014040:	e0fffc17 	ldw	r3,-16(fp)
10014044:	00bfff84 	movi	r2,-2
10014048:	1884703a 	and	r2,r3,r2
1001404c:	1001703a 	wrctl	status,r2
  
  return context;
10014050:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10014054:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10014058:	e0bfff17 	ldw	r2,-4(fp)
1001405c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10014060:	e0bffd17 	ldw	r2,-12(fp)
10014064:	10800017 	ldw	r2,0(r2)
10014068:	e0fffd17 	ldw	r3,-12(fp)
1001406c:	18c00117 	ldw	r3,4(r3)
10014070:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10014074:	e0bffd17 	ldw	r2,-12(fp)
10014078:	10800117 	ldw	r2,4(r2)
1001407c:	e0fffd17 	ldw	r3,-12(fp)
10014080:	18c00017 	ldw	r3,0(r3)
10014084:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10014088:	e0bffd17 	ldw	r2,-12(fp)
1001408c:	e0fffd17 	ldw	r3,-12(fp)
10014090:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10014094:	e0bffd17 	ldw	r2,-12(fp)
10014098:	e0fffd17 	ldw	r3,-12(fp)
1001409c:	10c00015 	stw	r3,0(r2)
100140a0:	e0bffb17 	ldw	r2,-20(fp)
100140a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100140a8:	e0bffe17 	ldw	r2,-8(fp)
100140ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100140b0:	0001883a 	nop
100140b4:	e037883a 	mov	sp,fp
100140b8:	df000017 	ldw	fp,0(sp)
100140bc:	dec00104 	addi	sp,sp,4
100140c0:	f800283a 	ret

100140c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100140c4:	defffb04 	addi	sp,sp,-20
100140c8:	dfc00415 	stw	ra,16(sp)
100140cc:	df000315 	stw	fp,12(sp)
100140d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100140d4:	d0a00e17 	ldw	r2,-32712(gp)
100140d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100140dc:	d0a70717 	ldw	r2,-25572(gp)
100140e0:	10800044 	addi	r2,r2,1
100140e4:	d0a70715 	stw	r2,-25572(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100140e8:	00002e06 	br	100141a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100140ec:	e0bffd17 	ldw	r2,-12(fp)
100140f0:	10800017 	ldw	r2,0(r2)
100140f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100140f8:	e0bffd17 	ldw	r2,-12(fp)
100140fc:	10800403 	ldbu	r2,16(r2)
10014100:	10803fcc 	andi	r2,r2,255
10014104:	10000426 	beq	r2,zero,10014118 <alt_tick+0x54>
10014108:	d0a70717 	ldw	r2,-25572(gp)
1001410c:	1000021e 	bne	r2,zero,10014118 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10014110:	e0bffd17 	ldw	r2,-12(fp)
10014114:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10014118:	e0bffd17 	ldw	r2,-12(fp)
1001411c:	10800217 	ldw	r2,8(r2)
10014120:	d0e70717 	ldw	r3,-25572(gp)
10014124:	18801d36 	bltu	r3,r2,1001419c <alt_tick+0xd8>
10014128:	e0bffd17 	ldw	r2,-12(fp)
1001412c:	10800403 	ldbu	r2,16(r2)
10014130:	10803fcc 	andi	r2,r2,255
10014134:	1000191e 	bne	r2,zero,1001419c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10014138:	e0bffd17 	ldw	r2,-12(fp)
1001413c:	10800317 	ldw	r2,12(r2)
10014140:	e0fffd17 	ldw	r3,-12(fp)
10014144:	18c00517 	ldw	r3,20(r3)
10014148:	1809883a 	mov	r4,r3
1001414c:	103ee83a 	callr	r2
10014150:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10014154:	e0bfff17 	ldw	r2,-4(fp)
10014158:	1000031e 	bne	r2,zero,10014168 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1001415c:	e13ffd17 	ldw	r4,-12(fp)
10014160:	00140280 	call	10014028 <alt_alarm_stop>
10014164:	00000d06 	br	1001419c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10014168:	e0bffd17 	ldw	r2,-12(fp)
1001416c:	10c00217 	ldw	r3,8(r2)
10014170:	e0bfff17 	ldw	r2,-4(fp)
10014174:	1887883a 	add	r3,r3,r2
10014178:	e0bffd17 	ldw	r2,-12(fp)
1001417c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10014180:	e0bffd17 	ldw	r2,-12(fp)
10014184:	10c00217 	ldw	r3,8(r2)
10014188:	d0a70717 	ldw	r2,-25572(gp)
1001418c:	1880032e 	bgeu	r3,r2,1001419c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10014190:	e0bffd17 	ldw	r2,-12(fp)
10014194:	00c00044 	movi	r3,1
10014198:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1001419c:	e0bffe17 	ldw	r2,-8(fp)
100141a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100141a4:	e0fffd17 	ldw	r3,-12(fp)
100141a8:	d0a00e04 	addi	r2,gp,-32712
100141ac:	18bfcf1e 	bne	r3,r2,100140ec <__alt_data_end+0xf80140ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100141b0:	0001883a 	nop
}
100141b4:	0001883a 	nop
100141b8:	e037883a 	mov	sp,fp
100141bc:	dfc00117 	ldw	ra,4(sp)
100141c0:	df000017 	ldw	fp,0(sp)
100141c4:	dec00204 	addi	sp,sp,8
100141c8:	f800283a 	ret

100141cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100141cc:	deffff04 	addi	sp,sp,-4
100141d0:	df000015 	stw	fp,0(sp)
100141d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100141d8:	000170fa 	wrctl	ienable,zero
}
100141dc:	0001883a 	nop
100141e0:	e037883a 	mov	sp,fp
100141e4:	df000017 	ldw	fp,0(sp)
100141e8:	dec00104 	addi	sp,sp,4
100141ec:	f800283a 	ret

100141f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100141f0:	defffb04 	addi	sp,sp,-20
100141f4:	dfc00415 	stw	ra,16(sp)
100141f8:	df000315 	stw	fp,12(sp)
100141fc:	df000304 	addi	fp,sp,12
10014200:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10014204:	d0a00617 	ldw	r2,-32744(gp)
10014208:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001420c:	00003106 	br	100142d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10014210:	e0bffd17 	ldw	r2,-12(fp)
10014214:	10800217 	ldw	r2,8(r2)
10014218:	1009883a 	mov	r4,r2
1001421c:	00006100 	call	10000610 <strlen>
10014220:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10014224:	e0bffd17 	ldw	r2,-12(fp)
10014228:	10c00217 	ldw	r3,8(r2)
1001422c:	e0bffe17 	ldw	r2,-8(fp)
10014230:	10bfffc4 	addi	r2,r2,-1
10014234:	1885883a 	add	r2,r3,r2
10014238:	10800003 	ldbu	r2,0(r2)
1001423c:	10803fcc 	andi	r2,r2,255
10014240:	1080201c 	xori	r2,r2,128
10014244:	10bfe004 	addi	r2,r2,-128
10014248:	10800bd8 	cmpnei	r2,r2,47
1001424c:	1000031e 	bne	r2,zero,1001425c <alt_find_file+0x6c>
    {
      len -= 1;
10014250:	e0bffe17 	ldw	r2,-8(fp)
10014254:	10bfffc4 	addi	r2,r2,-1
10014258:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001425c:	e0bffe17 	ldw	r2,-8(fp)
10014260:	e0ffff17 	ldw	r3,-4(fp)
10014264:	1885883a 	add	r2,r3,r2
10014268:	10800003 	ldbu	r2,0(r2)
1001426c:	10803fcc 	andi	r2,r2,255
10014270:	1080201c 	xori	r2,r2,128
10014274:	10bfe004 	addi	r2,r2,-128
10014278:	10800be0 	cmpeqi	r2,r2,47
1001427c:	1000081e 	bne	r2,zero,100142a0 <alt_find_file+0xb0>
10014280:	e0bffe17 	ldw	r2,-8(fp)
10014284:	e0ffff17 	ldw	r3,-4(fp)
10014288:	1885883a 	add	r2,r3,r2
1001428c:	10800003 	ldbu	r2,0(r2)
10014290:	10803fcc 	andi	r2,r2,255
10014294:	1080201c 	xori	r2,r2,128
10014298:	10bfe004 	addi	r2,r2,-128
1001429c:	10000a1e 	bne	r2,zero,100142c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100142a0:	e0bffd17 	ldw	r2,-12(fp)
100142a4:	10800217 	ldw	r2,8(r2)
100142a8:	e0fffe17 	ldw	r3,-8(fp)
100142ac:	180d883a 	mov	r6,r3
100142b0:	e17fff17 	ldw	r5,-4(fp)
100142b4:	1009883a 	mov	r4,r2
100142b8:	00145140 	call	10014514 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100142bc:	1000021e 	bne	r2,zero,100142c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100142c0:	e0bffd17 	ldw	r2,-12(fp)
100142c4:	00000706 	br	100142e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100142c8:	e0bffd17 	ldw	r2,-12(fp)
100142cc:	10800017 	ldw	r2,0(r2)
100142d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100142d4:	e0fffd17 	ldw	r3,-12(fp)
100142d8:	d0a00604 	addi	r2,gp,-32744
100142dc:	18bfcc1e 	bne	r3,r2,10014210 <__alt_data_end+0xf8014210>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100142e0:	0005883a 	mov	r2,zero
}
100142e4:	e037883a 	mov	sp,fp
100142e8:	dfc00117 	ldw	ra,4(sp)
100142ec:	df000017 	ldw	fp,0(sp)
100142f0:	dec00204 	addi	sp,sp,8
100142f4:	f800283a 	ret

100142f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100142f8:	defffc04 	addi	sp,sp,-16
100142fc:	df000315 	stw	fp,12(sp)
10014300:	df000304 	addi	fp,sp,12
10014304:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10014308:	00bffa04 	movi	r2,-24
1001430c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10014310:	e03ffd15 	stw	zero,-12(fp)
10014314:	00001906 	br	1001437c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10014318:	00840074 	movhi	r2,4097
1001431c:	10954104 	addi	r2,r2,21764
10014320:	e0fffd17 	ldw	r3,-12(fp)
10014324:	18c00324 	muli	r3,r3,12
10014328:	10c5883a 	add	r2,r2,r3
1001432c:	10800017 	ldw	r2,0(r2)
10014330:	10000f1e 	bne	r2,zero,10014370 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10014334:	00840074 	movhi	r2,4097
10014338:	10954104 	addi	r2,r2,21764
1001433c:	e0fffd17 	ldw	r3,-12(fp)
10014340:	18c00324 	muli	r3,r3,12
10014344:	10c5883a 	add	r2,r2,r3
10014348:	e0ffff17 	ldw	r3,-4(fp)
1001434c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10014350:	d0e00a17 	ldw	r3,-32728(gp)
10014354:	e0bffd17 	ldw	r2,-12(fp)
10014358:	1880020e 	bge	r3,r2,10014364 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
1001435c:	e0bffd17 	ldw	r2,-12(fp)
10014360:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10014364:	e0bffd17 	ldw	r2,-12(fp)
10014368:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1001436c:	00000606 	br	10014388 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10014370:	e0bffd17 	ldw	r2,-12(fp)
10014374:	10800044 	addi	r2,r2,1
10014378:	e0bffd15 	stw	r2,-12(fp)
1001437c:	e0bffd17 	ldw	r2,-12(fp)
10014380:	10800810 	cmplti	r2,r2,32
10014384:	103fe41e 	bne	r2,zero,10014318 <__alt_data_end+0xf8014318>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10014388:	e0bffe17 	ldw	r2,-8(fp)
}
1001438c:	e037883a 	mov	sp,fp
10014390:	df000017 	ldw	fp,0(sp)
10014394:	dec00104 	addi	sp,sp,4
10014398:	f800283a 	ret

1001439c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1001439c:	defffb04 	addi	sp,sp,-20
100143a0:	df000415 	stw	fp,16(sp)
100143a4:	df000404 	addi	fp,sp,16
100143a8:	e13ffe15 	stw	r4,-8(fp)
100143ac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
100143b0:	e0bfff17 	ldw	r2,-4(fp)
100143b4:	10840070 	cmpltui	r2,r2,4097
100143b8:	1000021e 	bne	r2,zero,100143c4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
100143bc:	00840004 	movi	r2,4096
100143c0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
100143c4:	e0fffe17 	ldw	r3,-8(fp)
100143c8:	e0bfff17 	ldw	r2,-4(fp)
100143cc:	1885883a 	add	r2,r3,r2
100143d0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100143d4:	e0bffe17 	ldw	r2,-8(fp)
100143d8:	e0bffc15 	stw	r2,-16(fp)
100143dc:	00000506 	br	100143f4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
100143e0:	e0bffc17 	ldw	r2,-16(fp)
100143e4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100143e8:	e0bffc17 	ldw	r2,-16(fp)
100143ec:	10800804 	addi	r2,r2,32
100143f0:	e0bffc15 	stw	r2,-16(fp)
100143f4:	e0fffc17 	ldw	r3,-16(fp)
100143f8:	e0bffd17 	ldw	r2,-12(fp)
100143fc:	18bff836 	bltu	r3,r2,100143e0 <__alt_data_end+0xf80143e0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10014400:	e0bffe17 	ldw	r2,-8(fp)
10014404:	108007cc 	andi	r2,r2,31
10014408:	10000226 	beq	r2,zero,10014414 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1001440c:	e0bffc17 	ldw	r2,-16(fp)
10014410:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10014414:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10014418:	0001883a 	nop
1001441c:	e037883a 	mov	sp,fp
10014420:	df000017 	ldw	fp,0(sp)
10014424:	dec00104 	addi	sp,sp,4
10014428:	f800283a 	ret

1001442c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1001442c:	defffe04 	addi	sp,sp,-8
10014430:	df000115 	stw	fp,4(sp)
10014434:	df000104 	addi	fp,sp,4
10014438:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1001443c:	e0bfff17 	ldw	r2,-4(fp)
10014440:	10bffe84 	addi	r2,r2,-6
10014444:	10c00428 	cmpgeui	r3,r2,16
10014448:	18001a1e 	bne	r3,zero,100144b4 <alt_exception_cause_generated_bad_addr+0x88>
1001444c:	100690ba 	slli	r3,r2,2
10014450:	00840074 	movhi	r2,4097
10014454:	10911904 	addi	r2,r2,17508
10014458:	1885883a 	add	r2,r3,r2
1001445c:	10800017 	ldw	r2,0(r2)
10014460:	1000683a 	jmp	r2
10014464:	100144a4 	muli	zero,r2,1298
10014468:	100144a4 	muli	zero,r2,1298
1001446c:	100144b4 	orhi	zero,r2,1298
10014470:	100144b4 	orhi	zero,r2,1298
10014474:	100144b4 	orhi	zero,r2,1298
10014478:	100144a4 	muli	zero,r2,1298
1001447c:	100144ac 	andhi	zero,r2,1298
10014480:	100144b4 	orhi	zero,r2,1298
10014484:	100144a4 	muli	zero,r2,1298
10014488:	100144a4 	muli	zero,r2,1298
1001448c:	100144b4 	orhi	zero,r2,1298
10014490:	100144a4 	muli	zero,r2,1298
10014494:	100144ac 	andhi	zero,r2,1298
10014498:	100144b4 	orhi	zero,r2,1298
1001449c:	100144b4 	orhi	zero,r2,1298
100144a0:	100144a4 	muli	zero,r2,1298
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100144a4:	00800044 	movi	r2,1
100144a8:	00000306 	br	100144b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100144ac:	0005883a 	mov	r2,zero
100144b0:	00000106 	br	100144b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100144b4:	0005883a 	mov	r2,zero
  }
}
100144b8:	e037883a 	mov	sp,fp
100144bc:	df000017 	ldw	fp,0(sp)
100144c0:	dec00104 	addi	sp,sp,4
100144c4:	f800283a 	ret

100144c8 <atexit>:
100144c8:	200b883a 	mov	r5,r4
100144cc:	000f883a 	mov	r7,zero
100144d0:	000d883a 	mov	r6,zero
100144d4:	0009883a 	mov	r4,zero
100144d8:	00145901 	jmpi	10014590 <__register_exitproc>

100144dc <exit>:
100144dc:	defffe04 	addi	sp,sp,-8
100144e0:	000b883a 	mov	r5,zero
100144e4:	dc000015 	stw	r16,0(sp)
100144e8:	dfc00115 	stw	ra,4(sp)
100144ec:	2021883a 	mov	r16,r4
100144f0:	00146a80 	call	100146a8 <__call_exitprocs>
100144f4:	00840074 	movhi	r2,4097
100144f8:	1099d904 	addi	r2,r2,26468
100144fc:	11000017 	ldw	r4,0(r2)
10014500:	20800f17 	ldw	r2,60(r4)
10014504:	10000126 	beq	r2,zero,1001450c <exit+0x30>
10014508:	103ee83a 	callr	r2
1001450c:	8009883a 	mov	r4,r16
10014510:	00148280 	call	10014828 <_exit>

10014514 <memcmp>:
10014514:	01c000c4 	movi	r7,3
10014518:	3980192e 	bgeu	r7,r6,10014580 <memcmp+0x6c>
1001451c:	2144b03a 	or	r2,r4,r5
10014520:	11c4703a 	and	r2,r2,r7
10014524:	10000f26 	beq	r2,zero,10014564 <memcmp+0x50>
10014528:	20800003 	ldbu	r2,0(r4)
1001452c:	28c00003 	ldbu	r3,0(r5)
10014530:	10c0151e 	bne	r2,r3,10014588 <memcmp+0x74>
10014534:	31bfff84 	addi	r6,r6,-2
10014538:	01ffffc4 	movi	r7,-1
1001453c:	00000406 	br	10014550 <memcmp+0x3c>
10014540:	20800003 	ldbu	r2,0(r4)
10014544:	28c00003 	ldbu	r3,0(r5)
10014548:	31bfffc4 	addi	r6,r6,-1
1001454c:	10c00e1e 	bne	r2,r3,10014588 <memcmp+0x74>
10014550:	21000044 	addi	r4,r4,1
10014554:	29400044 	addi	r5,r5,1
10014558:	31fff91e 	bne	r6,r7,10014540 <__alt_data_end+0xf8014540>
1001455c:	0005883a 	mov	r2,zero
10014560:	f800283a 	ret
10014564:	20c00017 	ldw	r3,0(r4)
10014568:	28800017 	ldw	r2,0(r5)
1001456c:	18bfee1e 	bne	r3,r2,10014528 <__alt_data_end+0xf8014528>
10014570:	31bfff04 	addi	r6,r6,-4
10014574:	21000104 	addi	r4,r4,4
10014578:	29400104 	addi	r5,r5,4
1001457c:	39bff936 	bltu	r7,r6,10014564 <__alt_data_end+0xf8014564>
10014580:	303fe91e 	bne	r6,zero,10014528 <__alt_data_end+0xf8014528>
10014584:	003ff506 	br	1001455c <__alt_data_end+0xf801455c>
10014588:	10c5c83a 	sub	r2,r2,r3
1001458c:	f800283a 	ret

10014590 <__register_exitproc>:
10014590:	defffa04 	addi	sp,sp,-24
10014594:	dc000315 	stw	r16,12(sp)
10014598:	04040074 	movhi	r16,4097
1001459c:	8419d904 	addi	r16,r16,26468
100145a0:	80c00017 	ldw	r3,0(r16)
100145a4:	dc400415 	stw	r17,16(sp)
100145a8:	dfc00515 	stw	ra,20(sp)
100145ac:	18805217 	ldw	r2,328(r3)
100145b0:	2023883a 	mov	r17,r4
100145b4:	10003726 	beq	r2,zero,10014694 <__register_exitproc+0x104>
100145b8:	10c00117 	ldw	r3,4(r2)
100145bc:	010007c4 	movi	r4,31
100145c0:	20c00e16 	blt	r4,r3,100145fc <__register_exitproc+0x6c>
100145c4:	1a000044 	addi	r8,r3,1
100145c8:	8800221e 	bne	r17,zero,10014654 <__register_exitproc+0xc4>
100145cc:	18c00084 	addi	r3,r3,2
100145d0:	18c7883a 	add	r3,r3,r3
100145d4:	18c7883a 	add	r3,r3,r3
100145d8:	12000115 	stw	r8,4(r2)
100145dc:	10c7883a 	add	r3,r2,r3
100145e0:	19400015 	stw	r5,0(r3)
100145e4:	0005883a 	mov	r2,zero
100145e8:	dfc00517 	ldw	ra,20(sp)
100145ec:	dc400417 	ldw	r17,16(sp)
100145f0:	dc000317 	ldw	r16,12(sp)
100145f4:	dec00604 	addi	sp,sp,24
100145f8:	f800283a 	ret
100145fc:	00800034 	movhi	r2,0
10014600:	10800004 	addi	r2,r2,0
10014604:	10002626 	beq	r2,zero,100146a0 <__register_exitproc+0x110>
10014608:	01006404 	movi	r4,400
1001460c:	d9400015 	stw	r5,0(sp)
10014610:	d9800115 	stw	r6,4(sp)
10014614:	d9c00215 	stw	r7,8(sp)
10014618:	00000000 	call	10000000 <__alt_mem_new_sdram_controller_0>
1001461c:	d9400017 	ldw	r5,0(sp)
10014620:	d9800117 	ldw	r6,4(sp)
10014624:	d9c00217 	ldw	r7,8(sp)
10014628:	10001d26 	beq	r2,zero,100146a0 <__register_exitproc+0x110>
1001462c:	81000017 	ldw	r4,0(r16)
10014630:	10000115 	stw	zero,4(r2)
10014634:	02000044 	movi	r8,1
10014638:	22405217 	ldw	r9,328(r4)
1001463c:	0007883a 	mov	r3,zero
10014640:	12400015 	stw	r9,0(r2)
10014644:	20805215 	stw	r2,328(r4)
10014648:	10006215 	stw	zero,392(r2)
1001464c:	10006315 	stw	zero,396(r2)
10014650:	883fde26 	beq	r17,zero,100145cc <__alt_data_end+0xf80145cc>
10014654:	18c9883a 	add	r4,r3,r3
10014658:	2109883a 	add	r4,r4,r4
1001465c:	1109883a 	add	r4,r2,r4
10014660:	21802215 	stw	r6,136(r4)
10014664:	01800044 	movi	r6,1
10014668:	12406217 	ldw	r9,392(r2)
1001466c:	30cc983a 	sll	r6,r6,r3
10014670:	4992b03a 	or	r9,r9,r6
10014674:	12406215 	stw	r9,392(r2)
10014678:	21c04215 	stw	r7,264(r4)
1001467c:	01000084 	movi	r4,2
10014680:	893fd21e 	bne	r17,r4,100145cc <__alt_data_end+0xf80145cc>
10014684:	11006317 	ldw	r4,396(r2)
10014688:	218cb03a 	or	r6,r4,r6
1001468c:	11806315 	stw	r6,396(r2)
10014690:	003fce06 	br	100145cc <__alt_data_end+0xf80145cc>
10014694:	18805304 	addi	r2,r3,332
10014698:	18805215 	stw	r2,328(r3)
1001469c:	003fc606 	br	100145b8 <__alt_data_end+0xf80145b8>
100146a0:	00bfffc4 	movi	r2,-1
100146a4:	003fd006 	br	100145e8 <__alt_data_end+0xf80145e8>

100146a8 <__call_exitprocs>:
100146a8:	defff504 	addi	sp,sp,-44
100146ac:	df000915 	stw	fp,36(sp)
100146b0:	dd400615 	stw	r21,24(sp)
100146b4:	dc800315 	stw	r18,12(sp)
100146b8:	dfc00a15 	stw	ra,40(sp)
100146bc:	ddc00815 	stw	r23,32(sp)
100146c0:	dd800715 	stw	r22,28(sp)
100146c4:	dd000515 	stw	r20,20(sp)
100146c8:	dcc00415 	stw	r19,16(sp)
100146cc:	dc400215 	stw	r17,8(sp)
100146d0:	dc000115 	stw	r16,4(sp)
100146d4:	d9000015 	stw	r4,0(sp)
100146d8:	2839883a 	mov	fp,r5
100146dc:	04800044 	movi	r18,1
100146e0:	057fffc4 	movi	r21,-1
100146e4:	00840074 	movhi	r2,4097
100146e8:	1099d904 	addi	r2,r2,26468
100146ec:	12000017 	ldw	r8,0(r2)
100146f0:	45005217 	ldw	r20,328(r8)
100146f4:	44c05204 	addi	r19,r8,328
100146f8:	a0001c26 	beq	r20,zero,1001476c <__call_exitprocs+0xc4>
100146fc:	a0800117 	ldw	r2,4(r20)
10014700:	15ffffc4 	addi	r23,r2,-1
10014704:	b8000d16 	blt	r23,zero,1001473c <__call_exitprocs+0x94>
10014708:	14000044 	addi	r16,r2,1
1001470c:	8421883a 	add	r16,r16,r16
10014710:	8421883a 	add	r16,r16,r16
10014714:	84402004 	addi	r17,r16,128
10014718:	a463883a 	add	r17,r20,r17
1001471c:	a421883a 	add	r16,r20,r16
10014720:	e0001e26 	beq	fp,zero,1001479c <__call_exitprocs+0xf4>
10014724:	80804017 	ldw	r2,256(r16)
10014728:	e0801c26 	beq	fp,r2,1001479c <__call_exitprocs+0xf4>
1001472c:	bdffffc4 	addi	r23,r23,-1
10014730:	843fff04 	addi	r16,r16,-4
10014734:	8c7fff04 	addi	r17,r17,-4
10014738:	bd7ff91e 	bne	r23,r21,10014720 <__alt_data_end+0xf8014720>
1001473c:	00800034 	movhi	r2,0
10014740:	10800004 	addi	r2,r2,0
10014744:	10000926 	beq	r2,zero,1001476c <__call_exitprocs+0xc4>
10014748:	a0800117 	ldw	r2,4(r20)
1001474c:	1000301e 	bne	r2,zero,10014810 <__call_exitprocs+0x168>
10014750:	a0800017 	ldw	r2,0(r20)
10014754:	10003226 	beq	r2,zero,10014820 <__call_exitprocs+0x178>
10014758:	a009883a 	mov	r4,r20
1001475c:	98800015 	stw	r2,0(r19)
10014760:	00000000 	call	10000000 <__alt_mem_new_sdram_controller_0>
10014764:	9d000017 	ldw	r20,0(r19)
10014768:	a03fe41e 	bne	r20,zero,100146fc <__alt_data_end+0xf80146fc>
1001476c:	dfc00a17 	ldw	ra,40(sp)
10014770:	df000917 	ldw	fp,36(sp)
10014774:	ddc00817 	ldw	r23,32(sp)
10014778:	dd800717 	ldw	r22,28(sp)
1001477c:	dd400617 	ldw	r21,24(sp)
10014780:	dd000517 	ldw	r20,20(sp)
10014784:	dcc00417 	ldw	r19,16(sp)
10014788:	dc800317 	ldw	r18,12(sp)
1001478c:	dc400217 	ldw	r17,8(sp)
10014790:	dc000117 	ldw	r16,4(sp)
10014794:	dec00b04 	addi	sp,sp,44
10014798:	f800283a 	ret
1001479c:	a0800117 	ldw	r2,4(r20)
100147a0:	80c00017 	ldw	r3,0(r16)
100147a4:	10bfffc4 	addi	r2,r2,-1
100147a8:	15c01426 	beq	r2,r23,100147fc <__call_exitprocs+0x154>
100147ac:	80000015 	stw	zero,0(r16)
100147b0:	183fde26 	beq	r3,zero,1001472c <__alt_data_end+0xf801472c>
100147b4:	95c8983a 	sll	r4,r18,r23
100147b8:	a0806217 	ldw	r2,392(r20)
100147bc:	a5800117 	ldw	r22,4(r20)
100147c0:	2084703a 	and	r2,r4,r2
100147c4:	10000b26 	beq	r2,zero,100147f4 <__call_exitprocs+0x14c>
100147c8:	a0806317 	ldw	r2,396(r20)
100147cc:	2088703a 	and	r4,r4,r2
100147d0:	20000c1e 	bne	r4,zero,10014804 <__call_exitprocs+0x15c>
100147d4:	89400017 	ldw	r5,0(r17)
100147d8:	d9000017 	ldw	r4,0(sp)
100147dc:	183ee83a 	callr	r3
100147e0:	a0800117 	ldw	r2,4(r20)
100147e4:	15bfbf1e 	bne	r2,r22,100146e4 <__alt_data_end+0xf80146e4>
100147e8:	98800017 	ldw	r2,0(r19)
100147ec:	153fcf26 	beq	r2,r20,1001472c <__alt_data_end+0xf801472c>
100147f0:	003fbc06 	br	100146e4 <__alt_data_end+0xf80146e4>
100147f4:	183ee83a 	callr	r3
100147f8:	003ff906 	br	100147e0 <__alt_data_end+0xf80147e0>
100147fc:	a5c00115 	stw	r23,4(r20)
10014800:	003feb06 	br	100147b0 <__alt_data_end+0xf80147b0>
10014804:	89000017 	ldw	r4,0(r17)
10014808:	183ee83a 	callr	r3
1001480c:	003ff406 	br	100147e0 <__alt_data_end+0xf80147e0>
10014810:	a0800017 	ldw	r2,0(r20)
10014814:	a027883a 	mov	r19,r20
10014818:	1029883a 	mov	r20,r2
1001481c:	003fb606 	br	100146f8 <__alt_data_end+0xf80146f8>
10014820:	0005883a 	mov	r2,zero
10014824:	003ffb06 	br	10014814 <__alt_data_end+0xf8014814>

10014828 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10014828:	defffd04 	addi	sp,sp,-12
1001482c:	df000215 	stw	fp,8(sp)
10014830:	df000204 	addi	fp,sp,8
10014834:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10014838:	0001883a 	nop
1001483c:	e0bfff17 	ldw	r2,-4(fp)
10014840:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10014844:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10014848:	10000226 	beq	r2,zero,10014854 <_exit+0x2c>
    ALT_SIM_FAIL();
1001484c:	002af070 	cmpltui	zero,zero,43969
10014850:	00000106 	br	10014858 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10014854:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10014858:	003fff06 	br	10014858 <__alt_data_end+0xf8014858>
